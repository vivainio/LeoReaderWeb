{"top": ["ville.20120518223417.1389", "ville.20120427233328.1347", "ville.20120429101639.1363", "ville.20120427233328.1348", "ville.20120427234823.1353", "ville.20120427235207.1355", "ville.20120428225125.1361"], "nodes": [{"h": "Script to dump content to .leo.json", "gnx": "ville.20120518223417.1389", "b": "@language python\n\n# ctrl+b here to dump the document for leo, for reading\n\nclass JsonController:\n    def to_json (self,c,p=None):\n    \n       '''Convert p's tree to JSON, or the entire outline if p is\n    None.'''\n    \n       if p:\n           top = [p.v.gnx]\n           nodes = list(set([p.v for p in p.self_and_subtree()]))\n       else:\n           top = [v.gnx for v in c.hiddenRootNode.children]\n           nodes = [v for v in c.all_unique_nodes()]\n    \n       nodes = [self.vnode_dict(v) for v in nodes]\n       d = {'top':top,'nodes':nodes}\n       s = json.dumps(d)\n       return s\n    \n    def vnode_dict (self,v):\n    \n       return {\n           'gnx': v.gnx,\n           'h':v.h, 'b':v.b,\n           # 'ua': v.u,\n           'children': [z.gnx for z in v.children]\n       }\n       \n       \nimport json\njc = JsonController()\ns = jc.to_json(c,p=None)\nopen(\"./test_doc.leo.json\", \"w\").write(s)\nd = json.loads(s)   ", "children": []}, {"h": "workbook.leo", "gnx": "ville.20120427233328.1347", "b": "import leo.plugins.qmlnb.launchqmlnb\ndv = leo.plugins.qmlnb.launcqmlnb.launchqmlnb.create_dv()\n", "children": []}, {"h": "Test tree", "gnx": "ville.20120429101639.1363", "b": "Root level content", "children": ["ville.20120429101639.1364", "ville.20120429101639.1365"]}, {"h": "ch1", "gnx": "ville.20120429101639.1364", "b": "Ch 1 content", "children": ["ville.20120429101639.1366", "ville.20120429101639.1367"]}, {"h": "ch1.1", "gnx": "ville.20120429101639.1366", "b": "Level 2\n\naeaoaoao", "children": []}, {"h": "ch1.2", "gnx": "ville.20120429101639.1367", "b": "Also level 2", "children": []}, {"h": "ch2", "gnx": "ville.20120429101639.1365", "b": "Ch 2 content", "children": ["ville.20120518223417.1390"]}, {"h": "ch2.1", "gnx": "ville.20120518223417.1390", "b": "", "children": []}, {"h": "Terrys qmlshower", "gnx": "ville.20120427233328.1348", "b": "@language python\nfrom PyQt4.QtCore import QUrl, QObject\n\nfrom PyQt4.QtDeclarative import QDeclarativeView\nclass QMLShower:\n   def __init__(self, c):\n       self.c = c\n       c._qml_shower = self\n       self.w = None\n       c.free_layout.get_top_splitter().register_provider(self)\n   def ns_provider_id(self):  # allow for re-registering, mainly for dev.\n       return '__qml_shower'\n   def ns_provides(self):  # what we can provide\n       return [(\"Add QML shower\", '__add_qml_shower')]\n   def ns_provide(self, id_):  # provide it\n       if id_ == '__add_qml_shower':\n           g.unregisterHandler('select2', self.update)\n           g.registerHandler('select2', self.update)\n           if not self.w:\n               self.w = self.make_widget()\n           return self.w\n   def make_widget(self):\n       view = QDeclarativeView()\n       path = g.os_path_join(g.computeLeoDir(), 'plugins', 'qmlnb', 'qml', 'leonbmain.qml')\n       view.setSource(QUrl(path))\n       view.setResizeMode(QDeclarativeView.SizeRootObjectToView)\n       # Display the user interface and allow the user to interact with it.\n       view.setGeometry(100, 100, 400, 240)\n       view.show()\n       #rootObject = view.rootObject()\n       #rootobject.leo_c = self.c\n       return view\n   def update(self, tag, kwords):\n       pass\n   def closed(self, event):\n       g.unregisterHandler('select2', self.update)\n\nQMLShower(c)", "children": []}, {"h": "try qwrappers", "gnx": "ville.20120427234823.1353", "b": "import leo.core.leoqwrappers\nreload(leo.core.leoqwrappers)\nfrom leo.core.leoqwrappers import *\nn = NodeWrapper(c, p.v)\nprint n\nprint n.children()", "children": []}, {"h": "create dv", "gnx": "ville.20120427235207.1355", "b": "from PyQt4.QtCore import QUrl, QObject\n\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QStandardItemModel,QStandardItem\n\nclass ModelWrapper:\n    def __init__(self, fieldlist):\n        self.rolenames = rn = {}\n        self.roleids = ri = {}\n        for n,f in enumerate(fieldlist):\n            rid = n + 100\n            rn[rid] = f\n            ri[f] = rid\n        self.model = mo = QStandardItemModel()\n        mo.setRoleNames(rn)\n\n    def mkitem(self, d):\n        \"\"\" dict with field->value \"\"\"        \n        si = QStandardItem()\n        for k,v in d.items():\n            rid = self.roleids[k]\n            si.setData(v, rid)\n            \n        return si\n                   \n    \nclass NbController:\n        \n    def addNode(self, p, styling = {}):\n        v = p.v\n        d = {\"h\" : v.h, \"b\" : v.b, \"gnx\" : v.gnx, \"level\" : p.level()}\n        d.update(styling)\n        self.gnxcache[v.gnx] = v    \n        si = self.mw.mkitem(d )\n        self.mw.model.appendRow(si)\n\n    def add_all_nodes(self):\n        for p in c.all_positions():                        \n            self.addNode(p)\n            \n    def __init__(self):\n        \n        self.gnxcache = {}\n        \n        self.mw = ModelWrapper([\"h\", \"b\", \"gnx\", \"level\", \"style\"])\n \n        self.add_all_nodes()       \n        c._view = view = QDeclarativeView()\n        ctx = view.rootContext()        \n        \n        \n        \n        ctx.setContextProperty(\"nodesModel\", self.mw.model)\n                \n        path = g.os_path_join(g.computeLeoDir(), 'plugins', 'qmlnb', 'qml', 'leonbmain.qml')\n        view.setSource(QUrl(path))\n        view.setResizeMode(QDeclarativeView.SizeRootObjectToView)\n        # Display the user interface and allow the user to interact with it.\n        view.setGeometry(100, 100, 800, 240)\n        view.show()\n        \n        c.dummy = view\n        \nNbController()        ", "children": ["ville.20120428001617.1357", "ville.20120503232842.1385", "ville.20120428001617.1358", "ville.20120503232842.1386"]}, {"h": "t1", "gnx": "ville.20120428001617.1357", "b": "# aaoao\n", "children": []}, {"h": "t4", "gnx": "ville.20120503232842.1385", "b": "", "children": []}, {"h": "t2", "gnx": "ville.20120428001617.1358", "b": "Enter more text here\n\nshould be enlightening\n\n#oeoeoeoe\n", "children": []}, {"h": "t5", "gnx": "ville.20120503232842.1386", "b": "", "children": []}, {"h": "standarditemmodel", "gnx": "ville.20120428225125.1361", "b": "from PyQt4.QtGui import QStandardItemModel,QStandardItem\n\n\n\n", "children": []}]}