{"top": ["ekr.20070610174018", "ekr.20050831195449", "ekr.20100805171546.4412", "ekr.20040414161647", "ekr.20090717084250.10702", "ekr.20100821182153.4341", "ekr.20101026082911.5536", "ekr.20120229094652.14053", "ville.20120518223417.5589"], "nodes": [{"h": "Startup", "gnx": "ekr.20070610174018", "b": "", "children": ["ekr.20050407144417", "ekr.20101028112631.4959"]}, {"h": "@settings", "gnx": "ekr.20050407144417", "b": "", "children": ["ekr.20111108052738.5507", "ekr.20100907092300.4440", "ekr.20101009114830.4724", "ekr.20101009114830.4725"]}, {"h": "@shortcuts", "gnx": "ekr.20111108052738.5507", "b": "run-marked-unit-tests-externally = Alt-4\nrun-all-unit-tests-externally = Alt-5\n", "children": []}, {"h": "Inkscape options", "gnx": "ekr.20100907092300.4440", "b": "", "children": ["ekr.20100907092300.4441", "ekr.20100907092300.4442"]}, {"h": "@string inkscape-template = ../docs/inkscape-template.svg", "gnx": "ekr.20100907092300.4441", "b": "Path to inkscape template file\n", "children": []}, {"h": "@string inkscape-bin = \"c:\\Program Files (x86)\\Inkscape\\inkscape.exe\"", "gnx": "ekr.20100907092300.4442", "b": "Path to Inkscape executable\n", "children": []}, {"h": "File options", "gnx": "ekr.20101009114830.4724", "b": "", "children": ["ekr.20080923182326.1", "ekr.20080412124815.1", "ekr.20101009114830.4723"]}, {"h": "@@bool create_nonexistent_directories = True", "gnx": "ekr.20080923182326.1", "b": "This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.\n\nTrue:  Leo attempts to create directories if they do not exist.\nFalse: Leo never attempts to create directories.\n", "children": []}, {"h": "@bool fixedWindow = False", "gnx": "ekr.20080412124815.1", "b": "", "children": []}, {"h": "@bool put_expansion_bits_in_leo_files = False", "gnx": "ekr.20101009114830.4723", "b": "@nocolor-node\n\nFormerly, this had to be on because the expansion bits\nof @screenshot trees were significant.\n\nHappily, this is no longer true.\n\nTrue (recommended):\n    Write \"E\" attribute bits in <v> elements.\n    Leo outlines will record the expansion state of all nodes.\n\nFalse:\n    (Good for files like unitTest.leo)\n    Suppress \"E\" attribute bits in <v> elements.\n    Only the ancestors of the presently selected node will\n    be expanded when Leo opens an outline.\n", "children": []}, {"h": "Plugins options", "gnx": "ekr.20101009114830.4725", "b": "", "children": ["ekr.20050407144342", "ekr.20050812123002"]}, {"h": "@page http plugin", "gnx": "ekr.20050407144342", "b": "\n\n\n\n", "children": ["ekr.20050407144342.1", "ekr.20050407144342.2", "ekr.20050407144342.3"]}, {"h": "@bool http_active = False", "gnx": "ekr.20050407144342.1", "b": "", "children": []}, {"h": "@int  port = 8080", "gnx": "ekr.20050407144342.2", "b": "", "children": []}, {"h": "@string rst_http_attributename = rst_http_attribute", "gnx": "ekr.20050407144342.3", "b": "", "children": []}, {"h": "@page rst3 options", "gnx": "ekr.20050812123002", "b": "", "children": ["ekr.20050812123002.1", "ekr.20050812123002.6", "ekr.20050812123002.7", "ekr.20050812123002.8", "sps.20100708213227.44914", "ekr.20051202072010"]}, {"h": "Http options...", "gnx": "ekr.20050812123002.1", "b": "", "children": ["ekr.20050812123002.2", "ekr.20050812123002.3", "ekr.20050812123002.4", "ekr.20050812123002.5"]}, {"h": "@bool rst3_clear_http_attributes = False", "gnx": "ekr.20050812123002.2", "b": "Deletes p.v.rst2_http_attributename from all nodes after writing.\n\nDeletes p.v.unknownAttributes if it then becomes empty.\n", "children": []}, {"h": "@string rst3_http_attributename = 'rst_http_attribute'", "gnx": "ekr.20050812123002.3", "b": "", "children": []}, {"h": "@bool rst3_http_server_support = False", "gnx": "ekr.20050812123002.4", "b": "@nocolor\n\nIf False, add_node_marker and http_support_main  do nothing.  Otherwise add_node_marker does the following:\n\n1. add_node_marker writes a string using generate_node_marker.\n\nGenerates 'http-node-marker-'+str(number), where number is config.node_counter\n(incremented each time add_node_marker is called.\n\n2. Enables the following code in :\n@color\n\n    if config.tag == 'open2':\n        http_map = self.http_map\n    else:\n        http_map = {}\n        config.anchormap = {}\n        # maps v nodes to markers.\n        config.node_counter = 0\n    # [snip] code to write the tree\n    if config.rst2_http_server_support:\n        self.http_map = http_map\n", "children": []}, {"h": "@string rst3_node_begin_marker = 'http-node-marker-'", "gnx": "ekr.20050812123002.5", "b": "", "children": []}, {"h": "@bool rst3_massage_body = False", "gnx": "ekr.20050812123002.6", "b": "True: call body_filter to massage text.\n\nRemoves @ignore, @nocolor, @wrap directives.\n", "children": []}, {"h": "@bool rst3_format_headlines = True", "gnx": "ekr.20050812123002.7", "b": "Used differently.  See rst2_pure_document.\n", "children": []}, {"h": "@bool rst3_write_intermediate_file = True", "gnx": "ekr.20050812123002.8", "b": "", "children": []}, {"h": "@string rst3_write_intermediate_extension = .html.txt", "gnx": "sps.20100708213227.44914", "b": "", "children": []}, {"h": "@string rst3_default_path =", "gnx": "ekr.20051202072010", "b": "", "children": []}, {"h": "@file doc-startup.txt", "gnx": "ekr.20101028112631.4959", "b": "@language python\n\n@all\n", "children": ["ekr.20070325123558", "ekr.20050404094627", "ekr.20080923181012.1", "ekr.20101111175617.5037"]}, {"h": "@chapters", "gnx": "ekr.20070325123558", "b": "", "children": []}, {"h": "Local buttons", "gnx": "ekr.20050404094627", "b": "", "children": ["ekr.20111017085134.16158", "ville.20090520232034.6345", "ekr.20101109084947.4909", "ekr.20110406082808.18151"]}, {"h": " Slideshow Buttons", "gnx": "ekr.20111017085134.16158", "b": "", "children": ["ekr.20111017085134.16159", "ekr.20111017085134.16198", "ekr.20111017085134.16199", "ekr.20111017085134.16200"]}, {"h": "@@button copy-@screenshot-node", "gnx": "ekr.20111017085134.16159", "b": "'''\nCopy the @screenshot node (a child of this node)\nto all @slide nodes under p, (an @slideshow node),\nthat do not contain an @screenshot node.\n'''\n\nerror = None\n# Find this node:\nh = '@button copy-@screenshot-node'\np2 = g.findNodeAnywhere(c,h)\nif not p2:\n    error = 'Can not find',p.h\n# Find the @screenshot tree and the optional @select node.\nif not error:\n    select,template = None,None\n    for child in p2.children():\n        if g.match_word(child.h,0,'@screenshot'):\n            template = child.copy()\n        if g.match_word(child.h,0,'@select'):\n            select = child.copy()\n    if not template:\n        error = 'No template @slideshow node in %s' % p2.h\nif not error:\n    if not g.match_word(p.h,0,'@slideshow'):\n        error = 'not an @slideshow node',p.h\nif error:\n    g.error(error)\nelse:\n    c.selectPosition(template)\n    c.copyOutline()\n    changed = False\n    b = c.undoer.beforeChangeTree(p)\n    for child in p.children():\n        if not g.match_word(child.h,0,'@slide'):\n            continue\n        for grandChild in child.children():\n            if g.match_word(grandChild.h,0,'@screenshot'):\n                break\n        else:\n            changed = True\n            p3 = child.insertAsLastChild()\n            c.selectPosition(p3)\n            c.pasteOutline()\n            g.note('copied @screenshot to %s' % child.h)\n            if select:\n                c.selectPosition(p3)\n                p4 = child.insertAsLastChild()\n                p4.h = select.h\n                g.note('copied %s to %s' % (select.h,child.h))\n            c.selectPosition(p3)\n            c.deleteOutline(p3)\n            child.contract()\n    if changed:\n        c.undoer.afterChangeTree(p,'copy-@screenshot',b)\n    c.redraw()\n", "children": ["ekr.20111017085134.16160", "ekr.20111017085134.16175", "ekr.20111017085134.16176", "ekr.20111017085134.16177", "ekr.20111017085134.16178", "ekr.20111017085134.16179", "ekr.20111017085134.16197"]}, {"h": "@screenshot", "gnx": "ekr.20111017085134.16160", "b": "", "children": ["ekr.20111017085134.16161", "ekr.20111017085134.16166"]}, {"h": "To Do List", "gnx": "ekr.20111017085134.16161", "b": "My to-do list.\n", "children": ["ekr.20111017085134.16162", "ekr.20111017085134.16163", "ekr.20111017085134.16164", "ekr.20111017085134.16165"]}, {"h": "Urgent", "gnx": "ekr.20111017085134.16162", "b": "1. Make Leo tutorials.  The world is waiting.\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20111017085134.16163", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20111017085134.16164", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20111017085134.16165", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20111017085134.16166", "b": "", "children": ["ekr.20111017085134.16167", "ekr.20111017085134.16174"]}, {"h": "2009", "gnx": "ekr.20111017085134.16167", "b": "@language rest\n\nThis is my diary.\n", "children": ["ekr.20111017085134.16168", "ekr.20111017085134.16169", "ekr.20111017085134.16170", "ekr.20111017085134.16171", "ekr.20111017085134.16172", "ekr.20111017085134.16173"]}, {"h": "Jul 2009", "gnx": "ekr.20111017085134.16168", "b": "July 1\n    Started writing in my diary.\nJuly 2\n    Wrote another sentence in my diary.\nJuly 3\n    Keeping my diary very regularly.\nJuly 5\n    Oops...Yesterday I forgot towrite in my diary.\n", "children": []}, {"h": "Aug 2009", "gnx": "ekr.20111017085134.16169", "b": "", "children": []}, {"h": "Sep 2009", "gnx": "ekr.20111017085134.16170", "b": "", "children": []}, {"h": "Oct 2009", "gnx": "ekr.20111017085134.16171", "b": "", "children": []}, {"h": "Nov 2009", "gnx": "ekr.20111017085134.16172", "b": "", "children": []}, {"h": "Dec 2009", "gnx": "ekr.20111017085134.16173", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20111017085134.16174", "b": "", "children": []}, {"h": "@select Urgent", "gnx": "ekr.20111017085134.16175", "b": "", "children": []}, {"h": "@@button ins-@slide-nodes", "gnx": "ekr.20111017085134.16176", "b": "'''Create @slide nodes under p, an @slideshow node.'''\n\nn = 23 # Number of last slide to be created.\n\nexisting = [z.copy().h for z in p.children() \n    if g.match_word(z.h,0,'@slide')]\n\nif g.match_word(p.h,0,'@slideshow'):\n    b = c.undoer.beforeChangeTree(p)\n    changed = False\n    for n in range(1,n+1):\n        h = '@slide %03d' % n\n        if h not in existing:\n            changed = True\n            child = p.insertAsLastChild()\n            child.h = h\n            g.note('created %s' % h)\n    if changed:\n        c.undoer.afterChangeTree(p,'ins-@slide-nodes',b)\n    else:\n        g.note('no @slide nodes inserted')\n    c.redraw()\nelse:\n    g.error('not an @slideshow node',p.h)\n", "children": []}, {"h": "@@button make-slide @key=Alt-8", "gnx": "ekr.20111017085134.16177", "b": "m = g.loadOnePlugin('screenshots')\nm.make_slide_command(event={'c':c})\n", "children": []}, {"h": "@@button make-slide-show @key=Alt-8", "gnx": "ekr.20111017085134.16178", "b": "m = g.loadOnePlugin('screenshots')\nm.make_slide_show_command(event={'c':c})\n", "children": []}, {"h": "@@button meld", "gnx": "ekr.20111017085134.16179", "b": "'''Meld Wink slides into an @slideshow folder.\n\n   Copy screenshot files from the wink_dir to slideshow_dir, numbering\n   the destination files to reflect \"holes\" created by @no-screenshot\n   nodes.\n\n   This script carefully checks that the number of screenshot files\n   matches the number of screenshots referenced by the @slide nodes.\n   No copying takes place if the numbers are not as expected.'''\n\n@language python\n\nimport glob\nimport os\nimport shutil\n\nslideshow_dir = 'C:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step'\n\nwink_dir = 'C:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/_files'\n    # The directory containing the wink screenshots.\n    # This will usually be <slideshow_dir>/_files.\n    # **Important** You generate these screenshots using Wink's \n    # Export As Html command (!)\n\n@others\n\nmc = MeldController(c,p,slideshow_dir,wink_dir)\nmc.run()\n", "children": ["ekr.20111017085134.16180"]}, {"h": "class MeldController", "gnx": "ekr.20111017085134.16180", "b": "class MeldController:\n\n    def __init__ (self,c,p,slideshow_dir,wink_dir):\n\n        self.c = c\n        self.slideshow_dir = slideshow_dir\n        self.slideshow_node = p\n        self.wink_dir = wink_dir\n\n    @others\n", "children": ["ekr.20111017085134.16181", "ekr.20111017085134.16185"]}, {"h": "utils", "gnx": "ekr.20111017085134.16181", "b": "", "children": ["ekr.20111017085134.16182", "ekr.20111017085134.16183", "ekr.20111017085134.16184"]}, {"h": "finalize & fix", "gnx": "ekr.20111017085134.16182", "b": "def fix (self,fn):\n    return os.path.normcase(fn).replace('\\\\','/')\n\ndef finalize (self,fn):\n    return self.fix(g.os_path_finalize_join(self.slideshow_dir,fn))\n", "children": []}, {"h": "has_at_no_screenshot_node", "gnx": "ekr.20111017085134.16183", "b": "def has_at_no_screenshot_node (self,p):\n\n    for p in p.children():\n        if self.match(p,'@no-screenshot'):\n            return True\n    else:\n        return False\n", "children": []}, {"h": "match", "gnx": "ekr.20111017085134.16184", "b": "def match (self,p,pattern):\n\n    '''Return True if p.h matches the pattern.'''\n\n    return g.match_word(p.h,0,pattern)\n", "children": []}, {"h": "run & helpers", "gnx": "ekr.20111017085134.16185", "b": "def run (self):\n\n    print('='*20)\n\n    aList = self.get_wink_screenshots()\n    if not aList:\n        return\n\n    if not self.check(aList):\n        return\n\n    # Pass 1: copy files for @slide nodes w/o @no-screenshot nodes.\n    self.copy_files(aList)\n\n    # Pass 2: adjust children of @slide nodes.\n    self.adjust_slideshow()\n\n    print('meld done')\n", "children": ["ekr.20111017085134.16186", "ekr.20111017085134.16191", "ekr.20111017085134.16194", "ekr.20111017085134.16196"]}, {"h": "adjust_slideshow & helper", "gnx": "ekr.20111017085134.16186", "b": "def adjust_slideshow(self):\n\n    '''Adjust all @slide nodes in the slideshow.'''\n\n    # Traverse the tree as in the screenshot plugin.\n    # That is, ignore @ignore trees and nested @slide nodes.\n    # This ensures that the slide number, n, is correct.\n    p = self.slideshow_node\n    after = p.nodeAfterTree()\n    p = p.firstChild()\n    n = 1\n    while p and p != after:\n        if self.match(p,'@slide'):\n            self.adjust_slide_node(p,n)\n            n += 1\n            p.moveToNodeAfterTree()\n        elif self.match(p,'@ignore'):\n            p.moveToNodeAfterTree()\n        else:\n            p.moveToThreadNext()\n", "children": ["ekr.20111017085134.16187"]}, {"h": "adjust_slide_node & helpers", "gnx": "ekr.20111017085134.16187", "b": "def adjust_slide_node (self,p,slide_number):\n\n    '''Adjust p, an @slide node.'''\n\n    trace = True\n\n    # Delete the first \"@url built slide\" node.\n    self.delete_at_url_built_slide_node(p)\n\n    # Do nothing more if there is an @no-screenshot node.\n    if self.has_at_no_screenshot_node(p):\n        return\n\n    # Add or update the \"@url final output file\" node.\n    p2 = self.add_at_url_final_output_file(p,slide_number)\n\n    # Add the .. image:: directive.\n    self.add_image_directive(p,slide_number)\n", "children": ["ekr.20111017085134.16188", "ekr.20111017085134.16189", "ekr.20111017085134.16190"]}, {"h": "add_at_url_final_output_file", "gnx": "ekr.20111017085134.16188", "b": "def add_at_url_final_output_file (self,p,slide_number):\n\n    '''Create or update the \"@url final output file\" node.'''\n\n    trace = True\n    tag ='@url final output file'\n\n    for child in p.children():\n        if self.match(child,tag):\n            p2 = child ; break\n    else:\n        if trace: g.es('add %s' % tag)\n        p2 = p.insertAsLastChild()\n        p2.h = tag\n\n    p2.b = self.finalize(\n        'slide-%03d.png' % (slide_number))\n\n    return p2\n", "children": []}, {"h": "add_image_directive", "gnx": "ekr.20111017085134.16189", "b": "def add_image_directive (self,p,slide_number):\n\n    '''Add an image directive in p if it is not there.'''\n\n    s = '.. image:: slide-%03d.png' % (slide_number)\n\n    if p.b.find(s) == -1:\n        p.b = p.b.rstrip() + '\\n\\n%s\\n\\n' % (s)\n", "children": []}, {"h": "delete_at_url_built_slide_node", "gnx": "ekr.20111017085134.16190", "b": "def delete_at_url_built_slide_node (self,p):\n\n    '''Delete any \"@url built slide\" node in p's children.'''\n\n    trace = True\n    tag = '@url built slide'\n\n    for child in p.children():\n        if self.match(child,tag):\n            if trace: g.es('del %s in %s' % (tag,p.h))\n            child.doDelete()\n            break\n", "children": []}, {"h": "check & helpers", "gnx": "ekr.20111017085134.16191", "b": "def check (self,aList):\n\n    '''\n    Check that len(aList) matches the number of @slide nodes in the\n    slideshow. Don't count @slide nodes containing an @no-screenshot node.\n    '''\n\n    p = self.slideshow_node\n    n1 = len(aList)\n    n2,n3 = self.count_slide_nodes()\n\n    if not self.check_dir(self.wink_dir):\n        return False\n    if not self.check_dir(self.slideshow_dir):\n        return False\n    if not self.match(p,'@slideshow'):\n        return g.error('not a @slideshow node: %s',p.h)\n\n    if n1 != (n2-n3):\n        return g.error(\n            '%s wink slides\\n'\n            '%s @slide nodes\\n'\n            '%s @no_screenshot nodes' % (\n                n1,n2,n3))\n\n    return True\n", "children": ["ekr.20111017085134.16192", "ekr.20111017085134.16193"]}, {"h": "check_dir", "gnx": "ekr.20111017085134.16192", "b": "def check_dir (self,theDir):\n\n    if not g.os_path_exists(theDir):\n        return g.error('not found: %s' % (theDir))\n\n    if not g.os_path_isdir(theDir):\n        return g.error('not a directory: %s' % (theDir))\n\n    return True\n", "children": []}, {"h": "count_slide_nodes", "gnx": "ekr.20111017085134.16193", "b": "def count_slide_nodes (self):\n\n    '''Return n1,n2\n\n    n1 is the total number of @slide nodes in the @slideshow tree.\n    n2 is number of @slide nodes containing an @no-slideshow child.\n    '''\n\n    p = self.slideshow_node\n    after = p.nodeAfterTree()\n    p = p.firstChild()\n    n1,n2 = 0,0\n    while p and p != after:\n        if self.match(p,'@slide'):\n            n1 += 1\n            if self.has_at_no_screenshot_node(p):\n                n2 += 1\n            p.moveToNodeAfterTree()\n        elif self.match(p,'@ignore'):\n            p.moveToNodeAfterTree()\n        else:\n            p.moveToThreadNext()\n\n    g.trace(n1,n2)\n    return n1,n2\n", "children": []}, {"h": "copy_files & helper", "gnx": "ekr.20111017085134.16194", "b": "def copy_files (self,aList):\n\n    '''Copy files from the wink_dir to slideshow_dir,\n    numbering the destination files to reflect \"holes\"\n    created by @no-screenshot nodes.'''\n\n    # Traverse the tree as in the screenshot plugin.\n    # That is, ignore @ignore trees and nested @slide nodes.\n    # This ensures that the slide number, n, is correct.\n    p = self.slideshow_node\n    after = p.nodeAfterTree()\n    p = p.firstChild()\n    wink_n = 0 # Wink screenshot numbers start at 0.\n    slide_n = 1 # Slide numbers start at 1.\n    while p and p != after:\n        if self.match(p,'@slide'):\n            if not self.has_at_no_screenshot_node(p):\n                self.copy_file(aList,slide_n,wink_n)\n                wink_n += 1\n            slide_n += 1\n            p.moveToNodeAfterTree()\n        elif self.match(p,'@ignore'):\n            p.moveToNodeAfterTree()\n        else:\n            p.moveToThreadNext()\n", "children": ["ekr.20111017085134.16195"]}, {"h": "copy_file", "gnx": "ekr.20111017085134.16195", "b": "def copy_file (self,aList,slide_n,wink_n):\n\n    trace = True\n\n    if wink_n >= len(aList):\n        return g.trace('can not happen: '\n            'len(aList): %s, n: %s' % (\n                len(aList),wink_n))\n\n    fn_src = aList[wink_n]\n    fn_dst = 'slide-%03d.png' % (slide_n)\n\n    if trace:\n        g.trace('%7s -> %s' % (g.shortFileName(fn_src),fn_dst))\n\n    shutil.copyfile(fn_src,fn_dst)\n", "children": []}, {"h": "get_wink_screenshots", "gnx": "ekr.20111017085134.16196", "b": "def get_wink_screenshots (self):\n\n    '''Return the properly sorted list of wink screenshots.'''\n\n    trace = False\n\n    aList = glob.glob(self.wink_dir + '/*.png')\n\n    def key(s):\n        path,ext = g.os_path_splitext(s)\n        junk,n = g.os_path_split(path)\n        n = n.strip()\n        if n.isdigit():\n            return int(n)\n        else:\n            g.error('bad wink screenshot: %s' % (s))\n            raise KeyError\n\n    aList.sort(key=key) # Essential.\n\n    if trace:\n        for z in aList:\n            print(z)\n\n    return aList\n", "children": []}, {"h": "@@button renumber nodes", "gnx": "ekr.20111017085134.16197", "b": "'''Renumber @slide nodes under p, an @slideshow node.'''\n\nif g.match_word(p.h,0,'@slideshow'):\n    n = 1\n    for child in p.children():\n        if g.match(child.h,0,'@slide'):\n            child.h = '@slide %03d' % n\n            n += 1\n    c.redraw()\nelse:\n    g.error('not an @slideshow node',p.h)\n", "children": []}, {"h": "@@button remove-image-directives", "gnx": "ekr.20111017085134.16198", "b": "@language python\n\nchanged = 0\nb = c.undoer.beforeChangeTree(p)\n\nfor child in p.children():\n    s = child.b\n    i = s.find('.. image::')\n    if i > -1:\n        i,j = g.getLine(s,i)\n        child.b = s[:i] + s[j+1:]\n        # g.es(child.h)\n        changed += 1\n\nif changed:\n    g.es('changed %s nodes' % changed)\n    c.undoer.afterChangeTree(p,'remove-image-directives',b)\n\n", "children": []}, {"h": "@@button remove-built-slides", "gnx": "ekr.20111017085134.16199", "b": "@language python\n\nchanged = 0\nb = c.undoer.beforeChangeTree(p)\nfor child in p.children():\n    for child2 in child.children():\n        if g.match_word(child2.h,0,'@url built slide'):\n            child2.doDelete()\n            changed += 1\n            break\n\nif changed:\n    g.es('deleted %s nodes' % (changed))\n    c.undoer.afterChangeTree(p,'remove-@url-built-slide',b)\n    c.redraw()\n", "children": []}, {"h": "@@button remove-final-output", "gnx": "ekr.20111017085134.16200", "b": "@language python\n\nchanged = 0\nb = c.undoer.beforeChangeTree(p)\nfor child in p.children():\n    for child2 in child.children():\n        if g.match_word(child2.h,0,'@url final output file'):\n            child2.doDelete()\n            changed += 1\n            break\n\nif changed:\n    g.es('deleted %s nodes' % (changed))\n    c.undoer.afterChangeTree(p,'remove-@url-final-output',b)\n    c.redraw()\n", "children": []}, {"h": "@button preview", "gnx": "ville.20090520232034.6345", "b": "g.app.gui.runScrolledMessageDialog(c=c, msg = g.u('rst:') + p.b)\n", "children": []}, {"h": "@button preview-tree", "gnx": "ekr.20101109084947.4909", "b": "result = []\nfor p2 in p.subtree():\n    result.append(p2.b)\ns = '\\n'.join(result)\n\ng.app.gui.runScrolledMessageDialog(c=c, msg = g.u('rst:') + s)\n", "children": []}, {"h": "@button rst3", "gnx": "ekr.20110406082808.18151", "b": "c.rstCommands.rst3()\n", "children": []}, {"h": "@@rst ../test/new-directory/test.html", "gnx": "ekr.20080923181012.1", "b": "@ @rst-options\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = False\nverbose=True\n@c\n\nA test of creating directories.\n\n############\nhtml test\n############\n", "children": []}, {"h": "Script: get-plugin-docstrings", "gnx": "ekr.20101111175617.5037", "b": "'''Creates an outline containing most docstrings from leoPlugins.leo.\n\nDocumentation for some docstings are suppressed.'''\n\n@others\n\ncontroller(c).run()\n", "children": ["ekr.20101111175617.56915"]}, {"h": "class controller", "gnx": "ekr.20101111175617.56915", "b": "class controller:\n\n    def __init__ (self,c):\n        self.c = c\n        self.trace = False\n\n    @others\n", "children": ["ekr.20101112045055.13356", "ekr.20101112222250.5322", "ekr.20101112045055.13355", "ekr.20101112045055.13354", "ekr.20101111175617.14683", "ekr.20101112045055.13357", "ekr.20101111175617.24328", "ekr.20101111175617.5787"]}, {"h": "allowDir", "gnx": "ekr.20101112045055.13356", "b": "def allowDir (self,p):\n\n    '''Return True if we should allow scan of directory p.'''\n\n    aList = (\n        # Suppressed directories.\n        'Examples','Experimental',\n        'Dyna plugins by e',\n        'Gui plugins','Testing',\n    )\n    return p.h not in aList and not p.h.startswith('  ')\n", "children": []}, {"h": "allowFile", "gnx": "ekr.20101112222250.5322", "b": "def allowFile (self,p):\n\n    '''Return True if we should allow scan of a file at p.'''\n\n    aList = (\n        # Suppresssed files.\n        '@file bookmarks.py',       # Replaced by better @url.\n        '@file rst3.py',            # Replaced by core rst3 command.\n        '@file stickynotes_plus.py', # Experimental version of stickynotes\n        '@file testnode.py',        # Replaced by @edit.\n        # These all depend on old plugins_manager.py.\n        '@file autotrees.py', \n        '@file old_plugin_manager.py',\n        '@file leoupdate.py',\n        # These are used only by autotrees.py.\n        r'@file trees\\doc.py',\n        r'@file trees\\news.py',\n        r'@file trees\\remote.py',\n        r'@file trees\\rss.py',\n        r'@file trees\\test.py',\n    )\n    return p.h not in aList and p.isAnyAtFileNode() and p.h.endswith('.py')\n", "children": []}, {"h": "createDocs", "gnx": "ekr.20101112045055.13355", "b": "def createDocs (self,output,root):\n\n     for p in root.children():\n        if self.allowDir(p):\n            if self.trace: print('\\n**',p.h)\n            child = output.insertAsLastChild()\n            child.h = p.h\n            for p2 in p.subtree():\n                if self.allowFile(p2):\n                    h = p2.anyAtFileNodeName()\n                    s = self.getDocString(p2)\n                    if self.trace: print('%5s %s' % (len(s),h))\n                    child2 = child.insertAsLastChild()\n                    child2.h = h\n                    child2.b = \"%s\\n\\n\" % s.strip()\n", "children": []}, {"h": "createSummary", "gnx": "ekr.20101112045055.13354", "b": "def createSummary (self,output,root):\n\n    summary = output.insertAsLastChild()\n    summary.h = 'Summary'\n    result = []\n\n    for p in root.children():\n        if self.allowDir(p):\n            for p2 in p.subtree():\n                if self.allowFile(p2):\n                    h = p2.anyAtFileNodeName()\n                    s = self.getDocString(p2)\n                    s = self.getFirstParagraph(s).rstrip()\n                    if s:\n                        if not s.endswith('.'): s = s + '.'\n                        result.append('%s\\n%s\\n\\n' % (h,s))\n\n    # Sort by plugin name, ignoring case.\n    def lower(s): return s.lower()\n    result.sort(key=lower)\n    summary.b = ''.join(result)\n", "children": []}, {"h": "getDocString", "gnx": "ekr.20101111175617.14683", "b": "def getDocString(self,p):\n\n    '''Return the docstring of the @<file> node p.'''\n\n    trace = False # p.h.find('@file rClick.py') > -1\n    if trace: g.trace('='*20)\n    for p2 in p.self_and_subtree():\n        s = p2.b\n        if trace: g.trace(p2.h)\n        for tag in (\"'''\",'\"\"\"'):\n            i = s.find(tag)\n            if i > -1:\n                j = s.find(tag,i+3)\n                if j > -1:\n                    if trace: g.trace('**found**',p2.h,'\\n',s)\n                    return s[i+3:j]\n    else:\n        return ''\n", "children": []}, {"h": "getFirstParagraph", "gnx": "ekr.20101112045055.13357", "b": "def getFirstParagraph (self,s):\n\n    lines =  g.splitLines(s.strip())\n    if not lines: return ''\n\n    result = []\n    for s in lines:\n        if s.strip():\n            result.append('   '+s)\n        else:\n            break\n\n    return ''.join(result)\n", "children": []}, {"h": "openPlugins", "gnx": "ekr.20101111175617.24328", "b": "def openLeoPlugins(self):\n\n    fn = g.os_path_finalize_join(\n        g.app.loadDir,'..','plugins','leoPlugins.leo')\n\n    ok,frame = g.openWithFileName(fn,\n        old_c=self.c,enableLog=True,\n        gui=None,readAtFileNodesFlag=True)\n\n    if ok:\n        return frame.c\n    else:\n        g.error('can not open leoPlugins.leo')\n        return None\n", "children": []}, {"h": "run", "gnx": "ekr.20101111175617.5787", "b": "def run(self):\n\n    c = self.c\n    new_c = self.openLeoPlugins()\n    if not new_c: return\n\n    # Create the top-level output node.\n    output = c.p.insertAfter()\n    output.h = 'get-docstrings-output'\n    output.b = '@language rest\\n'\n\n    # Scan the descendants of the Plugins node.\n    root = g.findNodeAnywhere(new_c,'Plugins')\n    if root:\n        if self.trace: print('='*20)\n        self.createSummary(output,root)\n        self.createDocs(output,root)\n        c.frame.bringToFront() # new_c.close()\n        c.redraw()\n    else:\n        g.error('no Plugins node')\n\n\n\n@language python\n\n@language python\n\n@language python\n", "children": []}, {"h": "Read me first", "gnx": "ekr.20050831195449", "b": "@nocolor\n\nFor instruction about installing Leo see:\nhttp://webpages.charter.net/edreamleo/installing.html\n\nFor everything a beginner needs to know about Leo see:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nFor help, please ask questions at:\nhttp://groups.google.com/group/leo-editor", "children": []}, {"h": "Files, including home page", "gnx": "ekr.20100805171546.4412", "b": "# This section contains important files used to generate Leo's web site.", "children": ["ville.20090609182215.5676", "ekr.20090428133936.2", "ekr.20090428102353.1", "ekr.20101025080245.5800", "ekr.20101112045055.5064", "ekr.20100808060203.4273", "ekr.20101025080245.5801", "ekr.20101026081737.5531", "ekr.20101112045055.5065"]}, {"h": "@auto-rst treecaching.txt", "gnx": "ville.20090609182215.5676", "b": "@language rest\n@tabwidth -4\n@others\n\n.. Warning: this node is ignored when writing this file.\n.. However, @ @rst-options are recognized in this node.\n", "children": ["ville.20120518223417.2095", "ville.20120518223417.2096", "ville.20120518223417.2097"]}, {"h": "Python list based description of trees ('objtrees')", "gnx": "ville.20120518223417.2095", "b": "Positions and trees are objects that exists only within Leo instance. However,\ntrees can have \"serialized\" representation in .leo xml files (where structure is\ndescribed by xml hierarchy), or @file nodes (where structure is described by\nsentinels).\n\nSometimes, both formats are too heavyweight. Both xml and \"flat\" text files involve nontrivial callback-based\n(or worse) parsing. Luckily, trees can be represented naturally with python lists, which can be pickled and \npassed around with almost zero cost in CPU consumption or code complexity. In theory position objects\ncan be passed around in this fashion as well, but positions always have to exist in the tree (there\nis no concept of 'detached' position) and they can't be pickled or moved around outside the Leo instance.\n\nFor the purposes of this discussion (and for the sheer narcissistic pleasure of inventing new terminology), I'm \ncalling these data structures `objtrees`.\n\nThe structure of objtrees is a standard Python list of the form::\n\n    [headline, bodystring, gnx, [children...]]\n\nWhere `children` is a recursive tree. Here's an example objtree (from ILeo session)::\n\n    ileo[~/hashcache]|11> g.tree_at_position(p)\n                     <11>\n    [u'root',\n     u'Root body',\n     'ville.20090601215420.1449',\n     [[u'ch1 head',\n       u'child 1 body',\n       'ville.20090609184451.5679',\n       [[u'ch1.1 head', u'ch1.1 body', 'ville.20090609184451.5680', []],\n        [u'ch1.2 head', u'ch1.2 body', 'ville.20090609184451.5681', []]]],\n      [u'ch2 head',\n       u'ch2 body',\n       'ville.20090609184451.5682',\n       [[u'ch2.1 head', u'', 'ville.20090609184451.5683', []]]]]]\n\nNote that these trees are constructed using `g.tree_at_position(pos)`. These objtrees can be re-incorporated to \nLeo document using `g.create_tree_at_vnode(c, v, tree)`, which rebuilds the structure at position p. The \"vnode\"\nis available as p.v attribute. This functions also creates clones if necessary (according to gnx). If \nyou want to avoid creating clones (e.g. to implement simple copy-paste functionality), you can use `g.create_tree_at_position(p)`.\ncreate_tree_at_position also server as a trivial example for recursing through objtree data structure::\n\n    def create_tree_at_position(p, tree):\n        \"\"\" Like create_tree_at_vnode, but slower, simpler, without clone/gnx support\n        \"\"\"\n        h,b,gnx,chi = tree\n\n        p.h = h\n        p.b = b\n\n        for el in chi:\n            chpos = p.insertAsLastChild().copy()\n            # recurse\n            create_tree_at_position(chpos, el)\n\n`g.create_tree_at_vnode` is more complex, but faster and supports clones. It relies on \n`g.fast_add_last_child(c, parent_v, gnxString)`, which adds a new node to the tree\nas last child of parent_v (vnode), It either returns the created vnode, or None \nif it created a clone (i.e. a node with same gnx was already found in the document). \nThis is a conscious design choice, as it prevents you from accidentally manipulating\nthe tree of the clone (since it already has a tree of its own!).\n\n", "children": []}, {"h": "Using objtrees for caching", "gnx": "ville.20120518223417.2096", "b": "Objtrees are not without real life applications. They are used to implement the\ncontent hash based node cache that radically speeds up Leo's startup\n(effectively eliminating the delay caused by Leo parsing @file / @auto nodes -\nsomething which made trees with several @auto or @file nodes intolerable in\npractice. The trick here relies on the fact that:\n\n- The whole content of external file (say, foo.py) can be described by\ncalculating an md5sum of the file - The same external file content will always\ncreate the same leo tree.\n\nIn brief, \n\n- When we are reading in a @file node foo.cpp, we first read in the whole file and calculate\n  md5sum of its contents. Let's say the md5 sum is 8095e2dabbfe90b349066209fb090df6. \n- Leo tries to look for existing cached version in ~/.leo/db/LeoDocs.leo/fcache/8095e2dabbfe90b349066209fb090df6. Initially, it doesn't exist,\n  so Leo executes the standard (slow) @file code parsing routine and creates the tree normally\n- After creating the tree, Leo executes g.tree_at_position and pickles the objtree to file \n  ~/.leo/db/LeoDocs.leo/fcache/8095e2dabbfe90b349066209fb090df6\n- Now, on the next startup, Leo *will* find the cached pickle, read it in and execute `g.create_tree_at_vnode`\n\n", "children": []}, {"h": "The `Leo database` (c.db, g.app.db)", "gnx": "ville.20120518223417.2097", "b": "Previous discussion omitted one fact - Leo doesn't actually operate on files directly, but \nuses the `pickleshare` library (shipped with Leo) to access the cached pickles. In essence, the database is \nalways associated with one specific Leo document, and is available through c.db. So, storing a tree is\n(in simplified form) about doing::\n\n   cachename = \"fcache/8095e2dabbfe90b349066209fb090df6\"\n   if cachename in c.db:\n        g.trace('Already cached')\n    else:\n        tree = g.tree_at_position(pos)\n        c.db[cachename] = tree\n\nPickleshare (as used by Leo) stores the pickles in zlib-compressed form, which yields \nsignificant size benefits for large pickles like objtrees.\n\nNote that c.db is available to all plugins and scripts, and in no way limited to this \nspecific caching purpose. In practice, it's useful for data you want to persist\nthrough Leo sessions, but not added to .leo document (which is what unknownAttributes\nare used for).\n\nIn addition to c.db, there is g.app.db that can be used for global (non-document specific)\npersisted data. E.g.::\n\n    g.app.db['foo'] = [1,2,3]  \n\nThe underlying files for c.db are at under ~/.leo/db/somedocument.leo_somehash.\n\nFiles for g.app.db are at ~/.leo/db/global.\n\n", "children": []}, {"h": "@edit html\\conf.py", "gnx": "ekr.20090428133936.2", "b": "@language python\n# -*- coding: utf-8 -*-\n#\n# Leo documentation documentation build configuration file, created by\n# sphinx-quickstart on Mon Mar 30 16:39:02 2009.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport sys, os\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#sys.path.append(os.path.abspath('.'))\n\n# -- General configuration -----------------------------------------------------\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = []\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\n# The suffix of source filenames.\nsource_suffix = '.html.txt'\n\n# The encoding of source files.\n#source_encoding = 'utf-8'\n\n# The master toctree document.\nmaster_doc = 'leo_toc' # don't use any prefix.\n\n# General information about the project.\nproject = 'Leo'\n\ncopyright = '2011, Edward K. Ream'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '4.9'\n# The full version, including alpha/beta/rc tags.\nrelease = '4.9' # Using the short version is simplest and good.\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n\n# List of documents that shouldn't be included in the build.\n#unused_docs = []\n\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\nexclude_trees = ['_build']\n\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'default'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\nhtml_theme_options = {\n\n    'collapsiblesidebar': True,\n\n\t#  footerbgcolor (CSS color): Background color for the footer line.\n\t#  footertextcolor (CSS color): Text color for the footer line.\n\t#  sidebarbgcolor (CSS color): Background color for the sidebar.\n\t'sidebarbgcolor': \"#fffdbc\", # typical yellow. \n    ## 'sidebarbgcolor': \"#cbf5b1\", # 203,245,177 # green1 harsh\n    ##'sidebarbgcolor': \"#e2fad3\", # 226, 250, 211 # green2\n\t#  sidebartextcolor (CSS color): Text color for the sidebar.\n\t'sidebartextcolor': 'black',\n\t#  sidebarlinkcolor (CSS color): Link color for the sidebar.\n\t'sidebarlinkcolor': 'black',\n\t#  relbarbgcolor (CSS color): Background color for the relation bar.\n\t#  relbartextcolor (CSS color): Text color for the relation bar.\n\t#  relbarlinkcolor (CSS color): Link color for the relation bar.\n\t#  bgcolor (CSS color): Body background color.\n\t'bgcolor': \"#fffbdc\", # r = 256, g = 253, b = 220\n\n\t#  textcolor (CSS color): Body text color.\n\t#  linkcolor (CSS color): Body link color.\n\t#  headbgcolor (CSS color): Background color for headings.\n\t#  headtextcolor (CSS color): Text color for headings.\n\t#  headlinkcolor (CSS color): Link color for headings.\n\t#  codebgcolor (CSS color): Background color for code blocks.\n\t#  codetextcolor (CSS color): Default text color for code blocks, if not set differently by the highlighting style.\n\t#  bodyfont (CSS font-family): Font for normal text.\n\t#  headfont (CSS font-family): Font for headings.\n}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = [\"_themes\"]\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\nhtml_logo = 'Leo4-80-border.jpg'\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\nhtml_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\nhtml_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n## html_sidebars = {'FAQ':'noSideBar.txt'} ### raises TemplateNotFound exception.\n\n    # * localtoc.html \u2013 a fine-grained table of contents of the current document\n    # * globaltoc.html \u2013 a coarse-grained table of contents for the whole documentation set, collapsed\n    # * relations.html \u2013 two links to the previous and next documents\n    # * sourcelink.html \u2013 a link to the source of the current document, if enabled in html_show_sourcelink\n    # * searchbox.html \u2013 the \u201cquick search\u201d box\n    \n\nhtml_sidebars = {\n   '**': ['relations.html','searchbox.html',] \n   # 'localtoc.html',\n   # 'globaltoc.html',\n   # 'sourcelink.html',\n}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\nhtml_use_modindex = False\n\n# If false, no index is generated.\nhtml_use_index = True\n\n# If true, the index is split into individual pages for each letter.\nhtml_split_index = False\n\n# If true, links to the reST sources are added to the pages.\nhtml_show_sourcelink = False\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\nhtml_use_opensearch = ''\n\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Leodoc'\n\n\n# -- Options for LaTeX output --------------------------------------------------\n\n# The paper size ('letter' or 'a4').\nlatex_paper_size = 'a4'\n\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n\n# Grouping the document tree into LaTeX files. List of tuples\n# tex_documents(source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('leo_toc', 'Leodocumentation.tex', 'Leo',\n   'Edward K. Ream', 'manual'),\n]\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\nlatex_use_modindex = False\n", "children": []}, {"h": "@edit html\\leo_toc.html.txt", "gnx": "ekr.20090428102353.1", "b": "@nocolor\n\n.. _`Leo's home page`: http://webpages.charter.net/edreamleo/front.html\n\n.. Leo documentation documentation master file, created by\n   sphinx-quickstart on Mon Mar 30 16:39:02 2009.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nLeo's Users Guide\n==================\n\n`Leo's home page`_\n\nContents:\n\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   frontMatter   \n   preface\n   testimonials\n\n   FAQ\n   slides\n   installing\n   intro\n   commands\n   customizing\n   \n   coloring\n   rstplugin3\n   scripting\n   plugins\n   writingPlugins\n   unitTesting\n   debuggers\n   atShadow\n   leoInspect\n   \n   emacs\n   IPythonBridge\n   leoBridge\n   vimBindings\n   zodb\n   \n   directives\n   design\n   history\n   theory\n   whitepapers\n   appendices\n   glossary\n   \n   what-is-new\n   \n`Leo's home page`_", "children": []}, {"h": "@edit leo_toc.html", "gnx": "ekr.20101025080245.5800", "b": "@language html\n\n\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n  \n<!-- EKR: modified Table of contents below by hand  -->\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    \n    <title>Leo's Users Guide &mdash; Leo v4.9 documentation</title>\n    <link rel=\"stylesheet\" href=\"_static/default.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />\n    <script type=\"text/javascript\">\n      var DOCUMENTATION_OPTIONS = {\n        URL_ROOT:    '',\n        VERSION:     '4.9',\n        COLLAPSE_INDEX: false,\n        FILE_SUFFIX: '.html',\n        HAS_SOURCE:  true\n      };\n    </script>\n    <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>\n    <script type=\"text/javascript\" src=\"_static/underscore.js\"></script>\n    <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>\n    <script type=\"text/javascript\" src=\"_static/sidebar.js\"></script>\n    <link rel=\"top\" title=\"Leo v4.9 documentation\" href=\"index.html\" />\n    <link rel=\"next\" title=\"Front Matter\" href=\"frontMatter.html\" /> \n  </head>\n\n  <body>\n    <div class=\"related\">\n      <h3>Navigation</h3>\n      <ul>\n        \n        <li class=\"right\" style=\"margin-right: 10px\">\n            <a href=\"genindex.html\" title=\"General Index\" accesskey=\"I\">index</a></li>\n        <li class=\"right\" >\n            <a href=\"frontMatter.html\" title=\"Front Matter\" accesskey=\"N\">next</a> |</li>\n        <li class=\"right\" >\n            <a href=\"front.html\" title=\"Home\" accesskey=\"H\">home</a> |</li>\n    \n        <li><a href=\"#\">Leo v4.9 documentation</a> &raquo;</li>\n      </ul>\n    </div>  \n\n    <div class=\"document\">\n      <div class=\"documentwrapper\">\n        <div class=\"bodywrapper\">\n          <div class=\"body\">\n            \n  <div class=\"section\" id=\"leo-s-users-guide\">\n\n<h1>Leo&#8217;s Users Guide<a class=\"headerlink\" href=\"#leo-s-users-guide\" title=\"Permalink to this headline\">\u00c2\u00b6</a></h1>\n\n<p>Contents:</p>\n<div class=\"toctree-wrapper compound\">\n\n<!-- EKR: changed these by hand to give the toc some structure -->\n\n<p>Preliminaries</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"frontMatter.html\">Front Matter</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"preface.html\">Preface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"testimonials.html\">What People Are Saying About Leo</a></li>\n</ul>\n\n<p>Basics</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"FAQ.html\">FAQ</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"slides.html\">Slides</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"installing.html\">Installing Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"intro.html\">The Leo Tutorial</a></li>\n<!--<li class=\"toctree-l1\"><a class=\"reference external\" href=\"outlines.html\">Using Outlines</a></li>-->\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"commands.html\">Using Leo</a></li>\n</ul>\n\n<p>Intermediate Topics</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"customizing.html\">Customizing Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"coloring.html\">Controlling Syntax Coloring</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"rstplugin3.html\">Creating Documents with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"scripting.html\">Scripting Leo with Python</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"plugins.html\">Plugins</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"writingPlugins.html\">Writing Plugins</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"unitTesting.html\">Unit testing with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"debuggers.html\">Debugging with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"atShadow.html\">Using &#64;shadow</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"design.html\">Designing with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"leoInspect.html\">The leoInspect Module</a></li>\n</ul>\n\n<p>Leo and Other Programs</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"emacs.html\">Leo and Emacs</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"IPythonBridge.html\">IPython and Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"leoBridge.html\">Embedding Leo with the leoBridge module</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"vimBindings.html\">Using Vim Bindings with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"zodb.html\">Using ZODB with Leo</a></li>\n</ul>\n\n<p>Reference</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"directives.html\">Leo&#8217;s Reference</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"history.html\">History of Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"theory.html\">Theory of Operation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"whitepapers.html\">White Papers</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"appendices.html\">Appendices</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"glossary.html\">Glossary</a></li>\n</ul>\n\nRelease Notes\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"what-is-new.html\">What&#8217;s New in Leo</a></li>\n</ul>\n\n\n</div>\n</div>\n\n\n          </div>\n        </div>\n      </div>\n      <div class=\"sphinxsidebar\">\n        <div class=\"sphinxsidebarwrapper\">\n            <p class=\"logo\"><a href=\"#\">\n              <img class=\"logo\" src=\"_static/Leo4-80-border.jpg\" alt=\"Logo\"/>\n            </a></p>\n  <h4>Next topic</h4>\n  <p class=\"topless\"><a href=\"frontMatter.html\"\n                        title=\"next chapter\">Front Matter</a></p>\n        </div>\n      </div>\n      <div class=\"clearer\"></div>\n    </div>\n    <div class=\"related\">\n      <h3>Navigation</h3>\n      <ul>\n        <li class=\"right\" style=\"margin-right: 10px\">\n          <a href=\"genindex.html\" title=\"General Index\">index</a></li>\n        <li class=\"right\" >\n          <a href=\"frontMatter.html\" title=\"Front Matter\">next</a> |</li>\n        <li class=\"right\">\n            <a href=\"front.html\" title=\"Home\">home</a> |</li>\n        <li><a href=\"#\">Leo v4.9 documentation</a> &raquo;</li> \n      </ul>\n    </div>\n    <div class=\"footer\">\n        &copy; Copyright 2001-2012, Edward K. Ream.\n      Last updated on March 22, 2012.\n      Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.0.4.\n    </div>\n  </body>\n</html>", "children": []}, {"h": "@file plugin_catalog.py", "gnx": "ekr.20101112045055.5064", "b": "@language python\n\n<< docstring >>\n<< imports >>\n\n@others\n\nif __name__ == \"__main__\":\n    if ok:\n        main()\n", "children": ["ekr.20111018061632.15902", "ekr.20111018061632.15903", "tbrown.20111018094615.23242", "ekr.20111018061632.15913", "ekr.20111018061632.15912"]}, {"h": "<< docstring >>", "gnx": "ekr.20111018061632.15902", "b": "\"\"\"\nExtract plugin status and docs. from docstrings\n\n:last_update: 20100301\n:plugin_status: inital development\n:gui: qt and tk\n:maintainer: terry_n_brown@yahoo.com\n\nGenerate merged documentation from plugins (or any .py files).\n\nE.g.::\n\n    python doc/plugin_catalog.py \\\n      --css-file=.../Sphinx-0.6.5/sphinx/themes/sphinxdoc/static/sphinxdoc.css \\\n      plugins/ doc/plugin_docs.html\n\nOptions:\n  -h, --help            show this help message and exit\n  --location=LOCATION   Add a location to the list to search\n  --css-file=CSS_FILE   Use this CSS file in the HTML output\n  --max-files=MAX_FILES\n                        Stop after this many files, mainly for testing\n  --include-contents    Include table of contents (the summary is more useful)\n  --no-summary          Don't generate the summary\n  --show-paths          Show paths to .py files, useful for resolving RST\n                        errors\n  --output=OUTPUT       Filename for the html output\n  --xml-output=XML_OUTPUT\n                        Filename for optional xml output, mainly for testing\n\nTODO\n\n - Design encoding of plugin status in rst docstring\n\n   - interface (qt/tk/both)\n   - maintained / working / old / broken\n   - maintainer\n\n - List of commands provided by plugin (or command pattern, e.g active-path-\\*)\n - List of semantic tags provided by plugin (@bookmark...)\n\n\"\"\"\n", "children": []}, {"h": "<< imports >>", "gnx": "ekr.20111018061632.15903", "b": "import os\nimport sys\nimport ast\nimport time\nfrom copy import deepcopy\nimport optparse\n\ntry:\n    ok = True\n    from docutils.core import publish_doctree, publish_from_doctree\n    from docutils import nodes\n    from docutils.transforms.parts import Contents\n    from docutils.utils import SystemMessage\nexcept Exception:\n    sys.stderr.write('plugin_catelog.py: can not import docutils\\n')\n    ok = False\n", "children": []}, {"h": "err", "gnx": "tbrown.20111018094615.23242", "b": "def err(s):\n    sys.stderr.write(s)\n    sys.stderr.flush()\n", "children": []}, {"h": "class PluginCatalog", "gnx": "ekr.20111018061632.15913", "b": "class PluginCatalog(object):\n    \n    \"\"\"see module docs. and make_parser()\"\"\"\n    \n    @others\n", "children": ["ekr.20111018061632.15906", "ekr.20111018061632.15910", "ekr.20111018061632.15911", "ekr.20111018061632.15907", "ekr.20111018061632.15908", "ekr.20111018061632.15905", "ekr.20111018061632.15909"]}, {"h": "__init__", "gnx": "ekr.20111018061632.15906", "b": "def __init__(self, opt):\n\n    \"\"\"opt - see make_parser() or --help\"\"\"\n\n    self.opt = opt\n    self.id_num = 0  # for generating ids for the doctree\n    self.document = None\n", "children": []}, {"h": "add_ids", "gnx": "ekr.20111018061632.15910", "b": "def add_ids(self, node, depth=0):\n\n    \"\"\"Recursively add ids starting with 'lid' to doctree node.\n\n    Always id the top level node, and also document, section, and topic\n    nodes below it.\"\"\"\n\n    if hasattr(node, 'tagname'):\n        if depth == 0 or node.tagname in ('document', 'section', 'topic'):\n            if True or not node['ids']:\n                self.id_num += 1\n                node['ids'].append('lid'+str(self.id_num))\n        for child in node:\n            self.add_ids(child, depth+1)\n", "children": []}, {"h": "first_text", "gnx": "ekr.20111018061632.15911", "b": "def first_text(self, node):\n\n    \"\"\"find first paragraph to use as a summary\"\"\"\n\n    if node.tagname == 'paragraph':\n        return deepcopy(node)\n    else:\n        for child in node:\n            if hasattr(child, 'tagname'):\n                ans = self.first_text(child)\n                if ans:\n                    return ans\n\n    return None\n", "children": []}, {"h": "get_doc_strings", "gnx": "ekr.20111018061632.15907", "b": "def get_doc_strings(self):\n\n    \"\"\"collect docstrings in .py files in specified locations\"\"\"\n\n    doc_strings = []\n    cnt = 0\n    opt = self.opt  \n\n    for loc in opt.location:\n\n        for path, dummy, files in os.walk(loc):\n            break  # only want the first answer\n\n        for file_name in sorted(files, key=lambda x:x.lower()):\n            if not file_name.lower().endswith('.py'):\n                continue\n\n            file_path = os.path.join(path, file_name)\n\n            doc_string = None\n\n            src = open(file_path).read()\n            src = src.replace('\\r\\n', '\\n').replace('\\r','\\n')+'\\n'\n            try:\n                ast_info = ast.parse(src)\n                doc_string = ast.get_docstring(ast_info)\n            except SyntaxError:\n                doc_string = \"**SYNTAX ERROR IN MODULE SOURCE**\"\n\n            if not doc_string and file_name != '__init__.py':\n                doc_string = \"**NO DOCSTRING**\"\n\n            if not doc_string:\n                continue  # don't whine about __init__.py\n\n            if opt.show_paths:\n                err(\"Processing: '%s'\\n\" % file_path)\n            try:\n                doc_tree = publish_doctree(doc_string)\n            except SystemMessage:\n                doc_tree = publish_doctree(\"\"\"\n                Docutils could not parse docstring\n\n                RST error level SEVERE/4 or higher in '%s'\"\"\" %\n                    file_path)\n\n            doc_strings.append( (file_name, file_path, doc_tree) )\n\n            cnt += 1\n            if opt.max_files and cnt == opt.max_files:\n                break\n\n    return doc_strings\n", "children": []}, {"h": "make_document", "gnx": "ekr.20111018061632.15908", "b": "def make_document(self, doc_strings):\n    \n    \"\"\"make doctree representation of collected fragments\"\"\"\n\n    opt = self.opt  \n\n    big_doc = publish_doctree(\"\")\n    self.document = big_doc\n    big_doc += nodes.title(text=\"Plugins listing generated %s\" %\n        time.asctime())\n\n    contents = nodes.container()\n    if opt.include_contents:\n        big_doc += nodes.topic('', nodes.title(text='Contents'), contents)\n\n    if not opt.no_summary:\n        def_list = nodes.definition_list()\n        alpha_list = nodes.paragraph()\n        big_doc += nodes.section('', nodes.title(text=\"Plugins summary\"),\n            alpha_list, def_list)\n\n    last_alpha = ''\n\n    for doc in doc_strings:\n        \n        section = nodes.section()\n        big_doc += section\n        section += nodes.title(text=doc[0])\n\n        self.add_ids(section)\n\n        if not opt.no_summary:\n            firstpara = (self.first_text(doc[2]) or\n                nodes.paragraph(text='No summary found'))\n            reference = nodes.reference('', refid=section['ids'][0],\n                name = doc[0], anonymous=1)\n            reference += nodes.Text(doc[0])\n            def_list += nodes.definition_list_item('',\n                nodes.term('', '', reference),\n                nodes.definition('', firstpara)\n            )\n\n            # add letter quick index entry if needed\n            if doc[0][0].upper() != last_alpha:\n                last_alpha = doc[0][0].upper()\n                self.add_ids(reference)\n                alpha_list += nodes.reference('',\n                    nodes.Text(last_alpha+' '),\n                    refid=reference['ids'][0], name = doc[0], anonymous=1)\n\n        for element in doc[2]:\n            # if the docstring has titles, we need another level\n            if element.tagname == 'title':\n                subsection = nodes.section() \n                section += subsection\n                section = subsection\n                break\n\n        for element in doc[2]:\n            try:\n                section += element.deepcopy()\n            except TypeError:\n                err(\n                    'Element.deepcopy() failed, dropped element for %s\\n' %\n                    doc[0])\n\n    if opt.include_contents:\n        contents.details = {'text': 'Contents here'}\n\n        self.add_ids(big_doc)\n        transform = Contents(big_doc, contents)\n        transform.apply()\n\n    return big_doc\n    \n", "children": []}, {"h": "make_parser", "gnx": "ekr.20111018061632.15905", "b": "@staticmethod\ndef make_parser():\n    \"\"\"Return an optparse.OptionParser\"\"\"\n\n    parser = optparse.OptionParser(\"Usage: plug_catalog.py [options] dir1 [dir2 ...] output.html\")\n\n    parser.add_option(\"--location\", action=\"append\", type=\"string\",\n        help=\"Add a location to the list to search\", default=[])\n    parser.add_option(\"--css-file\", type=\"string\",\n        help=\"Use this CSS file in the HTML output\")\n    parser.add_option(\"--max-files\", type=\"int\",\n        help=\"Stope after this many files, mainly for testing\")\n    parser.add_option(\"--include-contents\", action=\"store_true\", \n        default=False,\n        help=\"Include table of contents (the summary is more useful)\")\n    parser.add_option(\"--no-summary\", action=\"store_true\", default=False,\n        help=\"Don't generate the summary\")\n    parser.add_option(\"--show-paths\", action=\"store_true\", default=False,\n        help=\"Show paths to .py files, useful for resolving RST errors\")\n    parser.add_option(\"--output\", type=\"string\", default=None,\n        help=\"Filename for the html output\")\n    parser.add_option(\"--xml-output\", type=\"string\", default=None,\n        help=\"Filename for optional xml output, mainly for testing\")\n\n    return parser\n", "children": []}, {"h": "run", "gnx": "ekr.20111018061632.15909", "b": "def run(self):\n\n    \"\"\"run with the supplied options, see make_parser()\"\"\"\n\n    opt = self.opt  \n\n    doc_strings = self.get_doc_strings()\n\n    big_doc = self.make_document(doc_strings)\n\n    settings_overrides = {}\n    if opt.css_file:\n        settings_overrides['stylesheet_path'] = opt.css_file\n\n    open(opt.output, 'wb').write(\n        publish_from_doctree(big_doc, writer_name='html',\n            settings_overrides = settings_overrides)\n    )\n    err(\"Wrote '%s'\\n\" % opt.output)\n\n    if opt.xml_output:\n        open(opt.xml_output, 'wb').write(\n            publish_from_doctree(big_doc, writer_name='xml',\n                settings_overrides = {'indents': True})\n        )\n        err(\"Wrote '%s'\\n\" % opt.xml_output)\n", "children": []}, {"h": "main", "gnx": "ekr.20111018061632.15912", "b": "def main():\n    \n    \"\"\"create and run a PluginCatalog\"\"\"\n    \n    opts, args = PluginCatalog.make_parser().parse_args()\n\n    if args and not opts.output:\n        opts.output = args[-1]\n        del args[-1]\n\n    opts.location.extend(args)\n\n    plugin_catalog = PluginCatalog(opts)\n    plugin_catalog.run()\n", "children": []}, {"h": "@file html/front.html", "gnx": "ekr.20100808060203.4273", "b": "@first <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n@first \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n@language html\n@tabwidth -2\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    << head >>\n</head>\n<body>\n    << div top nav >>\n    <div class=\"document\">\n      <div class=\"documentwrapper\">\n        <div class=\"bodywrapper\">\n          <div class=\"body\">\n            << div outer section >>\n          </div>\n        </div>\n      </div>\n      << sidebar >>\n      <div class=\"clearer\"></div>\n    </div>\n    << div bottom nav >>\n    << div footer >>\n  </body>\n</html>\n", "children": ["ekr.20100808060203.4274", "ekr.20100808060203.4276", "ekr.20100808060203.4286", "ekr.20100808060203.4282", "ekr.20100808060203.4277", "ekr.20100808060203.4278"]}, {"h": "<< head >> (front.html)", "gnx": "ekr.20100808060203.4274", "b": "@language html\n\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\n<title>Leo's Home Page</title>\n<link rel=\"stylesheet\" href=\"_static/default.css\" type=\"text/css\" />\n<link rel=\"stylesheet\" href=\"_static/pygments.css\" type=\"text/css\" />\n\n<!-- scale screen-shot to fit parent container -->\n<style type=\"text/css\">\nimg { max-width:100%; max-height:100%; }\n</style>\n\n<!--\n<script type=\"text/javascript\">\n  var DOCUMENTATION_OPTIONS = {\n    URL_ROOT:    '',\n    VERSION:     '4.9',\n    COLLAPSE_MODINDEX: false,\n    FILE_SUFFIX: '.html',\n    HAS_SOURCE:  false\n  };\n</script>\n-->\n<< flattr head >>\n\n<< feed2js stylesheet >>\n\n<!-- <script type=\"text/javascript\" src=\"_static/jquery.js\"></script>-->\n<!-- <script type=\"text/javascript\" src=\"_static/doctools.js\"></script>-->\n<link rel=\"top\" title=\"Leo v4.9 documentation\" href=\"index.html\" />\n<link rel=\"Users Guide\" title=\"Leo&#8217;s Users Guide\" href=\"leo_toc.html\" />\n<!-- <link rel=\"prev\" title=\"Using Leo\u00e2\u20ac\u2122s Commands\" href=\"commands.html\" />--> \n", "children": ["ekr.20110518101739.18155", "ekr.20111028195854.16608"]}, {"h": "<< flattr head >>", "gnx": "ekr.20110518101739.18155", "b": "<script type=\"text/javascript\">\n/* <![CDATA[ */\n    (function() {\n        var s = document.createElement('script'), t = document.getElementsByTagName('script')[0];\n        s.type = 'text/javascript';\n        s.async = true;\n        s.src = 'http://api.flattr.com/js/0.6/load.js?mode=auto';\n        t.parentNode.insertBefore(s, t);\n    })();\n/* ]]> */\n</script>\n", "children": []}, {"h": "<< feed2js stylesheet >>", "gnx": "ekr.20111028195854.16608", "b": "<style type=\"text/css\" media=\"all\">\n\n<!-- See: http://feed2js.org/index.php?s=style -->\n\n.rss_box {\n    width:   0px;\n    padding: 0px;\n    border:  0px solid white;\n    margin:  0px;\n}\n\n.rss_title {\n    visibility:hidden;\n    line-height: 0px;\n}\n\n.rss_items {\n    font-size: 80%;\n}\n\n</style>\n", "children": []}, {"h": "<< div top nav >>", "gnx": "ekr.20100808060203.4276", "b": "<div class=\"related\">\n  <h3>Navigation</h3>\n  <ul>\n    <li class=\"right\" style=\"margin-right: 10px\">\n      <a href=\"genindex.html\" title=\"General Index\"\n         accesskey=\"I\">index</a></li>\n    <li class=\"right\" >\n      <a href=\"glossary.html\" title=\"Glossary\"\n         accesskey=\"G\">glossary</a> |</li>\n    <li class=\"right\" >\n      <a href=\"leo_toc.html\" title=\"Users Guide\"\n         accesskey=\"N\">contents</a> |</li>\n\n    <li><a href=\"leo_toc.html\">Leo v4.9 documentation</a> &raquo;</li>\n\n  </ul>\n</div>\n", "children": []}, {"h": "<< div outer section >> (front.html)", "gnx": "ekr.20100808060203.4286", "b": "-<div class=\"section\" id=\"Leo&#8217;s Home page\">\n\n    <h1>Leo&#8217;s Home Page</h1>\n\n    Leo is...\n\n    << what is Leo list >>\n    \n    <p>Please use the medium traffic\n    <a href=\"http://groups.google.com/group/leo-editor\"> leo-editor Google Group</a>\n    to ask questions and make suggestions.\n    Questions and comments from newcomers are encouraged.\n    Here are the most recent discussions...\n    <<feed2js script>>\n    </p>\n    \n    <p>Here is a screenshot of Leo's main window.</p>\n    \n    <!-- height=\"433\" width=\"488\" -->\n    <!-- src=\"leo-4.9_viewrendered-layout.png\" -->\n    \n    <!-- \n    <iframe src=\"screen-shots/render-svg-sources.png\" width=\"600\" height=\"400\" scrolling=\"yes\">\n    </iframe>\n    -->\n    \n    <img class=\"screenshot\"\n        src=\"screen-shots/render-svg-sources.png\"\n        alt=\"ScreenShot\"/>\n    \n    \n\n</div>\n", "children": ["ekr.20111019104425.15904", "ekr.20111027223444.5621"]}, {"h": "<< what is Leo list >>", "gnx": "ekr.20111019104425.15904", "b": "<li>\n    A premier Integrated Development Environment, fully scriptable using\n    <a HREF=\"http://www.python.org/\">Python</a>.</li>\n<li>\n    An outline-oriented, flexible filing cabinet holding any kind of data: including\n    programs, web sites, text documents of all kinds, music, graphics and movies.</li>\n<li>\n    <i>The</i> premier platform for creating, generating, studying, scripting, testing,\n    and validating computer programs, web sites and any other complex data.</li>\n<li>\n    A rendering engine for\n    <a HREF=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a>, web pages and\n    <a HREF=\"http://www.w3.org/Graphics/SVG/\">svg graphics</a>.</li>\n<li>\n    A music and movie player.</li>\n<li>\n    A sophisticated\n    <a HREF=\"http://www.riverbankcomputing.co.uk/software/pyqt/intro\">PyQt</a>\n    app running on Windows and Linux.</li>\n<li>\n    100% pure <a HREF=\"http://www.python.org/\">Python</a>,\n    running on Python 2.6 and above, including Python 3.x.</li>\n<li>\n    <a href=\"http://www.opensource.org/\"><i>Open Software</i></a>,\n    distributed under the\n    <a href=\"http://www.opensource.org/licenses/mit-license.php/\">MIT License</a>.</li>\n", "children": []}, {"h": "<<feed2js script>> (front.html)", "gnx": "ekr.20111027223444.5621", "b": "@language html\n\n<script language=\"JavaScript\"\n  src=\"http://itde.vccs.edu/rss2js/feed2js.php?src=http%3A%2F%2Fgroups.google.com%2Fgroup%2Fleo-editor%2Ffeed%2Frss_v2_0_msgs.xml&chan=title&num=5&desc=0&date=y&targ=y\"\n  type=\"text/javascript\">\n</script>\n", "children": []}, {"h": "<< sidebar >>", "gnx": "ekr.20100808060203.4282", "b": "<div class=\"sphinxsidebar\">\n    <div class=\"sphinxsidebarwrapper\">\n        << sidebar contents >>\n    </div>\n</div>\n", "children": ["ekr.20100808060203.4283"]}, {"h": "<< sidebar contents >>", "gnx": "ekr.20100808060203.4283", "b": "<p class=\"logo\"><a href=\"leo_toc.html\">\n  <img class=\"logo\" src=\"_static/Leo4-80-border.jpg\" alt=\"Logo\"/></a>\n</p>\n\n<p>Leo: Leonine Editor with Outlines</p>\n\n<a class=\"reference external\" href=\"intro.html\">\n  Read this tutorial first</a><br>\n<!-- Alas, Joe Orr's excellent slides refer to @root.\n<a class=\"reference external\" href=\"http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm\">\n  Another tutorial</a><br>\n-->\n<a class=\"reference external\" href=\"slides.html\">\n  Tutorial Slide Shows</a><br>\n<a class=\"reference external\" href=\"http://webpages.charter.net/edreamleo/leo_toc.html\">\n  Leo's Users Guide</a><br>\n<a class=\"reference external\" href=\"http:screen-shots.html\">\n  Screen shots of Leo</a><br>\n<a class=\"reference external\" href=\"testimonials.html\">\n  Quotes from Leo&#8217;s Users</a><br>\n<a class=\"reference external\"\n  href=\"http://webpages.charter.net/edreamleo/download.html\">\n  Download Leo</a><br>\n<!--\n  <a class=\"reference external\"\n    href=\"https://sourceforge.net/projects/leo/files/Leo/\">\n    Download Leo (4.9 Final)</a><br>\n  <a class=\"reference external\"\n    href=\"http://www.greygreen.org/leo/\">\n    Download Leo (Daily Snapshots)</a><br>\n-->\n<a class=\"reference external\" href=\"http://groups.google.com/group/leo-editor\">\n  leo-editor: Google Groups</a><br>\n<a class=\"reference external\" href=\"http://launchpad.net/leo-editor\">\n  leo-editor: Launchpad</a><br>\n<a class=\"reference external\" href=\"http://leo.zwiki.org\">\n  Leo&#8217;s Wiki</a><br>\n<a class=\"reference external\" href=\"http://www.mind-mapping.org/\">\n  Mind Mapping</a><br>\n<a class=\"reference external\" href=\"leoLinks.html\">\n  More links...</a><br>\n  \n<div id=\"searchbox\" style=\"\">\n  <h3>Quick search</h3>\n  <form class=\"search\" method=\"get\" action=\"search.html\">\n    <input type=\"text\" name=\"q\">\n    <input type=\"submit\" value=\"Go\">\n    <input type=\"hidden\" value=\"yes\" name=\"check_keywords\">\n    <input type=\"hidden\" value=\"default\" name=\"area\">\n  </form>\n  <p class=\"searchtip\" style=\"font-size: 90%\">\n    Enter search terms or a module, class or function name.\n  </p>\n</div>\n\n<p>Written by <a HREF=\"ekr.html\">Edward K. Ream</a>\n<< flattr icon >>\n</p>\n    \n\n", "children": ["ekr.20110518101739.18154"]}, {"h": "<< flattr icon >>", "gnx": "ekr.20110518101739.18154", "b": "<a class=\"FlattrButton\" style=\"display:none;\" rev=\"flattr;button:compact;\" href=\"http://webpages.charter.net/edreamleo/front.html\"></a>\n<noscript><a href=\"http://flattr.com/thing/410073/Leo\" target=\"_blank\">\n<img src=\"http://api.flattr.com/button/flattr-badge-large.png\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" /></a></noscript>\n", "children": []}, {"h": "<< div bottom nav >>", "gnx": "ekr.20100808060203.4277", "b": "<div class=\"related\">\n  <h3>Navigation</h3>\n  <ul>\n    <li class=\"right\" style=\"margin-right: 10px\">\n      <a href=\"genindex.html\" title=\"General Index\"\n         >index</a></li>\n    <li class=\"right\" >\n      <a href=\"glossary.html\" title=\"Glossary\"\n         accesskey=\"G\">glossary</a> |</li>\n    <li class=\"right\" >\n      <a href=\"leo_toc.html\" title=\"Users Guide\"\n         >contents</a> |</li>\n\n    <li><a href=\"leo_toc.html\">Leo v4.9 documentation</a> &raquo;</li> \n  </ul>\n</div>\n", "children": []}, {"h": "<< div footer >>", "gnx": "ekr.20100808060203.4278", "b": "<div class=\"footer\">\n  &copy; Copyright 2001-2012, Edward K. Ream.\n  Last updated on March 22, 2012.\n  Created using <a href=\"http://sphinx.pocoo.org/\">Sphinx</a> 1.1.\n</div>\n", "children": []}, {"h": "@url modified toc", "gnx": "ekr.20101025080245.5801", "b": "c:/leo.repo/trunk/leo/doc/leo_toc.html", "children": []}, {"h": "Links that replace those in actual built page", "gnx": "ekr.20101026081737.5531", "b": "@language html\n\n<!-- EKR: changed these by hand to give the toc some structure -->\n\n<p>Preliminaries</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"frontMatter.html\">Front Matter</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"preface.html\">Preface</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"testimonials.html\">What People Are Saying About Leo</a></li>\n</ul>\n\n<p>Basics</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"FAQ.html\">FAQ</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"slides.html\">Slides</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"installing.html\">Installing Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"intro.html\">The Leo Tutorial</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"outlines.html\">Using Outlines</a></li>\n</ul>\n\n<p>Intermediate Topics</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"commands.html\">Using Leo&#8217;s Commands</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"customizing.html\">Customizing Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"coloring.html\">Controlling Syntax Coloring</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"rstplugin3.html\">Creating Documents with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"scripting.html\">Scripting Leo with Python</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"plugins.html\">Plugins</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"writingPlugins.html\">Writing Plugins</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"unitTesting.html\">Unit testing with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"debuggers.html\">Debugging with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"atShadow.html\">Using &#64;shadow</a></li>\n</ul>\n\n<p>Leo and Other Programs</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"emacs.html\">Leo and Emacs</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"IPythonBridge.html\">IPython and Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"leoBridge.html\">Embedding Leo with the leoBridge module</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"vimBindings.html\">Using Vim Bindings with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"zodb.html\">Using ZODB with Leo</a></li>\n</ul>\n\n<p>Reference</p>\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"directives.html\">Leo&#8217;s Reference</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"design.html\">Designing with Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"history.html\">History of Leo</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"theory.html\">Theory of Operation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"whitepapers.html\">White Papers</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"appendices.html\">Appendices</a></li>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"glossary.html\">Glossary</a></li>\n</ul>\n\nRelease Notes\n\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference external\" href=\"what-is-new.html\">What&#8217;s New in Leo</a></li>\n</ul>", "children": []}, {"h": "@url docs generated from plugin_catalog.py", "gnx": "ekr.20101112045055.5065", "b": "http://www.greygreen.org/tmp/plugins.html", "children": []}, {"h": "Users Guide", "gnx": "ekr.20040414161647", "b": "@pagewidth 70\n@nocolor-node\n\nThese are the sources for Leo's users guide.\n\nThey contain sphinx markup. See::\n    \n    http://sphinx.pocoo.org/\n    http://docutils.sourceforge.net/docs/user/rst/quickstart.html\n    \nTo generate these docs, see the next node: \"Generating the Users Guide\"\n    \nImportant files:\n\n- doc\\html\\conf.py contains settings, including the name of the master toctree\n  document, leo_toc.html.txt.\n\n- leo_toc.html.txt contains a list of all file to be included.\n", "children": ["ekr.20101104024804.4898", "ekr.20101025080245.5794", "ekr.20101025080245.5795", "ekr.20101025080245.5799", "ekr.20101025080245.5798", "ekr.20101025080245.5796", "ekr.20060620094033", "ekr.20111127144911.5545"]}, {"h": " Generating the Users Guide", "gnx": "ekr.20101104024804.4898", "b": "@nocolor-node\n\nThe children of this node contain two @button scripts. These are disabled, but\nyou can execute them by selecting them and hitting Ctrl-B (execute-script).\n\nTo generate these docs by hand:\n\n    - From this file, run rst3 on desired tree.\n    - cd leo\\doc\\html\n    - make html\n\nTo create pdf (probably easiest on Linux, with necessary latex packages installed):\n\n    - make latex\n    - cd _build/latex\n    - make all-pdf\n    \nImportant files:\n\n- doc\\html\\conf.py contains settings, including the name of the master toctree\n  document, leo_toc.html.txt.\n\n- leo_toc.html.txt contains a list of all file to be included.\n", "children": ["sps.20100708203040.19008", "ville.20090705224948.5734"]}, {"h": "@@button generate-full-userguide", "gnx": "sps.20100708203040.19008", "b": "@language python\nimport os\npos = c.find_h(\"Users Guide\")[0]\nc.selectPosition(pos)\nc.k.simulateCommand('rst3')\n<< html manual >>\n<< pdf manual >>\n", "children": ["sps.20100708203040.19009", "sps.20100708203040.19010"]}, {"h": "<< html manual >>", "gnx": "sps.20100708203040.19009", "b": "d = c.scanAllDirectives(p)\nmandir = d.get('path') + \"/html\"\ng.es(mandir)\nos.chdir(mandir)\nos.system('make html')\n", "children": []}, {"h": "<< pdf manual >>", "gnx": "sps.20100708203040.19010", "b": "# you probably need to install several packages \n# to create pdf (e.g. jadetex)\nmandir = d.get('path') + \"/html\"\ng.es(mandir)\nos.chdir(mandir)\nos.system('make latex')\nos.chdir('_build/latex')\nos.system('../../fixup.pl < Leodocumentation.tex > LeoDoc.tex')\nos.system('make LeoDoc.pdf')\n", "children": []}, {"h": "@@button generate-userguide", "gnx": "ville.20090705224948.5734", "b": "import os\npos = c.find_h(\"Users Guide\")[0]\nc.selectPosition(pos)\nc.k.simulateCommand('rst3')\n<< html manual >>\n# no pdf manual creation, perhaps too \"involved\" for many\n", "children": ["ville.20090705225609.5736", "ville.20090705225609.5738"]}, {"h": "<< html manual >>", "gnx": "ville.20090705225609.5736", "b": "mandir = g.app.leoDir + \"/doc/html\"\ng.es(mandir)\nos.chdir(mandir)\nos.system('make html')\n", "children": []}, {"h": "<< pdf manual >>", "gnx": "ville.20090705225609.5738", "b": "# you probably need to install several packages \n# to create pdf (e.g. jadetex)\nmandir = g.app.leoDir + \"/doc/html\"\ng.es(mandir)\nos.chdir(mandir)\nos.system('make latex')\nos.chdir('_build/latex')\nos.system('make all-pdf')\n", "children": []}, {"h": "Preliminaries", "gnx": "ekr.20101025080245.5794", "b": "", "children": ["ekr.20050831184021.3", "ekr.20070701101808", "ekr.20050831184021.4"]}, {"h": "Front matter", "gnx": "ekr.20050831184021.3", "b": "", "children": ["ekr.20100805165051.7148"]}, {"h": "@file frontMatter.txt", "gnx": "ekr.20100805165051.7148", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20040414172212", "ekr.20040414172218.2"]}, {"h": "@rst html\\frontMatter.html", "gnx": "ekr.20040414172212", "b": "############\nFront Matter\n############\n\n.. contents::\n    :depth: 2\n\n", "children": ["ekr.20050812134441", "ekr.20040414172218.4", "ekr.20090221070927.1", "ekr.20040414174439"]}, {"h": "@rst-no-head Links", "gnx": "ekr.20050812134441", "b": ".. External links...\n.. _`Open Software`:    http://www.opensource.org/\n.. _Python:             http://www.python.org/\n.. _`SourceForge`:      http://sourceforge.net/projects/leo/\n\n.. Relative links...\n.. _clones:             intro.html#clones-views\n.. _leo:                front.html\n.. _outline:            intro.html#introduction\n.. _outlines:           intro.html#introduction\n.. _plugins:            intro.html#plugins-settings\n.. _scripting:          intro.html#scripting-leo\n.. _users:              http://sourceforge.net/projects/leo/\n", "children": []}, {"h": "Acknowledgements", "gnx": "ekr.20040414172218.4", "b": "Leo owes much of its visual design to MORE, possibly the most elegant\ncomputer program ever written. Leo's clone nodes are inspired by MORE.\n\nThe following people have made generous donations to the Leo project:\nRobert Low, Nic Cave-Lynch.\n\nThe following people reported bugs, answered questions, and made suggestions for\nimproving Leo:\nAlex Abacus, Shakeeb Alireze, Steve Allen, Bruce Arnold,\nChris Barker, Dennis Benzinger, David Boddie, Jason Breti, Eric Brown, Terry Brown,\nDarius Clarke, Martin Clifford, Jason Cunliffe,\nJosef Dalcolmo, Gil Dev, Bill Drissel, Wenshan Du,\nAllen Edwards, Chris Elliot, Dethe Elza, Mark Engleberg, Roger Erens, \nStephen Ferg, Tom Fetherston, Tomaz Ficko, Niklas Frykholm,\nFred Gansevles, Jonathan M. Gilligan, Zak Greant, Thomas Guettler, Romain Guy,\nDave Hein, Tiago Castro Henriques, Gary Herron, Steve Holden, Klass Holwerda, Matthias Huening, Robert Hustead,\nJohn Jacob, Paul Jaros, Christopher P. Jobling, Eric S. Johansson, Garold Johnson, \nJames Kerwin,\nNicola Larosa, David LeBlanc, Chris Liechti, Steve Litt, Martin v. L\u00f6wis (Loewis), Robert Low, Fredrik Lundh,\nMichael Manti, Alex Martelli, Marcus A. Martin, Gidion May, David McNab, Frank Merenda, Martin Montcrieffe, Will Munslow,\nChad Netzer, Derick van Niekerk, Jeff Nowland,\nNaud Olivier, Joe Orr,\nMarc-Antoine Parent, Paul Paterson, Sean Shaleh Perry, Tim Peters, David Priest, Gary Poster, Scott Powell,\nBruce Rafnel, Walter H. Rauser, Olivier Ravard, David Speed Ream, Rich Ries, Aharon Robbins, Guido van Rossum, David Rowe,\nDavide Salomoni, Steven Schaefer,Johannes Sch\u00f6\u00f6n, Wolfram Schwenzer, Casey Wong Kam Shun,\nGil Shwartz, Jim Sizelove, Paul Snively, Jurjen Stellingwerff, Phil Straus, David Szent-Gy\u00f6rgyi,\nKent Tenney, Jeffrey Thompson,\nGabriel Valiente, Jim Vickroy, Tony Vignaux, Tom van Vleck,\nKevin Walzer, Ying-Chao Wang, Cliff Wells, Dan Wharton, John Wiegley, Wim Wijnders, Dan Winkler, \nVadim Zeitlin.\n\nThe following have contributed plugins to Leo:\n\nRodrigo Benenson, Pierre Bidon, Felix Breuer, Terry Brown,\nMike Crowe,\nJosef Dalcolmo, Michael Dawson,\ne, Roger Erens, \nAndrea Galimberti, Engelbert Gruber,\nTimo Honkasalo,\nJaakko Kourula, Maxim Krikun,\nZhang Le, LeoUser,\nFr\u00e9d\u00e9ric Momm\u00e9ja, Bernhard Mulder, \nMark Ng,\nAlexis Gendron Paquette, Paul Paterson,\nDan Rahmel,\nDavide Salomoni,\nEd Taekema, Kent Tenney, Brian Theado,\nVille M. Vainio,\nSteve Zatz.\n", "children": ["ekr.20040416080538"]}, {"h": "@rst-no-head special mentions", "gnx": "ekr.20040416080538", "b": "The following deserve special mention:\nDavid Brock wrote TSyntaxMemo.\nThe late Bob Fitzwater kept me focused on design.\nDonald Knuth invented the CWEB language.\nJonathan M. Gilligan showed how to put the Leo icon in Leo's windows.\nJoe Orr created XSLT stylesheets for Leo; see http://www.jserv.com/jk_orr/xml/leo.htm.\nJoe Orr also created an outstanding set of tutorials for Leo; see http://www.evisa.com/e/sb.htm.\nLeoUser (B.H.) contributed numerous plugins and was the inspiration for Leo's minibuffer.\nLeoUser also wrote jyLeo: Leo for Jython.\nThe late Bernhard Mulder proposed a new way of untangling external files.\nJohn K. Ousterhout created tcl/Tk. Neal Norwitz wrote PyChecker.\nMarc-Antoine Parent urged me to use XML for Leo's file format and helped improve it.\nPaul Paterson suggested the plugin architecture,\nsuggested an approach to spell checking and has contributed many excellent plugins.\nFran\u00e7ois Pinard wrote pymacs.\nNorman Ramsey created noweb and gave permission to quote from the noweb web documentation.\nRich Ries has contributed a huge number of suggestions.\nSteven P. Schaefer pointed out major security problems lurking in hooks.\nGil Shwartz helped with unicode support.\nPhil Straus has been a great friend and constant support.\nGuido van Rossum created Python, Tkinter and the Python License.\nDave Winer created MORE.\nVille M. Vainio created ILeo and has made many other valuable contributions to Leo.\nDan Winkler helped support Leo on the Mac.\n\nSpecial thanks to my family.\nMy brother, David Speed Ream, tested Leo and made many useful suggestions.\nRebecca, James and Linda make it all worthwhile.\nIt was during a conversation with Rebecca that I realized that MORE could be used as a prototype for Leo.\nThat was a crucial first step.\n", "children": []}, {"h": "Leo's MIT License", "gnx": "ekr.20090221070927.1", "b": "All parts of Leo are distributed under the following copyright. This is intended\nto be the same as the MIT license, namely that Leo is absolutely free, even for\ncommercial use, including resale. There is no GNU-like \"copyleft\" restriction.\nThis license is compatible with the GPL.\n\n**Copyright 1997-2011 by Edward K. Ream. All Rights Reserved.**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n**THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**\n", "children": []}, {"h": "@rst-ignore DISCLAIMER OF LIABILITY", "gnx": "ekr.20040414174439", "b": "**EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR\nIMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT LIMITED TO\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN\nNO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF PROFIT OR ANY COMMERCIAL DAMAGE,\nINCLUDING BUT NOT LIMITED TO SPECIAL, INCIDENTAL, CONSEQUENTIAL OR OTHER\nDAMAGES.**\n", "children": []}, {"h": "@rst-ignore Old Preface", "gnx": "ekr.20040414172218.2", "b": "Leo_ has thousands of users_. Like me, many of them would never willingly be without Leo again.\nHere are Leo's essential features:\n\n1.  Leo outlines_ show you the big picture at all times,\n    while providing unlimited space for details.\n\n2.  Leo outlines_ can organize any kind of data:\n    computer programs, web sites, documentation, pictures, whatever.\n\n3.  Clones_ allow multiple views of the data within a *single* outline_.\n    You don't have to choose the 'correct' view; you can see data in many ways.\n\n4.  Plugins_ allow Leo's users to add new features to Leo.\n    Many of Leo's most successful features started life this way.\n\n5.  Leo is a superb scripting_ environment for Python.\n    Scripts contained in a Leo outline_ have easy access to all the outline's data.\n    It is natural to organize Leo outlines to make life easier for scripts.\n\n6.  Leo is `Open Software`_, written in 100% pure Python_.\n    Leo runs wherever Python does.\n\nLeo has a strong and active community of users on `SourceForge`_.\nWorking with this community has been a constant source of joy and inspiration.\nSuggestions and plugins from users continue to drive Leo in excellent new directions.\nWho knows what the next plugin will bring? -- Edward K. Ream, September, 2005\n", "children": []}, {"h": "Preface", "gnx": "ekr.20070701101808", "b": "", "children": ["ekr.20100805165051.7149"]}, {"h": "@file preface.txt", "gnx": "ekr.20100805165051.7149", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20070701101809"]}, {"h": "@rst html\\preface.html", "gnx": "ekr.20070701101809", "b": "############\nPreface\n############\n\n.. index:: Preface\n\n.. contents::\n    :depth: 2\n\nWhy, oh why, would anyone be interested in Leo? After all, Emacs and Vim are\nsuperb text editors, and Visual Studio and Eclipse are great IDE's. How can Leo\npossibly compete with such strong competition? What does Leo offer that these\nother tools don't?\n\nLeo does have something unique to offer--something missing from Emacs,Vim,\nVisual Studio and Eclipse. Leo's users often speak of an Aha! moment when they\nunderstand what this 'something' is. The Aha! arises from considering programs,\ndesign and data in a new light. You might call this 'The Leo Way'. In essence,\nLeo shows that computer programs, designs and data are *not*, after all, mostly\nabout text. Yes, people usually *express* programs, designs and data as text.\nYes, people manipulate programs, designs and data *using* text, but *text is not\nthe whole story*.\n\nIn The Leo Way, text is simply a manifestation (a shadow) of something more\nfundamental. That 'something else' might be called 'organization' or 'structure'\nor 'views' or even 'architecture'. However, let us use the term **node** to\nrepresent the fundamental unit of structure in Leo. We'll see why in a moment.\n\nIn architectural terms, nodes are bricks that make up a building. In computer\nprogramming terms, nodes make up methods, classes, files and entire\napplications. So the term 'node' does *not* have a fixed meaning--it is simply a\nunit of organization. Any node can be built from other nodes, and any node can\nbe used by any other node. Leo represent nodes directly, as nodes (headlines) in\nan outline. An outline node contains a headline and body text. The **outline\npane** shows all headlines; the **body pane** shows the body text of the\npresently selected node.\n", "children": ["ekr.20070701101809.1", "ekr.20070723100037", "ekr.20101025080245.6082", "ekr.20101025080245.6083"]}, {"h": "@rst-no-head Links", "gnx": "ekr.20070701101809.1", "b": ".. links...\n.. _`SourceForge`:      http://sourceforge.net/projects/leo/\n.. _`noweb`:            http://www.eecs.harvard.edu/~nr/noweb/\n.. _reStructuredText:   http://docutils.sourceforge.net/rst.html\n\n.. _outline:            intro.html#introduction\n.. _plugins:            intro.html#plugins-settings\n.. _scripting:          intro.html#scripting-leo\n.. _users:              http://sourceforge.net/projects/leo/\n\n.. _`cloned nodes`:     intro.html#clones-views\n.. _`external files`:   intro.html#external-files\n\n.. _`Using the Rst3 Plugin`:           rstplugin3.html\n", "children": []}, {"h": "Outline structure is real data", "gnx": "ekr.20070723100037", "b": "To repeat: the fundamental unit in Leo is *not* text. True, headlines and body\n*consist* of text, but a node is just not text, it is a true (Python) object.\nThis means several specific things:\n\n1. Because nodes are true objects, Leo commands understand what a node is, and\n   where a node fits into the entire outline. I'll say more about outline\n   organization soon, but let me give an example. Every node has exactly one\n   parent node, (except for top-level nodes that have no parents) and every node\n   has zero or more children and zero or more siblings. A node's parent,\n   children and siblings are real properties of the node, *completely\n   independent* of the node's headline or body text. Furthermore, any of Leo's\n   commands (or user-written scripts or plugins, the big sisters of user\n   scripts.) can *easily* access the all aspects of an outline *without* having\n   to parse any text whatsoever. Commands, scripts and plugins can easily do the\n   following: get the root of the outline, the presently selected node in the\n   outline, the parent, siblings, children or descendants of any node in the\n   outline, etc., etc. Commands, scripts and plugins can easily insert, delete\n   or move nodes, and can alter the headline or body text in any node. All this\n   *without* parsing text.\n\n2. Having nodes be true objects means that commands scripts and plugins can\n   treat the headline text as *something truly different from* body text. The\n   natural interpretation of headline text is as a description of the body text.\n   This is important! Headlines often control Leo's commands. For example,\n   headlines that start with @file, @asis, @auto, etc. serve to guide and\n   control Leo's read and write commands. Headlines that start with @test,\n   @suite and @mark-for-unit-tests guide Leo's unit testing commands. Moreover,\n   it is easy to create new conventions for headlines that control user-written\n   scripts or plugins. For example, plugins define specific meanings for\n   headlines that start with @url, @rst, @bookmark, @slideshow, etc., etc. So\n   the separation of headline and body text, **as true components of a node\n   object**, is a very big deal.\n\n3. One application of these ideas deserves special mention. Leo's scripting\n   plugin provides support for @button nodes. The headline is @button\n   <command-name>. The body text contains a script. When Leo opens a Leo\n   outline, each @button node creates a command and an icon. Clicking the icon\n   (or executing the command) applies the script in the @button node **to the\n   presently selected outline**. That is, the script is executed in a context in\n   which it is easy to get access to all aspects of the outline in which the\n   script is embedded. This is a major advance in scripting. It allows you to\n   'bring scripts to data', i.e., any part of an outline. In particular, it is\n   very easy to create **editing scripts** that automate what would otherwise be\n   boring and repetitive editing tasks.\n\n", "children": []}, {"h": "Leo outlines aren't your average outline", "gnx": "ekr.20101025080245.6082", "b": "Earlier I said that *any* node can be built from other nodes, and *any* node can\nbe used by any other node. It takes a very special kind of outline for this to\nbe possible. In a typical outline, such as Emacs outline mode, for example,\nnodes appear exactly once in the outline. This makes it impossible to 'reuse'\nnodes in multiple places. Leo removes that limitation: any outline node can be\n**cloned**, and clones can appear in as many places in an outline as you like.\nAlthough clones may look distinct on the screen, at the data level\n**each clone is exactly the same node**.\n\nEarlier I said that you can think of nodes as representing 'organization' or\n'structure' or 'views' or even 'architecture'. Clones are the crucial feature\nthat allows this point of view. For example, we can build up multiple 'views' of\ndata in an outline using clones as follows:\n\n- Create a 'view node' that will represent a *user-specified* view.\n\n- Clone all nodes that are to be part of the view, and move them so that each\n  clone is a child of the view node.\n\nThat's about all there is to it. The view node, and its children *is* a new view\nof the outline. This notion of 'view' is so important that Leo supports it\ndirectly. Leo's **chapters** are simply views created as I have just described.\nWhen you select one chapter, you only see the nodes of that chapter in Leo's\noutline pane.\n\n", "children": []}, {"h": "Conclusions & encouragements", "gnx": "ekr.20101025080245.6083", "b": "So Leo offers a new way to understand, organize and manipulate *any* kind of\ncomplex data, including computer programs, *designs* of computer programs, web\nsites, personal data, whatever. The Aha that I invite you to experience is this:\nOutlines are more than mere eye candy. Having organization be real data creates\nan entirely new dimension, literally and figuratively, in computer programming,\ncomputer design and data organization, including web-site design, database\ndesign, etc. Leo's commands use headline and body text in many creative ways. So\ncan you and your scripts. It's easy, it's fun, and it's revolutionary.\n\nThat's about it, except for some words of caution and advice:\n\n1. Leo has been under active development for over 10 years. The new world\n   created by nodes is rich and varied. You won't learn it all in a day or so.\n   Please be patient. Start by learning Leo's basic features as explained in the\n   tutorial. You can learn more advanced features later.\n\n2. Those of you who are comfortable with Emacs should feel pretty much at home\n   with Leo. Leo has shamelessly stolen the best features of Emacs, including\n   the minibuffer and many Emacs-like commands.\n\n3. For those of you who are *not* comfortable with Emacs, please understand that\n   you do *not* need to understand all of Leo's commands in order to use Leo.\n   Start by ignoring the minibuffer. Later, the minibuffer can become your\n   friend, but you can get the Aha! without it.\n\nEdward K. Ream\nJuly, 2007\n", "children": []}, {"h": "What people are saying about Leo", "gnx": "ekr.20050831184021.4", "b": "", "children": ["ekr.20100805165051.7150"]}, {"h": "@file testimonials.txt", "gnx": "ekr.20100805165051.7150", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050830074716"]}, {"h": "@rst html\\testimonials.html", "gnx": "ekr.20050830074716", "b": "###################################\nWhat People Are Saying About Leo\n###################################\n\n.. contents::\n    :depth: 2\n\n.. index:: What people are saying about Leo\n", "children": ["ekr.20050830075229", "ekr.20050830074815.1", "ekr.20050830074815.2", "ekr.20050830074815.3", "ekr.20050830074815.4", "ekr.20050830074815.5", "ekr.20050830074815.6", "ekr.20050830074815.8", "ekr.20050830074815.9", "ekr.20050830074815.10", "ekr.20050830074815.11"]}, {"h": "@rst-no-head Links", "gnx": "ekr.20050830075229", "b": ".. Relative links...\n\n.. _quotes:         testimonials.html\n.. _toc:            leo_TOC.html\n", "children": []}, {"h": "Leo is revolutionary", "gnx": "ekr.20050830074815.1", "b": "\"I am using Leo since a few weeks and I brim over with enthusiasm for it. I\nthink it is the most amazing software since the invention of the spreadsheet.\"\n\n\"We who use Leo know that it is a breakthrough tool and a whole new way of\nwriting code.\" -- Joe Orr\n\n\"I am a huge fan of Leo. I think it's quite possibly the most revolutionary\nprogramming tool I have ever used and it (along with the Python language) has\nutterly changed my view of programming (indeed of writing) forever.\" -- Shakeeb\nAlireza\n\n\"Thank you very much for Leo. I think my way of working with data will change\nforever... I am certain [Leo] will be a revolution. The revolution is as\nimportant as the change from sequential linear organization of a book into a\nweb-like hyperlinked pages. The main concept that impress me is that the source\nlisting isn't the main focus any more. You focus on the non-linear,\nhierarchical, collapsible outline of the source code.\" -- Korakot Chaovavanich\n\n\"Leo is a quantum leap for me in terms of how many projects I can manage and how\nmuch information I can find and organize and store in a useful way.\" -- Dan\nWinkler\n\n\"Wow, wow, and wow...I finally understand how to use clones and I realized that\nthis is exactly how I want to organize my information. Multiple views on my\ndata, fully interlinkable just like my thoughts.\" -- Anon\n\n\"Edward... you've come up with perhaps the most powerful new concept in code\nmanipulation since VI and Emacs. -- David McNab\n\n\"Leo is...a revolutionary step in the right direction for programming.\" -- Brian\nTakita\n", "children": []}, {"h": "Leo is a showcase Python application", "gnx": "ekr.20050830074815.2", "b": "\"Thanks for a wonderful program \u2013 everybody should be using it! It blows the\nsocks off that Java Mind mapping software that won project of the month a while\nback on sourceforge!\" -- Derick van Niekerk.\n\n\"A few years back I would have said Zope was #1 Python showcase, but I agree\n100% that Leo is tops now.\" -- Jason Cunliffe\n\n\"Leo is the most interesting Python project I know of...I see lots of stuff\nposted on the Daily Python page, but I usually yawn and come over to this forum\nto see what's cooking.\" -- Anon\n\n..  \"Leo is the best Tkinter application ever written. It convinces me that Tkinter\n..  can really *do something*, and do [it] well.\" - Anon\n\n\"What an original synthesis of different ideas, why can't other Open Source\nprojects change the way I think?\" -- Anon\n", "children": []}, {"h": "Leo is fun, even addicting", "gnx": "ekr.20050830074815.3", "b": "\"When first I opened Leo, it was out of curiosity. But having used it...I'll\nnever go back. They'll have to pry Leo out of my cold, dead fingers! Seriously,\nit should be renamed 'Crack Cocaine' because it's that addictive. I'm ready to\nstart a 12-Step group.\" -- Travers A. Hough\n\n\"I feel addicted to programming again...in fact [Leo] has resurrected a dead\nproject of mine :) The Outline has proven most liberating in terms of testing\nideas out.\" -- Anon\n\n\"I have been absolutely seduced by Leo over the past few days. I tell you, I can\nnot put it down. I feel like a kid with a shiny new bike...I'm already bursting\nwith new ways I'd like to use the tool in the future.\" -- Lyn Adams Headley\n\nThanks for the great work--I love Leo!!! -- Josef Dalcolmo\n\nLeo has simplified updating and creating new scripts and .bats keeping similar\ninformation in the same place. there is almost an addictive withdrawal effect\nwhen I can complete an operation in so much less time with Leo & python than I\nhad become used to. -- Anon\n", "children": []}, {"h": "Leo is a flexible, powerful IDE", "gnx": "ekr.20050830074815.4", "b": "\"[Leo] should either replace or greatly augment the development tools that I\nuse.\" -- Zak Greant\n\n\"Leo is a marriage of outlining and programming. Pure genius. The main reason I\nam impressed with this tool is that it doesn't affect your choice of tools. You\ncan use whatever IDE for whatever language and switch back and forth between Leo\nand it.\" -- Austin King\n\n\"Leo is the best IDE that I have had the pleasure to use. I have been using it\nnow for about 2--3 months. It has totally changed not only the way that I\nprogram, but also the way that I store and organize all of the information that\nI need for the job that I do.\" -- Ian Mulvany\n\n\"I only have one week of Leo experience but I already know it will be my default\nIDE/project manager...people complain about the lack of a project manager for\nthe free/standard Python IDE's like Idle. Leo clearly solves that problem and in\na way that commercial tools can't touch.\" -- Marshall Parsons\n\n\"I have been using Leo for about 3 weeks and I hardly use my other programming\neditor anymore...I find it easy and enjoyable to use. I plan to adopt it as my\npresentation tool for code reviews.\" -- Jim Vickroy\n\n\"I'm absolutely astounded by the power of such a simple idea! It works great and\nI can immediately see the benefits of using Leo in place of the standard flat\nfile editor.\" -- Tom Lee\n\nI think you're really showing what open source can do and your current\ntrajectory puts you on track to kick Emacs into the dustbin of computing\nhistory. -- Dan Winkler\n", "children": []}, {"h": "Leo is a superb outliner", "gnx": "ekr.20050830074815.5", "b": "\"Word outlines are very useful. But Leo makes Word look like a clunky toy.\"\n--Joe Orr\n\n\"Leo is an interactive editor for organizing text fragments hierarchically and\nsequentially into one or more files and hierarchical folders, without arbitrary\nlimits on the number and size of text fragments and the depth of the\nhierarchy...Leo is a tool for combining hierarchically and sequentially\norganized text fragments into text files, hierarchically grouped into folders,\nwith hierarchical or sequential organization of text within the files, and\nwithout arbitrary limits on the size and number of files and the depth of the\nhierarchy of folders and text nesting within the files.\" -- Alex Abacus\n\n\"Leo reminds me a great deal of things I loved when I used Userland's Frontier\n(an outlining cms with a native oodb) - but Frontier wasn't hackable enough for\nme, and it wasn't oriented towards coding..., and you couldn't round-trip\nrendered pages (big Leo win). This is really a super tool - in a matter of days\nI've started to use it on all my projects and I still haven't figured out how I\nlived without it.\" -- John Sequeira\n\n\"Leo is EXACTLY the kind of outliner I was looking for--fantastic job!\"\n-- Steve Allen\n\n\"If you are like me, you have a kind of knowledge base with infos gathered over\ntime. And you have projects, where you use some of those infos. Now, with\nconventional outliners you begin to double these infos, because you want to have\nthe infos needed for the project with your project. With Leo you can do this\ntoo, but if you change text in one place IT IS UPDATED IN THE OTHER PLACE TOO!\nThis is a feature I did not see with any other outliner (and I tried a few).\nAmazing! Leo directly supports the way I work!\" -- F. Geiger\n", "children": []}, {"h": "Leo is an excellent PIM", "gnx": "ekr.20050830074815.6", "b": "\"Another day, another breakthrough using Leo--now I realize Leo is the best URL\nbookmark manager there is. No more bookmarks menus or favorites lists inside the\nbrowser for me. With the @url directive I can just double click on the URL to\nopen it in my browser. Leo lets me arrange the URLs in a hierarchy (or multiple\nhierarchies), attach notes to them, save clippings of things I read on the\nsites. It's sooo much better than anything the browsers have built in and it\nlets me easily use different browsers on different platforms and different\nmachines (try that with the browsers' built-in bookmark managers).\" -- Dan\nWinkler\n\n\"I am an amateur photographer. I use plain old 35mm. film for my pictures. Over\nthe weekend, I used Leo to organize my lists of pictures. It is quite helpful--I\ncan have separate nodes for pictures I have enlarged, as well as pictures I have\nsubmitted to our local camera club. Thanks!\" -- Rich Reis\n\n\"Cloning is pure genius!... Leo's cloning facility, allows me to create several\nviews on the CFA course material. My main view follows the prescribed study\nguide. Another view is organized like the textbooks. Yet another gives me a\nglossary of terms. And when I'm done, I'll have some nice libraries...I can\nre-use later in other projects.\" -- Michael Manti\n", "children": []}, {"h": "Leo is a superb documentation tool", "gnx": "ekr.20050830074815.8", "b": "\"I've written documentation in WordPerfert, Ventura, Word, PageMaker, and\nFrameMaker and even though they create wonderfully looking and useful documents,\nthey've never been able to do what I've been looking for. HTML, compiled help\nfiles, and later PDF came closer, but still not there...I think I've found it in\nLEO, a way to make a \"living\" document. A document built out of discrete parts\nthat can be re-organized on the fly to meet the needs of a varying\naudience...I've already started converting the IT Procedures manual from Open\nOffice to LEO because I know it's going to be much more useful to me and anyone\nelse...just the possibility of keeping system maintenance scripts in the IT\nmanual is mind boggling.\" -- David Nichols\n\n\"With the help of the rst2 plugin, [Leo is] the best outliner I have yet\nencountered for writing the early stages of academic papers.\"\n\n\"A Leo file is an ideal documentation tool, collecting the assorted readme.txt\nfiles, the comments from the source files...as well as the config files\nthemselves.\" -- Kent Tenney\n", "children": []}, {"h": "Leo simplifies the understanding of complex systems", "gnx": "ekr.20050830074815.9", "b": "\"Just as structured programming reveals and disciplines the flow control of a\nprogram, [Leo] allows the designer to reveal and discipline structure at many\nlayers simultaneously: data structures, object structure, entity-relationship\nstructure, client-server structure, design pattern structure, temporal\nstructure, project management structure, and any other structure relevant to the\nsystem.\" -- Steven P. Schaefer\n\n\"A funny observation with Leo is that when I 'Leo-ise' other people's code, Leo\nmakes the code's structure so transparent that design faults become very quickly\napparent. For example, maintenance pain caused by lack of factorization.\" --\nDavid McNab\n\n\"Leo is a powerful tool for organizing text into tree structures, and for just\ngenerally attacking a number of problems from a tree-based perspective.\" -- Joe\nOrr\n\n\"I found this blog entry by someone (a talented former coworker of mine\nactually) complaining about some poorly written code she had to maintain:\nhttp://snippy.ceejbot.com/wiki/show/start/2003/01/29/001 She said: 'You'd need a\nbulldozer to start refactoring it.' That was my cue to write a long message\nexplaining that there is indeed such a bulldozer and it's called Leo. (You can\nsee my message there as a reply to her original posting.) I gave her my recipe\nfor how to get someone else's messy, scary code into Leo and how to break it\ndown into manageable chunks.\" -- Dan Winkler\n\n\"Ed, you continue to push the envelope. The amazing thing is that the footprint\nisn't doubling every few months like it would be in another designer's hands.\nAdding features by removing constraints, hot refactoring while adding unit\ntests. Forget the book. I would pay to see the movie.\"\n", "children": []}, {"h": "Leo is stable, well designed and well supported", "gnx": "ekr.20050830074815.10", "b": "\"I am extremely impressed at how stable and useful Leo appears to be.\" -- Marcus\nA. Martin\n\n\"Leo is amazingly stable. Docs are often weak with Open Source Software. Not so\nLeo: Leo is unusually well documented.\" -- F. Geiger\n\n\"Leo is unimaginably useful and I always find new things it already knows(!) how\nto do. Indeed I am amazed by the never-ending resources and patience Edward is\nputting into it and its users community. Excellent.\" -- Gil Shwartz\n\nI feel strongly that Ed Ream, our ever-patient, ever-productive Leo architect\ndeserves a nomination [for the ActiveState OpenSource Award.] Among other\nreasons, for:\n\n- Delivering the first usable visual literate programming tool.\n- Adding a vast abundance of new features.\n- Making possible a previously unimaginable amount of leverage in code editing.\n- Eliminating vast amounts of menial programming labour.\n- Tirelessly and patiently supporting users, and catering to a wide range of\n  feature requests. -- David McNab\n\n", "children": []}, {"h": "Longer quotes...", "gnx": "ekr.20050830074815.11", "b": "", "children": ["ekr.20050830074815.12", "ekr.20050830074815.13", "ekr.20050830074815.14", "ekr.20050830074815.15", "ekr.20050830074815.16"]}, {"h": " Speed Ream's slashdot article", "gnx": "ekr.20050830074815.12", "b": "September 3, 2002\n\nHello, my full name is David Speed Ream. I am known as Speed to friends and\nenemies alike, but I gladly answer to David or most any other handle. I am an\nunabashed and biased fan of Leo, the fact that it was written by my brother\nEdward only slightly coloring my already colored glasses. I have been testing\nand using Leo in software production for over 4 years. My company currently has\nover 50,000 lines of code in over 100 source files that are written using Leo.\n\nMy comments are from two points of view, the first being software project\nmanager for a complicated, multi-module software product, and the second being\nas a production line coder. For me, Leo\u2019s greatest and only real drawback is the\nlearning curve. This learning curve can be shallow is if all that is required is\nthat someone code using Leo. However, in our company we allocate 40 to 80 hours\n*on top* of the normal coding load for someone to come up to speed on Leo. The\nROI (return on investment) is calculated by me to be on the order of 3 months.\nSo if I hire a consultant for less than 3 months, I don\u2019t teach him Leo, even\nthough all source code in our company must reside in Leo files for the reasons I\nwon\u2019t go into now.\n\nI consider that my coders are 15 to 30 percent more efficient in their daily\noperations than my competition\u2019s people. This indefensible claim of mine is\nbased on the changes in my productivity as Leo grew from a test document\nproduction tool to the primary production method for all our assembly, c and cpp\nsource code.\n\nPersonally, I hate to deal with documentation when I write code, except:\n\n1) When I am first sitting down to solve a new problem.\n   Then the documentation becomes quite long-winded and pontificatory,\n   as if I were the only one on earth smart enough to solve the problem - or\n2) When I come back to code I or someone else has written and find the documentation insufficient to\n   understand the code without study (seems to be most of the time).\n\nSo I do not require my engineers or myself to do a great job of documentation,\nnor do I use Leo for that purpose. Rather, it is Leo\u2019s outlining and organizing\nability, and Leo\u2019s ability to create source files from within the outline that\ngive me what I think is a tremendous competitive advantage. Each of my company\u2019s\nproducts run on all versions of windows from Win 3.1 to XP. In our flagship\nsoftware piece, there are ten main modules, and each module is maintained by one\nsingle Leo file. In the CODEC module, one Leo file named compress.leo organizes\nand creates seven .asm files, forty-four .c files, twenty .h files, two .def\nfiles, four .mak files, etc. etc. etc. This one file can be checked out from\nsource code control and given to an engineer for the addition of a new feature.\n\nIn it are contained all the known issues for the CODEC, each issue arranged in\nits own clone section. One clone section groups together every routine, variable\nor type definition that must change between different versions of Windows. These\nsections could be from six different c source files, two assembly files, and\neight .h files. Another clone section groups together those sections relating to\nmemory problems, which change according to the memory configuration and TSR\nconfiguration (or lack thereof) on the target machine. Another clone section\ngroups sections that fail (or don\u2019t fail) if the routine in question was\naccidentally run during the dreaded \u2018interrupt time\u2019. Another clone section is a\nsection containing clones, each of which is named after the major bug that was\nfixed when the engineer who fixed the bug grouped a bunch of routines,\ndefinitions, etc. together to fix the bug.\n\nNone of the above clone sections was \u2018designed\u2019 into the document. Just the\nopposite happens. When the codec was first written, there was just a single Leo\nfile with a bunch of sections for each c routine or assembly module. As the\nproduct grew and was tested on various platforms, each failure of the module was\norganized into clones each time a failure was fixed. This is what I call \u201cSELF\nDOCUMENTING CODE\u201d. This has nothing to do with me sitting and documenting\nanything. Its just that the STRUCTURE of a bug fix (or product enhancement)\nlives on long after the coding is done, as long as no one is foolish enough to\ndelete the cloned sections that \u2018DOCUMENT\u2019 what happened.\n\nIn actual practice, this organizational \u2018history\u2019 is so powerful that I can\u2019t\nbegin to describe it. A \u2018REVERSE LEARNING CURVE\u2019 happens when an engineer gets a\nLeo file that already has the \u2018interrupt time sensitive\u2019 routines grouped\ntogether by the last unfortunate soul who had to work on them. There may not be\nany more written documentation, but the knowledge contained in the structure can\nbe breathtaking. It is certainly time saving. I find this particularly true in\nmy own case. Often I\u2019ll look at some code that seems totally unfamiliar and\nthink \u2018what idiot wrote this crap\u2019. Then I\u2019ll look at the version control\ncomments and realize that I wrote the crap. Then for sure I know the\ndocumentation is non-existent, but the clones I used to develop it are still\nthere, and they always serve to refresh my memory in an indescribable way.\n\nEnough of this commentary, I just looked at the clock. Best wishes to anyone\nwilling to try Leo for a week. I hope you will be glad you did.\n", "children": []}, {"h": "Joe Orr", "gnx": "ekr.20050830074815.13", "b": "The Word outlines are very useful. But Leo makes Word look like a clunky toy.\n\n#1 Reason would probably be clone nodes. One node can point to another. Another\nway of putting this is is that a leaf can be on more than one tree. For\nexample, suppose you have a list of recipes. You simultaneously put a single\nrecipe under multiple categories or even multiple hierarchies. You could put \"3\nbean enchilada\" simultaneously under Recipes-Mexican and Food-Gas. Another\nexample would be, if you are a biologist trying to decide under which genus to\nput a new species, you could put the species under two simultaneously. In\neffect, you can build a 3-D tree. For a further illustration see\nhttp://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm\n\n#2 Reason would probably be that Leo outlines can be embedded in external text\nfiles. So, a Leo outline is more than an outline, it is a meta-structure that\ncan be added to another text without changing that text, but rather providing\nan external road map to the text. Microsoft Word has a text (xml) version with a\ncommenting convention, so Leo can even be used to add outlines into Word docs,\nalthough it isn't set up to do that now. For example, see\nhttp://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm In this case, the upper\nwindow of Leo is the meta-structure, and the bottom window is the file to which\nthe meta-structure is being applied, viewed one node at a time.\n\nI may not have made #2 very clear, but it is actually a very useful feature. It\ntakes some getting used to before one sees all of the possibilities tho. One\nway to think of it is that Leo allows you to throw external documents into your\noutline, and yet the external document remains independent and can still be\nedited separately.\n\nSome other cool things about Leo which Word doesn't feature:\n1. Pure xml output that is easy to transform into other formats (next\nversion of Word will have true XML format, but not as easy to work with).\nOne consequence of this is that Leo files can be transformed pretty easily\nto web pages with their outlining capability intact.\n2. Easy to add features since is programmed in Python and open source. Maybe\nyour average user can't start hacking on it, but a surprising amount can be\ntacked on...\n.. by flipping through the Tk manual.\n3. Free, opensource, multi-platform\n4. Leo is scriptable with Python. It should be possible to build a Tickler\ninto Leo using Python scripting, for example.\n", "children": []}, {"h": "Dan Winkler", "gnx": "ekr.20050830074815.14", "b": "First of all, kudos to you for the excellent progress you've been making with\nLeo. I upgraded today after about three months of using and older version and I\nwas thrilled to see all the great improvements that have happened so fast. I\nespecially love the ability to go to next clone. I think you're really showing\nwhat open source can do and your current trajectory puts you on track to kick\nEmacs into the dustbin of computing history.\n\nSo today I copied all my data (personal information manager and project\nmanagement stuff) out of my old outliner (ThoughtManager, which syncs with and\nruns on the Palm) and put it into Leo. It took me hours to do it and then to\nrearrange it the way I really wanted it. But having the ability to make clones\nand have different ways to view my data is, as you know, fabulous. In my case,\nfor personal information and project management things, I used the flexibility\nof clones to allow me to see my data in several different views: 1) by project,\nthe logical hierarchical breakdown by topic, 2) by person, so whenever I'm\ntalking to someone I can easily see all the pending items related to them which\nmay be spread over multiple projects, 3) by priority, so I can see what needs to\nget done sooner and what can wait for later and, 4) a special case of priority\ncalled \"Today\" for the things I'm going to focus on in the coming hours.\n\nNow here's why I don't miss the ability of my old outliner to synch the entire\noutline with the Palm. It turns out the main thing I really want in the Palm is\nthe top category \"Today\" so all I have to do is have Leo flatten that one\nheading into a text file (and it kindly remembers the name and directory of the\nfile I used last time) and then I'm done because I've told the Palm Hotsync\nmanager that that file should be sent to Palm memo pad every time I synch. The\nPalm Hotsync manager does a nice job of sending a text file to the Palm memo pad\nand even breaks the file up into multiple memo records if it's too big to fit in\njust one. So that gives me enough to be able to browse (or full text search) the\nsmall amount of data that I really want right inside my Palm (which is also my\ncell phone). Quick and dirty but it works.\n\nFor times when I want my whole outline with me, Leo wins again because thanks to\nits cross platform nature I can take my whole outline with me on my Mac iBook,\neven though I usually edit it on a Windows PC (which is the only kind of machine\nmy old outliner would run on). Quite frankly, although my old outliner was able\nto shoehorn the whole thing into my palm/cellphone, it was a pain to access it\non the small screen and slow processor. Now when I anticipate I'll need the\nwhole thing, for example when I'm going to a meeting, I can put it on my Mac\niBook (under X and Fink for now until Python can do it native under Aqua) and\nhave real, full access to it all.\n\nI think now in addition to being great for programming Leo is also a great PIM.\nBeing able to flatten a strategically chosen portion of the outline into a known\nfile name that the Palm synch manager has been told to send to the Palm on every\nsynch does the trick for me. I wonder if you would consider something like an\n@flatten directive so I can have that done automatically for me every time I\nsave my outline? For now it's up to me to flatten the node I want manually,\nalthough once I've done that the transfer to the Palm is automatic.\n\nYou're my hero! Thank you so much.\n", "children": []}, {"h": "Dan Winkler 2", "gnx": "ekr.20050830074815.15", "b": "Another day, another breakthrough using Leo -- now I realize Leo is the \nbest URL bookmark manager there is.  No more bookmarks menus or \nfavorites lists inside the browser for me.  With the @url directive I \ncan just double click on the URL to open it in my browser.  Leo lets me \narrange the URLs in a hierarchy (or multiple hierarchies), attach notes \nto them, save clippings of things I read on the sites.  It's sooo much \nbetter than anything the browsers have built in and it lets me easily \nuse different browsers on different platforms and different machines \n(try that with the browsers' built-in bookmark managers).  \n\nWhen using Leo as a project manager and personal information manager as \nI do I can heavily annotate every task and project with helpful and \nrelevant URLs.  And since URLs can be of the file:// form, they're not \njust for web pages or HTML documents;  I can link to any file on my disk \nof any type to be opened by any program.\n\nLeo is a quantum leap for me in terms of how many projects I can manage \nand how much information I can find and organize and store in a useful \nway.  I'm a data-mining army of one now and the web is my playground. \nEvery time I find a web page that has interesting links to others, \nthose links get stored in my Leo outline too, right where I can find \nthem and make practical use of them.  I can easily accept dozens of \nvaluable links every day and integrate them into what I'm doing in a way \nthat I'm confidant they won't get lost or forgotten.  Before I always \nused to get bogged down by the difficulty of managing bookmarks inside \nthe browser.  But now I'm no longer the victim of information overload \nburied in the knowledge landslide of the Internet;  instead I'm the \nprofessional strip miner with the world's biggest bulldozer.  I eagerly \nplunge into mountains of data and emerge with all the valuable \ninformation nuggets neatly stored and organized.  And my storehouse of \nknowledge is a flexible thing where I can reorganize and prioritize and \nmassage the data to my heart's content as I learn more about it and \ndecide to use it in different ways for different purposes.  It's the \ndifference between the pick axe and the steam shovel for me.\n", "children": []}, {"h": "Dan Winkler 3", "gnx": "ekr.20050830074815.16", "b": "This year my accountant is getting a beautiful printout generated by LaTeX and\nLeo. I have a complicated tax situation this year, but I got it all laid out and\norganized in Leo. Then I had each of the nodes that had something my accountant\nneeds to see write the data out to a file in the form a LaTeX table.\n\nSometimes a row of a table would have a result that was calculated by adding up\na list of numbers. For that I used the modern day equivalent of an adding\nmachine paper tape -- I stored a lisp s-expression in a Leo comment. I like\ns-expressions for this because once I put the opening \"(+\" on one line and the\nclosing \")\" on another line, I can fill in additional numbers just by typing\nthem and can even annotate them with comments. So in the middle of generating a\nLaTeX file I might have something like this::\n\n    @\n    (+\n    1165.26 1823.70 ; May 2002\n    123.38 ; June 2002\n    13.50 ; July 2002\n    13.21 ; October 2002\n    55.25 ; November 2002\n    )\n    @c\n\nThat's an annotated record of how I arrived at the number the accountant will\nactually see. I can just paste it into any lisp or scheme interpreter and get\nthe total. Adding additional numbers is easy.\n\nFor next year, I think I might take this a step further. What I did this year is\ngood for adding up numbers to get a total for one row of a LaTeX table. But it\nturns out I'd also like some more processing done on those tables (which I had\nto do by hand this time) -- I'd like the rows sorted in reverse order by\nmagnitude (so that the big numbers jump out at you from the start of the tables)\nand I'd like a total of all the rows in the table. So I think next year, instead\nof having an s-expression that computes the total of one row for me, I think\nI'll use s-expressions that generate whole tables, formatted for LaTex, from the\nunderlying data. So I'm thinking next year my s-expressions might look more like\nthis::\n\n    @\n    (table \"Widget Related Expenses\"\n        (\"widget insurance\" (+\n                        1165.26 1823.70 ; May 2002\n                        123.38 ; June 2002\n                        13.50 ; July 2002\n                        13.21 ; October 2002\n                        55.25 ; November 2002\n                      ))\n         (\"widget shipping\" (+\n                        472.15 651.94 ; May 2002\n                        54 ; June 2002\n                       ))\n         (\"widget cleaning\" (+\n                        165.26 183.70 ; May 2002\n                        123.38 ; June 2002\n                        13.50 ; July 2002\n                        13.21 ; October 2002\n                        55.25 ; November 2002\n                       ))\n    )\n    @c\n\nThe job of that \"table\" function would be to return the LaTeX code needed to\ndisplay a table with the category names and values, sorted descending by\nmagnitude, with the total displayed. It's sort of a poor man's way of doing a\nspreadsheet inside Leo and then making it look great using LaTeX. The idea would\nbe as I wanted to add more data, I'd add it to the s-expression and then\nreevaluate the whole thing by pasting it into a lisp interpreter and then\ncopying the result back into the same Leo node for LaTeX to process.\n\n-- Dan\n", "children": []}, {"h": "Basics", "gnx": "ekr.20101025080245.5795", "b": "", "children": ["ekr.20050831195331.1", "ekr.20101007100904.4372", "ekr.20100731112744.7267", "ekr.20091130111843.6787", "EKR.20040524104904.99", "EKR.20040524104904.211"]}, {"h": "FAQ", "gnx": "ekr.20050831195331.1", "b": "", "children": ["ekr.20100805165051.7151"]}, {"h": "@file FAQ.txt", "gnx": "ekr.20100805165051.7151", "b": "@language rest\n@pagewidth 75\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050830115714"]}, {"h": "@rst html\\FAQ.html", "gnx": "ekr.20050830115714", "b": "####\nFAQ\n####\n\nThis is Leo's Frequently Asked Questions document.\n\n.. index:: FAQ\n\n.. contents::\n    :depth: 3\n", "children": ["ekr.20050830120007", "ekr.20090212054250.5", "ekr.20070623145346", "ekr.20050830115714.1", "ekr.20101025080245.6084", "ekr.20050830115714.13", "ekr.20050830115714.26", "ekr.20050830115714.118", "ekr.20050830115714.76", "ekr.20071026055929"]}, {"h": "@rst-no-head Links", "gnx": "ekr.20050830120007", "b": ".. Links used in this document...\n\n.. ----- External links.\n\n.. _decorator:          http://www.python.org/peps/pep-0318.html\n.. _docutils:           http://docutils.sourceforge.net/\n.. _unicode:            http://www.unicode.org/\n.. _`bzr repository`:   https//code.launchpad.net/leo-editor/\n\n.. ----- Relative links into Leo's documentation.\n\n.. _`Associating Leo with .leo Files`:  installing.html#how-to-associate-leo-with-leo-files-on-windows\n.. _`How to install Leo on Windows`:    installing.html#how-to-install-leo-on-windows\n\n.. _`CWEB mode`:                                directives.html#cweb-mode\n.. _command:                                    commands.html\n.. _commands:                                   commands.html\n.. _`quick start for programmers`:              intro.html#quick-start-for-programmers\n.. _`rst3 plugin`:                              rstplugin3.html\n\n.. _tutorial:                                   intro.html\n.. _`Leo 4.0: Eliminating error 'recovery'`:    history.html#leo-4-0-eliminating-error-recovery\n.. _`History of Leo`:                history.html\n.. _`run Leo in a console window`:              installing.html#running-leo-from-a-console-window\n.. _`console window`:                           installing.html#running-leo-from-a-console-window\n\n.. ----- References to the glossary: the glossary now contains references to the tutorial.\n.. _`@asis`:                glossary.html#asis-trees\n.. _`@auto`:                glossary.html#auto-trees\n.. _`@file`:                glossary.html#file-trees\n.. _`@others directive`:    glossary.html#others\n.. _`@nosent`:              glossary.html#nosent\n.. _`@shadow`:              glossary.html#shadow-trees\n.. _`@thin`:                glossary.html#thin-trees\n.. _`@unit`:                glossary.html#unit\n.. _`body text`:            glossary.html#body-text\n.. _cweb:                   glossary.html#cweb\n.. _directive:              glossary.html#directive\n.. _directives:             glossary.html#directives\n.. _`external file`:        glossary.html#external-file\n.. _`external files`:       glossary.html#external-files\n.. _headline:               glossary.html#headline\n.. _headlines:              glossary.html#headlines\n.. _node:                   glossary.html#node\n.. _nodes:                  glossary.html#nodes\n.. _outliner:               glossary.html#outliner\n.. _sections:               glossary.html#sections\n.. _`section name`:         glossary.html#section-name\n.. _`section names`:        glossary.html#section-names\n.. _sentinels:              glossary.html#sentinels\n.. _`sentinel line`:        glossary.html#sentinel\n.. _`sentinel lines`:       glossary.html#sentinel\n.. _setting:                glossary.html#setting\n.. _settings:               glossary.html#settings\n", "children": []}, {"h": "Getting Leo", "gnx": "ekr.20090212054250.5", "b": "", "children": ["ekr.20090212054250.6", "ekr.20080603124653.1", "ekr.20090212054250.7"]}, {"h": "Where can I get official releases of Leo?", "gnx": "ekr.20090212054250.6", "b": "You can get the latest official releases of Leo at\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nHowever, if at all possible, it is better to use bzr to get the latest sources.  See the next entry.\n", "children": []}, {"h": "How do I use bzr to get the latest sources from Leo's launchpad site?", "gnx": "ekr.20080603124653.1", "b": "Many users will want to track the development version of Leo, in order to stay\non top of the latest features and bug fixes. Running the development version is\nquite safe and easy, and it's also a requirement if you want to contribute to\nLeo.\n\n1. First, you need to get Bazaar (bzr) from http://bazaar-vcs.org. For windows\n   users we recommend the standalone installer - the python installer may have\n   problems pushing to Launchpad. Plain bzr installer only contains the command\n   line version, so you might want to augment that with a friendly GUI - qbzr is\n   recommended as it's the easiest one to install. It provides command like\n   'bzr qlog', 'bzr qannotate' etc.\n\n2. Get Leo from launchpad by doing::\n\n    bzr branch lp:leo-editor\n\nAnd that's it! You can run the launchLeo script (in the top-level branch directory) directly.\nWhen you want to refresh the code with latest modifications from Launchpad, 'run bzr pull'.\n\nIf you make modifications to Leo (with the interest in sharing them with the Leo\ncommunity), you can check them in to your local branch by doing 'bzr checkin'.\nNow, to actually request your changes to be merged to Leo trunk, you need a\nLaunchpad account with RSA keys in place. There is showmedo video about how to\naccomplish this on Windows using puttygen and pageant at\nhttp://showmedo.com/videos/video?name=1510070&fromSeriesID=151.\n\nAfter your Launchpad account is set up, go to\nhttps://launchpad.net/leo-editor, choose Code tab -> Register Branch, select\nBranch type \"Hosted\" and fill in descriptive details about the branch. After\nthat, go to the branch home page from Code tab again, and copy-paste the push\ncommand line to terminal. For example, for branch::\n\n https://code.launchpad.net/~leo-editor-team/leo-editor/mod_rclick\n\nThe push command is::\n\n bzr push bzr+ssh://my_name@bazaar.launchpad.net/~leo-editor-team/leo-editor/mod_rclick\n\nYou may wish to add --remember command line option to bzr push, to direct all\nfuture pushes to that location. Then, you only need to execute 'bzr push'.\n\nAfter your branch is pushed, you can email the Leo mailing list and request it\nto be reviewed and merged to trunk.\n\n-- Ville M. Vainio - vivainio.googlepages.com\n", "children": []}, {"h": "How can I get recent bzr snapshots of Leo?", "gnx": "ekr.20090212054250.7", "b": "Daily snapshots are available at http://www.greygreen.org/leo/\n", "children": []}, {"h": "Installing Leo", "gnx": "ekr.20070623145346", "b": "", "children": ["ekr.20090202191501.7", "ekr.20060329101442", "ekr.20070623145346.1"]}, {"h": "Leo's installer failed, what do I do?", "gnx": "ekr.20090202191501.7", "b": "You can simply unpack Leo anywhere and run from there.  You don't need the\ninstaller.\n\nFrom a console window, cd to the top-level leo folder.  Run Leo as follows::\n\n    python launchLeo.py\n\nTo run Leo with Qt look and feel, use the --gui=qt option::\n\n    python launchLeo.py --gui=qt\n\nTo load Leo's source, load leoPyRef.leo::\n\n    python launchLeo.py --gui=qt leo\\\\core\\\\leoPyRef.leo\n", "children": []}, {"h": "Nothing (or almost nothing) happens when I start Leo.  What should I do?", "gnx": "ekr.20060329101442", "b": "Missing modules can cause installation problems.\nIf the installer doesn't work (or puts up a dialog containing no text), you may install Leo from the .zip file\nas described at `How to install Leo on Windows`_.\nHowever you are installing Leo,\nbe sure to `run Leo in a console window`_.\nbecause as a last resort Leo prints error messages to the console.\n", "children": []}, {"h": "Running Python setup.py install from the leo directory doesn't work.  Why not?", "gnx": "ekr.20070623145346.1", "b": "Leo's setup.py script is intended only to create source distributions. It can't\nbe used to install Leo because Leo is not a Python package.\n", "children": []}, {"h": "Learning to use Leo", "gnx": "ekr.20050830115714.1", "b": "", "children": ["ekr.20050830115714.2", "ekr.20050830115714.4", "ekr.20050830115714.7", "ekr.20060111192108", "ekr.20110521135104.18151", "ekr.20110531155858.20559", "ekr.20120229094652.15152"]}, {"h": "What's the best way to learn to use Leo?", "gnx": "ekr.20050830115714.2", "b": "First, read the tutorial_. This will be enough to get you started if you just\nwant to use Leo as an outliner_. If you intend to use Leo for programming, read\nthe `Quick start for programmers`_, then look at Leo's source code in the file LeoPy.leo.\nSpend 5 or 10 minutes browsing through the outline. Don't worry about details;\njust look for the following common usage patterns:\n\n-   The (Projects) tree shows how to use clones to represent tasks.\n\n-   Study @file leoNodes.py.\n    It shows how to define more than one class in single file.\n\n-   Most other files show how to use a single @others directive to define one class.\n\n-   Most methods are defined using @others, *not* section definition nodes.\n", "children": []}, {"h": "Why should I use clones?", "gnx": "ekr.20050830115714.4", "b": ".. _`Clones & views`:   intro.html#clones-views\n\nYou will lose much of Leo's power if you don't use clones.\nSee `Clones & views`_ for full details.\n", "children": []}, {"h": "When is using a section better than using a method?", "gnx": "ekr.20050830115714.7", "b": "Use methods for any code that is used (called or referenced) more than once.\n\nSections_ are convenient in the following circumstances:\n\n-   When you want to refer to snippets of code the can not be turned into methods.\n    For example, many plugins start with the code like this::\n\n    << docstring >>\n    << imports >>\n    << version history >>\n    << globals >>\n\n    None of these sections could be replaced by methods.\n\n-   When you want to refer to a snippet of code that shares local variables with the enclosing code.\n    This is surprisingly easy and safe to do, *provided* the section is used only in one place.\n    `Section names`_ in such contexts can be clearer than method names.  For example::\n\n    << init ivars for writing >>\n\nIn short, I create sections when convenient,\nand convert them to functions or methods if they need to be used in several places.\n", "children": []}, {"h": "When is deleting a node dangerous?", "gnx": "ekr.20060111192108", "b": "A **dangerous** delete is a deletion of a node so that all the data in the node\nis deleted *everywhere* in an outline. The data is gone, to be retrieved only\nvia undo or via backups. It may not be obvious which deletes are dangerous in an\noutline containing clones. Happily, there is a very simple rule of thumb::\n\n    Deleting a non-cloned node is *always* dangerous.\n    Deleting a cloned node is *never* dangerous.\n\nWe could also consider a delete to be dangerous **if it results in a node being\nomitted from an external file.** This can happen as follows. Suppose we have the\nfollowing outline (As usual, A' indicates that A is marked with a clone mark)::\n\n    - @file spam.py\n        - A'\n            - B\n    - Projects\n        - A'\n            - B\n\nNow suppose we clone B, and move the clone so the tree looks like this::\n\n    - @file spam.py\n        - A'\n            - B'\n    - Projects\n        - A'\n            - B'\n        - B'\n\nIf (maybe much later), we eliminate B' as a child of A will get::\n\n    - @file spam.py\n        - A'\n    - Projects\n        - A'\n        - B\n\nB has not been destroyed, but B is gone from @file spam.py! So in this sense deleting a clone node can also be called dangerous.\n", "children": []}, {"h": "Why doesn't Leo support cross-file clones?", "gnx": "ekr.20110521135104.18151", "b": "@language rest \n\nCross-file clones are cloned nodes in one outline that refer to data in another\noutline. This is a frequently requested feature. For example::\n\n    I would absolutely love to have the leo files in different project\n    directories, and a \"master\" leo file to rule them all.\n\nHowever, cross-file clones will never be a part of Leo. Indeed, cross-file\nclones would violate the principle that data should be defined and managed in\nexactly one place. Just as human managers would not willingly accept shared\nresponsibility for even a single line of code, every piece of Leonine data\nshould be the responsibility of one and *only* one .leo file.\n\nThe problem fundamental. If the *same* (cloned) data were \"owned\" by two\ndifferent Leo files we would have a classic \"multiple update problem\" for the\ndata. Each outline could change the data in incompatible ways, and whichever\noutline changed the data last would \"win.\"\n\nTo make such a scheme workable and safe, one would have to devise a scheme that\nwould keep the data in \"component\" .leo files consistent even when the component\n.leo files changed \"randomly\", without the \"master\" .leo file being in *any* way\nin \"control\" of the changes. Good luck :-)\n\nLet us be clear: it's no good having a scheme that works *most* of the time, it\nmust work *all* the time, even with unexpected or even pathological file\nupdates. If it doesn't you are asking for, and will eventually get, catastrophic\ndata loss, without being aware of the loss for an arbitrarily long period of\ntime. Even with a source code control system this would be an intolerable\nsituation.\n", "children": []}, {"h": "How does EKR (Leo's developer) use Leo?", "gnx": "ekr.20110531155858.20559", "b": ".. _`This FAQ entry`: http://webpages.charter.net/edreamleo/FAQ.html#how-can-i-use-leo-to-develop-leo-itself\n.. _`about clones and views`: http://webpages.charter.net/edreamleo/intro.html#clones-views\n\nHere is the workflow I use to develop Leo. The intention is to help\npresent and potential developers use Leo effectively.\n\nOverview\n========\n\n- Develop in an outline containing all of Leo's source files. Close this outline\n  rarely: this keeps the code I am using stable while I'm hacking the code.\n\n- Test in a *separate* .leo file, say test.leo. In fact, I often test in a\n  private file, ekr.leo, so that test.leo doesn't get continually updated on bzr\n  with trivial changes.\n\nThese two points are covered in a bit more detail in `This FAQ entry`_.\n\nAdditional tips\n===============\n\nA. Avoid using the mouse whenever possible. For example, use alt-tab to switch\nbetween windows.\n\nB. Always develop Leo in a console. This allows you to see the output of g.trace.\n\nSpeaking of g.trace, I hardly ever use 'print' because g.trace prints the name\nof the function or method in which it appears. The typical pattern for enabling\ntraces is::\n\n    trace = True and not g.unitTesting\n    if trace: g.trace(whatever)\n\nThis pattern is especially useful when a method contains multiple calls to\ng.trace.\n\nC. I use scripts to open particular Leo files. These are batch files on Windows,\n   and aliases on Linux, but invoking them is the same on either platform::\n\n    all:     opens all my main development files using the qt-tabs gui.\n    t:       opens test.leo.\n    e:       opens ekr.leo.  I use this file for private testing.\n    d:       opens LeoDocs.leo.\n    s:       opens LeoPy.leo.\n    plugins: opens leoPlugins.leo.\n    gui:     opens leoGui.leo.\n    u:       opens unitTest.leo.\n\n  These run Leo with Python 3.x. There are similar scripts, ending in 2, that run\n  Leo with Python 2.x. For example, u2 opens unitTest.leo with Python 2.x.\n  Thus, to run a test, I alt-tab to an available console window, then type 'e' or\n  't' or 'u' or, if I want Python 2.x, 'e2' or 't2' or 'u2'.\n\nD. Use clones to focus attention on the task at hand.\n   For more details, see `about clones and views`_.\n\nE. For thousand of example of my programming style, see leoPy.leo and\n   leoGuiPlugins.leo. The projects section in leoPy.leo contains many examples\n   of using clones to create view nodes. I typically delete the clones in the\n   views shortly before a release.\n\nWriting documentation\n=====================\n\n- Use postings as pre-writing for documentation.\n\n  I don't mind blabbing on and on about Leo because all my posts become\n  pre-writing for Leo's documentation. I simply copy posts to nodes in the\n  \"documentation to-do\" section. At release time, I edit these nodes and put\n  them in Leo's main documentation or the release notes. This posting is an\n  example.\n  \n- Use the vr command to debug reStructuredText documentation. The viewrendered\n   pane updates as you type. This makes Leo a killer app for rST.\n   \nAdministrative tips\n===================\n\n- Never rely on memory.\n\n   A project like this contains thousands and thousands of details. Everything\n   eventually goes into a Leo node somewhere. If it doesn't it surely *will* be\n   forgotten.\n\n- Do easy items first.\n   \n   This keeps to-do lists short, which keeps energy high.\n\nTips for using bzr\n==================\n\nI use the following batch files related to bzr::\n\n    b:      short for bzr\n    b c:    short for bzr commit\n    bs:     short for bzr status\n    tr:     short for cd <path to trunk>\n    main:   short for cd <path to copy of trunk>\n\nThe \"main\" (copy) of the trunk is purely for handling bzr conflicts.\nIf one happens I do this::\n\n    main\n    b pull\n    b merge ../trunk\n    b c -m \"my commit message\"\n    b push\n\nIf the merge goes well (it usually does), I do this to resolve the conflict::\n\n    tr\n    b pull\n", "children": []}, {"h": "How does Leo handle clone conflicts?", "gnx": "ekr.20120229094652.15152", "b": "Some people seem to think that it is difficult to understand how Leo\nhandles \"clone wars\": differing values for a cloned nodes that appear in\nseveral external files. That's not true. The rule is::\n\n    **The last clone that Leo reads wins.**\n\nThat is, for any cloned node C, Leo takes the value of C.h and C.b to\nbe the values specified by the last copy that Leo reads.\n\nThere is only one complication::\n\n    **Leo reads the entire outline before reading any external files.**\n\nThus, if C appears in x.leo, y.py and z.py, Leo will choose the value for C\nin x.py or y.py, depending on which @<file> node appears later in the\noutline.\n\n**Note**: Whenever Leo detects multiple values for C when opening an\noutline, Leo creates a \"Recovered nodes\" tree. This tree contains all the\nvarious values for C, nicely formatted so that it is easy to determine\nwhere the differences are.\n\n", "children": []}, {"h": "Leo in Shared environments", "gnx": "ekr.20101025080245.6084", "b": "", "children": ["ekr.20050830115714.12", "ekr.20090706042206.14718", "ekr.20120229094652.15137"]}, {"h": "How should I use Leo with bzr/git/hg/svn/cvs?", "gnx": "ekr.20050830115714.12", "b": "Using @file trees can eliminate most problems with using Leo in cooperative\n(SCCS) environments:\n\n- Developers should use @file trees to create external files in any kind of\n  cooperative environment.\n\n- If sentinels are frowned upon in your development community, use @auto or\n  @shadow instead of @file.\n\n- The repository contains **reference** .leo files. These reference files should\n  contain nothing but @file nodes. Reference files should change only when\n  new external files get added to the project. Leo's `bzr repository`_ and Leo\n  distributions contain the following reference files: LeoPyRef.leo,\n  LeoPluginsRef.leo and leoGuiPluginsRef.leo. Developers should use\n  local copies of reference files for their own work. For example, instead of\n  using LeoPyRef.leo directly, I use a copy called LeoPy.leo.\n", "children": []}, {"h": "How can I use Leo cooperatively without sentinels?", "gnx": "ekr.20090706042206.14718", "b": "Leo's sentinels add outline structure to source files.\nHowever, those sentinels annoy some people who don't use Leo.\n\nYou can use @auto, @shadow or @nosent trees to edit\nfiles that are shared with those who don't want to see sentinel comments.\n\n- @auto is best for files whose imported outline structure often changes. In\n  most cases, this will be the best option. The drawback of @auto files are a)\n  you can't use clones and b) you can't add your own organizer nodes.\n\n- @shadow will work for files whose outline structure seldom changes.\n  The advantage of @shadow is that you can add your own structure.\n\n- @nosent is appropriate only for files that you alone modify.\n", "children": []}, {"h": "What's the recommended way to upgrade Leo?", "gnx": "ekr.20120229094652.15137", "b": ".. .. http://groups.google.com/group/leo-editor/browse_thread/thread/61019e45d75a6f18/71ee770ee4421222\n\n1. Archive and remove the previous version of Leo.\n2. Download the nightly snapshot zip file.\n3. Unzip it into the same place as the previous version.\n4. Enjoy your up-to-date Leo code...\n\nTo make this work, it's important to keep your folder containing Leo\nseparate from your .mySettings.leo and any data files.\n", "children": []}, {"h": "Using external files", "gnx": "ekr.20050830115714.13", "b": "", "children": ["ekr.20050830115714.14", "ekr.20050830115714.16", "ekr.20050830115714.18", "ekr.20050830115714.19", "ekr.20050830115714.20", "ekr.20050830115714.21", "ekr.20050830115714.24", "ekr.20050830115714.25", "ekr.20060529053407", "shadow.20080825171547.9"]}, {"h": "How do I inhibit sentinels in external files?", "gnx": "ekr.20050830115714.14", "b": "You have two options, depending on whether you want to be able to use sections\nor not.\n\n-   Use @nosent trees.\n    Files derived from @nosent trees contain no sentinels_.\n    However, Leo create the external file just as in @file trees.\n    In particular, Leo expands section references and understands the @others directive.\n\n-   Use @asis trees.\n    Files derived from @asis trees contain no sentinels_.\n    Moreover, Leo does not expand section references in asis trees.\n    In other words, Leo creates the `external file` simply by writing all body text in outline order.\n    Leo can't update the outline unless the external file contains sentinels,\n    so Leo does not update @nosent trees or @asis trees automatically when\n    you change the external file in an external editor.\n", "children": []}, {"h": "How do I prevent Leo from expanding sections?", "gnx": "ekr.20050830115714.16", "b": "Use @asis trees. Files derived from @asis trees contain no sentinels. Leo\ncreates the external file simply by writing all body text in outline order. Leo\ncan't update the outline unless the external file contains sentinels, so Leo\ndoes not update @asis trees automatically when you change the external file in\nan external editor.\n", "children": []}, {"h": "How can I create Javascript comments?", "gnx": "ekr.20050830115714.18", "b": "**Question**: I'm writing a Windows Script Component, which is an XML file with\na CData section containing javascript. I can get the XML as I want it by using\n\\@language html, but how can I get the tangling comments inside the CData\nsection to be java-style comments rather than html ones?\n\n**Answer**: In @file trees you use the @delims directive to change comment delimiters.\nFor example::\n\n    @delims /* */ \n    Javascript stuff \n    @delims <-- --> \n    HTML stuff\n\n**Important**: Leo can not revert to previous delimiters automatically;\nyou must change back to previous delimiters using another @delims directive_.\n", "children": []}, {"h": "How can I disable PHP comments?", "gnx": "ekr.20050830115714.19", "b": "By Zvi Boshernitzan: I was having trouble disabling '<?php' with comments (and\ncouldn't override the comment character for the start of the page). Finally, I\nfound a solution that worked, using php's heredoc string syntax::\n\n    @first <?php\n    @first $comment = <<<EOD\n    EOD;\n\n    // php code goes here.\n    echo \"boogie\";\n\n    $comment2 = <<<EOD\n    @last EOD;\n    @last ?>\n\nor::\n\n    @first <?php\n    @first /*\n    */\n\n    echo \"hi\";\n\n    @delims /* */\n    @last ?>\n", "children": []}, {"h": "How can I use Leo with unsupported languages?", "gnx": "ekr.20050830115714.20", "b": "Here is a posting which might be helpful:\nhttp://sourceforge.net/forum/message.php?msg_id=2300457 The @first\ndirective_ is the key to output usable code in unsupported languages. For\nexample, to use Leo with the Basic language, use the following::\n\n    @first $IFDEF LEOHEADER\n    @delims '\n    @c\n    $ENDIF\n\nSo this would enable a basic compiler to \"jump\" over the \"true\" LEO-header-lines.\nLike this::\n\n    $IFDEF LEOHEADER <-conditional compilation directive \n    #@+leo-ver=4 <-these lines not compiled\n    #@+node:@file QParser005.INC\n    #@@first\n    #@delims ' \n    '@@c\n    $ENDIF <-... Until here!\n    <rest of derived code file ... >\n\nThis changes the comment symbol the apostrophe,\nmaking comments parseable by a BASIC (or other language.)\n", "children": []}, {"h": "How do I make external files start with a shebang line?", "gnx": "ekr.20050830115714.21", "b": "Use the @first directive_ in @file trees or @nosent trees.\n\nThe @first directive puts lines at the very start of files derived from @file.\nFor example, the body text of @file spam.py might be::\n\n    @first #! /usr/bin/env python\n\nThe body text of @file foo.pl might be::\n\n    @first #/usr/bin/perl\n\nLeo recognizes the @first directive_ only at the start of the body text of @file nodes.\nNo text may precede @first directives_.\nMore than one @first directive may exist, like this::\n\n    @first #! /usr/bin/env python\n    @first # more comments.\n", "children": []}, {"h": "Can @file trees contain material not in the external file?", "gnx": "ekr.20050830115714.24", "b": "No. Everything in an @file trees must be part of the external file: orphan and\n\\@ignore nodes are invalid in @file trees. This restriction should not be\ntroublesome. For example, you can organize your outline like this::\n\n    + myClass\n    ..+ ignored stuff\n    ..+ @file myClass\n\n(As usual, + denotes a headline.) So you simply create a new node_, called\nmyClass, that holds your @file trees and stuff you don't want in the @file\ntrees.\n", "children": []}, {"h": "How can I use Leo with older C compilers", "gnx": "ekr.20050830115714.25", "b": "By Rich Ries.\nSome older C compilers don't understand the \"//\" comment symbol, so using @language C won't work.\nMoreover, the following does not always work either::\n\n    @comment /* */\n\nThis generates the following sentinel line::\n\n    /*@@comment /* */*/\n\nin the output file, and not all C compilers allow nested comments, so the last \\*\\/ generates an error.\nThe solution is to use::\n\n    #if 0\n    @comment /* */\n    #endif\n\nLeo is happy: it recognizes the @comment directive_.\nThe C compiler is happy: the C preprocessor strips out the offending line before the C\ncompiler gets it.\n", "children": []}, {"h": "Why can't I use @ignore directives in @file trees?", "gnx": "ekr.20060529053407", "b": "@ignore can only be used in the root node of @file trees.  It tells Leo to ignore the tree.\n\nThe @ignore directive can not be used elsewhere in @file trees because of the way Leo recreates \noutlines from external files. This is an absolutely crucial restriction and will never go away.\nFor a few more details, see `Leo 4.0: Eliminating error 'recovery'`_ in `History of Leo`_.\n\nThere are several workaround, as shown in LeoPy.leo:\n\n- keep notes in the outline outside of any external file.\n\n- Use @all to gather notes in a external file, as in done in @file leoProjects.txt.\n", "children": []}, {"h": "How can I avoid getting long lines in external files?", "gnx": "shadow.20080825171547.9", "b": "**Question**: I must follow a coding standard when writing source code. It\nincludes a maximum line length restriction. How can I know the length of a\nline when it gets written to the external file?\n\n**Answer**: If a node belongs to a external file hierarchy, its body might get\nindented when it is written to the external file. It happens when an\n\\@others directive or a section name appears indented in a higher-level\nnode body. While (**line**, **col**) in status area show the line and column\ncontaining the body text's cursor, **fcol** shows the cursor coordinate\nrelative to the external file, not to the current node. The relation\n**fcol >= col** is always true.\n", "children": []}, {"h": "Customizing Leo", "gnx": "ekr.20050830115714.26", "b": "", "children": ["ekr.20050830115714.29", "ekr.20050830115714.30", "ekr.20050830120844", "ekr.20060805094325", "ekr.20060915112109", "ekr.20091105080104.9031", "ekr.20110531155858.20564"]}, {"h": "How can I add support for a new language?", "gnx": "ekr.20050830115714.29", "b": "See the instructions are in LeoPy.leo in::\n\n    Notes:How To:How to add support for a new language section.\n\nThis section contains clones of all relevant parts of Leo that you will change.\nComing in Leo 4.4: Leo will use JEdit's language description files to drive the\nsyntax colorer. To add support for a new language, just add another such\ndescription file.\n", "children": []}, {"h": "How do I submit a plugin?", "gnx": "ekr.20050830115714.30", "b": "You have two options: \n\n-   Get cvs write access, and add the @file file to the plugins directory.\n\n-   Just send the @file file to me at edreamleo@gmail.com.\n    That's all you need to do.  In particular that there is no need to change leoPlugins.leo.\n", "children": []}, {"h": "How do I add a new menu item from a plugin?", "gnx": "ekr.20050830120844", "b": "c.frame.menu.createMenuItemsFromTable will append items to the end of an existing menu.\nFor example, the following script will add a new item at the end of the 'File' menu::\n\n    def callback(*args,**keys):\n        g.trace()\n\n    table = ((\"Test1\",None,callback),)\n\n    c.frame.menu.createMenuItemsFromTable('File',table)\n\nPlugins can do anything with menus using c.frame.menu.getMenu. For example, here\nis a script that adds a Test menu item after the 'Open With' menu item in the\nFile menu::\n\n    def callback(*args,**keys):\n        g.trace()\n\n    fileMenu = c.frame.menu.getMenu('File')\n\n    # 3 is the position in the menu.  Other kinds of indices are possible.\n    fileMenu.insert(3,'command',label='Test2',command=callback)\n", "children": []}, {"h": "How can I use Leo's legacy key bindings?", "gnx": "ekr.20060805094325", "b": "You can 'revert' to old key bindings as follows:\n\n1. Open leoSettings.leo.\n\n2. Find the node 'Keyboard shortcuts'.\n\n3. Disable the old bindings by moving the node\n   '@keys EKR bindings: Emacs keys + modes'\n   so that it is a child of the node:\n   '@ignore Unused key bindings'.\n\n4. Notice that there are two child nodes of the node\n   '@ignore Unused key bindings'\n   that refer to legacy key bindings:\n\n   - '@keys Legacy Leo shortcuts with important Emacs bindings'\n\n   - '@keys Legacy Leo bindings'.\n\n5. Move **one** of these two legacy nodes up one level so that it is a child of the node\n   'Keyboard shortcuts'.\n   It should **not** be a child of the node\n   '@ignore Unused key bindings'.\n", "children": []}, {"h": "How can I enable and disable support for psyco?", "gnx": "ekr.20060915112109", "b": "Find the @file leoApp.py node in leoPy.leo.\nIn the ctor for the LeoApp class set self.use_psyco to True or False.\nYou will find this ctor in the node::\n\n    Code-->Core classes...-->@file leoApp.py-->app.__init__\n\nNote that this ivar can not be set using settings in leoSettings.leo because\nLeo uses g.app.use_psyco before processing configuration settings.\n", "children": []}, {"h": "How do I specify qt fonts?", "gnx": "ekr.20091105080104.9031", "b": "When using the Qt gui, you specify fonts\nusing the node in leoSettings.leo called::\n\n    @data qt-gui-plugin-style-sheet\n\nAs usual, you will probably want to put this node in your myLeoSettings.leo file.\n", "children": []}, {"h": "How do I set selection colors?", "gnx": "ekr.20110531155858.20564", "b": "You set most colors in the following settings node::\n\n    @data qt-gui-plugin-style-sheet\n    \nHowever, settings for colors that can change during Leo's execution\nare found in the node::\n\n    Body pane colors\n    \nThese settings are as follows, with the defaults as shown::\n    \n\n    \\@color body_cursor_background_color = None\n    \\@color body_cursor_foreground_color = None\n    \\@color body_insertion_cursor_color = None\n    \\@color body_text_background_color = None\n    \\@color body_text_foreground_color = None\n    \\@color command_mode_bg_color = #f2fdff</vh></v>\n    \\@color command_mode_fg_color = None</vh></v>\n    \\@color insert_mode_bg_color = #fdf5f5</vh></v>\n    \\@color insert_mode_fg_color = black</vh></v>\n    \\@color overwrite_mode_bg_color = azure2</vh></v>\n    \\@color overwrite_mode_fg_color = black</vh></v>\n    \\@color unselected_body_bg_color = #ffffef</vh></v>\n    \\@color unselected_body_fg_color = black</vh></v>\n", "children": []}, {"h": "Tips and techniques", "gnx": "ekr.20050830115714.118", "b": "", "children": ["ekr.20080527063511.1", "ekr.20070622185234", "ekr.20050830120857", "ekr.20050830115714.74", "ekr.20050830115714.119", "ekr.20050830115714.120", "ekr.20050830115714.113", "ekr.20050830115714.116", "ekr.20060822111759", "ekr.20120229094652.15124", "ekr.20120229094652.15099", "ekr.20120229094652.15148"]}, {"h": "What is an easy way to profile code?", "gnx": "ekr.20080527063511.1", "b": "I had a need to figure out why a part of some python code I had written\nwas taking too long.\n\nI pulled the code into LEO and the relevant part of the outline looked\nsomething like this::\n\n    + Main module\n    -- Generate cryptographic key\n    -- Hashing algorithm\n\netc. So I cloned just the segment I wanted to profile and pulled it under a new\nsection::\n\n    + Main module\n    -- [clone] Generate cryptographic key\n    -- Hashing algorithm\n\n    + Profiling Experiment\n    -- [clone] Generate cryptographic key\n\nAnd in the body of the \"Profiling experiment\", I used this code::\n\n    code_under_here = \"\"\"\n    @others\n    \"\"\"\n\n    from timeit import Timer\n    t = Timer(\"print my_key_generator()\", code_under_here)\n    print t.timeit(number = 10)\n\nAnd then I hit Control-B to execute the Profiling Experiment body. This\nlet me make adjustments to the code in the clone body and keep hitting\nControl-B to execute the code with the timeit module to see immediately\nif what I had done was making a difference.\n\nThe great thing about this was that I just used the LEO @others construct\nto create a wrapper around the code and did not need to litter my code\nwith debug or profiling statements.  -- Kayvan\n", "children": []}, {"h": "How can I do a simple find and replace?", "gnx": "ekr.20070622185234", "b": "The 'official' way to start a replace command is::\n\n    <Ctrl-shift-r>find-pattern<return>replace-text<return>\n\nBut suppose you with start with::\n\n    <ctrl-f>find-pattern\n\nand then realize you want to do a replace instead of a find.\nNo problem.  The following also works::\n\n    <Ctrl-f>find-pattern<Ctrl-shift-r>replace-text<return>\n\nIn other words, you can think of `<ctrl-f>` as meaning 'show the find dialog'.\nThere is another trick you should know.\nAfter typing `<ctrl-f>` or `<shift-ctrl-r>` you can use `<alt-ctrl>` keys to set or clear find options.\nFor example::\n\n    <ctrl-f><alt-ctrl-w><find-pattern><return>\n\nThat is, `<ctrl-f>`shows the find dialog,\n`<alt-ctrl-w>` toggles the Whole Word checkbox and\n`<return>` starts the search.\nYou can type the `<alt-ctrl>` keys anytime after `<ctrl-f>` (or `<shift-ctrl-r>`) and before `<return>`. \nYou can also type multiple `<alt-ctrl-keys>` to toggle multiple checkboxes.\n", "children": []}, {"h": "How can I use Leo to develop Leo itself?", "gnx": "ekr.20050830120857", "b": "The trick is to create a workflow that separates editing from testing. Putting\ntest code in LeoPy.leo would waste a lot of time. To run tests you would\nhave to exit Leo and reload LeoPy.leo. A much quicker way is to put all test\ncode in a test.leo file. So to change and test code, do the following:\n\n1. Save LeoPy.leo but do **not** exit Leo. \n\n2. Quit the copy of Leo running test.leo, then reload test.leo.\n\n3. Run test scripts from test.leo.\n\nThat's all. Python will recompile any changed .py files in the new copy of Leo.\n**Note**: I create a batch file called t.bat that runs test.leo, so to the\n\"edit-reload-test\" cycle is just:\n\n1. Control-S (in LeoPy.leo: saves the .leo file)\n2. t         (in a console window: runs test.leo, compiling all changed .py files as a side effect)\n3. Control-E (in test.leo: runs the test script)\n\nThe benefits of the new workflow:\n\n- test.leo loads  _much_ more quickly than LeoPy.leo does.\n  This new approach can increase the speed of the edit-reload-test cycle by more than a factor of 10.\n  Hitting Control-S, t, Control-E takes about 5 seconds.\n\n- LeoPy.leo runs with the *old* code,\n  so it is much easier to fix syntax errors or exceptions in the *new* code:\n  just fix the problem and save LeoPy.leo *without* closing LeoPy.leo,\n  then restart test.leo.\n  You run your tests on the new code, but you edit the new code with the old, stable code.\n\n- test.leo is the perfect place to develop test.\n  I can create and organize those tests and when I am done, ''test.leo'' is a log of my work.\n", "children": []}, {"h": "How can I import many files at once?", "gnx": "ekr.20050830115714.74", "b": "The Import Files dialog allows you to select multiple files provided you are running Python 2.3 or above.\nThere is also an importFiles script in LeoPy.leo.  You can use that script as follows::\n\n    import leo.core.leoImport as leoImport\n    leoImport.importFiles(aDirectory, \".py\")\n\nThis will import all .py files from aDirectory, which should be a full path to a particular directory.\nYou could use \".c\" to import all .c files, etc.\n", "children": []}, {"h": "How can I use two copies of Leo to advantage?", "gnx": "ekr.20050830115714.119", "b": "By Rich Ries.\nI often rework C code that's already been \"Leo-ized\"--the first pass was quick\nand dirty to get it going. When I do subsequent passes, I wind up with subnodes\nthat are out of order with the sequence found in the main node_. It's not a big\ndeal, but I like 'em ordered. With just one editor pane, clicking on the node_ to\nmove would switch focus to that node_. I'd then need to re-focus on the main\nnode_. A minor nuisance, but it does slow you down.\n\nMy solution is to open a second editor with its focus on the main node_. Switch\nto the other editor, and, referring to the first editor pane, move the nodes as\nyou like. The second editor's pane will change focus to the node_ you're moving,\nbut the first editor will stay focused on the main node_. It's a lot easier to\ndo than to describe!\n", "children": []}, {"h": "How can I display graphics in Leo?", "gnx": "ekr.20050830115714.120", "b": "One way is to link directly to the media file from a Leo node_ (with @url) and\nwrite a script button to wrap all URL-nodes under the current node_ in a single\nHTML page. Then, you can view your media in two ways:\n\n-   Individually. You can directly click on the @url link to display the media\n    in the browser (assuming you have your MIME/filetype associations set up\n    correctly for your browser).\n\n-   In a group. You can click on a script button (you have to code this yourself,\n    very simple) which should collect all @url nodes_ under the current node_\n    and dynamically generate a HTML page displaying either links to or embedded\n    versions of the media (using the HTML trick described above to invoke the\n    browser). This way, you can create collections of @url nodes under a\n    single node_ (like a bookmark folder), and press a single button to view the\n    @url collection as a single entity in the browser (with all browser\n    capabilities like displaying the media).\n\nYou could probably generalize this idea of \"collect all @url nodes under current\nnode_ and display as HTML in browser\" into a general-purpose plugin. However,\nthe plugin would have to be somewhat smart in mapping a link to its corresponding\nHTML code (e.g. an image link gets mapped to an <img> HTML tag, a link to a\nFlash file gets mapped to an <embed> tag, etc).\n", "children": []}, {"h": "How can I create a template .leo file?", "gnx": "ekr.20050830115714.113", "b": "**Question**:\nIt would be nice if Leo could open empty files. I tend to be \"document oriented\"\nrather than \"application oriented\" in my thinking and prefer \"create empty file\nat location -> open it with program\" to \"start program -> create new file ->\nsave it at location\".\n\n**Answer** by Paul Paterson:\nIf you are on Windows 98/2000/XP then the procedure is as follows...\n\n1. Start Leo\n2. Click New\n3. Click Save as...\n4. Save the file as \"c:\\\\windows\\\\shellnew\\\\leofile.leo\" (or c:\\\\winnt for 2000/XP)\n5. Open regedit \"start...run...regedit\"\n6. Open HKEY_CLASSES_ROOT and find the \".leo\" extension type\n7. Go New ... Key from the context menu \n8. Call the new key ShellNew \n9. Select the new key, right-click, choose New...String Value from the context menu\n10. Call it FileName \n11. Double-click on the string, and modify it to be the filename of the leofile.leo file you created,\n    including the extension\n12. Exit the registry editor and restart Windows Explorer (you may need to reboot on Windows 98)\n\nNow you should have a New:Leo File option in Explorer. This creates a duplicate\nof the file you saved. This can be useful because you could make a template Leo\nfile containing some standard nodes_ that you always have and then save this.\n", "children": []}, {"h": "How can I show Leo files with Excel?", "gnx": "ekr.20050830115714.116", "b": "From: http://sourceforge.net/forum/message.php?msg_id=3240374\nUsing Leo's File-Export-Flatten Outline commands creates a MORE style outline which places\nall Leo body sections on the left margin.\nThe headlines_ are indented with tabs which Excel will read as a tab delimited format.\nOnce inside Excel there are benefits.\n\n1.  The most obvious benefit inside Excel is that the body sections (Excel first\n    column) can be selected easily and highlighted with a different font color.\n    This makes the MORE format very readable. Save a copy of your sheet as HTML\n    and now you have a web page with the body sections highlighted.\n\n2.  It is possible to hide columns in Excel.\n    Hiding the first column leaves just the headlines showing.\n\n3.  Formulas based on searching for a string can do calculations in Excel.\n    For example if a heading \"Current Assets\" appears on level 4 then the body formula::\n\n        =INDEX(A:A,MATCH(\"Current Assets\",D:D,0)+1)\n\n    will retrieve it. The +1 after match looks down one row below the matched\n    headline. The trick is to place all your headlines in quotes because Excel\n    will see + \"Current Assets\" from the MORE outline. When Excel tries\n    without the quotes it thinks it is a range name and displays a #N/A\n    error instead of the headline. Also you must place a child node_ below to\n    get the + sign instead of a - sign which would give a MORE headline of\n    -\"Current assets\" , also is an error.\n\nI think there is some interesting possibility here because of the enforcement of\nLeo body text being always in the first column. The Leo outline provides\nadditional reference to organizing the problem not typical of spreadsheet\nmodels. Beyond scripting in Python, Excel is good at doing interrelated\ncalculations and detecting problems like circular references. In Excel\nTools-Options-General is a setting for r1c1 format which then shows numbers\ninstead of letters for column references. Using this would allow entries like\nthis in the leo body::\n\n    1000\n    3500\n    =R[-1]C+R[-2]C\n\nIn Excel you would see 4500 below those two numbers. This is completely\nindependent of where the block of three cells exists on the sheet.\n", "children": []}, {"h": "How can I reuse @button nodes in multiple files?", "gnx": "ekr.20060822111759", "b": "By Rich Ries\n\nThere is no direct way to make script buttons available in multiple Leo files.\nSure, you could copy and paste the @button nodes, but there is a slightly\neasier way using the \"New Buttons\" plugin.\n\n1) Create and test and debug your desired Script Button.\n\n2) With the Script Button node selected, run Plugins --> New buttons --> Make Template From\n\nOpen a new Leo file.\n\n3) Assuming you have only the one New Button Template defined, left-click the\n   New button, and a new node will be added to your outline. (Otherwise, you'll\n   need to select the Template you want.)\n\n4) Press [Script Button] to create the new script button.\n\nIt's easier to *do* this than to *explain* it!\n", "children": []}, {"h": "How can I restore focus without using the mouse", "gnx": "ekr.20120229094652.15124", "b": "It sometimes happens that the focus gets left in a Leo\nwidget that doesn't support Leo's key bindings. You would\nthink that you would have to use the mouse to click in, say,\nthe body pane so that you can use Leo's key bindings again.\n\nBut you don't have to do that.  Instead, use Alt-tab once to change\naway from Leo, and then use Alt-tab again to change back to Leo.  When\nyou do this, Leo puts focus in the body pane and you are all set.\n", "children": []}, {"h": "How can I make commonly-used scripts widely accessible?", "gnx": "ekr.20120229094652.15099", "b": "Put @command nodes as children of an @commands node in myLeoSettings.leo.\nThis makes the the @command nodes available to all opened .leo files.\n\nUsing @command rather than @button means that there is never any need to\ndisable scripts. There is no need for @button. To see the list of your\n\\@command nodes, type::\n\n    <alt-x>@c<tab>\n    \nSimilarly to see the list of your \\@command nodes, type::\n\n    <alt-x>@b<tab>\n", "children": []}, {"h": "How can I use BibTeX citations from Leo?", "gnx": "ekr.20120229094652.15148", "b": ".. _`this posting about BibTeX citations`: http://groups.google.com/group/leo-editor/browse_thread/thread/d36d76174dcd6786/9c2a298049f4f01c\n\n.. _`raw-data`: http://docutils.sourceforge.net/docs/ref/rst/directives.html#raw-data-pass-through\n\nWhen using LaTeX and BibTeX, I would like to use inside of Leo a kind of\nLaTeX-inline-markup, that after generation of the RsT file through Sphinx\nas well as after running of \"make latex\", generate a LaTeX file containing\nthe citation call of the form \\cite{CITBook001} as described in a file\n\\*.bib. Is there a way to have Leo/Sphinx/RsT generate the inline raw latex\nsyntax?\n\nUse the docutils `raw-data`_ syntax. Examples::\n\n    .. role:: raw-role(raw)\n      :format: html latex\n    .. raw:: latex\n      \\bibliographystyle{acm}\n      \\bibliography{myBibliography}\n      \nFor more details, see `this posting about BibTeX citations`_.\n", "children": []}, {"h": "Trouble shooting", "gnx": "ekr.20050830115714.76", "b": "", "children": ["ekr.20090130144433.1", "ekr.20090130144433.2", "ekr.20080813064908.2", "ekr.20050830115714.115", "ekr.20050906090012", "ekr.20050830115714.77", "ekr.20050830115714.17", "ekr.20060329101442", "ekr.20050830115714.117", "ekr.20070623145346.1", "ekr.20070816092449", "ekr.20101026082911.5538", "ekr.20120229094652.15130"]}, {"h": "How do I get help?", "gnx": "ekr.20090130144433.1", "b": "All questions are welcome at http://groups.google.com/group/leo-editor\n", "children": []}, {"h": "How do I report bugs?", "gnx": "ekr.20090130144433.2", "b": "You can discuss possible bugs at\nhttp://groups.google.com/group/leo-editor\n\nPlease report bugs at\nhttp://bugs.launchpad.net/leo-editor\n\nWhen reporting a bug, please include *all* of the following:\n\n- The version of Leo used.\n\n- The version of Python used.\n\n- The platform or platforms used: Linux, Windows, MacOS.\n\n- A clear description of the problem.\n\n- Information sufficient to recreate the problem.\n\nIt's polite to make the bug report self contained, so that six weeks later\nsomebody will be able to understand the report as it stands.\n", "children": []}, {"h": "My old .leo files won't load using Leo 4.5 or later. What should I do?", "gnx": "ekr.20080813064908.2", "b": "In version 4.5, Leo changed to using a sax parser for .leo files. This can cause\nproblems if your .leo file contains invalid characters.\nBugs in previous versions of Leo permitted these bad characters to appear.\n\nThe sax parser complains that these characters are not valid in .xml files.\nRemove these invalid characters as follows:\n\n1. `run Leo in a console window`_, and load the .leo file.\n   Near the bottom of the error message you will see a line like::\n\n    SAXParseException: <unknown>:123:25: not well-formed (invalid token)\n\n   This line reports a bad character at character 25 of line 123.\n\n2. Open the .leo file in an external editor.\n   The Scite editor, http://www.scintilla.org/SciTE.html,\n   is a good choice because it clearly shows non-printing characters.\n   Remove the invalid character, save the .leo file.\n\nRepeat steps 1 and 2 until all invalid characters are gone.\n", "children": []}, {"h": "Error messages from the rst3 plugin aren't helpful. What can I do?", "gnx": "ekr.20050830115714.115", "b": "For the most part, docutils_ does a good job of reporting errors. docutils_ prints\na message to the console and inserts an unmistakable error message in the\ngenerated .html file.\n**Important**: On Windows it is helpful to `run Leo in a console window`_.\n\nHowever, in some cases, docutils_ crashes instead of properly reporting the\nproblem. There are several workarounds:\n\n1.  The crashes I have seen arise from the following bug in docutils.\n    **Hyperlinks in image:: markup must be lower case**.  This will work::\n\n        .. .. |back| image:: arrow_lt.gif\n            :target: faq_\n\n    This will **crash**::\n\n        .. .. |back| image:: arrow_lt.gif\n            :target: FAQ_\n\n    So avoid this crash by making sure to use lower case targets in ':target:' markup.\n\n2.  You can change the docutils_ source slightly so that it prints a traceback when it\n    crashes. (The rst3 plugin should be able to do this, but I haven't figured\n    out how yet.) It's easy enough to do this:\n\n    - Find the file core.py in top-level docutils folder.\n      Typically this folder will be in Python's site-packages folder.\n\n    - Open core.py in some editor other than Leo.\n\n    - Find the method called report_Exceptions.\n\n    - Insert the following lines at the very start of this method::\n\n        print 'EKR: added traceback'\n        import traceback ; traceback.print_exc()\n\n    This will cause a traceback whenever docutils_ crashes. I have found that\n    such tracebacks are generally enough to locate the general area of the\n    problem. **Note**: These tracebacks go to the console window, so you should\n    `run Leo in a console window`_.\n\n3.  As a last resort, you can isolate syntax errors by reducing your input files\n    until they work again, then adding sections until you get a crash. This is\n    easy enough to do (when using the rst3 plugin) by change a headline 'x' to\n    @rst-ignore-tree x.\n", "children": []}, {"h": "How can I run Leo from a console window?", "gnx": "ekr.20050906090012", "b": "Leo (and other programs) often send more detailed error messages to stderr,\nthe output stream that goes to the console window. In Linux and MacOS\nenvironments, python programs normally execute with the console window visible.\nOn Windows, can run Leo with the console window visible by associating .leo\nfiles with python.exe *not* pythonw.exe.\n", "children": []}, {"h": "How can I use Python's pdb debugger with Leo?", "gnx": "ekr.20050830115714.77", "b": "Just `run Leo in a console window`_. At the point you want to drop into the\ndebugger, execute this line::\n\n    g.pdb()\n\nAll output from pdb goes to stdout, which is the console window. It would be\ngood to create a subclass of pdb.Pdb that uses Leo's log pane rather than a\nconsole window, but I haven't done that. It could be done easily enough in a\nplugin...\n\n**Important**: I recommend using g.trace instead of pdb.  For example::\n\n    g.trace(x)\n\nprints the name of the function or method containing the trace, and the value of\nx. g.callers is often useful in combination with g.trace. g.callers(5)\nreturns the last 5 entries of the call stack. For example::\n\n    g.trace(x,g.callers(5))\n\nUsed this way, g.trace shows you patterns that will be invisible using pdb.\n", "children": []}, {"h": "I can't write Imported files.  What's going on?", "gnx": "ekr.20050830115714.17", "b": "The import commands insert @ignore directives_ in the top-level node_.\nLeo does this so that you won't accidentally overwrite your files after importing them.\nChange the filename following @file (or @file) as desired,\nthen remove the @ignore directive_.\nSaving the outline will then create the external file.\n", "children": []}, {"h": "The new Python decorator syntax causes problems.  What can I do?", "gnx": "ekr.20050830115714.117", "b": "Python's decorator_ syntax is ill-conceived.\nThis syntax file hack works well enough anyway to work with Leo '@' markup::\n\n    syn region leoComment start=\"^@\\\\s*\" end=\"^@c\\\\s*$\"\n    syn match   pythonDecorator\t\"@\\\\S\\\\S+\" display nextgroup=pythonFunction skipwhite\n", "children": []}, {"h": "I can't run the LeoBridge module outside of leo/core.  What should I do?", "gnx": "ekr.20070816092449", "b": "Question and answer from plumloco.\n\nAdd the equivalent of::\n\n    import sys \n    leocore = \"path/to/leo/core\" \n    if leocore not in sys.path: sys.path.append(leocore) \n    import leo.core.leoBridge as leoBridge\n\nat the head of each file that uses leoBridge.\n\nThe problem is not importing leoBridge itself but (if I use 'from leo.core') the\nimporting of plugins, who get a different leoGlobals from leoBridge, without\ng.app etc, and so do not work if they rely on dynamic values in g.etc.\n\n> Why can't you simply add leo/core to sys.path in sitecustomize.py?  \n\nPutting leo/core on the python path as you suggest would put forty python modules\nin the global module namespace for all python programs when I want just one.\nAlso, I have a safe working copy of leo and a cvs/testing version. I would wish\nto test any programs against the testing version while using the working\nversion, but both /core directories can't be exposed at the same time.\n\n> Do you need plugins while running from the leoBridge? \n\nAfraid so, at least the rst3 plugin. The solution I am using now is to place::\n\n    sys.modules['leoGlobals'] = leoGlobals  \n\nin leoBridge after import leo.core.leoGlobals as leoGlobals\n\nThis allows my scripts\nto be portable over the several computers/platforms I need to use them on, and\nmakes testing scripts against multiple leo versions easy. It does mean that my\nscripts are not portable to other leo users but that is not likely to be a\nproblem.\n", "children": []}, {"h": "Why didn't Leo update my @shadow outline as expected?", "gnx": "ekr.20101026082911.5538", "b": ".. _`here`: atShadow.html#aha-boundary-cases-don-t-matter\n\nAs explained `here`_, the fundamental \\@shadow algorithm guarantees *only* that\nwriting an updated \\@shadow outline will generate the updated **public** file.\nThere is *no way* to guarantee that the updated outline structure will be as\nexpected. The \\@shadow algorithm can not *in principle* guess between two or\nmore ways of updating the **private** file when each of the ways yields the same\n**public** file.\n\nHappily, this \"fact of life\" about \\@shadow is not serious. If you don't like\nthe \"guesses\" that the \\@shadow algorithm has made, you can simply change the\n\\@shadow tree. After saving the outline, the *private* file will record your\nchoice. The next time you open the outline, you will see the choices *you* made,\nnot the guesses that the \\@shadow algorithm made.\n", "children": []}, {"h": "Why do Qt windows disappear in my scripts?", "gnx": "ekr.20120229094652.15130", "b": "@language rest\n@pagewidth 75\n\nQ. When I run the following script I see a window appear and then\nimmediately disappear::\n\n    from PyQt4 import QtGui\n    w = QtGui.QWidget()\n    w.resize(250, 150)\n    w.move(300, 300)\n    w.setWindowTitle('Simple test')\n    w.show()\n    \nWhat's going on?\n\nA. When the script exits the sole reference to the window, w, ceases to\nexist, so the window is destroyed (garbage collected). To keep the window\nopen, add the following code as the last line to keep the reference alive::\n\n    g.app.scriptsDict['my-script_w'] = w\n\nNote that this reference will persist until the next time you run the\nexecute-script. If you want something even more permanent, you can do\nsomething like::\n\n    g.app.my_script_w = w\n", "children": []}, {"h": "Unicode issues", "gnx": "ekr.20071026055929", "b": "", "children": ["ekr.20061021164213", "ekr.20050830115714.9", "ekr.20060917130130", "ekr.20050830115714.10", "ekr.20071026055929.1"]}, {"h": "I can not enter non-ascii characters.  What can I do?", "gnx": "ekr.20061021164213", "b": "Set @bool ignore_unbound_non_ascii_keys = False in LeoSettings.leo or myLeoSettings.leo.\n", "children": []}, {"h": "Some characters in external files look funny. What can I do?", "gnx": "ekr.20050830115714.9", "b": "Internally, Leo represents all strings as unicode. Leo translates from a\nparticular encoding to Unicode_ when reading .leo files or external files. Leo\ntranslates from Unicode_ to a particular encoding when writing external files.\nYou may see strange looking characters if your text editor is expecting a\ndifferent encoding. The encoding used in any external file is shown in the\n#@+leo sentinel line like this::\n\n    #@+leo-encoding=iso-8859-1.\n\n**Exception**: the encoding is UTF-8 if no -encoding= field exists.\nYou can also use the @encoding directive_ to set the encoding for individual external files.\nIf no @encoding directive_ is in effect,\nLeo uses the following settings_ to translate to and from unicode:\n\ndefault_derived_file_encoding\n    The encoding used for external files if no @encoding directive_ is in effect.\n    This setting also controls the encoding of files that Leo writes.\n    The default is UTF-8 (case not important).\n\nnew_leo_file_encoding\n    The encoding specified in the following line of new .leo files::\n\n        <?xml version=\"1.0\" encoding=\"UTF-8\">\n\n    The default is UTF-8 (upper case for compatibility for old versions of Leo).\n", "children": []}, {"h": "I get weird results when defining unicode strings in scripts.  What is going on?", "gnx": "ekr.20060917130130", "b": "Add the following to the start of your scripts::\n\n    @first # -*- coding: utf-8 -*-\n\nWithout this line, constructs such as::\n\n    u = u'a-(2 unicode characters here)-z'\n    u = 'a-(2 unicode characters here)-z'\n\nwill not work when executed with Leo's execute script command.\nIndeed, the Execute Script command creates the script by writing the tree\ncontaining the script to a string. This is done using Leo's write logic, and\nthis logic converts the unicode input to a utf-8 encoded string. So *all\nnon-ascii characters* get converted to their equivalent in the utf-8 encoding. \nCall these encoding <e1> and <e2>. In effect the script becomes::\n\n    u = u'a-<e1>-<e2>-z'\n    u = 'a-<e2>-<e>-z'\n\nwhich is certainly *not* what the script writer intended!\nRather than defining strings using actual characters, Instead, one should use\nthe equivalent escape sequences. For example::\n\n    u = u'a-\\\\u0233-\\\\u8ce2-z'\n    u = 'a-\\\\u0233-\\\\u8ce2-z'\n", "children": []}, {"h": "Some characters are garbled when importing files. What can I do?", "gnx": "ekr.20050830115714.10", "b": "The encoding used in the file being imported doesn't match the encoding in effect for Leo.\nYou have two options:\n\n- Use the @encoding directive_ in an ancestor of the node_ selected when\n  doing the Import command_ to specify the encoding of file to be imported.\n", "children": []}, {"h": "Python's print statement shows 'byte hash' for unicode characters.  What can I do?", "gnx": "ekr.20071026055929.1", "b": "First, you must change Python's default encoding to something other than 'ascii'.  To do this, put the following in your sitecustomize.py file in Python's Lib folder::\n\n    import sys \n    sys.setdefaultencoding('utf-8') # 'iso-8859-1' is another choice.\n\nYou must restart Python after doing this: sys.setdefaultencoding can not be called after Python starts up. \n\nLeo's g.es_print and g.pr functions attempts to convert incoming arguments to unicode using the default encoding.\nFor example, the following Leo script shows various ways of printing La Pe\u00f1a properly::\n\n    @first # -*- coding: utf-8 -*-\n\n    import sys\n    e = sys.getdefaultencoding()\n    print 'encoding',e\n    table = (\n        'La Pe\u00f1a',\n        unicode('La Pe\u00f1a','utf-8'),\n        u'La Pe\u00f1a',\n        u'La Pe\\\\xf1a',\n    )\n\n    for s in table:\n        print type(s)\n        g.es_print('g.es_print',s)\n        if type(s) != type(u'a'):\n            s = unicode(s,e)\n        print 'print     ',s\n        print 'repr(s)   ',repr(s)\n\nFor still more details, see:\nhttp://www.diveintopython.org/xml_processing/unicode.html \n", "children": []}, {"h": "Slideshows page", "gnx": "ekr.20101007100904.4372", "b": "", "children": ["ekr.20100821182153.4344"]}, {"h": "@file screen-shots.txt", "gnx": "ekr.20100821182153.4344", "b": "@language rest\n@tabwidth -4\n@all\n", "children": ["ekr.20100821182153.4343"]}, {"h": "@rst html/slides.html", "gnx": "ekr.20100821182153.4343", "b": "@ @rst-options\ncall_docutils=False\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\n@c\n\n######\nSlides\n######\n\nThis is the front page for various slide shows about Leo.\n\n.. links\n.. _`Clones and views`:         slides/clones-and-views/slide-001.html\n.. _`External files`:           slides/external-files/slide-005.html\n.. _`Installation`:             slides/installation/slide-001.html\n.. _`Leo Basics Step By Step`:  slides/leo-basics-step-by-step/slide-001.html\n.. _`Scripting Leo`:            slides/scripting-leo/slide-001.html\n.. _`Using Leo's Minibuffer`:   slides/using-leos-minibuffer/slide-001.html\n\nBasic slide shows\n-----------------\n\n`Installation`_  tells how to install Leo.\n\n`Leo Basics Step By Step`_  explains the basics of Leo outlines.\n\n`External Files`_ discusses creating external files with \\@file, \\@auto and \\@edit.\n\n`Clones and views`_ illustrates how clones work and show how they create views.\n\n`Using Leo's Minibuffer`_ tells how to execute Leo's commands by name.\n\nIntermediate slide shows\n------------------------\n\n`Scripting Leo`_ explains how to use Python scripting in Leo.\n", "children": []}, {"h": "Installing Leo", "gnx": "ekr.20100731112744.7267", "b": "@pagewidth 75", "children": ["ekr.20100805165051.7152"]}, {"h": "@file installing.txt", "gnx": "ekr.20100805165051.7152", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20100731112744.7268"]}, {"h": "@rst html\\installing.html", "gnx": "ekr.20100731112744.7268", "b": "################\nInstalling Leo\n################\n\n.. _`Leo's help forum`: http://groups.google.com/group/leo-editor\n\n.. index:: Installing Leo\n\nThis chapter tells how to install and run Leo on Windows or Linux.\nLeo can be installed on MacOS, but the process is difficult and not recommended.\n\n**Important**: If you have *any* problems installing Leo,\nplease ask for help on `Leo's help forum`_.\n\n.. contents::\n    :depth: 3\n\n", "children": ["ekr.20100731112744.7269", "ekr.20101125062332.5090", "ekr.20100817101952.4313", "ekr.20100817101952.4303", "ekr.20100731112744.7277"]}, {"h": "@rst-no-head links", "gnx": "ekr.20100731112744.7269", "b": ".. Links used in this document...\n\n.. _`run Leo`:              `Running Leo`_\n.. _`Leo's download page`:  http://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n.. _`Pmw`:                  http://pmw.sourceforge.net/\n.. _`PyEnchant`:            https://sourceforge.net/projects/pyenchant/\n.. _`Python`:               http://www.python.org\n", "children": []}, {"h": "Required and optional packages", "gnx": "ekr.20101125062332.5090", "b": "Leo requires `Python`_. Leo will work on any platform that supports Python 2.6 or\nabove, including Python 3.0 and above. \n\nLeo also requires either the Qt widget set.\n\nTo enable spell checking, you must install the `PyEnchant`_ package.\n\nThe following sections describe how to install Python, Qt and PyEnchant.\n", "children": []}, {"h": "Installing other packages", "gnx": "ekr.20100817101952.4313", "b": "", "children": ["ekr.20100731112744.7270", "ekr.20100731112744.7271", "ekr.20100731112744.7281"]}, {"h": "Installing Python", "gnx": "ekr.20100731112744.7270", "b": ".. _`this page`: http://python.org\n\nTo install Python, see `this page`_.\n", "children": []}, {"h": "Installing Qt", "gnx": "ekr.20100731112744.7271", "b": "To install Qt, get the binary package of PyQt from: \nhttp://www.riverbankcomputing.co.uk/software/pyqt/download\n\nThe version of PyQt that you download must match your installed Python version.\nRemember that Leo requires Python 2.6 or later, or Python 3.0 or later. Now run\nthe binary PyQt installer.\n", "children": []}, {"h": "Installing PyEnchant", "gnx": "ekr.20100731112744.7281", "b": "You must install the PyEnchant package if you want to use Leo's Spell tab.\nDownload and install the PyEnchant package from\nhttp://www.rfk.id.au/software/pyenchant/download.html There is an executable\ninstaller for Windows users.\n", "children": []}, {"h": "Installing Leo itself", "gnx": "ekr.20100817101952.4303", "b": ".. links\n\n.. _`latest stable release`: http://sourceforge.net/projects/leo/files/Leo/4.10%20final/\n.. _`SourceForge`: https://sourceforge.net\n.. _`Leo's snapshots page`:     http://www.greygreen.org/leo/\n.. _`nightly snapshot`:             http://www.greygreen.org/leo/\n.. _`Leo's latest sources`: https://code.launchpad.net/leo-editor/\n.. _`Launchpad`: https://code.launchpad.net/\n.. _`bzr`: http://bazaar.canonical.com/\n\nLeo's core code is always being improved and developed. Unit-testing\nensures that the daily commits are as bug-free as possible. Almost all of\nthe time, downloading the most recent `nightly snapshot`_ of the\ndevelopment code is going to give you code that is just as stable and much\nmore up-to-date than the most recent `latest stable release`_ which most\nLeonistas would consider already outdated.\n\nIf you are just checking Leo out, feel free to use the `latest stable release`_\ndownload if it makes you feel more secure, but once you've\ndecided to work with Leo on a regular basis, we highly recommend regularly\nkeeping your installation up to date with the most recent `nightly snapshot`_.\n\nTo summarize, you may get Leo in three ways:\n\n1. Download the `latest stable release`_ from `SourceForge`_. This release\n   contains an executable installer. This release will usually be a bit out\n   of date.\n\n2. Download a `nightly snapshot`_ from `Leo's snapshots page`_. This page\n   contains .zip archives of Leo's code from 1, 2, 5, 10, 30 and 90 days\n   ago.\n   \n3. Download `Leo's latest sources`_ from `Launchpad`_ using `bzr`_.\n   Installing bzr is non-trivial, but once set up this is the easiest way\n   to get the latest version of Leo's code.\n", "children": ["ekr.20100731112744.7276", "ekr.20100731112744.7274", "ekr.20100731112744.7275", "ekr.20120229094652.15098", "ekr.20100817101952.4306"]}, {"h": "Installing Leo on Windows", "gnx": "ekr.20100731112744.7276", "b": "1. Install Python from http://www.python.org/download/releases/\n\n2. Install Qt, as described above.\n\n3. Download and install Leo.\n   Download the latest version of Leo (a .zip file) from `Leo's download page`_.\n   You can unpack the .zip file anywhere, including Python's *site-packages* folder,\n   for example, C:\\\\Python26\\\\Lib\\\\site-packages\n", "children": []}, {"h": "Installing Leo on Linux", "gnx": "ekr.20100731112744.7274", "b": "If you are using Debian/Ubuntu, find and install the debian package. This\nprovides the best integration with your desktop (file associations, icons, launcher\nitem). Failing that, follow the instructions below.\n\nDownload the latest version of Leo (a .zip file) from `Leo's download page`_.\n\nUnzip the downloaded .zip file into the **unpacked folder** in your home directory.\nThe unpacked folder will be called something like leo-4-5.\n\nYou now have two choices:\n\n1. You can run Leo from your home directory.\n   Just add  ~/leo-4-5 to your path.\n\n2. You can install leo into /usr/local/lib and /usr/local/bin by running Leo's install script as follows::\n\n    cd ~/leo-4-4-3-final\n    chmod u+x install\n    sudo ./install\n\nThe install script will instruct you to add /usr/local/bin to your path.\nYou can, instead, add the following link::\n\n    sudo ln -s /usr/local/lib/leo/ /usr/local/lib/python2.6/site-packages/\n\nNow you are ready to `run Leo`_.\n", "children": []}, {"h": "@rst-ignore Installing Leo on MacOS X", "gnx": "ekr.20100731112744.7275", "b": "**Important**: Installing Leo on MacOS is difficult and not recommended.\nFurthermore, Leo does not work as well on MacOS as on other platforms.\n\nHere is how to install Leo on MacOS 10.5 (Leopard):\n\n1. MacOS 10.5 comes with Python pre-installed.\n\n   See http://www.python.org/download/mac/ and\n   http://wiki.python.org/moin/MacPython/Leopard\n   for information about using the latest version of Python.\n\n2. Download and install bzr:\n\n   - Download bzr from http://bazaar-vcs.org/Download\n\n   - Install bzr using the file just downloaded.\n\n3. Get Leo's sources from Leo's trunk::\n\n    cd ~\n    mkdir leo.repo\n    cd leo.repo\n    bzr init\n    bzr branch lp:leo-editor\n    cd leo-editor\n\n4. If you already have Qt and PyQt installed, you can run the qt version of Leo as follows::\n\n    python launchLeo.py --gui=qt\n\n5. If you don't have Qt or PyQt installed, you will have to install Qt and PyQt\n    from sources. There does not seem to be any pre-built binaries.\n\n    A: You may need to install XCode from http://developer.apple.com/mac/\n       in order to get a development environment.\n\n    B: Download and install the sip package, following the direction at\n       http://www.riverbankcomputing.co.uk/software/sip/download\n\n    C: Download the OpenSource Qt libraries for Mac from\n       http://www.qtsoftware.com/downloads\n\n    D: At various points along the way you will need to build the sources::\n\n         python configure.py \n         make\n         sudo make install\n", "children": []}, {"h": "Installing Leo on MacOs 10.7 Lion", "gnx": "ekr.20120229094652.15098", "b": ".. .. http://groups.google.com/group/leo-editor/browse_thread/thread/92ae059cc5213ad3\n\n**Important**: Installing Leo on MacOS is, ah, challenging.\nFurthermore, Leo does not work as well on MacOS as on other platforms.\n\nMany thanks to Ludwig Schwardt for the following\ninstallation instructions.\n\nI recently received a new MacBook Pro and did a fresh upgrade to Mac OS\n10.7 (Lion). I then used the opportunity to test out installation\nprocedures of various software on a clean system. My main finding is that\nthe excellent Homebrew (mxcl.github.com/homebrew/) makes things much easier\nthese days.\n\nWhy Homebrew? It does not try to replace every single bit of functionality\non your Mac with their own version, like Macports or fink. It reuses the\nexisting libraries as far as possible. No need to reinstall Python, for\nexample (one of my pet gripes when people try to install new software on\ntheir Macs, and the source of much confusion and pain). It installs to\n/usr/local, the standard place to find third-party libraries and headers,\ninstead of the obscure /opt or /sw. It's simple to use and to extend.\n\nI last installed Leo on Mac OS 10.4 (Tiger) back in the Tk days, and\nwondered what it looked like in Qt. All the horror stories of PyQT on Mac\ndiscouraged me from trying this before, so I was keen to see if Homebrew\nhelps. Here is my installation write-up:\n\n- Make sure you have Xcode installed (test it by confirming that \"gcc\" runs\n  in the Terminal)\n\n- In preparation for homebrew, the best option in my opinion is to delete\n  /usr/local via::\n\n    sudo rm -rf /usr/local\n\n  and install any software in it via homebrew instead. If this step fills\n  you with dread and you do not want to lose your beloved third-party\n  software, the second-best option is to make sure you have write\n  permission for the directory via::\n\n    sudo chown -R <your user name>:admin /usr/local\n\n  If you don't know your username, run \"whoami\". :-) This is useful because\n  homebrew actually discourages you from installing third-party software as\n  the superuser (the usual Mac apps in /Applications are also installed as\n  the normal user, for that matter).\n\n- Install Homebrew (http://mxcl.github.com/homebrew/) by running the\n  following command in the Terminal::\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.github.com/gist/323731)\"\n\n- Run \"brew update\" to get the latest formulas\n\n- Now install PyQT (yes, that's it!)::\n\n     brew install pyqt\n\n- Run \"brew doctor\" and check any further suggestions to improve your system.\n\n- Add the following lines to your ~/.bash_profile (or ~/.profile on Leopard)::\n\n      export PATH=/usr/local/bin:$PATH\n      # This is for SIP (and PyQT) as suggested by Homebrew\n      export PYTHONPATH=/usr/local/lib/python:$PYTHONPATH\n\n- Open a new Terminal tab / window so that the above settings take effect,\n  and install Leo. I downloaded the Leo-4.9-final-a.zip, unzipped it, and\n  ran \"python launchLeo.py\" inside the Leo directory.\n\nWe should consider adding a Homebrew formula for Leo. This will simplify\nthe process even further, to simply \"brew install leo\". I started on this,\nbut wasn't sure where to put the various Leo files in the system hierarchy.\nThe Debian package can give some clues here, but I haven't looked at it\nyet.\n", "children": []}, {"h": "Installing Leo with bzr", "gnx": "ekr.20100817101952.4306", "b": "Many users will want to track the development version of Leo, in order to stay\non top of the latest features and bug fixes. Running the development version is\nquite safe and easy, and it's also a requirement if you want to contribute to\nLeo.\n\n1. First, you need to get Bazaar (bzr) from http://bazaar-vcs.org. For windows\n   users we recommend the standalone installer - the python installer may have\n   problems pushing to Launchpad. Plain bzr installer only contains the command\n   line version, so you might want to augment that with a friendly GUI - qbzr is\n   recommended as it's the easiest one to install. It provides command like\n   bzr qlog, bzr qannotate etc.\n\n2. Get Leo from launchpad by doing::\n\n     bzr branch lp:leo-editor\n\nAnd that's it! You can run leo/core/leo.py directly. When you want to refresh the\ncode with latest modifications from Launchpad, run bzr pull.\n\nIf you make modifications to Leo (with the interest in sharing them with the Leo\ncommunity), you can check them in to your local branch by doing bzr checkin.\nNow, to actually request your changes to be merged to Leo trunk, you need a\nLaunchpad account with RSA keys in place. There is showmedo video about how to\naccomplish this in Windows using puttygen and pageant at\nhttp://showmedo.com/videos/video?name=1510070&fromSeriesID=151.\n\nAfter your Launchpad account is set up, go to\nhttps://launchpad.net/leo-editor, choose \"Code\" tab -> Register Branch,\nselect Branch type \"Hosted\" and fill in descriptive details about the branch.\nAfter that, go to the branch home page from Code tab again, and copy-paste the\npush command line to terminal. For example, for branch::\n\n    https://code.launchpad.net/~leo-editor-team/leo-editor/mod_rclick\n\nThe push command is::\n\n    bzr push bzr+ssh://my_name@bazaar.launchpad.net/~leo-editor-team/leo-editor/mod_rclick    \n\nYou may wish to add --remember command line option to bzr push, to direct all\nfuture pushes to that location. Then, you only need to execute bzr push.\n\nAfter your branch is pushed, you can email the Leo mailing list and request it\nto be reviewed and merged to trunk.\n", "children": []}, {"h": "Running Leo", "gnx": "ekr.20100731112744.7277", "b": "You can run Leo from a Python interpreter as follows::\n\n    import leo\n    leo.run() # runs Leo, opening a new outline or,\n    leo.run(fileName=aFileName) # runs Leo, opening the given file name.\n\nAnother way to run Leo is as follows::\n\n    cd <path-to-launchLeo.py>\n    python launchLeo.py %*\n\nHere are some tips that may make running Leo easier:\n\n**Linux**\n    The following shell script will allow you to open foo.leo files by typing leo foo::\n\n        #!/bin/sh \n        python <leopath>launchLeo.py $1\n\n    where <leopath> is the path to the directory containing the leo directory. \n\n**Windows**\n    You can associate Leo with .leo files using a batch file. Put the\n    following .bat file in c:\\\\Windows::\n\n        <path-to-python>/python <path-to-leo>/launchLeo.py %*\n\n    Here <path-to-leo> is the path to the directory *containing* the leo directory,\n    that is, the directory containing launchLeo.py.\n", "children": ["ekr.20101126080134.5085", "ekr.20100731112744.7279", "ekr.20100731112744.7278", "ekr.20100731112744.7273"]}, {"h": "Running Leo the first time", "gnx": "ekr.20101126080134.5085", "b": "The first time you start Leo, a dialog will ask you for a unique identifier. If\nyou are using a source code control system such as bzr, use your bzr login name.\nOtherwise your initials will do.\n\nLeo stores this identifier in the file .leoID.txt. Leo attempts to create\nleoID.txt in the .leo sub-directory of your home directory, then in Leo's config\ndirectory, and finally in Leo's core directory. You can change this identifier\nat any time by editing .leoID.txt.\n", "children": []}, {"h": "Running Leo in batch mode", "gnx": "ekr.20100731112744.7279", "b": "On startup, Leo looks for two arguments of the form::\n\n    --script scriptFile\n\nIf found, Leo enters batch mode. In batch mode Leo does not show any windows.\nLeo assumes the scriptFile contains a Python script and executes the contents of\nthat file using Leo's Execute Script command. By default, Leo sends all\noutput to the console window. Scripts in the scriptFile may disable or enable\nthis output by calling app.log.disable or app.log.enable\n\nScripts in the scriptFile may execute any of Leo's commands except the Edit Body\nand Edit Headline commands. Those commands require interaction with the user.\nFor example, the following batch script reads a Leo file and prints all the\nheadlines in that file::\n\n    path = r\"<path-to-folder-containing-the-leo-folder>\\\\leo\\\\test\\\\test.leo\"\n\n    g.app.log.disable() # disable reading messages while opening the file\n    flag,newFrame = g.openWithFileName(path,None)\n    g.app.log.enable() # re-enable the log.\n\n    for p in newFrame.c.all_positions():\n        g.es(g.toEncodedString(p.h,\"utf-8\"))\n", "children": []}, {"h": "Running Leo from a console window", "gnx": "ekr.20100731112744.7278", "b": "Leo sends more detailed error messages to stderr,\nthe output stream that goes to the console window. In Linux and MacOS\nenvironments, python programs normally execute with the console window visible.\nOn Windows, can run Leo with the console window visible by associating .leo\nfiles with python.exe *not* pythonw.exe. \n\n.. For full instructions about how\n.. to do this, see `Associating Leo with .leo Files`_.\n", "children": []}, {"h": "The .leo directory", "gnx": "ekr.20100731112744.7273", "b": "Python's HOME environment variable specifies Leo's HOME directory.\nSee http://docs.python.org/lib/os-procinfo.html for details.\n\nLeo uses os.expanduser('~') to determine the HOME directory if no HOME environment variable exists.\n\nLeo puts several files in your HOME/.leo directory:\n.leoID.txt, .leoRecentFiles.txt, and myLeoSettings.leo.\n", "children": []}, {"h": "The Leo Tutorial", "gnx": "ekr.20091130111843.6787", "b": "", "children": ["ekr.20100805165051.7146", "ekr.20100808120531.4280", "ekr.20100808120531.4283"]}, {"h": "@file intro.txt", "gnx": "ekr.20100805165051.7146", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20091130111843.6788"]}, {"h": "@rst html\\intro.html", "gnx": "ekr.20091130111843.6788", "b": "################\nThe Leo Tutorial\n################\n\n.. index:: Leo's tutorial\n\nLeo is a power tool for people who want to organize, study and work with data,\nespecially complex data like computer programs, books, web sites and data bases.\nSuperficially, Leo may look like other outlining programs, code folding editors\nor class browsers, but it most certainly is not.\n\n.. index::\n    pair: Leonine; Tutorial\n\n.. _`Leo in a nutshell`: nutshell.html\n\nPeople say Leo is a revolutionary tool, and that Leo is fun to use, even\naddictive. There is a unique \"Leo way\" of managing data; the term **Leonine**\ndescribes how people treat data in \"the world according to Leo\". Leo definitely\ntakes a bit of work to understand. Leo's users speak of an \"Aha\" moment, when\nthey see how these pieces fit together: outline structure is significant\neverywhere.  For a more detailed introduction to Leo, see `Leo in a nutshell`_.\n\nLeo is freely available in source or binary form for all major platforms. You\nmay download Leo from http://sourceforge.net/projects/leo/files/Leo/ Leo is Open\nSoftware and may be freely distributed.\n\n`Leo's home page`_ contains additional documentation and links to other\nresources. For another introduction to Leo, open the file quickstart.leo in the\nleo/doc folder.\n\nThis tutorial introduces the reader to the basic concepts and features of Leo.\nIt helps to have Leo running for hands-on experience, but all examples here are\nself-contained, so the tutorial can be read off-line as well.\nSee `Leo's Installation Guide`_. for detailed installation instructions. If you\nhave problems installing Leo, please ask for help on `Leo's forum`_. \n\nThis tutorial does not attempt to be comprehensive and cover every single\nfeature of Leo, or even every commonly used feature. Instead, it introduces many\nof Leo's most noteworthy features, and will give you a good idea of Leo's flavor\nand style. After reading it, you will be able to use Leo in basic ways to create\nexternal files, organize data and run simple scripts. You will then be ready to\nlearn more about Leo's many advanced features.\n\nThe `Glossary`_ is also worth reading.\n\n.. contents::\n    :depth: 3\n\n", "children": ["ekr.20091130111843.6810", "ekr.20091130111843.6814", "ekr.20091130111843.6846", "ekr.20091201091455.6809", "ekr.20091130111843.6817", "ekr.20091130194648.6811", "ekr.20091130111843.6840", "ekr.20091222125456.6641", "ekr.20091130111843.6843"]}, {"h": "@rst-no-head links", "gnx": "ekr.20091130111843.6810", "b": ".. Links used in this document...\n\n.. _`Leo's forum`:      http://groups.google.com/group/leo-editor\n.. _`Leo's home page`:  http://webpages.charter.net/edreamleo/front.html\n.. _`Python`:           http://www.python.org/\n.. _`XML`:              http://en.wikipedia.org/wiki/XML\n\n.. _`Leo's Installation Guide`:     installing.html\n.. _`Using Leo's Commands`:         commands.html\n.. _`Scripting Leo with Python`:    scripting.html\n.. _`Customizing Leo`:              customizing.html\n.. _`Glossary`:                     genindex.html\n\n.. This image must appear in the _images folder on the web site.\n.. |leoMainWindow| image:: screen-shots/leo-qt-main-window.JPG\n", "children": []}, {"h": "Leo's main window", "gnx": "ekr.20091130111843.6814", "b": ".. index::\n    pair: Outline pane; Tutorial\n    pair: Body pane; Tutorial\n\nLet's start looking at Leo in detail. We'll start with what you see when you\nfirst open Leo, Leo's main window. Leo's main window, shown below, represents an\nentire project. As you can see, the main window contains three panes: the\n**outline pane** at the top left, the **log pane** at the top right, and the\n**body pane** at the bottom. The window also contains an **icon area** at the\nvery top, a **status area** and a **mini-buffer** at the very bottom.\n\n.. index::\n    pair: Main Window; Tutorial\n\n|leoMainWindow|\n\n.. index::\n    pair: Outline pane; Tutorial\n    pair: Icon box; Tutorial\n    pair: Expansion box; Tutorial\n\nOutline pane\n\n    The outline pane shows your project as an outline. The outline\n    contains all your project's data. An outline consists of **nodes**. The\n    **icon box** is a small icon directly to the left of the headline text.\n    The border of the icon box is black if the node has been changed.\n    Smaller icons within the icon box indicate the status of the node::\n\n        A small blue box:   the node has body text.\n        A red vertical bar: the node is marked.\n        A circular arrow:   the node is cloned.\n\n    If a node contains children, a smaller icon appears to the left of the icon\n    box. This icon contains a '+' or '-' symbol. Clicking this **expansion box**\n    expands or contracts the node.\n\n.. index::\n    pair: Node; Tutorial\n    pair: Headline; Tutorial\n    pair: Body text; Tutorial\n    pair: Parent; Tutorial\n    pair: Child; Tutorial\n    pair: Ancestor; Tutorial\n    pair: Descendant; Tutorial\n\nNode\n\n    Each outline node has two two parts, a **headline** and **body text**. The outline pane\n    shows headlines. Selecting a headline selects the entire node; the node's\n    body text appears in the body pane. Leo uses standard terminology to\n    describe the relationships of nodes in an outline. We speak of **parent**\n    nodes, **child** nodes, **ancestor** nodes and **descendant** nodes.\n\n.. index::\n    pair: Body pane; Tutorial\n\nBody pane\n\n    The body pane contains the body text of the node selected in the\n    outline pane.\n\n.. index::\n    pair: Log pane; Tutorial\n\nLog pane\n\n    The log pane contains informational messages from Leo or your scripts.\n\n.. index::\n    pair: Icon area; Tutorial\n\nIcon area\n\n    Depending on what plugins are enabled, the icon area may contain\n    buttons and other widgets that extend what Leo can do. The scripting plugin\n    makes it easy to add buttons to the icon area.\n\n.. index::\n    pair: Status area; Tutorial\n\nStatus area\n\n    The status area shows the line and column containing the body text's cursor,\n    and the **UNL** (Uniform Node Location), the path from the top of the outline\n    to the selected node.  This path will change as you change outline nodes.\n\n.. index::\n    pair: Minibuffer; Tutorial\n\nMinibuffer\n\n    You can type command and search strings in the minibuffer. It works much\n    like the Emacs mini-buffer. To enter a command, type <Alt-x> followed by the\n    command name and then <return>. To type a search string, type <ctrl-f>\n    followed by the search string and then <return>. For full details, see\n    `Using Leo's Commands`_.\n", "children": []}, {"h": "External files and @file nodes", "gnx": "ekr.20091130111843.6846", "b": ".. index::\n    pair: External file; Tutorial\n    pair: .leo file; Tutorial\n    pair: XML; Tutorial\n\nLeo stores outline data on your file system in **.leo files**. The format of\nthese files is `XML`_. You don't have to store all your data in .leo files: Leo\nallows you to store parts of your outline data **external files**, that is,\nother files on your file system.\n\n.. index::\n    pair: @file; Tutorial\n\n**@file nodes** create external files. \\@file nodes have headlines starting with\n\\@file followed by a file name. Some examples::\n\n    @file leoNodes.py\n    @file ../../notes.text\n\n.. index::\n    pair: Load directory; Tutorial\n\nThe file name can be an absolute path or a relative path to the file that starts\nat Leo's **load directory**, the directory containing the .leo file.\n\nLeo reads and writes external files automatically when you open or save your Leo\noutline:\n\n- When you open an outline (.leo file) Leo reads all the external files created\n  by the \\@file nodes in the outline. If you have changed an external file\n  outside of Leo, Leo will update the corresponding \\@file tree to reflect those\n  changes when Leo next opens the outline.\n\n.. index::\n    pair: Dirty node; Tutorial\n\n- When you save your outline, Leo writes all **dirty** \\@file nodes. An \\@file\n  is dirty if the node or any of its descendant nodes has changed.\n  **Important**: When Leo writes an external file, Leo writes all the essential\n  information in the \\@file tree to the external file, *not* to the .leo file.\n  The only nodes that gets written to the .leo file are nodes that are not\n  contained in any \\@file tree.\n", "children": []}, {"h": "Creating external files from outlines", "gnx": "ekr.20091201091455.6809", "b": ".. index::\n    pair: Leo markup; Tutorial\n\nWe come now to one of Leo's most important and unusual features. When Leo writes\nan external file, it does so in a flexible manner, directed by **outline-based\nmarkup**. This markup tells Leo exactly how to create the external file from an\n\\@file node.\n\n.. index::\n    pair: Outline order; Tutorial\n\nThe **obvious** way to write an external file would be to write the @file node\nitself followed by all the descendant nodes in **outline order** (the order in\nwhich nodes appear in the outline). But Leo does *not* write external files\nexactly this way.\n\n.. index::\n    pair: @all; Tutorial\n    pair: @others; Tutorial\n\nYes, Leo does indeed start by writing the \\@file node itself. But Leo writes the\n@file node's descendants only when it sees one of three kinds of Leo\nmarkup: section references, the @others directive and the @all directive.\nWe'll discuss these three kinds of markup in the next section.\n\nSection references and the @others and @all directives tell Leo to write the\n**expansion** of one or more descendant nodes to the external file. Programmers\nwill recognize this process as akin to macro expansion. The following sections\nwill explain this process in detail.\n", "children": ["ekr.20091201091455.6813", "ekr.20091201091455.6814", "ekr.20091201091455.6815", "ekr.20091130111843.6838", "ekr.20091130111843.6839"]}, {"h": "Section references", "gnx": "ekr.20091201091455.6813", "b": ".. index::\n    pair: Section reference; Tutorial\n\nA **section reference** is a line of body text of the form::\n\n    << a section name >>\n\n.. index::\n    pair: Section name; Tutorial\n\nHere, \"a section name\" can be any descriptive text not containing \">>\". When Leo\nencounters a section reference, Leo searches all the descendants of the node\ncontaining the reference looking for a node whose headline matches the section\nreference. That is, Leo looks for a descendant node whose headline starts with::\n\n     << a section name >>\n\n.. index::\n    pair: Named node; Tutorial\n\nWe call such nodes **named nodes**. Leo doesn't require an exact match. Leo\nignores whitespace and the case of letters when comparing headlines to section\nreference. Also, Leo ignores anything that may follow the section name in a\nnamed node. For example, the following headline will match the section reference\nabove::\n\n    << A Section Name >> (to do)\n\nIf Leo does find a match, Leo *replaces* the section reference (\"<< a section\nname>>\") by the *expansion* of the body text of the matched node. That is, Leo\nreplaces the section reference by the body text of the matched node, but Leo\n**expands all markup** in the matched node *before* making the replacement. The\nentire expansion of the matched node replaces the original section reference.\nProgrammers will recognize this process as recursive macro expansion.\n\nWe have just discussed what happens if Leo does find a descendant named node\nthat matches the section reference. If no such match is found the section\nreference is said to be **undefined** and Leo does not write any data to the\nexternal file. This is *not* a serious error: Leo will will save the erroneous\n\\@<file> tree in the .leo file instead of the external file. No information is\nlost. By the way, Leo's syntax coloring will indicate undefined section\nreference by underlining the section name.\n\n**Important**: the indentation of section references matters. When expanding a\nsection reference, Leo indents every line of the expansion by the leading\nwhitespace that occurs before the section reference. Note also that you can't\nwrite something after a section reference and expect it to end up on the same\nline after expansion--Leo always writes a newline after the expansion.\n", "children": []}, {"h": "The @others directive", "gnx": "ekr.20091201091455.6814", "b": ".. index::\n    pair: @others; Tutorial\n\nThe **@others directive** is the second (and most common) way of including\ndescendant nodes in an external files. When Leo encounters the \\@others\ndirective it replaces the \\@others directive by the *expansion* of all\n**unnamed** descendant nodes. As with section references, Leo replaces all\nmarkup in the descendant nodes, and the entire expansion replaces the \\@others\ndirective.\n\nIn short, section references write *named* nodes; \\@others directives write all\n*unnamed* nodes. By the way, no node may contain more than one \\@others\ndirective because there would be no way to \"apportion\" descendant nodes to more\nthan one \\@others directive. However, nodes may contain as many section\nreferences as you like.\n\nAs with section references, the indentation of the \\@others directive matters.\nThis allows Leo to handle Python source code properly. For example, the following\nis a common way of representing a Python class::\n\n    class myClass:\n        '''a docstring'''\n        @others\n\nWhen Leo writes this node to an external file, Leo will write the first two\nlines to the external file, with the indentation in effect for the node. Leo\nwill then write all descendant nodes to the external files, with *additional*\nindentation equal to the leading whitespace appearing before the \\@others\ndirective.\n", "children": []}, {"h": "The @all directive", "gnx": "ekr.20091201091455.6815", "b": ".. index::\n    pair: @all; Tutorial\n\nThe \\@all directive is the third, simplest (and least common) way of including\ndescendant nodes. This directive causes Leo to write all descendant nodes in\noutline order, regardless of whether they are named or not. Furthermore, the\n\\@all directive does not expand any markup in descendant nodes. This results in\nLeo writing the external file in the \"obvious\" way. That is, Leo writes all\ndescendant nodes in outline order.\n\nUse the all directive if your external file contains unrelated nodes. For\nexample, I use an external file to store programming notes. These notes\ntypically contain snippets of programming source code, but there is no real\nrelationships between the snippets--the file is simply a grab bag of\ninformation. The \\@all directive is designed for this situation.\n", "children": []}, {"h": "Choosing between @others and sections", "gnx": "ekr.20091130111843.6838", "b": ".. index::\n    pair: Style; Tutorial\n\nNewcomers to Leo frequently ask when to use the \\@others directive and when to\nuse sections. It is good style to use section references only when the order of\ntext within a external file matters. For example, Python programmers put\ndocstrings and imports at the start of files. So the body text of\n\\@file nodes typically look something like this::\n\n    << docstring >>\n    @language python\n    @tabwidth -4\n    << imports >>\n    @others\n\nThis ensures that the docstring is first in the file, followed by imports,\nfollowed by everything else. Note that the order in which functions are defined\nin a file, or methods defined within a class, typically does *not* matter. Thus,\nit is good style to define classes like this::\n\n  class myClass:\n        << class attributes >>\n        @others\n\nIt would be bad style to define a class like this::\n\n  class myClass:\n        << class attributes >>\n        << method 1 >>\n        << method 2 >>\n        ...\n\nNot only does this over-specify the order in which methods are defined, but it\nrequires lots of extra typing. Not only must you add a line for each method, but\nheadlines must contain section names such as << method 1 >>, <<method 2>>, etc.\nWhen using \\@others it is good style simply to put the name of each method in the\nheadline.\n", "children": []}, {"h": "Organizing programs as outlines", "gnx": "ekr.20091130111843.6839", "b": "A few more words about style:\n\n- It is good style to put each class, function or method in its own node. This\n  makes it easy to see the shape of your code.\n\n- It is good style to use organizer nodes to group related functions or methods.\n  An organizer node has no content except maybe for comments. Like this::\n\n    + myClass\n        + birth and death\n            + __init__\n            etc.\n        + getters\n            etc.\n        + setters\n            etc.\n        + misc methods\n            etc.\n\n  (In this notation, '+' denotes a headline.) This organization is far superior\n  to using hideous comments like::\n\n    ###########\n    # Getters #\n    ###########\n\n- It is bad style to use \\@others in organizer nodes. There is no need to do so.\n\n- It is bad style to use \\@others when order does matter. The reason is that it\n  is very easy to move nodes in a tree by mistake, say by alphabetizing nodes.\n  One wants to make the meaning of a external file immune from such movements.\n\nOne last word about style. The world won't end if you happen to use bad style by\nmistake: you just might cause a bit more work for yourself than was strictly\nnecessary. Feel free to invent your own style of using Leo. Still, it would be\nwise to \"know the rules before you break them.\"\n", "children": []}, {"h": "Clones & views", "gnx": "ekr.20091130111843.6817", "b": ".. index::\n    pair: Clone; Tutorial\n\nA **clone** is a node that appears in more than one place in a Leo outline.\nClones are marked with a small red arrow in the icon box. All clones of a node\nare actually *the same node*, so any change to one clone affects all clones. For\nexample, inserting, moving or deleting any child of a clone will change all\nother clones on the screen.\n\nPlease take a few moments to experiment with clones. Create a node whose\nheadline is A. Clone node A using the Clone Node command in Leo's Outline menu.\nType some text into the body of either clone of A. The same text appears in the\nbodies of all other clones of A. Now insert a node, say B, as a child of any of\nthe A nodes. All the A nodes now have a B child. See what happens if you clone\nB. See what happens if you insert, delete or move nodes that are children of A.\nVerify that when you delete the penultimate clone, the last clone becomes a\nregular node again.\n\nClones are much more than a cute feature. Clones allow multiple views of data to\nexist **within a single outline**. With Leo, there is no such thing as a single,\n\"correct\" view of data. You can have as many views of data as you like.\n\nTo create a new view of the data in your outline, just do the following:\n\n.. index::\n    pair: View node; Tutorial\n\n1. Create an *ordinary* node, that will represent the view. We call these nodes\n   **view nodes** merely to indicate they represent a view.\n\n2. Clone all the nodes from the outline that you want the view to contain. Move\n   these clones so they become children of the view node.\n\n3. (Optional) You can add regular nodes as children of the view node too.\n\n.. index::\n    pair: Bug node; Tutorial\n\nFor example, when I fix a bug in Leo, I create an ordinary node to represent the\nbug. This **bug node** is my view of all the data in Leo's source code that\nrelates to the bug. As I discover code related to the bug, I clone their nodes\nand move them under the bug node. I'll also add ordinary nodes as children of\nthe bug node. These nodes contain the original bug report, descriptions of how I\nfixed the bug, test data, or any other notes I might want to keep.\n\nOnce I have created the bug node, I concentrate *only* on that node and its\nchildren. I can examine the bug node and its children without having to jump\naround the outline. Everything I need is in one place. When I get around to\nactually fixing the bug I can do so by changing the clones. Again, I do not have\nto jump around the outline. It doesn't matter how big or complex the entire\noutline is: I am only dealing with the bug node and its children. This extremely\nnarrow focus makes it *much* easier to fix bugs.\n\nBy the way, I never have to remember to save external files. When I change any\nclone, Leo marks all instances of that clone throughout the entire outline as\ndirty (changed). When I save the Leo outline, Leo automatically writes all the\nexternal files that contain dirty nodes.\n\nViews have an unlimited number of uses. Use them whenever you want to focus your\nattention on some smaller set of nodes. For example, I often create view nodes\nwhen studying other people's code. The view node helps me concentrate on just\nthe part of the code that interests me at the moment.\n", "children": []}, {"h": "More about directives", "gnx": "ekr.20091130194648.6811", "b": ".. index::\n    pair: Directive; Tutorial\n\nLeo's **directives** control such things as syntax coloring, line wrapping\nwithin the body pane and the width of tabs. Leo directives may appear in\nheadlines or body text. Leo directives start with '@', followed by the name of\nthe directive.\n\n**Note**: Leo handles Python decorators properly, providing they don't conflict\nwith Leo's directives.  \n\nHere are some of Leo's directives::\n\n    @language python\n    @tabwidth -4\n    @wrap\n    @nowrap\n    @color\n    @nocolor\n    @killcolor\n\nMost directives must start with the '@' in the leftmost column, but whitespace\nmay appear before the '@others' and '@all' directives. As we have seen, such\nwhitespace is significant.\n\nDirectives apply until overridden in a subtree. All of these directives apply to\nthe node they are contained in, and also to the entire tree of descendant nodes,\nunless **over-ridden** by a similar directive in a descendant node. For example,\nthe directive::\n\n    @language python\n\ntells Leo to syntax color the node and all descendant nodes as Python code.\nHowever, some descendant node might contain::\n\n    @language rest\n\nwhich tells Leo to color that node and all of *its* descendants as\nreStructureText. This principle applies to almost all of Leo's directives: the\ndirective is in effect throughout a tree, unless overridden in some subtree.\n\n.. index::\n    pair: @color; Tutorial\n    pair: @nocolor; Tutorial\n    pair: @killcolor; Tutorial\n    pair: Ambiguous Node; Tutorial\n\n.. glossary::\n\n\\@color, \\@nocolor and \\@killcolor\n\n    These directives control how Leo colors body text. You can mix \\@nocolor and\n    \\@color directives in a single node. This directives affect descendant\n    nodes unless a node contains both \\@color and \\@color.  Such **ambiguous**\n    nodes do not affect the coloring of descendant nodes.\n\n.. index::\n    pair: @first; Tutorial\n\n\\@first\n\n    This directive forces a lines to appear before the first sentinel of a\n    external file. Here is a common way to start a Python file::\n\n        @first #! /usr/bin/env python\n        @first # -*- coding: utf-8 -*-\n\n.. index::\n    pair: @language; Tutorial\n\n\\@language\n\n    Sets the language in effect for a tree. This affects how Leo colors body\n    text. It also sets the comment delimiters used in external files. Leo\n    supports dozens of languages. See `Leo's reference` for a complete list.\n    Here are a few::\n\n        @language python\n        @language c\n        @language rest # restructured text\n        @language plain # plain text: no syntax coloring.\n\n.. index::\n    pair: @pagewidth; Tutorial\n\n\\@pagewidth <n>\n\n    Sets the page width used to format break doc::\n\n        @pagewidth 100\n\n.. index::\n    pair: @path; Tutorial\n\n\\@path <path>\n\n    This directive is a convenience.  Rather than specifying long paths\n    in @file nodes, you can specify a path in an ancestor @path node.\n    For example, suppose three nodes have the following headlines::\n\n        @path a\n            @path b\n                @file c/d.py\n\n    Because of the ancestor @path nodes, the @file node creates the file\n    a/b/c/d.py\n\n    Within @path and @<file> paths, {{exp}} gets evaluated with the following\n    symbols known: c, g, p, os and sys.  For example::\n\n        @file {{os.path.abspath(os.curdir)}}/abc.py\n\n    refers to the file abc.py in (absolute path of) the current directory.\n\n.. index::\n    pair: @tabwidth; Tutorial\n    pair: Negative tab width; Tutorial\n\n\\@tabwidth\n\n    Sets the width of tabs. Negative tab widths cause Leo to convert tabs to\n    spaces and are highly recommended for Python programming.\n\n.. index::\n    pair: @wrap; Tutorial\n    pair: @nowrap; Tutorial\n\n\\@wrap and \\@nowrap.\n\n    These enable or disable line wrapping the Leo's body pane.\n", "children": []}, {"h": "Scripting, extending and customizing Leo", "gnx": "ekr.20091130111843.6840", "b": ".. index::\n    pair: Scripting Leo; Tutorial\n\nLeo is fully scriptable using the Python language. Leo can execute any body text\nas a Python script. To run the entire body text as a script, simply choose the\nnode and execute the Execute Script command (Ctrl+B). If text is selected, the\nExecute Script command will run just the selected text as the script.\n\nThe Execute Script command **preprocesses** the script before executing it, in\nexactly the same way that Leo writes external files. Leo expands section\nreferences and processes \\@others directives before executing the script. This\nallows you to use all of Leo's outlining capabilities to organize your scripts.\n\nYour Python scripts can easily access data in an outline. Leo's execute-script\n(Ctrl-B) command predefines three variables, c, g and p, that scripts can use to\neasily access any part of any Leo outline, and Leo's own source code. For\nexample, the following script will print all the headlines in an outline::\n\n    for p in c.all_positions():\n        print(' '*p.level(),p.h)\n\nThe example above is only the beginning of what scripts can do.\nSee `Scripting Leo with Python`_ for a complete discussion of scripting Leo.\n\n.. index::\n    pair: Extending Leo; Tutorial\n\n**Plugins** are Python modules that change how Leo works. Leo's user have\ncontributed dozens of plugins that have extended Leo's capabilities in many new\ndirections. The file leoPlugins.leo contains all plugins that are included in\nLeo distributions.\n\n.. index::\n    pair: @asis; Tutorial\n\nPlugins and other parts of Leo can get options from **@settings** trees.\n\\@settings trees allow plugins to get options without any further support from\nLeo's core code. For a full discussion of \\@settings trees,\nsee `Customizing Leo`_.\n", "children": []}, {"h": "Summary", "gnx": "ekr.20091222125456.6641", "b": "Using Leo quickly becomes second nature:\n\n- You can use Leo like any ordinary outliner, as a filing cabinet, but Leo's\n  clones makes this filing cabinet much more flexible and useful than usual.\n\n- You create external files using \\@file trees. Within \\@file trees, you use\n  section references and the \\@others directive to tell Leo how to write nodes\n  to the external file. Directives such as \\@tabwidth and \\@language provide other\n  information to Leo. Leo's \\@file trees allow you to organize your scripts\n  and programs with Leo's outline structure.\n\n- You can execute Python scripts from any node in a Leo outline. Leo scripts\n  have full, easy, access to all the information in the outline. Using scripts\n  and plugins, you can easily add new features to Leo.\n", "children": []}, {"h": "Further study", "gnx": "ekr.20091130111843.6843", "b": "LeoPyRef.leo (in the core subdirectory of the leo folder) contains almost all of\nLeo's source code. It provides hundreds of examples of everything discussed\nhere. This file will repay close study. For full details on all aspects of Leo\nsee LeoDocs.leo.\n", "children": []}, {"h": "@file outline-commands.txt", "gnx": "ekr.20100808120531.4280", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20100808120531.4281"]}, {"h": "@rst html/outline-commands.html", "gnx": "ekr.20100808120531.4281", "b": "############################\nSome outline commands\n############################\n\n.. index::\n    pair: Outline commands; Tutorial\n\nYou can use Leo as fairly typical outliner. Click the expansion box of nodes to\nshow and hide their children.\n\n.. index::\n    pair: Tab completion; Tutorial\n\nPlay around with some of the commands from the Outline menu or from the\nminibuffer. The keyboard shortcut and minibuffer key sequence appear in\nparentheses. **Note**: as usual, you can use tab completion in the minibuffer.\n\nEdit Headline (Ctrl+H or <Alt-x>edit-headline<return>)\n\n    Begins editing of the headline text of a node.\n    To end editing, hit <return> or <Ctrl-g>\n\nInsert Node (Ctrl+I or <Alt-x>insert-node<return>)\n\n    Inserts a new headline into the outline.\n\nCut Node (Ctrl+Shift+X or <Alt-x>cut-node<return>)\n\n    Deletes a node and all its descendants, copying them to the clipboard.\n\nPaste Node (Ctrl+Shift+V or <Alt-x>paste-node<return>)\n\n    Pastes a tree copied by the Cut Node command.\n\nCopy Node (Ctrl+Shift+C or <Alt-x>copy-node<return>)\n\n    Copies a node and all its descendants to clipboard without deleting it from\n    outline. You can copy a tree from one Leo outline to another using Copy Node\n    and Paste Node.\n\nContract or Go Left (Alt-Left-Arrow or <Alt-x>contract-or-go-left<return)\n\n    Contracts a node if it is expanded, otherwise selects its parent.\n\nExpand and Go Right (Alt-Right-Arrow or <Alt-x>expand-and-go-right<return>)\n\n    Select a node's first child, expanding the original node if needed.\n\nGoto Prev Visible (Alt-Up-Arrow or <Alt-x>goto-prev-visible<return>)\n\n    Select the previous visible node.\n\nGoto Next Visible (Alt-Down-Arrow or <Alt-x>goto-next-visible<return>)\n\n    Select the next visible node.\n\nMove Up (Ctrl+U or <Alt-x>move-outline-up<return>)\n\n    Moves a node up in the outline.\n\nMove Down (Ctrl+D or <Alt-x>move-outline-down<return>)\n\n    Moves a node down.\n\nMove Left (Ctrl+L or <Alt-x>move-outline-left<return>)\n\n    Moves a node left.\n\nMove Right (Ctrl+R or <Alt-x>move-outline-right<return>)\n\n    Moves a node right.\n\nPromote (Ctrl+} or <Alt-x>promote<return>) \n\n    Makes all the children of a node to be siblings of the node.\n\nDemote (Ctrl+{ or <Alt-x>demote<return>)\n\n    Makes all following siblings of a node to be children of the headline.\n\nPlease experiment with Leo's outline now. Move around the tree and\nexpand/collapse nodes by pressing Alt + arrow keys. This also moves the focus to\ntree, so, after pressing Alt + arrow, you can move around by using arrow keys\nalone. Return the focus to the body control by pressing Enter.\n", "children": []}, {"h": "@file nutshell.txt", "gnx": "ekr.20100808120531.4283", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20100808120531.4284"]}, {"h": "@rst html/nutshell.html", "gnx": "ekr.20100808120531.4284", "b": "#################\nLeo in a Nutshell\n#################\n\nThis page introduces Leo's features and shows why Leo is a unique tool for\nunderstanding and manipulating data.\n\n**Outlines and organization**: Leo's outlines are more flexible and powerful\nthan any other outline, for at least three reasons:\n\n1. Unlike class browsers, you are in complete control of the outline's\n   structure. You can organize it however you like, and Leo will *remember* what\n   you have done and will show it to you just that way when come back next time.\n   This seems like a minor feature. After you use Leo, you will see that it is\n   not.\n\n2. Leo outlines may *look* like other outlines, but in fact Leo outlines are\n   views of a more general underlying data (graph) structure. Nodes in Leo's\n   outlines may appear in many places in the same outline. We call such nodes\n   **clones**. Using clones, it is easy to create as many **views** of the data\n   in the outline as you like. In effect, Leo becomes a supremely flexible\n   filing cabinet: any outline node may be filed any place in this cabinet.\n\n3. Leo outlines are intimately connected to both external files and Python\n   scripting, as explained next.\n\n.. index::\n    pair: External file; Nutshell\n\n**External files**: Any outline node (and its descendants) can be \"connected\" to\nany file on your file system. Three common kinds of connection are:\n\n1. @edit: Leo reads the entire external file into the @edit node's body text.\n\n2. @auto: Leo parses the external file and automatically creates an outline that\n   shows the structure of the external file, just as in typical class browsers.\n\n3. @file: Leo makes a two-way connection between the @file tree (the @file node\n   and its descendants) and the external file. You can update the external file\n   by writing the Leo outline connected to it, or you can update the outline by\n   changing the external file. To do this Leo uses comments in the external file\n   called **sentinels** that represent the outline structure *in the external\n   file itself*.\n\n\\@edit, \\@auto and \\@file allow you to share external files with others in a\ncollaborative environment. With \\@file, you also **share outline structure**.\n\nA single Leo outline can connect to dozens or even hundreds of external files.\nUsing Leo, you never have to open these files by hand, Leo does so automatically\nwhen it opens the Leo outline. Outlines connected to external files make Leo a\nnew kind of IDE (Integrated Development Environment).\n\n**Scripting**: Every outline node can contain Python scripts. Moreover, each\nnode in a Leo outline is a programmable object. All nodes are *easily* available\nto any Leo script. The structure of the outline is *also* easily available to\nany script.  Scripts can *easily* determine the parents and children of any node.\nFinally, Leo makes it easy for scripts to visit any or all nodes of an outline.\n\n.. index::\n    pair: @kind convention; Nutshell\n    pair: User-defined types; Nutshell\n\nLeo's headlines provide a natural place to indicate the **type** of data\ncontained in nodes. By *convention*, @test in a headline denotes a unit test,\n\\@command creates a new Leo command. The \\@kind convention creates \n**user-defined types** that turn any outline Node into a true programming\nobject.\n\n.. index::\n    pair: Leonine; Nutshell\n\nUnifying scripting, data and outline structure creates a new world. We use the\nterm **Leonine** to denote the Leo-centric (outline-centric) view of\nprogramming, data and scripting. Here are some of the implications of this\nnew world:\n\n**Data organization**: Leo's clones allow unprecedented flexibility in\norganizing data. Leo outlines have been used as an entirely new kind of\ndatabase. It is easily scriptable. As my brother has shown, it is possible to\ndesign Leo outlines so that parts of the outline *are* SQL queries!\n\n**Design**: With Leo, you always see the big picture, and as many of the details\nas you like. But this makes outlines ideal for representing designs. In fact,\nLeo outlines don't just represent designs, they *are* the designs. For example,\nall of Leo's source code reside in just a few Leo outlines. And Leo outlines can\nrepresent input data to other design tools.\n\n**Programming/Coding**: It's much easier to program when the design is always\neasily visible. Nodes provide the perfect way to organize large modules, classes\nand functions. Nodes also provide unlimited room to save as many details as you\nlike, *without* cluttering your overall view of the task, or rather tasks, at\nhand.\n\n**Testing**: Leo is a supremely powerful unit-testing framework:\n\n1. You can make a node a unit test simply by putting @test at the start of its\n   headline. Leo will then automatically generate all the blah-blah-blah needed\n   to turn the node's script into a fully-functional unit test. Oh yes,\n   the headline becomes the name of the unit test.\n\n2. Unit tests can use data in children of @test nodes. Typical tests put input\n   data in one child node, and the expected results of running the test in another\n   child node. The test simply compares the actual and expected results.\n\n3. You can easily run tests in the entire outline or just in the selected\n   outline. Because tests reside in nodes, you can use clones to organize tests\n   in as many ways as you like. For example, it is trivial to run only those\n   tests that are failing.\n\n**Maintenance and support**: Leo's ability to contain multiple views of data is\n*precisely* what is needed while maintaining any large project. For every new\nsupport task and every new bug, a new (plain) **task node** will contain all the\ndata needed for that task, notes, test data, whatever. Furthermore, when fixing\nbugs, the task node can contain clones of all classes, methods or functions\nrelated to the bug. Fixing a node in the task node fixes the node in the\nexternal file! And as always, you can use all of Leo's outlining features\n(including clones) to organize your task nodes.\n\n**Organization everywhere**: Have you noticed that Leo's organizational prowess\napplies to *everything*? Indeed, you can use outlines and clones in new ways to\norganize files, projects, data, design, programs, testing, and tasks. Leo\ndoesn't need lots of features--outlines, clones and scripts suffice.  The more\ncomplex your data, designs, program and tasks, the better Leo is suited to them.\n\nIt's time to mention one of Leo's most unique features.  Simple, *optional*\nmarkup makes it possible to synthesize (build) scripts and entire computer programs\nfrom outlines. Leo is more than a filing cabinet for scripts and programs, Leo\nis a build tool for scripts and outlines!\n\n**Scripting everything**: Let's step back a moment. A single outline can contain\ndatabases, designs, actual computer code, unit tests, test scripts and task\nnodes. But Leo scripts will work on any kind of node. Thus, it is *easy* to run\nscripts on *anything*! Examples:\n\n- Scripting itself: @button nodes creates a **script button**, a Python script\n  that can be applied to any node in an outline! Script buttons have been\n  written (in Python) that will execute Leo scripts in other languages.\n\n- Data: The @kind convention for headlines tells scripts what a node contains\n  without having to parse the node's contents.  The possibilities are endless.\n\n- Design: scripts can verify properties of design based on either the contents\n  of design nodes or their outline structure.\n\n- Coding: scripts routinely make massive changes to outlines. Scripts and unit\n  tests can (and do!) verify arbitrarily complex properties of outlines.\n\n- Scientific programming: Leo scripts can run experiments many times using\n  different starting points. Nodes are the perfect place to store results and\n  notes. Many scientists use the IPython shell-- Using Leo's **IPython bridge**,\n  Leo can execute IPython scripts, and scripts in IPython have full access to\n  all nodes in Leo outlines.\n\n- Testing: scripts can (and do!) create @test nodes themselves.\n\n- Maintenance: scripts could gather statistics about tasks using simple @kind\n  conventions.\n\nThe Leo Aha is just this: Leo outlines are far more than eye candy. Leo outlines\nrevolutionize your view of data--Leo outlines can organize *anything*. Leo\noutlines create a new kind of programming environment, one in which outline\nstructure and user-defined data types create totally new opportunities.\n", "children": []}, {"h": "Using Leo", "gnx": "EKR.20040524104904.99", "b": "", "children": ["ekr.20100805165051.7155"]}, {"h": "@file commands.txt", "gnx": "ekr.20100805165051.7155", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901101608.2"]}, {"h": "@rst html\\commands.html", "gnx": "ekr.20050901101608.2", "b": "###########\nUsing Leo\n###########\n\nThis chapter discusses the basics of using Leo, including all of Leo's\ncommands. It starts with a discussion of the Emacs-like minibuffer,\nthen continues with a discussion of commands in each of Leo's menus.\n\n.. contents::\n    :depth: 3\n\n", "children": ["ekr.20050901101852", "ekr.20060420094611", "ekr.20120229094652.15103", "ekr.20100504092040.17423", "EKR.20040524104904.100", "EKR.20040524104904.111", "EKR.20040524104904.143", "EKR.20040524104904.151", "EKR.20040524104904.157"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050901101852", "b": ".. External links...\n.. _CWEB:       http://www-cs-faculty.stanford.edu/~knuth/cweb.html\n.. _noweb:      http://www.eecs.harvard.edu/~nr/noweb/\n\n.. Relative links...\n.. _`Writing Programs in Leo`:          directives.html\n.. _`Customizing Leo`:                  customizing.html\n.. _`Clones and views`:                 intro.html#clones-views\n.. _`Creating script buttons`:          scripting.html#creating-script-buttons\n.. _`A Tutorial Introduction to Leo`:   intro.html\n\n", "children": []}, {"h": "The minibuffer and minibuffer commands", "gnx": "ekr.20060420094611", "b": "The mini-buffer is a text area at the bottom of the body pane. You use it\nlike the Emacs mini-buffer to invoke commands by their so-called *long name*.\n\nThe ``full-command`` (Alt-x) command puts the focus in the minibuffer. Type\na full command name, then hit <Return> to execute the command. Tab\ncompletion works, but not yet for file names. For example, to print a list\nof all commands type::\n\n    <Alt-X>print-commands<Return>\n    \n**Extremely important**: Like Emacs, many of Leo's commands have long-winded names.\nIt is **not**, repeat **not** necessary to type the entire name in the minibuffer!\nInstead, you can use **tab completion** to shortcut your typing.  For example,\nSuppose you want to execute the print-commands return. First, you type the first\nfew characters of the command, and hit the <tab> key::\n\n    <Alt-x>pri<Tab>\n    \nYou will see the following list of completions in the log window::\n\n    print-all-uas\n    print-bindings\n    print-cmd-docstrings\n    print-commands\n    print-focus\n    print-node-uas\n    print-plugin-handlers\n    print-plugins-info\n    print-settings\n    \nThe minibuffer now contains the **longest common prefix** of all the completions,\nin this case::\n\n    print-\n    \nSo now, all you have to do is type::\n\n    s<tab>\n    \nand the minibuffer will show::\n\n    print-settings\n    \nFinally, execute the command by hitting the <return> key. Using tab\ncompletion quickly becomes second nature. It saves a huge amount of typing.\nMore importantly, it means that not every command needs to be bound to a\nkeystroke in order to be conveniently available.\n\nThe ``keyboard-quit`` (Ctrl-g) commands exits any minibuffer mode and puts\nthe focus in the body pane. **Important**: Use ctrl-g whenever you are\nunsure of what is happening.\n\n..  The ``universal-argument`` (Alt-u) command acts like Emacs Ctrl-u.\n.. It adds a repeat count for later command. Ctrl-u 999 a adds 999 a's.\n\nThe following sections list the various commands that you can invoke from\nthe minibuffer. **Important**: you may bind keystrokes to any of these\ncommands. See `Customizing Leo`_ for full details.\n", "children": ["ekr.20060613062025.6", "ekr.20060613062025.1", "ekr.20060613062025.4", "ekr.20060613062025.5", "ekr.20060613062025.9", "ekr.20060613062025.2", "ekr.20060613062025.10", "ekr.20060613062025.7", "ekr.20060613062025.8"]}, {"h": "Basic editing commands", "gnx": "ekr.20060613062025.6", "b": "Here is a list of Leo's basic editing commands with the default (EKR)\nbindings shown::\n\n    Left                back-char\n    Shift-Left          back-char-extend-selection\n                        back-paragraph\n                        back-paragraph-extend-selection\n                        back-sentence\n                        back-sentence-extend-selection\n                        back-to-indentation\n    Alt-B or Ctrl-Left  back-word\n    Alt-Shift-B         back-word-extend-selection\n    Ctrl-Shift-Left     back-word-extend-selection\n    BackSpace           backward-delete-char\n    Shift-BackSpace     backward-delete-char\n    Ctrl-BackSpace      backward-delete-word\n                        backward-delete-word-smart\n                        backward-kill-paragraph\n                        backward-kill-sentence\n                        backward-kill-word\n    Ctrl-Home           beginning-of-buffer\n    Ctrl-Shift-Home     beginning-of-buffer-extend-selection\n    Home                beginning-of-line\n    Shift-Home          beginning-of-line-extend-selection\n    Ctrl-C              copy-text\n    Ctrl-X              cut-text\n    Delete              delete-char\n    Ctrl-End            end-of-buffer\n    Ctrl-Shift-End      end-of-buffer-extend-selection\n    End                 end-of-line\n    Shift-End           end-of-line-extend-selection\n    Alt-M               exchange-point-mark\n    Ctrl-W              extend-to-word\n    Right               forward-char\n    Shift-Right         forward-char-extend-selection\n                        forward-paragraph\n                        forward-paragraph-extend-selection\n                        forward-sentence\n                        forward-sentence-extend-selection\n    Ctrl-Right          forward-word\n    Ctrl-Shift-Right    forward-word-extend-selection\n    Tab                 indent-region\n    Return              insert-newline\n                        move-lines-down\n                        move-lines-up\n                        move-past-close\n                        move-past-close-extend-selection\n    Ctrl-J or Tab       newline-and-indent\n    Down                next-line\n    Shift-Down          next-line-extend-selection\n    Ctrl-V              paste-text\n    Up                  previous-line\n    Shift-Up            previous-line-extend-selection\n    Shift-Ctrl-Z        redo\n    Ctrl-A              select-all\n    Ctrl-Z              undo\n    Shift-Tab           unindent-region\n", "children": []}, {"h": "Debugging commands", "gnx": "ekr.20060613062025.1", "b": "These commands are for debugging Leo itself::\n\n    collect-garbage\n    debug\n    disable-gc-trace\n    dump-all-objects\n    dump-new-objects\n    dump-outline\n    enable-gc-trace\n    free-tree-widgets\n    print-focus\n    print-gc-summary\n    print-stats\n    verbose-dump-objects\n", "children": []}, {"h": "Emacs commands", "gnx": "ekr.20060613062025.4", "b": "The following commands work just like their Emacs counterparts.\nUse the help-for-command command for further details::\n\n                add-space-to-lines\n                add-tab-to-lines\n                advertised-undo\n                capitalize-word\n                center-line\n                center-region\n                clean-lines\n                clear-extend-mode\n                clear-kill-ring\n                clear-rectangle\n                clear-selected-text\n                count-pages\n                count-region\n                dabbrev-completion\n                dabbrev-expands\n                delete-comments\n                delete-file\n                delete-indentation\n                delete-rectangle\n                delete-spaces\n                diff\n                digit-argument\n                downcase-region\n                downcase-word\n                end-kbd-macro\n                escape\n                eval-expression\n                expand-region-abbrevs\n                fill-paragraph\n                fill-region\n                fill-region-as-paragraph\n                flush-lines\n                full-command\n                goto-char\n                how-many\n                increment-register\n                indent-region\n                indent-relative\n                indent-rigidly\n                indent-to-comment-column\n                insert-body-time\n                insert-file\n                insert-keyboard-macro\n                insert-parentheses\n                insert-register\n                inverse-add-global-abbrev\n                jump-to-register\n                keep-lines\n                keyboard-quit\n                kill-all-abbrevs\n                kill-buffer\n    Ctrl-K      kill-line\n                kill-paragraph\n                kill-rectangle\n                kill-region\n                kill-region-save\n                kill-sentence\n                kill-word\n                line-number\n                list-abbrevs\n                list-buffers-alphabetically\n                load-file\n                macro-call\n                macro-call-last\n                macro-end-recording\n                macro-load-all\n                macro-name-last\n                macro-print-all\n                macro-print-last\n                macro-save-all\n                macro-start-recording\n                make-directory\n                match-bracket\n                name-last-kbd-macro\n                negative-argument\n                number-command\n                number-command-0\n                number-command-1\n                number-command-2\n                number-command-3\n                number-command-4\n                number-command-5\n                number-command-6\n                number-command-7\n                number-command-8\n                number-command-9\n                open-rectangle\n                point-to-register\n                prepend-to-buffer\n                prepend-to-register\n                read-abbrev-file\n                rectangle-clear\n                rectangle-close\n                rectangle-delete\n                rectangle-kill\n                rectangle-open\n                rectangle-string\n                rectangle-yank\n                register-append-to\n                register-copy-rectangle-to\n                register-copy-to\n                register-increment\n                register-insert\n                register-jump-to\n                register-point-to\n                register-prepend-to\n                register-view\n                remove-blank-lines\n                remove-directory\n                remove-sentinels\n                remove-space-from-lines\n                remove-tab-from-lines\n                rename-buffer\n                repeat-complex-command\n                reverse-region\n                run-unit-tests\n                select-paragraph\n                set-comment-column\n                set-fill-column\n                set-fill-prefix\n                shell-command\n                shell-command-on-region\n                sort-columns\n                sort-fields\n                sort-lines\n                split-line\n                start-kbd-macro\n                string-rectangle\n                suspend\n                switch-to-buffer\n                tabify\n                transpose-chars\n                transpose-lines\n                transpose-words\n                unindent-region\n                universal-argument\n                unmark-all\n                untabify\n                upcase-region\n                upcase-word\n                view-lossage\n                what-line\n    Ctrl-Y      yank\n    Alt-Y       yank-pop\n                zap-to-character\n", "children": []}, {"h": "Find commands", "gnx": "ekr.20060613062025.5", "b": "Here is a list of all of Leo's find commands. The apropos-find-commands\ncommand will print a detailed help message discussing these commands::\n\n                    clone-find-all\n                    clone-find-all-flattened\n                    find-all\n    Ctrl+Key+2      find-character\n    Ctrl+Shift-2    find-character-extend-selection\n                    find-clone-all\n                    find-clone-all-flattened\n    F3              find-next\n                    find-next-clone\n    F2              find-prev\n                    find-quick\n    Ctrl+Shift+F    find-quick-selected\n                    find-quick-test-failures\n                    find-quick-timeline\n                    find-tab-hide\n                    find-tab-open\n                    find-word\n                    find-word-in-line\n    Alt+R           isearch-backward\n                    isearch-backward-regexp\n    Alt+S           isearch-forward\n                    isearch-forward-regexp\n                    isearch-with-present-options\n                    re-search-backward\n                    re-search-forward\n                    replace-string\n                    search-again\n                    search-backward\n                    search-forward\n    Ctrl-F          search-with-present-options\n    Alt+Ctrl+E      set-find-everywhere\n    Alt+Ctrl+N      set-find-node-only\n    Alt+Ctrl+S      set-find-suboutline-only\n                    toggle-find-collapses-nodes\n    Alt+Ctrl+I      toggle-find-ignore-case-option\n    Alt+Ctrl+B      toggle-find-in-body-option\n    Alt+Ctrl+H      toggle-find-in-headline-option\n    Alt+Ctrl+C      toggle-find-mark-changes-option\n    Alt+Ctrl+F      toggle-find-mark-finds-option\n    Alt+Ctrl+X      toggle-find-regex-option\n    Alt+Ctrl+W      toggle-find-word-option\n    Alt+Ctrl+A      toggle-find-wrap-around-option\n                    word-search-backward\n                    word-search-forward\n", "children": []}, {"h": "Gui commands", "gnx": "ekr.20060613062025.9", "b": "The following commands simulate mouse clicks, double-clicks or drags::\n\n                    abort-edit-headline\n                    activate-cmds-menu\n                    activate-edit-menu\n                    activate-file-menu\n                    activate-help-menu\n                    activate-outline-menu\n                    activate-plugins-menu\n                    activate-window-menu\n                    add-editor\n                    cascade-windows\n                    click-click-box\n                    click-headline\n                    click-icon-box\n                    close-window\n                    contract-body-pane\n                    contract-log-pane\n                    contract-outline-pane\n    Alt-Ctrl-Minus  contract-pane\n    Ctrl-Shift-Tab  cycle-all-focus\n                    cycle-editor-focus\n                    cycle-focus\n                    delete-editor\n                    double-click-headline\n                    double-click-icon-box\n                    edit-headline\n                    end-edit-headline\n                    equal-sized-panes\n                    expand-body-pane\n                    expand-log-pane\n                    expand-outline-pane\n    Alt-Ctrl-Plus   expand-pane\n    Alt-D           focus-to-body\n                    focus-to-log\n                    focus-to-minibuffer\n    Alt-T           focus-to-tree\n                    fully-expand-body-pane\n                    fully-expand-log-pane\n                    fully-expand-outline-pane\n                    fully-expand-pane\n                    hide-body-pane\n                    hide-find-tab\n                    hide-invisibles\n                    hide-log-pane\n                    hide-outline-pane\n                    hide-pane\n                    hide-spell-tab\n                    iconify-frame\n                    minimize-all\n                    open-compare-window\n                    open-spell-tab\n                    resize-to-screen\n    Shift+Next      scroll-down-half-page\n                    scroll-down-line\n    Next            scroll-down-page\n                    scroll-outline-down-line\n                    scroll-outline-down-page\n                    scroll-outline-left\n                    scroll-outline-right\n                    scroll-outline-up-line\n                    scroll-outline-up-page\n    Shift+Prior     scroll-up-half-page\n                    scroll-up-line\n    Prior           scroll-up-page\n                    simulate-begin-drag\n                    simulate-end-drag\n    Ctrl-T          toggle-active-pane\n                    toggle-invisibles\n                    toggle-split-direction\n", "children": []}, {"h": "Help commands", "gnx": "ekr.20060613062025.2", "b": "The following commands print various helpful messages.\nApropos commands print longer discussions of specific topics.\nThe help-for-command command prompts for a command name\n(you can use typing completion to specify the command)\nand then prints a brief description of that command::\n\n        apropos-autocompletion\n        apropos-bindings\n        apropos-find-commands\n        help\n    F1  help-for-command\n        help-for-python\n        mode-help\n        print-bindings\n        print-commands\n", "children": []}, {"h": "Mode commands", "gnx": "ekr.20060613062025.10", "b": "These commands put Leo into various kinds of modes.\n\n- The enter-x-mode commands enter modes defined by \\@mode nodes in leoSettings.leo\n  (or in other .leo files).\n\n- The set-command-state, set-insert-state, set-overwrite-state commands\n  determine how treats unbound plain keys. Leo ignores such keys in command\n  state, inserts them into the body pane in insert state, and overwrites the\n  character at the cursor position in overwrite state.\n\n- Other commands determine whether autocompletion or calltips are in effect.\n\n- When extend mode is effect, basic editing commands that move the cursor also\n  extend the selected text.\n  For example, in extend mode the back-char command works the same as the\n  back-char-extend-selection command.\n\nHere is the full list of mode-related commands::\n\n                auto-complete\n    Ctrl-Space  auto-complete-force\n                disable-autocompleter\n                disable-calltips\n                enable-autocompleter\n                enable-calltips\n                enter-apropos-mode\n                enter-commands-mode\n                enter-edit-mode\n                enter-emacs-mode\n                enter-extract-mode\n                enter-file-mode\n                enter-gui-mode\n                enter-help-mode\n                enter-kill-mode\n                enter-modes-mode\n                enter-move-outline-mode\n                enter-outline-mode\n                enter-quick-command-mode\n                enter-toggle-find-mode\n                exit-named-mode\n                set-command-state\n                set-extend-mode\n                set-insert-state\n                set-overwrite-state\n                set-silent-mode\n                show-calltips\n                show-calltips-force\n    Alt-1       toggle-autocompleter\n    Alt-2       toggle-calltips\n                toggle-extend-mode\n                toggle-input-state\n", "children": []}, {"h": "Outline commands", "gnx": "ekr.20060613062025.7", "b": "The following commands invoke Leo's outline commands::\n\n    Ctrl-`          clone-node\n    Alt-Minus       contract-all\n                    contract-node\n    Left            contract-or-go-left\n                    contract-parent\n    Ctrl-Shift-C    copy-node\n                    cut-node\n                    de-hoist\n                    delete-node\n    Ctrl-]          demote\n                    expand-to-level-1\n                    expand-to-level-2\n                    expand-to-level-3\n                    expand-to-level-4\n                    expand-to-level-5\n                    expand-to-level-6\n                    expand-to-level-7\n                    expand-to-level-8\n                    expand-to-level-9\n                    expand-all\n                    expand-and-go-right\n                    expand-next-level\n    Alt-}           expand-node\n                    expand-or-go-right\n                    expand-prev-level\n                    go-back\n                    go-forward\n                    goto-first-node\n                    goto-first-sibling\n                    goto-last-node\n                    goto-last-sibling\n                    goto-last-visible\n                    goto-line\n                    goto-line-number\n                    goto-next-changed\n                    goto-next-clone\n                    goto-next-marked\n                    goto-next-node\n                    goto-next-sibling\n                    goto-next-visible\n                    goto-parent\n                    goto-prev-node\n                    goto-prev-sibling\n                    goto-prev-visible\n                    hoist\n                    insert-node\n    Ctrl-M          mark\n                    mark-changed-items\n                    mark-subheads\n    Ctrl+D          move-outline-down\n    Shift+Down      move-outline-down\n    Alt+Shift+Down  move-outline-down\n    Shift+Left      move-outline-left\n    Alt+Shift+Left  move-outline-left\n    Shift+Right     move-outline-right\n    Alt+Shift+Up    move-outline-up\n    Ctrl+U          move-outline-up\n                    outline-to-CWEB\n                    outline-to-noweb\n                    paste-node\n                    paste-retaining-clones\n    Ctrl-[          promote\n                    sort-children\n    Alt-A           sort-siblings\n", "children": []}, {"h": "Miscellaneous commands", "gnx": "ekr.20060613062025.8", "b": "Here are various miscellaneous minibuffer commands::\n\n    about-leo\n    add-comments\n    check-all-python-code\n    check-outline\n    check-python-code\n    clear-recent-files\n    convert-all-blanks\n    convert-all-tabs\n    convert-blanks\n    convert-tabs\n    execute-script\n    export-headlines\n    exit-leo\n    extract\n    extract-names\n    extract-section\n    flatten-outline\n    goto-global-line\n    import-at-file\n    import-at-root\n    import-cweb-files\n    import-derived-file\n    import-flattened-outline\n    import-noweb-files\n    insert-headline-time\n    new\n    open-leoDocs-leo\n    open-leoPlugins-leo\n    open-leoSettings-leo\n    open-offline-tutorial\n    open-online-home\n    open-online-tutorial\n    open-outline\n    open-outline-by-name\n    open-python-window\n    open-with\n    open-with-idle\n    open-with-word\n    open-with-wordpad\n    pretty-print-all-python-code\n    pretty-print-python-code\n    read-at-file-nodes\n    read-outline-only\n    reformat-paragraph\n    revert\n    save-buffers-kill-leo\n    save-file\n    save-file-as\n    save-file-to\n    settings\n    set-colors\n    set-font\n    show-colors\n    show-find-options\n    show-fonts\n    show-invisibles\n    spell-change\n    spell-change-then-find\n    spell-find\n    spell-ignore\n    toggle-angle-brackets\n    weave\n    write-abbrev-file\n    write-at-file-nodes\n    write-dirty-at-file-nodes\n    write-missing-at-file-nodes\n    write-outline-only\n", "children": []}, {"h": "Autocompletion", "gnx": "ekr.20120229094652.15103", "b": "Leo's autocompletion feature suggests **completions**, text may be valid in\na given point, or **context** in source code. For example, suppose the\ncontext is::\n\n    os.path.s\n    \nThat is, suppose the cursor follows ``os.path.s`` in the body pane. The\nvalid completions are all the members of Python's os.path module whose\nnames start with 's', namely::\n\n    samefile\n    sameopenfile\n    sep\n    split\n    splitdrive\n    splitext\n    splitunc\n    stat\n    supports_unicode_filenames\n    sys\n    \nHow Leo displays these completions depends on the setting::\n\n    @bool use_qcompleter\n    \nTrue: Leo shows completions in the QCompleter popup window.\nFalse: Leo shows completions in the log pane.\n    \nTo compute the list of completions, Leo first computes **Leo-specific**\ncompletions. These completions assume that c is a commander, g is the\nleoGlobals object and p is a position. If there are no such completions, Leo\ncomputes completions using ctags data. In order to use these additional\ncompletions you must create the ctags data as described in a later section.\n", "children": ["ekr.20120229094652.15104", "ekr.20120229094652.15106", "ekr.20120229094652.15107", "ekr.20120229094652.15108", "ekr.20120229094652.15116", "ekr.20120229094652.15102"]}, {"h": "Starting autocompletion", "gnx": "ekr.20120229094652.15104", "b": "There are two ways to have Leo show completions. **Manual autocompletion**\nshows autocompletions whenever you execute the auto-complete-force\n(ctrl-space) command. **Automatic autocompletion** shows completions\nwhenever you type a period in the body pane.\n\nYou can enable autocompletion in two ways:\n\n1. By setting @bool enable_autocompleter_initially = True.\n\n2. By using the toggle-autocompleter (Alt-1) command.\n", "children": []}, {"h": "Using the QCompleter", "gnx": "ekr.20120229094652.15106", "b": "When the ``@bool use_qcompleter`` setting is False, Leo shows all completions in a\npopup window, regardless of how many completions there are. To **accept** a\ncompletion, use the up and down arrows to select a completion, then type the\nreturn key. To **cancel** completion, type the escape key. As an important\nshortcut, if the popup window contains only one entry, you may accept a\ncompletion by simply typing the return key.\n", "children": []}, {"h": "Using the Log pane completer", "gnx": "ekr.20120229094652.15107", "b": "When the ``@bool use_qcompleter`` setting is True, Leo shows completions in in\nLeo's log pane. When there are more than 20 completions, Leo shows only the\ncharacters that start a completions. For example, when completing ``os.path.``\nthe log pane will show::\n\n    _ 17\n    a 2\n    b 1\n    c 2\n    d 3\n    e 4\n    g 5\n    i 5\n    j 1\n    l 1\n    n 2\n    o 1\n    p 2\n    r 2\n    s 10\n    \nTo see the complete list, type the '!' character.  You will see::\n\n    __all__\n    __builtins__\n    __cached__\n    __doc__\n    __file__\n    __name__\n    __package__\n    _get_altsep\n    _get_bothseps\n    _get_colon\n    _get_dot\n    _get_empty\n    _get_sep\n    _get_special\n    _getfileinformation\n    _getfinalpathname\n    _getfullpathname\n    abspath\n    altsep\n    basename\n    commonprefix\n    curdir\n    defpath\n    devnull\n    dirname\n    exists\n    ...\n\nTypically, however, you would simply type one of the valid prefix characters.\nFor example, typing the letter 'a' would create the context ``os.path.a`` and\nthe log pane would show::\n\n    abspath\n    altsep\n    \nAs you type, Leo enters the longest common prefix of all completions into the\nbody pane. Typing return, escape or ctrl-g (or any other alt or ctrl key) ends\ncompletion.\n", "children": []}, {"h": "Showing docstrings", "gnx": "ekr.20120229094652.15108", "b": "Regardless of the setting of ``@bool use_qcompleter``, typing '?' while\nautocompleting will show the docstring of the present context. For example,\nif the context is ``os.path.join``, typing '?' will show::\n\n    Join two or more pathname components, inserting \"\\\" as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.\n    \nIt is not possible at present to copy the docstring from the log pane when\nusing the QCompleter because the QCompleter popup window is a modal dialog.\n", "children": []}, {"h": "Autocompleter settings", "gnx": "ekr.20120229094652.15116", "b": "These are found in leoSettings.leo: @settings-->Autocompleter::\n\n**@bool use_qcompleter = True**\n\n    True:  show completions in a QCompleter popup.\n    False: show completions in Leo's Completions tab.\n    \n**@bool auto_tab_complete = False**\n    \n    True: Automatically extend the completed text to the longest common\n    prefix of all completions.\n    \n**@bool autocomplete-brackets = False**\n    \n    True: When typing an opening bracket '(','[' or '{', immediately type\n    the corresponding closing bracket. To move past the closing bracket,\n    just type it.\n    \n**@bool enable_calltips_initially = False**\n    \n**@bool forbid_invalid_completions = False**\n    \n    True: Don't add characters during autocompletion that are not part of\n    any computed completion.\n", "children": []}, {"h": "Creating ctags data", "gnx": "ekr.20120229094652.15102", "b": "This section describes how to create ctags data files describing the\ndesired completions. You must do this when the use_codewise setting is\nTrue.\n\n1. Make sure you have exuberant ctags (not just regular ctags)\n   installed. It's an Ubuntu package, so its easy to install if\n   you're using Ubuntu.\n   \n2. Execute the following commands from Leo's external/codewise.py\n   module. **Note**: On Windows, you can use codewise.bat to\n   execute these commands. For example::\n\n        python <path to leo>\\external\\codewise.py %*\n    \nA. [Optional] Create a custom ~/.ctags file containing default\n   configuration settings for ctags::\n    \n        codewise setup\n        \n    This command will leave the ~/.ctags file unchanged if it\n    exists.  Otherwise, the ``codewise setup`` command will\n    create a ~/.ctags file containing the following defaults::\n    \n        --exclude=*.html\n        --exclude=*.css\n    \n    http://ctags.sourceforge.net/ctags.html#FILES for more\n    details about the .ctags file.\n    \nB. [Optional] Delete the existing ctags database in ~/.codewise.db::\n   \n        codewise init\n        \nC. Add ctags data to the existing ctags database::\n\n        codewise parse <path to directory>\n        \n   You can add data from multiple sources by running\n   the ``codewise parse`` command on multiple directories.\n", "children": []}, {"h": "Calltips", "gnx": "ekr.20100504092040.17423", "b": "Calltips appear after you type an open parenthesis in code. Calltips shows the\nexpected arguments to a function or method. Calltips work for any Python\nfunction or method, including Python's global functions. Typing Return or\nControl-g (keyboard-quit) exits calltips.\n\nExamples:\n\na)  'g.toUnicode('  gives 'g.toUnicode(s, encoding, reportErrors=False'\nb) 'c.widgetWantsFocusNow' gives 'c.widgetWantsFocusNow(w'\nc) 'reduce(' gives 'reduce(function, sequence[, initial]) -> value'\n\nThe calltips appear directly in the text and the argument list is highlighted so\nyou can just type to replace it. The calltips appear also in the status line for\nreference after you have started to replace the args.\n\nOptions\n\nBoth autocompletion and calltips are initially enabled or disabled by the\nenable_autocompleter and enable_calltips settings in leoSettings.leo. You may\nenable or disable these features at any time with these commands:\nenable-auto-completer-command, enable-calltips-command,\ndisable-auto-completer-command and disable-calltips-command.\n", "children": []}, {"h": "File commands", "gnx": "EKR.20040524104904.100", "b": "", "children": ["EKR.20040524104904.101", "EKR.20040524104904.102", "EKR.20040524104904.108", "EKR.20040524104904.109", "EKR.20040524104904.110"]}, {"h": "Loading, Saving and Reverting Files", "gnx": "EKR.20040524104904.101", "b": "The ``new`` (Ctrl-N) command creates a new Leo main window. The\n``open-outline`` (Ctrl-O) command opens an existing Leo file and shows it\nin a main window. The ``close-window`` (Ctrl-F4) command closes the\nselected Leo window, giving you an opportunity to save your work if you\nhaven't yet done so.\n\nThe ``save-file`` (Ctrl-S), ``save-file-as`` and ``save-file-to`` commands\nsave the Leo window to a file. The ``save-files-as`` command changes the\nname of the outline being edited; the ``save-file-to`` command does not.\nThe ``save-file-as-zipped`` command is the same as the ``save-file-as``\ncommand except that the resulting .leo file is compressed with Python's\nzipfile module. Similarly, the ``save-file-as-unzipped`` command is the\nsame as the ``save-as`` command except that the resulting .leo file is not\ncompressed. The ``save-file``, ``save-file-as`` and ``save-file-to``\ncommands compress the file if it was originally compressed. **Note**: Leo\nwrites files with .leo extension, regardless of whether the file is zipped\nor not. Zipped .leo files contain a single archive, whose name is the same\nas the .leo file itself. Outside of Leo you can change the extension to\n.leo.zip and use stuffit or other program to expand the .leo file contained\nwithin. The ``revert`` command reloads a file, discarding any changes made\nto the file since it was last saved.\n\nThe Recent Files menu shows a list of recently opened files. Choosing an\nitem in this submenu opens the selected file or brings it to the front. The\n``clear-recent-files`` command deletes all entries in the Recent Files\nsubmenu except the most recent file. The files themselves are not affected,\njust the menu entries.\n\nThe following commands are located in the File:Read/Write menu...\n\nThe ``read-outline-only`` command reads an outline using only the .leo\nfile, not any files derived from @file nodes. This command is useful for\nreverting a project to a previously saved state. The ``read-at-file-nodes``\ncommand updates all @file nodes in an outline. This ensures that the state\nof an outline matches all files derived from \\@file nodes. The\n``write-outline-only`` command saves an outline without writing any \\@file\ntrees. Useful for inserting an @file node into an outline without modifying\na external file with the same name. The ``write-at-file-nodes`` command\nforces an update of all @file trees. The ``write-dirty-at-file-nodes``\ncommand writes all @file trees that have been changed.\n", "children": []}, {"h": "Communicating with external editors", "gnx": "EKR.20040524104904.102", "b": "The ``open-with`` command allows you to communicate with external editor.\nWhen you select this command Leo creates a temporary file and invokes an\nexternal program. Leo periodically checks whether this temporary file has\nchanged; Leo changes the corresponding node in the outline if so. You must\ncreate the entries using an \\@openwith in myLeoSettings.leo. See the\ndocumentation in leoSettings.leo.\n", "children": []}, {"h": "Importing Files into Leo Outlines", "gnx": "EKR.20040524104904.108", "b": "The ``import-file`` command imports a file in various ways depending on the\ncontents of the file. For plain files, the command creates an \\@file node.\nIf the file looks like an external file written by Leo, the import command\nwill recreate the outline structure based on the sentinels in the file.\nThis command can also read files written in MORE outline format.\n", "children": []}, {"h": "Exporting Files from Leo Outlines", "gnx": "EKR.20040524104904.109", "b": "The ``outline-to-cweb`` command creates a `CWEB`_ file from the selected\noutline. The ``outline-to-noweb`` command creates a `noweb`_ file from the\nselected outline. The ``flatten-outline`` command creates a text file in\nMORE format from the selected outline. The ``remove-sentinels`` command\nremoves all sentinel lines from a file derived from an @file node. The\n``weave`` command formats the selected text and writes it to a file.\n", "children": []}, {"h": "Quitting Leo", "gnx": "EKR.20040524104904.110", "b": "The ``exit-leo`` (Ctrl-Q or Alt-F4) command causes Leo to exit. You may\nalso exit Leo by closing the main window. You will be prompted to save any\nfile that has been altered but not saved.\n", "children": []}, {"h": "Edit commands", "gnx": "EKR.20040524104904.111", "b": "", "children": ["EKR.20040524104904.112", "EKR.20040524104904.113", "EKR.20040524104904.114", "ekr.20050313102319", "EKR.20040524104904.115", "EKR.20040524104904.116", "EKR.20040524104904.117", "EKR.20040524104904.118", "EKR.20040524104904.134", "EKR.20040524104904.136", "EKR.20040524104904.137", "EKR.20040524104904.139", "ekr.20120319170934.6104", "ekr.20120319170934.6105", "ekr.20120319170934.6109", "ekr.20120319170934.6110"]}, {"h": "Undoing changes", "gnx": "EKR.20040524104904.112", "b": "Leo supports unlimited undo and redo with the ``undo`` (Ctrl-Z) and\n``redo`` (Ctrl-Shift-Z) commands. Think of actions that may be undone or\nredone as a string of beads. A \"bead pointer\" points to the present bead.\nPerforming an operation creates a new bead after the present bead and\nremoves all following beads. Undoing an operation moves the bead pointer\nbackwards; redoing an operation moves the bead pointer forwards. The ``undo``\ncommand is disabled when the bead pointer moves in front of the first bead;\nthe ``redo`` command is disabled when the bead pointer points to the last bead.\n\nThe @string undo_granularity setting controls the granularity of undo.\nThere are four possible values:\n\nnode\n    Starts a new undo unit when typing moves to a new node.\n\nline (default)\n    Starts a new undo unit when typing moves to new line.\n\nword\n    Starts a new undo unit when typing starts a new word.\n\nchar (not recommended)\n    Starts a new undo unit for each character typed.\n    This wastes lots of computer memory.\n", "children": []}, {"h": "Cutting, pasting and selecting text", "gnx": "EKR.20040524104904.113", "b": "Leo supports the standard editing commands: ``cut-text`` (Ctrl-X),\n``copy-text`` (Ctrl-C) and ``paste-text`` (Ctrl-V), and ``select-all``\n(Ctrl-A) commands. These commands work with either headline or body text.\n", "children": []}, {"h": "Indenting body text", "gnx": "EKR.20040524104904.114", "b": "The ``indent-region`` (Ctrl-Tab) and ``unindent-region`` (Tab) commands\nshift selected lines in the body text left or right one tab position. These\ncommands shift the entire line if any characters in that line are selected.\nIf no text is selected, the Tab character insert a hard or soft tab\ndepending on the value of the \\@tabwidth directive in effect.\n", "children": []}, {"h": "Adding and deleting comments in body text", "gnx": "ekr.20050313102319", "b": "The ``add-comments`` (Ctrl-)) command puts comments around a block of code.\nThis command uses single-line comments if possible. The ``delete-comments``\n(Ctrl-() command deletes the comments.\n", "children": []}, {"h": "Creating nodes from body text", "gnx": "EKR.20040524104904.115", "b": "The ``extract`` (Ctrl-Shift-D) command creates a new node whose headline is\nthe first line of selected body text and whose body is all other lines of\nselected text. Previously selected text is deleted from the original body\ntext. The ``extract-names`` (Ctrl-Shift-Command) command creates one or\nmore child nodes, one for each section name in the selected body text. The\nheadline of each created node is the section name.\n", "children": []}, {"h": "Converting leading blanks and tabs in body text", "gnx": "EKR.20040524104904.116", "b": "The ``convert-tabs`` command converts leading tabs to blanks in a single\nnode. The ``convert-blanks`` command converts blanks to tabs in a single\nnode. The ``convert-all-tabs`` command converts leading tabs to blanks\nthroughout the selected tree. The ``convert-all-blanks`` command converts\nleading blanks to tabs throughout the selected tree. All these commands\nconvert between tabs and blanks using the \\@tabwidth setting presently in\neffect.\n", "children": []}, {"h": "Executing Python scripts in body text", "gnx": "EKR.20040524104904.117", "b": "The ``execute-script`` (Ctrl-B) command executes body text as a Python\nscript. Leo execute the selected text, or the entire body text if no text\nis selected. The Execute Script command pre-defines the values c, g and p\nas follows:\n\n- c is the commander of the outline containing the script.\n- g is the leoGlobals modules.\n- p is c.p, that is, c.currentPosition().\n\n**Important**: Body text may contain Leo directives and section references.\nYou can use all of Leo's features to organize scripts that you execute\ninteractively. Section definitions must appear in the node containing the\nscript or in descendant nodes.\n\nLeo preprocesses all scripts by simulating the writing of a external file\nto a string. The ``execute-script`` command sets app.scriptDict[\"script1\"]\nto the value of the script before preprocessing, and sets\napp.scriptDict[\"script2\"] to the value of the script after preprocessing.\nScripts may examine and change app.scriptDict as they please.\n", "children": []}, {"h": "Finding and changing text", "gnx": "EKR.20040524104904.118", "b": "", "children": ["ekr.20120319065417.8792", "ekr.20120319065417.8790", "ekr.20120319065417.8791", "ekr.20120319065417.8797", "ekr.20120319065417.8798", "ekr.20120319065417.8794", "ekr.20120319065417.8795", "ekr.20120319065417.8788"]}, {"h": "Overview", "gnx": "ekr.20120319065417.8792", "b": "Leo supports a wide array of commands for searching and replacing\ntext. The typical way to find text is with the\n``search-with-present-options`` (Ctrl-F). Focus moves to the\nminibuffer. Type the search pattern, followed by a <Return>. To search\nand replace, type <Ctrl-F>, followed by the search pattern, followed\nby ``replace-string`` (Ctrl-Shift-R) command, followed by the\nreplacement pattern, and finally a <Return> to start the search.\n\nThe following sections discuss all of Leo's find and change commands.\n**Important**: The radio buttons in the Find tab (Entire Outline,\nSuboutline Only and Node only) control how much of the outline is\naffected by Leo's find and change commands.\n", "children": []}, {"h": "Basic searches", "gnx": "ekr.20120319065417.8790", "b": "The ``search-with-present-options`` (Ctrl-F) command prompts for a\nsearch string. Typing the <Return> key puts the search string in the\nFind tab and executes a search based on all the settings in the Find\ntab. This is a recommended default search command. The ``find-next``\n(F3) command continues a search started with\n``search-with-present-options``. The ``find-previous`` (F2) commands\nsearches backwards using the present search options.\n\nTo search and replace, type <Ctrl-F>, followed by the search pattern,\nfollowed by the ``replace-string`` (Ctrl-Shift-R) command, followed by\nthe replacement pattern, and finally a <Return> to start the search.\n", "children": []}, {"h": "find-all, clone-find-all & clone-find-all-flattened", "gnx": "ekr.20120319065417.8791", "b": "The ``find-all`` command prints all matches in the log pane. The\n``clone-find-all`` command searches the outline and creates a new root node\ncalled Found: *<your search pattern>*. This node contains clones of the\nfound nodes. The ``clone-find-all-flattened`` commands includes all found\nnodes, even if they are also children of previously found nodes.\n", "children": []}, {"h": "Change commands", "gnx": "ekr.20120319065417.8797", "b": "The ``replace-string`` (Ctrl-Shift-R) command prompts for a search string.\nType <Return> to end the search string. The command will then prompt for\nthe replacement string. Typing a second <Return> key will place both\nstrings in the Find tab and executes a **find** command, that is,\nsearch-with-present-options.\n\nThe ``change`` (Ctrl-=) command replaces the selected text with the\n'change' text in the Find tab. The ``change-then-find`` (Ctrl--) command\nreplaces the selected text with the 'change' text in the Find tab, then\nexecutes the find command again. These commands can simulate any kind of\nquery-replace command. The ``change-all`` changes all occurrences of the\n'find' text with the 'change' text.\n", "children": []}, {"h": "Incremental find commands", "gnx": "ekr.20120319065417.8798", "b": "Incremental find commands move through the text as you type individual\ncharacters. Typing <BackSpace> backtracks the search. To repeat an\nincremental search, type the shortcut for that command again. Here are\nLeo's incremental find commands::\n\n    Alt+R isearch-backward\n          isearch-backward-regexp\n    Alt+S isearch-forward\n          isearch-forward-regexp\n          isearch-with-present-options\n", "children": []}, {"h": "Commands that set find options", "gnx": "ekr.20120319065417.8794", "b": "Several commands toggle the checkboxes and radio buttons in the Find tab,\nand thus affect the operation of the search-with-present-options command.\nYou may bind these commands to keys or toggle these options in a mode.\nThese commands toggle checkboxes::\n\n    Alt+Ctrl+I  toggle-find-ignore-case-option\n    Alt+Ctrl+B  toggle-find-in-body-option\n    Alt+Ctrl+H  toggle-find-in-headline-option\n    Alt+Ctrl+C  toggle-find-mark-changes-option\n    Alt+Ctrl+F  toggle-find-mark-finds-option\n    Alt+Ctrl+X  toggle-find-regex-option\n    Alt+Ctrl+W  toggle-find-word-option\n    Alt+Ctrl+A  toggle-find-wrap-around-option\n\nThese commands set radio buttons::\n\n    Alt+Ctrl+E  set-find-everywhere\n    Alt+Ctrl+N  set-find-node-only\n    Alt+Ctrl+S  set-find-suboutline-only\n", "children": []}, {"h": "Word search and regex search commands", "gnx": "ekr.20120319065417.8795", "b": "The following commands set an option in the Find tab, then work\nexactly like the ``search-with-present-options`` command. The\n``search-backward`` and ``search-forward`` commands set the 'Whole\nWord' checkbox to False. The ``word-search-backward`` and\n``word-search-forward`` set the 'Whole Word' checkbox to True. The\n``re-search-forward`` and ``re-search-backward`` set the 'Regexp'\ncheckbox to True.\n", "children": []}, {"h": "Find settings", "gnx": "ekr.20120319065417.8788", "b": "The following check boxes options appear in the search dialog and control\nthe operations of the find and change commands.\n\nIgnore Case\n    When checked, the Find and Change commands ignore the case of\n    alphabetic characters when determining matches.\n\nMark Changes\n    When checked, the Change command marks all headlines whose headline or\n    body text are changed by the command.\n\nMark Matches\n    When checked, the Find and Change commands mark all headlines in which\n    a match is found with the pattern.\n\nPattern Match\n    When checked, the Find and Change commands treat several characters\n    specially in the find pattern.\n\n    - '*'  matches any sequence of zero or more characters.\n    - '.'  matches any single character.\n    - '^'  matches a newline at the start of a pattern.\n    - '$'  matches a newline at the end of a pattern.\n\nExamples::\n\n    \"^abc$\" matches lines that only contain \"abc\".\n    \"^a\" matches any line starting with \"A\".\n    \"a$\" matches any line ending with \"a\".\n    \"^*$\" matches any line at all.\n\nSearch Body Text\n    When checked, the Find and Change commands search body text.\n\nSearch Headline Text\n    When checked, the Find and Change commands search headline text.\n\nSuboutline Only\n    When checked, the Find and Change commands search only the currently\n    selected headline and its offspring.\n\nWhole Word\n    When checked, the find pattern must match an entire word. Words consist\n    of an alphabetic character or underscore, followed by zero or more\n    alphabetic characters, numbers or underscores.\n\nWrap Around\n    When checked, the Find and Change commands continues at the top of the\n    file when the command reaches the bottom of the file. For reverse\n    searches, the find or change command continues at the bottom of the\n    file when the command reaches the top of the file.\n", "children": []}, {"h": "Go To Line Number", "gnx": "EKR.20040524104904.134", "b": "The ``goto-global-line`` (Alt-G) command selects the locations in your\noutlines corresponding to a line in a external file.\n", "children": []}, {"h": "Inserting the date and time", "gnx": "EKR.20040524104904.136", "b": "The ``insert-body-time`` and ``insert-headline-time`` commands insert\nformatted time and date into body or headline text. You must be editing a\nheadline to be able to insert the time/date into the headline. The\nbody_time_format_string and headline_time_format_string settings specify\nthe format of the inserted text. These settings are the format string\npassed to time.strftime. For a complete list of the format options see\nhttp://www.python.org/doc/current/lib/module-time.html The \"%m/%d/%Y\n%H:%M:%S\" format is used by default, resulting in a time/date format like::\n\n    1/30/2003 8:31:55\n", "children": []}, {"h": "Reformatting paragraphs in body text", "gnx": "EKR.20040524104904.137", "b": "The ``reformat-paragraph`` (Ctrl-Shift-P) command rearranges the words in a\ntext paragraph to fill each line as full as possible, up to the \\@pagewidth\nsetting. A paragraph is delimited by blank lines, Leo directives, and (of\ncourse) start and end of text in a node. The width of the line used by the\nreformatting operation is governed by @pagewidth and the indentation that\nwould be applied to the node when Leo writes the file.\n\nThe command operates on the paragraph containing the insert cursor. If the\ninsert cursor is on a blank line or directive, nothing happens. If the\ncursor is on a line containing text, then the paragraph containing that\ntext line is reformatted and the insert cursor is moved to the next\nparagraph.\n\n**Note**: Hanging indentation is preserved. This is most useful for\nbulleted or numbered lists, such as::\n\n  1. This is the first paragraph,\n     and it has a hanging indentation.\n\n  2. This is the second paragraph,\n     and it too has a hanging indentation.\n", "children": []}, {"h": "Matching brackets and parenthesis", "gnx": "EKR.20040524104904.139", "b": "The ``match-brackets`` command is enabled if the cursor is next to one of the\nfollowing characters in the body pane:\n\n    ( ) [ ] { } < >\n\nThis command looks for the matching character, searching backwards through\nthe body text if the cursor is next to ``)`` ``]`` ``}`` or ``>`` and\nsearching forward through the text otherwise. If the cursor is between two\nbrackets the search is made for the bracket matching the leftmost bracket.\nIf a match is found, the entire range of characters delimited by the\nbrackets is highlighted and the cursor is placed just to the left of the\nmatching characters. Thus, executing this command twice highlights the\nrange of matched characters without changing the cursor.\n", "children": []}, {"h": "Indenting body text automatically", "gnx": "ekr.20120319170934.6104", "b": "Leo auto indents unless @nocolor is in effect.  Typing a newline\nautomatically inserts the same leading whitespace present on the previous line.\n\nIf Python is the present language, Leo inserts an additional tab if the previous\nline ends with a colon.  When the smart_auto_indent setting is True, Leo uses Emacs-style\nauto-indentation instead.  This style of auto-indent aligns newly created lines\nwith unmatched ( [ or { brackets in the previous line.\n", "children": []}, {"h": "Creating and destroying multiple body editors", "gnx": "ekr.20120319170934.6105", "b": "The ``add-editor`` command adds a new editor in the body pane and gives it\nthe body editor focus. The ``delete-editor`` command deletes the editor\nwith body editor focus. The ``cycle-editor-focus`` command cycles body\neditor focus between editors in the body text. The editor that has focus\nshows the content of the selected outline node; the other body editors\ncontinue to show the node contents they last had when they had the body\neditor focus.\n", "children": []}, {"h": "Opening URL's", "gnx": "ekr.20120319170934.6109", "b": "The ``open-url`` (Ctrl-F3 or Ctrl-Left-Click) command looks for a headline\nin either the headline or body text of the node. If the headline or first\nbody line of the node looks like an URL, the ``open-url`` command attempts\nto open that URL using either os.startfile or a web browser.\n\nLeo checks that the URL is valid before doing so. A valid URL is:\n\n-   3 or more lowercase alphas\n-   followed by one :\n-   followed by one or more of:\n-   ``$%&'()*+,-./0-9:=?@A-Z_a-z{}~``\n-   followed by one of: ``$%&'()*+/0-9:=?@A-Z_a-z}~`` \n\nThat is, a comma, hyphen and open curly brace may not be the last character)\nURL's should contain no spaces: use %20 to indicate spaces. You may use any\ntype of URL that your browser supports: http, mailto, ftp, file, etc.\n", "children": []}, {"h": "Using chapters", "gnx": "ekr.20120319170934.6110", "b": "Chapters are regions of a Leo outline whose root is an ``@chapter`` node. They\nare available in an outline if the ``@bool usechapters`` option is True.\n``@chapter`` nodes may appear anywhere in an outline, but the ``create-chapter``\ncommand (see below) creates ``@chapter`` nodes as children of the first\n``@chapters`` (note the ``s``) node in the outline.\n\nOne selects a chapter with the ``select-chapter`` command, after which Leo shows\nonly the nodes in the selected chapter; in this respect, chapters are like\nhoists. The ``main`` chapter represents the entire outline and can not be\ndeleted by name. When chapters are in effect, Leo creates an ``@chapters`` node\nfor the use of ``create-chapter``.\n\nAssociated settings:\n\n- The ``@bool use_chapters`` setting determines whether chapters are enabled.\n- The ``@bool use_chapter_tabs`` setting determines whether the chapters\n  pop-up menu appears in the icon area. Choosing a chapter name from this list selects a chapter.\n\nWhen chapters are enabled, the Cmds->Chapters menu shows all available chapter commands:\n\n- The ``chapter-create`` command creates an @chapter node and populates it with a single node.\n- The ``chapter-remove`` command deletes the currently selected chapter.\n- The ``chapter-select`` command prompts for a chapter name and makes only the nodes of the selected chapter visible.\n- The ``chapter-move-node-to``, ``chapter-clone-node-to`` and ``chapter-copy-node-to`` commands\n  prompt for a chapter name and add the currently selected node (and its descendants) to another chapter.\n", "children": []}, {"h": "Outline commands", "gnx": "EKR.20040524104904.143", "b": "", "children": ["ekr.20120319170934.6096", "ekr.20120319170934.6095", "ekr.20120319170934.6097", "ekr.20120319170934.6094", "ekr.20120319170934.6098", "ekr.20120319170934.6099", "ekr.20120319170934.6100", "ekr.20120319170934.6101", "EKR.20040524104904.148", "EKR.20040524104904.144", "ekr.20120319170934.6108"]}, {"h": "Creating and destroying nodes", "gnx": "ekr.20120319170934.6096", "b": "The ``insert-node`` (Ctrl-I or Insert) command inserts a new node into the\noutline. When invoked, (from any pane), it inserts a new node below the\npresently selected node, and at the same level as that node, or at the\nchild level if it has a visible child. The ``delete-node`` command deletes\na node and all its children. To retain the children, just promote all the\nchildren before you do the delete.\n", "children": []}, {"h": "Expanding & contracting nodes", "gnx": "ekr.20120319170934.6095", "b": "You can expand or contract a node by clicking in the tree view icon to the\nleft of the headline. The icon in the Qt gui matches the native OS's tree\nview icon, i.e. for Mac's, a triangle pointing right or down; on Windows, a\nsquare containing a plus or minus. Expanding a node shows its immediate\nchildren; contracting a node hides all its children.\n\nThe ``expand-node`` and ``contract-node`` commands also expand and contract\nnodes. For more convenient navigation, there are ``expand-and-go-right``\n(Alt-Right) and ``contract-or-go-up`` (Alt-Left) commands.\n\nThe ``expand-all`` command expands every node in the outline.\n``contract-all`` (Alt-hyphen) contracts every node in the outline. In all\nbut the smallest outlines, ``expand-all`` is rarely used, and it does not\nhave a default key binding.\n", "children": []}, {"h": "Cutting, pasting and deleting nodes", "gnx": "ekr.20120319170934.6097", "b": "The ``cut-node`` (Ctrl-Shift-X) ``paste-node`` (Ctrl-Shift-V),\n``copy-node`` (Ctrl-Shift-C) and ``delete-node`` commands work on nodes\nrather than text. The ``cut-node`` and ``copy-node`` commands copy a text\nrepresentation of the outline to the clipboard. This representation is the\nsame as Leo's .leo file format with some information deleted. You may copy\nthis text representation into a body pane (or into any other text editor)\nusing Edit->Paste in the menus, Ctrl-V, or Alt-X paste-text.\n\n**Warning**: If you want to preserve the \"cloned\" attribute of a node, or\nwant to paste the node as a clone of the node you cut or copied, use the\n``past-retaining-clones`` command, which in the Outline menu is called\n\"Paste Node as Clone\". The ``paste-node`` command instead creates a new,\ndistinct version of the node you previously cut or copied, though if there\nwere descendant nodes which were clones of each other, the new version will\nhave parallel, distinct nodes that are also clones of each other (just not\nof the originals). You may paste a node between .leo files, but there can\nbe no clone relationship across files.\n\nThe ``paste-retaining-clones`` command is disabled if it would cause a node\nto become a parent of itself. The Leo outline is thus mathematically a\n*directed acyclic graph*: clones make it more flexible than a tree, but not\na generalized graph.\n", "children": []}, {"h": "Navigating through the outline", "gnx": "ekr.20120319170934.6094", "b": "Leo has many commands that select nodes in the outline. These commands can be\nfound in the Outline:Go To menu.\n\nAs described in the tutorial, you can move about the outline by clicking on the\nheadlines or using Alt+arrow keys.\n", "children": []}, {"h": "Moving & Reorganizing nodes", "gnx": "ekr.20120319170934.6098", "b": "The ``move-outline-up`` (Ctrl-U or Alt-Shift-Up), ``move-outline-down``\n(Ctrl-D or Alt-Shift-Down), ``move-outline-left`` (Ctrl-L or\nAlt-Shift-Left), and ``move-outline-right`` (Ctrl-R or Alt-Shift-Right)\ncommands move the currently selected node. **Important**: When focus is in\nthe outline pane, you can move nodes without adding the Alt modifier.\nShift-Up moves the select node up, etc.\n\nThe ``promote`` (Ctrl-[) command makes all the children of\na node siblings of the node. The ``demote`` (Ctrl-]) command makes all following\nsiblings of a node children of the node.\n", "children": []}, {"h": "Cloning nodes", "gnx": "ekr.20120319170934.6099", "b": "A cloned node is a copy of a node that changes when the original changes.\nOne may also think of it as a single node that is hooked into the outline\nat multiple positions. Because that single node brings along all its\ndescendants, changes are maintained across all the the clones of a node,\nalong with changes to its offspring (children, grandchildren, etc.), i.e.,\nany changes are simultaneously made to the corresponding offspring of all\nof those clones. A small red arrow in the icon box marks cloned nodes. You\ncan think of the arrow as pointing out that there are other paths to get to\nthis same node. There is no real distinction between the \"original\" node\nand any of its clones. Any headline or body update of a clone headed\nsubtree affects all of its clones simultaneously. A cloned node becomes a\nregular node whenever deletion of its other clones makes it the only one\nleft. Clones are useful for making alternate views of a program. See\n`Clones and views`_ for full details.\n\nThe ``clone-node`` (Ctrl-\\`) command creates a clone as the immediate\nsibling of a selected node. You have to place it where you want it by\neither using move commands, or cutting and paste the clone.\n", "children": []}, {"h": "Marking nodes", "gnx": "ekr.20120319170934.6100", "b": "The ``mark`` (Ctrl-M) marks a node if it is unmarked, and unmarks the node\nif it is already marked. The ``mark-subheads`` command marks all offspring\nof the presently selected node. The ``mark-changed-items`` command marks\nall nodes whose headline or body text has been changed since the file\nwas last saved.\n\nLeo's find and change commands mark nodes if the \"Mark Changes\" and \"Mark\nFinds\" checkboxes are checked. You can change these checkboxes with the\n``toggle-find-mark-changes-option`` and ``toggle-find-mark-finds-option``\ncommands.\n\nThe ``goto-next-marked`` command selects the next marked node.\n", "children": []}, {"h": "Dragging nodes", "gnx": "ekr.20120319170934.6101", "b": "You may drag a node (including all its descendants) from one place to\nanother in an outline. To start a drag, press the main (left) mouse button\nwhile the cursor is over the icon for a node. The cursor will change to a\nhand icon. If you release the mouse button while the hand cursor is above\nthe icon for another node, Leo will move the dragged node after that node.\nIf you release the mouse button when the hand cursor is not over an icon,\nLeo will leave the outline pane as it is. Leo scrolls the outline pane as\nthe result of mouse-moved events, so to continue scrolling you must keep\nmoving the mouse.\n", "children": []}, {"h": "Hoisting & De-hoisting nodes", "gnx": "EKR.20040524104904.148", "b": "The ``hoist`` command redraws the screen so presently selected tree becomes\nthe only visible part of the outline. You may hoist an outline as many\ntimes as you wish. The ``dehoist`` command undoes the effect of the\nprevious ``hoist`` command.\n", "children": []}, {"h": "Checking outlines", "gnx": "EKR.20040524104904.144", "b": "The ``check-outline`` command checks the outline for consistency. Leo\nautomatically check the syntax of Python external files when Leo\nwrites the external file.\n\nThe ``pretty-print-python-code`` and ``pretty-print-all-python-code``\npretty print body text. You can customize this code by overriding the\nfollowing methods of class prettyPrinter in leoCommands.py::\n\n    putOperator:      puts whitespace around operators.\n    putNormalToken:   puts whitespace around everything else.\n", "children": []}, {"h": "Resizing panes", "gnx": "ekr.20120319170934.6108", "b": "You can change the relative sizes of the outline and body panes by dragging\nthe splitter bar. The ``equal-sized-panes`` command resizes the panes so\nthat each fills half of the main window.\n", "children": []}, {"h": "Window commands", "gnx": "EKR.20040524104904.151", "b": "-   The Equal Sized Panes command adjusts the sizes of the outline and body\n    panes so that they are the same height.\n-   The Cascade command cleans up the screen by cascading all Leo windows.\n-   The Minimize All command minimizes all Leo windows.\n-   The Toggle Active Pane command toggles keyboard focus between the outline and body panes.\n-   The Toggle Split Direction command switches between vertical and horizontal\n    orientations of the Leo window. In the vertical orientation, the body pane\n    appears below the pane containing the outline and log panes. In the horizontal\n    orientation, the body pane appears to the left the pane containing the outline\n    and log panes. By default, the ratio of pane outline pane to the body pane is\n    0.5 in the vertical orientation and 0.3 in the horizontal orientation. These two\n    ratios may be changed using settings.\n-   The Open Compare Window command opens a dialog that allows you to compare\n    two files, one containing sentinels and one not.\n", "children": []}, {"h": "Help commands", "gnx": "EKR.20040524104904.157", "b": "-   The About Leo command puts up a dialog box showing the version of Leo.\n-   The Online Home Page command opens Leo's home page at http://webpages.charter.net/edreamleo/front.html.\n-   The Open Online Tutorial command opens Joe Orr's excellent ScreenBook tutorial at\n    http://www.evisa.com/e/sbooks/leo/sbframetoc_ie.htm.\n-   The Open Offline Tutorial command opens the file sbooks.chm if it exists.\n    Otherwise, you will be asked whether you want to download it from Leo's SourceForge web site.\n    If you say yes, the page http://sourceforge.net/project/showfiles.php?group_id=3458 will open.\n    You may then download sbooks.sbm to the folder containing leo.py.\n-   The Open LeoDocs.leo command opens LeoDocs.leo.\n-   The Open LeoPlugins.leo command opens LeoPlugins.leo.\n-   The Open LeoSettings.leo command opens LeoSettings.leo.\n\n", "children": []}, {"h": "Customizing Leo", "gnx": "EKR.20040524104904.211", "b": "", "children": ["ekr.20100805165051.7158"]}, {"h": "@file customizing.txt", "gnx": "ekr.20100805165051.7158", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901101608.4"]}, {"h": "@rst html\\customizing.html", "gnx": "ekr.20050901101608.4", "b": "################\nCustomizing Leo\n################\n\nThis chapter discusses how to customize Leo using the plugins and other means.\nSee `Specifying settings`_ for a description of how to change Leo's settings.\n\n.. contents::\n    :depth: 3\n", "children": ["ekr.20050901102055", "EKR.20040524104904.140", "ekr.20060105214753", "ekr.20050306090601", "ekr.20080310093038.4", "ekr.20100122073254.11655"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050901102055", "b": ".. _`Scripting Leo with Python`:    scripting.html\n.. _`History of Leo`:               history.html\n.. _`rst3 plugin`:                  glossary.html#rst3-plugin\n.. _`Specifying settings`:          commands.html#specifying-settings\n", "children": []}, {"h": "Specifying settings", "gnx": "EKR.20040524104904.140", "b": "Leo stores options in **@settings trees**, outlines whose headline is\n@settings. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\nThis scheme allows for the following kinds of settings:\n\n- Per-installation or per-machine settings.\n- Per-user settings.\n- Per-folder settings.\n- Per-file settings.\n\nThere are four kinds of settings files:\n\n1. **Default settings files**, named **leoSettings.leo**.\n   Although they can be used in other ways, they typically contain default settings.\n\n2. **Personal settings files**, named **myLeoSettings.leo**. They provide a way\n   of ensuring that your customized settings are not altered when updating Leo\n   from bzr or while installing a new version of Leo. The myLeoSettings.leo acts\n   much like Python's site-customize.py file. myLeoSettings.leo will never be\n   part of any Leo distribution, and it will never exist in Leo's cvs\n   repository. This solution is *much* better than trying to update\n   leoSettings.leo with scripts.\n\n3. **Machine settings files**, named **LeoSettings.leo** (note the capital 'L'),\n   and appearing in a unique directory.\n\n4. **Command-line settings files**, specified using Leo's -c command-line\n   option. Any .leo file may be used, provided it has an @settings tree. These\n   files typically provide a common set of settings for files scattered in\n   various places on the file system.\n\nThe following sections describe the kinds of nodes in @settings trees.\n", "children": ["ekr.20090116130002.1", "ekr.20090116094356.2", "ekr.20090116094356.3", "ekr.20070317043727", "ekr.20080411111008.1", "ekr.20070317043727.2", "ekr.20070317043727.3"]}, {"h": "Configuration directories", "gnx": "ekr.20090116130002.1", "b": "Settings files can be found in the following directories:\n\n- **homeDir**, the HOME/.leo directory. HOME is given by Python's HOME\n  environment variable, or by os.expanduser('~') if no HOME environment variable\n  exists.\n\n- **configDir**, Leo's configuration directory: leo/config.\n\n- **machineDir**, the HOME/.leo/MACHINE directory. MACHINE is given by Python's\n  HOSTNAME environment variable, or by Python's COMPUTERNAME environment\n  variable if there is no HOSTNAME variable, or by the value returned by\n  socket.gethostname() if neither environment variable exists.\n\n- **localDir**, the directory containing the .leo file being loaded.\n\nIn addition, Leo's -c command-line option can specify any .leo file anywhere.\n", "children": []}, {"h": "Search order for settings files", "gnx": "ekr.20090116094356.2", "b": "When reading a .leo file, Leo looks for settings in default settings\nfiles first, then settings in personal settings files, and finally\nsettings in local settings files.  The exact search order is:\n\n1. Default settings files:\n\n   a. configDir/leoSettings.leo\n   b. homeDir/leoSettings.leo\n   c. localDir/leoSettings.leo\n\n2. Personal settings files:\n\n   a. configDir/myLeoSettings.leo\n   b. homeDir/myLeoSettings.leo\n   c. homeDir/<machine-name>LeoSettings.leo (note capitalization)\n   d. localDir/myLeoSettings.leo\n\n3. Local settings files:\n\n   a. The file specified by the -c command-line option.\n   b. The file being loaded.\n\nSettings that appear later in this list override settings that\nappear earlier in this list.  This happens on a setting-by-setting\nbasis, *not* on a file-by-file basis.  In other words, each individual\nsetting overrides only the *corresponding* setting in previously-read\nfiles.  Reading a setting file does *not* reset all previous settings.\nNote that the same file might appear several times in the search list.\nLeo detects such duplicate file names and only loads each settings file once.\nLeo remembers all the settings in settings files and does not reread those\nsettings when reading another .leo file.\n\n**Caution**: This search order offers almost too much flexibility. This can be\nconfusing, even for power users. It's important to choose the \"simplest\nconfiguration scheme that could possibly work\".  Something like:\n\n- Use a single leoSettings.leo file for installation-wide defaults.\n- Use a single myLeoSettings.leo files for personal defaults.\n- Use local settings sparingly.\n\n**Important**: it is good style to limit settings placed in \nmyLeoSettings.leo to those settings that differ from default settings.\n", "children": []}, {"h": "Safe rules for local settings", "gnx": "ekr.20090116094356.3", "b": "You should use special care when placing default or personal settings files in\n**local** directories, that is, directories other than homeDir, configDir or\nmachineDir. In particular, the value of localDir can change when Leo reads\nadditional files. This can result in Leo finding new default and personal\nsettings files. The values of these newly-read settings files will, as always,\noverride any previously-read settings.\n\nLet us say that a setting is **volatile** if it is different from a default\nsetting. Let us say that settings file A.leo **covers** settings file if B.leo\nif all volatile settings in B.leo occur in A.leo. With these definitions, the\n**safe rule** for placing settings files in local directories is::\n\n   Settings files in local directories should\n   cover all other settings files.\n\nFollowing this rule will ensure that the per-directory defaults specified in the\nlocal settings file will take precedence over all previously-read default and\npersonal settings files. Ignore this principle at your peril.\n", "children": []}, {"h": "Organizer nodes", "gnx": "ekr.20070317043727", "b": "Organizer nodes have headlines that do no start with @.\nOrganizer nodes may be inserted freely without changing the meaning of an @setting tree.\n", "children": []}, {"h": "\\@ignore and \\@if nodes", "gnx": "ekr.20080411111008.1", "b": "Leo ignores any subtree of an @settings tree whose headline starts with @ignore.\n\nYou can use several other kinds of nodes to cause Leo to ignore parts of  an @settings tree:\n\n- @if *expression*\n\n  A node whose headline starts with @if *expression* acts like an organizer node if the expression evaluates to True,    \n  otherwise acts like an @ignore node.\n  If the expression is empty the body text should contain a script that will be evaluated (in an empty context).\n\n- @ifplatform *platform-name*\n\n  Same as @if sys.platform == \"platform-name\": except that it isn't necessary to import sys.\n\n- @ifhostname *hostA,!hostB*\n\n  Evaluates to True if and only if: h=g.computeMachineName(); h==hostA and h!=hostB.\n  The \"!\" version allows matching to every machine name except the given one\n  to allow differing settings on only a few machines.\n", "children": []}, {"h": "Simple settings nodes", "gnx": "ekr.20070317043727.2", "b": "Simple settings nodes have headlines of the form::\n\n    @<type> name = val\n\nset the value of name to val, with the indicated type.\n\n<type> may be one of the following:\n\n=============== =========================================================================================\n<type>          Valid values\n--------------- -----------------------------------------------------------------------------------------\n\\@bool           True, False, 0, 1\n\\@color          A Tk color name or value, such as 'red' or 'xf2fddff' (without the quotes)\n\\@directory      A path to a directory\n\\@float          A floating point number of the form nn.ff.\n\\@int            An integer\n\\@ints[list]     An integer (must be one of the ints in the list).\n                 Example: @ints meaningOfLife[0,42,666]=42\n\\@keys[name]     Gives a name to a set of bindings for the Check Bindings script in leoSettings.leo.\n\\@path           A path to a directory or file\n\\@ratio          A floating point number between 0.0 and 1.0, inclusive.\n\\@string         A string\n\\@strings[list]  A string (must be one of the strings in the list).\n                 Example: @strings tk_relief['flat','groove','raised']='groove'\n=============== =========================================================================================\n\n**Note**: For a list of Tk color specifiers see:\n\n- http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm\n- http://www.tcl.tk/man/tcl8.4/TkLib/GetColor.htm\n\n**Important**: you can use the show-colors minibuffer command to guide you in making these settings.\n", "children": []}, {"h": "Complex settings nodes", "gnx": "ekr.20070317043727.3", "b": "Complex settings nodes have headlines of the form::\n\n    @<type> description\n\nThe type may be one of the following:\n\n=================== =====================================================================\n<type>              Valid values \n------------------- ---------------------------------------------------------------------\n\\@buttons           Child @button nodes create global buttons\n\\@commands          Child @command nodes create global buttons\n\\@data              Body text contains a list of strings, one per line.\n\\@enabled-plugins   Body text contains a list of enabled plugins\n\\@font              Body text contains a font description\n\\@menus             Child @menu and @item nodes create menus and menu items.\n\\@menuat            Child @menu and @item nodes modify menu tree create by \\@menus.\n\\@mode [name]       Body text contains a list of shortcut specifiers.\n\\@recentfiles       Body text contains a list of file paths.\n\\@shortcuts         Body text contains a list of shortcut specifies.\n=================== =====================================================================\n\nComplex nodes specify settings in their body text.\nSee the following sections for details.\n", "children": ["ekr.20090116094356.5", "ekr.20090116094356.6", "ekr.20090116094356.7", "ekr.20090116094356.8", "ekr.20090116094356.11", "ekr.20090116094356.10", "ekr.20090116094356.9", "ekr.20090116094356.14", "ekr.20090116094356.13", "ekr.20090116094356.12"]}, {"h": "\\@button", "gnx": "ekr.20090116094356.5", "b": "An @buttons tree in a settings file defines global buttons that\nare created in the icon area of all .leo files.\nAll @button nodes in the @commands tree create global buttons.\nAll @button nodes outside the commands tree create buttons local to the settings file.\n", "children": []}, {"h": "\\@commands", "gnx": "ekr.20090116094356.6", "b": "An \\@commands tree in a settings file defines global commands.\nAll \\@command nodes in the @commands tree create global commands.\nAll \\@command nodes outside the commands tree create commands local to the settings file.\n", "children": []}, {"h": "\\@data", "gnx": "ekr.20090116094356.7", "b": "The body text contains a list of strings, one per line.\nLines starting with '#' are ignored.\n", "children": []}, {"h": "\\@enabled-plugins", "gnx": "ekr.20090116094356.8", "b": "The body text of the @enabled plugins node contains a list of enabled plugins,\none per line. Comment lines starting with '#' are ignored. Leo loads plugins in\nthe order they appear.\n**Important**: Leo handles @enabled-plugins nodes a differently from other kinds\nof settings. To avoid confusion, **please read the following carefully**.\n\nAs always, Leo looks for @enabled-plugins nodes in settings files in the order\nspecified by `Search order for settings files`_. Leo will enable all plugins\nfound in the @enabled-plugins node it finds *last* in the search order. Leo does\n*not* enable plugins found in any other @enabled-plugins node. In particular,\n**you can not specify a list of default plugins by placing that list in a\nsettings file that appears early in the search list**. Instead, the last\n@enabled-plugins node found in the search list specifies all and *only* the plugins\nthat will be enabled.\n\nLet us distinguish two different situations. First, what Leo does when loading a\nfile, say x.leo. Second, what Leo does when loading a second file, say y.leo,\n*from x.leo*. When loading the first .leo file, Leo enables plugins from the\n@enabled-plugins node it finds *last* in the search order. But after plugins\nhave *already* been loaded and enabled, there is no way to disable previously\nloaded-and-enabled plugins. But local settings files can enable additional\nplugins.\n\nTo avoid confusion, I highly recommend following another kind of safe rule.\nWe say that an @enabled-plugin node in file A.leo **covers** an @enabled-plugin\nnode in file B.leo if all plugins specified in B's @enabled-plugin node appear\nA's @enabled-plugin node. The safe rule for plugins is::\n\n  @enabled-plugin nodes in settings files in local directories\n  should cover @enabled-plugins nodes in all other settings files.\n", "children": []}, {"h": "\\@font", "gnx": "ekr.20090116094356.11", "b": "The body text contains a list of settings for a font.  For example::\n\n    body_text_font_family = Courier New\n    body_text_font_size = None\n    body_text_font_slant = None\n    body_text_font_weight = None\n\n**Important**: you can use the show-fonts minibuffer command to guide you in making these settings.\n\n", "children": []}, {"h": "\\@menuat", "gnx": "ekr.20090116094356.10", "b": "The form of this node is::\n\n    @menuat *<path>* *<action>* *[clipboard]*\n\nThe @menuat setting has 2-3 parameters in its head text, its children are @menu and\n@item nodes as for the @menu setting.  @menuat modifies the menu tree created by @menus.\nIt is intended to be used in myLeoSettings.leo to modify the menu tree created\nin leoSettings.leo. This allows you to change the menus without having to\nre-create the entire menu tree from leoSettings.leo, and ensures you don't miss\nout when new things are added in the @menus in leoSettings.leo, as you would if\nyou replaced the @menus in leoSettings.leo with one in myLeoSettings.leo.\n@menuat should occur in a @settings tree, but not as a descendant of a @menus\ntree. There is an example of the use of the\n@menuat setting in the file .../leo/core/test/menuAtTest.leo.\n\nThe **path** argument specifies a target location in the menu tree as defined by\n@menus and modified by earlier @menuat settings. The path takes the form\n/entry1/entry2/entry3 where each entry is the name of a menu or item with all\ntext except a-z and 0-9 removed. Upper case letters are converted to lower case.\nSo for example to use the `Outline->Move->Move Down` menu item as a target, you\nwould specify a path as `/outline/move/movedown`.\n\nThe **action** argument specifies what the menu item does.\nThere are 5 available actions:\n\n- **before**: The supplied items and sub menus will be inserted immediately\n  before the target menu or item.\n\n- **after**: The supplied items and sub menus will be inserted immediately after\n  the target menu or item.\n\n- **append**: The supplied items and sub menus will be appended at the end of\n  the menu containing the target menu or item.\n\n- **cut**: The target menu or item will be removed from the menu tree and saved\n  to an internal clipboard. This can be used for deleting menus or items.\n  Descendants of the @menuat setting are ignored.\n\n- **copy**: The target menu or item will be copied and saved to\n  an internal clipboard.  Descendants of the @menuat setting are ignored.\n\nThe optional **clipboard** argument modifies the action of the before, after,\nand append actions. By default these actions insert the menus and items supplied\nas descendants of the @menuat setting. If you specify \"clipboard\" (without the\nquotes) as the source, the contents of the clipboard from a previous cut or copy\naction will be used instead. This parameter is optional and can be left blank.\n", "children": []}, {"h": "\\@menus", "gnx": "ekr.20090116094356.9", "b": "Leo creates its menus from the @menu, @item and @popup nodes in the @menus tree.\nWithin @menus trees, @menu nodes create menus and @item nodes create menu items. \n\nThe menu name always follows @menu. If the menu name is 'Plugins', Leo will\ncreate the Plugins menu and populate the menu by calling the\n'create-optional-menus' hook. This creates the Plugins menu as usual. Nested\n@menu nodes define submenus.\n\nThe command name follows @item. If the body text of an @item node exists, this\nbody text is the menu name. Otherwise, the menu name is the command name.\nHowever, if the command name starts with a '*', hyphens are removed from the\nmenu name. Menu names and command names may contain a single ampersand (&). If\npresent, the following character is underlined in the name. If the command\nname in an @item node is just a hyphen (-), the item represents a menu\nseparator.\n\n@popup *<widget-name>* creates a popup menu for use by the rClick plugin.\nThe children of this node should be @menu and @item nodes, used as with\n@menus.\n", "children": []}, {"h": "\\@mode", "gnx": "ekr.20090116094356.14", "b": "The form of this node is::\n\n    @mode *<mode name>*\n\nThe body text contains a list of shortcut specifiers. @mode nodes work just\nlike @shortcuts nodes, but in addition they have the side effect of creating\nthe enter-<mode name>-mode command.\n", "children": []}, {"h": "\\@recentfiles", "gnx": "ekr.20090116094356.13", "b": "The body text contains a list of paths of recently opened files, one path per\nline. Leo writes the list of recent files to .leoRecentFiles.txt in Leo's\nconfig directory, again one file per line.\n", "children": []}, {"h": "\\@shortcuts", "gnx": "ekr.20090116094356.12", "b": "The body text contains a list of shortcut specifiers.\n", "children": []}, {"h": "Input modes", "gnx": "ekr.20060105214753", "b": "Leo now allows you to specify input modes. You enter mode x with the\nenter-x-mode command. The purpose of a mode is to create different bindings\nfor keys within a mode. Often plain keys are useful in input modes.\n\nYou can specify modes with @mode nodes in leoSettings.leo. @mode nodes work\njust like @shortcuts nodes, but in addition they have the side effect of\ncreating the enter-<mode name>-mode command.\n\nNotes:\n\n- You can exit any mode using the keyboard-quit (Control-g) command. This is the\n  **only** binding that is automatically created in each mode. All other bindings\n  must be specified in the @mode node. In particular, the bindings specified in\n  @shortcuts nodes are **not** in effect in mode (again, except for the\n  keyboard-quit binding).\n\n- Leo supports something akin to tab completion within modes: if you type a key\n  that isn't bound in a mode a 'Mode' tab will appear in the log pane. This tab\n  shows all the keys that you can type and the commands to which they are bound.\n  The mode-help command does the same thing.\n\n- @shortcuts nodes specify the bindings for what might be called the 'top-level'\n  mode. These are the bindings in effect when no internal state is present, for\n  example, just after executing the keyboard-quit command.\n\n- The top_level_unbound_key_action setting determines what happens to\n  unbound keys in the top-level mode. Leo ignores unbound keys in all other modes.\n  The possibilities are 'insert', 'replace' and 'ignore'.\n\n- The set-insert-mode, set-overwrite-mode and set-ignore-mode\n  commands alter what happens to unbound keys in the top-level mode.\n\nWith all these options it should be possible to emulate the keyboard behavior of any other editor.\n", "children": []}, {"h": "Adding extensible attributes to nodes and .leo files", "gnx": "ekr.20050306090601", "b": "Leo's .leo file format is extensible.\nThe basis for extending .leo files are the v.unknownAttributes ivars of vnodes,\nuA's for short.\nLeo translates between uA's and xml attributes in the corresponding\n<v> elements in .leo files.\nPlugins may also use v.tempAttributes ivars to hold temporary information\nthat will *not* be written to the .leo file.\nThese two ivars are called **attribute ivars**.\n\nAttribute ivars must be Python dictionaries, whose keys are names of plugins and\nwhose values are *other* dictionaries, called **inner dictionaries**, for\nexclusive use of each plugin.\n\nThe v.u Python property allows plugins to get and set v.unknownAttributes easily::\n\n    d = v.u # gets uA (the outer dict) for v\n    v.u = d # sets uA (the outer dict) for v\n\nFor example::\n\n    plugin_name = 'xyzzy'\n    d = v.u # Get the outer dict.\n    inner_d = d.get(plugin_name,{}) # Get the inner dict.\n    inner_d ['duration']= 5\n    inner_d ['notes'] \"This is a note.\"\n    d [plugin_name] = inner_d\n    v.u = d\n\nNo corresponding Python properties exist for v.tempAttributes,\nso the corresponding example would be::\n\n    plugin_name = 'xyzzy'\n    # Get the outer dict.\n    if hasattr(p.v,'tempAttributes'): d = p.v.tempAttributes\n    else: d = {}\n    inner_d = d.get(plugin_name,{}) # Get the inner dict.\n    inner_d ['duration'] = 5\n    inner_d ['notes'] = \"This is a note.\"\n    d [plugin_name] = inner_d\n    p.v.tempAttributes = d\n\n**Important**: All members of inner dictionaries should be picklable: Leo\nuses Python's Pickle module to encode all values in these dictionaries. Leo will\ndiscard any attributes that can not be pickled. This should not be a major\nproblem to plugins. For example, instead of putting a tnode into these\ndictionaries, a plugin could put the tnode's gnx (a string) in the dictionary.\n\n**Note**: Leo does *not* pickle members of inner dictionaries whose name (key) starts with str\\_.\nThe values of such members should be a Python string.\nThis convention allows strings to appear in .leo files in a more readable format.\n\nHere is how Leo associates uA's with <v> elements in .leo files:\n\n- **Native xml attributes** are the attributes of <v> elements that are\n  known (treated specially) by Leo's read/write code. The native attributes of\n  <v> elements are a, t, vtag, tnodeList, marks,\n  expanded and descendentTnodeUnknownAttributes. All other attributes of\n  <v> and <t> elements are **foreign xml attributes**.\n\n- When reading a .leo file, Leo will create v.unknownAttributes ivars for\n  any vnode whose corresponding <v> or <t> element contains a\n  foreign xml attribute.\n\n- When writing a file, Leo will write foreign xml attributes in <v> elements\n  if the corresponding vnode contains an unknownAttributes ivar.\n\n- Leo performs the usual xml escapes on these strings when reading or writing\n  the unknownAttributes ivars.\n", "children": []}, {"h": "Translating Leo's menus and messages", "gnx": "ekr.20080310093038.4", "b": ".. _gettext: http://docs.python.org/lib/module-gettext.html\n\nIt is easy to translate Leo's menu strings: simply create an @menus tree in\nleoSettings.leo or myLeoSettings.leo that contains the translated menu names.\n\n**New in Leo 4.4.8**:\nLeo now contains support for translating messages sent to Leo's log:\n\n- Rather than using an '_' function to denote strings to be translated, Leo's\n  g.es and g.es_print functions translate \"odd\" (first, third, fifth) arguments,\n  leaving \"even\" arguments untranslated. Keyword arguments, color, newline, etc.\n  are never translated.\n\n- All calls to g.es and g.es_print in Leo's core follow this convention.\n\n- g.translateString does the actual translation using Python's `gettext`_ module.\n\n- You can use the script in the node \"@button print g.es stats\" in scripts.leo\n  to create catalogs of all scripts that need to be translated. Such catalogs\n  are used by Python's gettext module. (This script was also used to check that\n  the proper arguments to g.es and g.es_print were translated.)\n", "children": []}, {"h": "Writing new importers", "gnx": "ekr.20100122073254.11655", "b": "This section describes the process of creating an importer for a new language.\nThere are a set of \"importers\" in leoImport.py, all based on the\nbaseScannerClass class. You can define your own importer by creating a subclass.\nThis shouldn't be too difficult: baseScannerClass is supposed to do almost all\nthe work. With luck, your subclass might be very simple, as with class cScanner.\n\n**Important** As I write this, I realize that I remember very little about the\ncode, but I do remember its general organization and the process of creating a\nnew importer. The following should be all you need to write any importer.\n\nThis base class has three main parts:\n\n1. The \"parser\" that recognizes where nodes begin and end.\n\n2. The \"code generator\" the actually creates the imported nodes.\n\n3. Checking code that ensures that the imported code is equivalent\n   to the original code.\n\nYou should never have to change the code generators or the checking code.\nConfine your attention to the parser.\n\nThe parser thinks it is looking for classes, and within classes,\nmethod definitions.  Your job is to tell the parser how to do this.\nLet's look at part of the ctor for baseScannerClass for clues::\n\n   # May be overridden in subclasses.\n   self.anonymousClasses = [] # For Delphi Pascal interfaces.\n   self.blockCommentDelim1 = None\n   self.blockCommentDelim2 = None\n   self.blockCommentDelim1_2 = None\n   self.blockCommentDelim2_2 = None\n   self.blockDelim1 = '{'\n   self.blockDelim2 = '}'\n   self.blockDelim2Cruft = [] # Stuff that can follow .blockDelim2.\n   self.classTags = ['class',] # tags that start a tag.\n   self.functionTags = []\n   self.hasClasses = True\n   self.hasFunctions = True\n   self.lineCommentDelim = None\n   self.lineCommentDelim2 = None\n   self.outerBlockDelim1 = None\n   self.outerBlockDelim2 = None\n   self.outerBlockEndsDecls = True\n   self.sigHeadExtraTokens = [] # Extra tokens valid in head of signature.\n   self.sigFailTokens = []\n       # A list of strings that abort a signature when seen in a tail.\n       # For example, ';' and '=' in C.\n   self.strict = False # True if leading whitespace is very significant.\n\nNaturally, this looks like gibberish at first. I do *not* remember what all\nthese things do in detail, although obviously the names mean something. What I\n*do* remember is that these ivars control the operation of the startsFunction\nand startsClass methods and their helpers (especially startsHelper) and\nthe methods that call them, scan and scanHelper. Most of these methods have a\ntrace var that will enable tracing during importing.\n\nSo the strategy is simple: study startsHelper in detail, set the ivars above to\nmake startsHelper do what you want, and trace until things work as you want.\n\nThere is one more detail. Sometimes the ivars above are not sufficient to get\nthe job done. In that case, subclasses will override various methods of the\nparser, but *not* the code generator. If indentation is important, you will want\nto look at the Python importer. Notice that it overrides skipCodeBlock, called\nby startsHelper.\n\nThat's about it. It would be pointless to give you more details, because those\ndetails would lead you *away* from the process you need to follow. Having said\nthat, feel free to ask further questions. I'll be glad to answer them.\n", "children": []}, {"h": "Intermediate Topics", "gnx": "ekr.20101025080245.5799", "b": "", "children": ["ekr.20060430221745", "ekr.20050831184021.1", "ekr.20050831195331.4", "ekr.20050912125144", "ekr.20060612102055", "ekr.20070628083442", "ekr.20060527105211", "ekr.20080730212711.14", "ekr.20120315101404.14224"]}, {"h": "Controlling syntax coloring", "gnx": "ekr.20060430221745", "b": "", "children": ["ekr.20100805165051.7165"]}, {"h": "@file coloring.txt", "gnx": "ekr.20100805165051.7165", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20060430221745.1"]}, {"h": "@rst html\\coloring.html", "gnx": "ekr.20060430221745.1", "b": "###########################\nControlling Syntax Coloring\n###########################\n\nThis chapter discusses the settings to control Leo's syntax colorer. This\nchapter also discusses how to extend Leo's colorizer by creating xml language\ndescriptions files and corresponding Python files. **Important**: this material\nis for those who want to support Leo's colorizing code. To use Leo's colorizers\nyou only need to know about syntax-coloring settings.\n\n.. contents::\n    :depth: 3\n", "children": ["ekr.20060430222753", "ekr.20060830142929", "ekr.20060430220749", "ekr.20060502084233", "ekr.20060502084233.1", "ekr.20060502122950"]}, {"h": "@rst-no-head links", "gnx": "ekr.20060430222753", "b": ".. External links...\n.. _jEdit:                      http://www.jedit.org/\n.. _`jEdit's documentation`:    http://www.jedit.org/42docs/users-guide/writing-modes-part.html\n\n.. Relative links...\n.. _`Ruleset name`:      `Ruleset names`_\n.. _`Customizing Leo`:           customizing.html\n", "children": []}, {"h": "Syntax coloring settings", "gnx": "ekr.20060830142929", "b": "This section discusses only those settings that affect syntax coloring.\nSee `Customizing Leo`_ for a general discussion of Leo's settings.\n\nBoth the old colorizer (in Leo's core) and the new colorizer (the\nthreading_colorizer and qtGui plugins) now support \\@color and \\@font settings for colorizing\noptions. The settings for the old colorizer are::\n\n    comment_font, cweb_section_name_font, directive_font,\n    doc_part_font, keyword_font, leo_keyword_font, section_name_font,\n    section_name_brackets_font, string_font, undefined_section_name_font,\n    latexBackground_font, and latex_background_font.\n\nThe settings for the new colorizer are all of the above (except keyword_font) plus the following::\n\n    comment1_font, comment2_font, comment3_font, comment4_font, function_font,\n    keyword1_font, keyword2_font, keyword3_font, keyword4_font, label_font,\n    literal1_font, literal2_font, literal3_font, literal4_font, markup_font,\n    null_font, and operator_font.\n    \nTo specify a color, say for comment1, for *all* languages, create an @color node::\n\n    @color comment1_color = blue\n    \nTo specify a color for a **particular** language, say Python, prepend the setting name\nwith the language name.  For example::\n\n    @color python_comment1_color = pink\n\nTo specify a font, say for keyword_font, to be used as the default font for **all** languages,\nput the following in the body text of an @font node in leoSettings.leo::\n\n    # keyword_font_family = None\n    keyword_font_size = 16\n    keyword_font_slant = roman\n        # roman, italic\n    keyword_font_weight = bold\n        # normal, bold\n\nComments are allowed and undefined settings are set to reasonable defaults. \nAt present, comments can not follow a setting: comments must start a line.\n\nYou can specify per-language settings by preceding the settings names by a prefix x.\nSuch settings affect only colorizing for language x (i.e., all the modes in modes/x.py when using the new colorizer).\nFor example, to specify a font for php (only), put the following in the body text of an @font node in leoSettings.leo::\n\n    # php_keyword_font_family = None\n    php_keyword_font_size = 16\n    php_keyword_font_slant = roman\n        # roman, italic\n    php_keyword_font_weight = bold\n        # normal, bold\n", "children": []}, {"h": "Files", "gnx": "ekr.20060430220749", "b": "The jEdit_ editor drives its syntax colorer using xml **language description files.**\nRather than using the xml language description files directly, Leo uses\nPython **colorer control files**, created automatically from the xml files by a\nscript called jEdit2Py.  All these files reside in the leo/modes directory.\n\nThese Python files contain all the information in the jEdit's xml files, so we\ncan (loosely) speak of modes, rulesets, rules, properties and attributes in the\nPython colorer control files. Later sections of this documentation will make\nthis loose correspondence exact.\n\n`jEdit's documentation`_ contain a complete description of these xml files.\nEach xml file describes one **colorizing mode**.\nA mode consists of one or more **rulesets**, and each ruleset consists of a list of **colorizing rules**.\nIn addition, modes, rulesets and rules may have associated **properties** and **attributes**.\nVarious rules may specify that the colorizer uses another ruleset (either in the same mode or another mode).\n\n**Important**: jEdit's xml language description files contain no explicit <RULE> elements\nRules are simply sub-elements of an enclosing <RULES> element.\nThe element indicates the kind of rule that is specified,\nfor example, <SPAN>, <SEQ>, etc.\nBy the term **rule element** we shall mean any sub-element of the <RULES> element.\n\n**Important**: throughout this documentation,\n**x.py** will refer to the Python colorer for language x,\nand **x.xml** will refer to the corresponding xml language-description file.\n\nUsing Python colorer control files has the following advantages:\n\n- Running jEdit2Py need only be done when x.xml changes,\n  and the speed of the xml parser in jEdit2Py does not affect the speed of Leo's colorizer in any way.\n  Moreover, the jEdit2Py script can contain debugging traces and checks.\n\n- Colorer control files are valid .py files, so all of Python's import optimizations work as usual.\n  In particular, all the data in colorer control files is immediately accessible to Leo's colorer.\n\n- Colorer control files are easier for humans to understand and modify than the equivalent xml file.\n  Furthermore, it is easy to insert debugging information into Python colorer control files.\n\n- It is easy to modify the Python colorer control files 'by hand' without changing the corresponding xml file.\n  In particular, it would be easy to define entirely new kinds of pattern-matching rules in Python merely\n  by creating functions in a colorer control file.\n", "children": []}, {"h": "The colorizer's inner loop", "gnx": "ekr.20060502084233", "b": "When Leo's syntax colorer sees the '@language x' directive,\nit will import x.py from Leo's modes folder.\nThe colorer can then access any module-level object obj in x.py as x.obj.\n\nColorizer control files contain **rules functions** corresponding to rule elements in x.xml.\nThe colorizer can call these functions as if they were members of the colorizer class by\npassing 'self' as the first argument of these functions.\nI call these rules *functions* to distinguish them from the corresponding\n**rules methods** which are actual methods of the colorizer class.\nRules *functions* merely call corresponding rules *methods*.\nIndeed, rules functions are simply a way of binding values to keyword arguments of rules methods.\nThese keywords arguments correspond to the xml attributes of rule elements in x.xml.\n\nThe colorizer calls rules functions until one matches, at which point a range of text gets colored and the process repeats.\nThe inner loop of the colorizer is this code::\n\n    for f in self.rulesDict.get(s[i],[]):\n        n = f(self,s,i)\n        if n > 0:\n            i += n ; break\n        else: i += 1\n\n- rulesDict is a dictionary whose keys are rulesets and whose values are ruleset dictionaries.\n  Ruleset dictionaries have keys that are single characters and whose values are\n  the list of rules that can start with that character. \n\n- s is the full text to be colorized.\n\n- i is the position within s is to be colorized.\n\nRules methods (and functions) return n > 0 if they match, and n == 0 if they fail.\n", "children": []}, {"h": "Format of colorizer control files", "gnx": "ekr.20060502084233.1", "b": "The following sections describe the top-level data in x.py.\n", "children": ["ekr.20060502100550", "ekr.20060502090516", "ekr.20060510085547", "ekr.20060502090516.1", "ekr.20060502090516.2", "ekr.20060503072213"]}, {"h": "Ruleset names", "gnx": "ekr.20060502100550", "b": "A **ruleset name** is a Python string having the form 'x_setname',\nwhere setname is the value of the SET attribute of the <RULES> element in x.xml.\nFor example, the ruleset name of the ruleset whose SET attribute is JAVASCRIPT in php.xml is\n'php_JAVASCRIPT'.\n**Important**: by convention, the ruleset name of the default <RULES> element is 'x_main';\nnote that default <RULES> element have no SET attributes.\n\nThe colorizer uses ruleset names to gain access to all data structures in x.py.\nTo anticipate a bit, ruleset names are keys into two standard dictionaries,\nx.rulesDict and x.keywordsDictDict,\nfrom which the colorizer can get all other information in x.py::\n\n    # The rules list for the 'JAVASCRIPT' ruleset in php.xml.\n    rules = x.rulesDict('php_JAVASCRIPT')\n\n    # The keywords dict for the 'JAVASCRIPT' ruleset in php.xml.\n    keywordsDict = x.keywordsDictDict('php_JAVASCRIPT')\n\nIn fact, ruleset names (and x.rulesDict and x.keywordsDictDict)\nare the **only** names that the colorizer needs to know in order to access all information in x.py.\n", "children": []}, {"h": "x.properties", "gnx": "ekr.20060502090516", "b": "**x.properties** is a Python dictionary corresponding to the <PROPS> element in x.xml.\nKeys are property names; values are strings, namely the contents of <PROPERTY> elements in x.xml.\nx.properties contains properties for the entire mode.\nThat is, only modes have <PROPS> elements.\nFor example, here is x.properties in php.py::\n\n    # properties for mode php.xml\n    properties = {\n        \"commentEnd\": \"-->\",\n        \"commentStart\": \"<!--\",\n        \"indentCloseBrackets\": \"}\",\n        \"indentOpenBrackets\": \"{\",\n        \"lineUpClosingBracket\": \"true\",\n    }\n", "children": []}, {"h": "Attribute dictionaries and x.attributesDictDict", "gnx": "ekr.20060510085547", "b": "x.py contains a **attribute dictionary** for each ruleset in x.xml.\nKeys are attribute names, values strings representing the values of the attributes.\nThis dictionary is empty if a ruleset contains no attributes.\nThe valid keys are:\n\n- 'default': the default token type.  'null' is the default.\n\n- 'digit_re': a regular expression.\n  Words matching this regular expression are colored with the digit token type.\n\n- 'ignore_case': 'true' or 'false'.  Default is 'true'.\n\n- 'highlight_digits': 'true' or 'false'.  Default is 'true'.\n\n- 'no_word_sep': A list of characters treated as 'alphabetic' characters when matching keywords.\n\nFor example, here is one attribute dictionary in php.py::\n\n    # Attributes dict for php_javascript ruleset.\n    php_javascript_attributes_dict = {\n        \"default\": \"MARKUP\",\n        \"digit_re\": \"\",\n        \"highlight_digits\": \"true\",\n        \"ignore_case\": \"true\",\n        \"no_word_sep\": \"\",\n    }\n\nx.py also contains **x.attributesDictDict**.\nKeys are ruleset names, values are attribute dictionaries.\nHere is attributesDictDict for php.py::\n\n    # Dictionary of attributes dictionaries for php mode.\n    attributesDictDict = {\n        \"php_javascript\": php_javascript_attributes_dict,\n        \"php_javascript_php\": php_javascript_php_attributes_dict,\n        \"php_main\": php_main_attributes_dict,\n        \"php_php\": php_php_attributes_dict,\n        \"php_php_literal\": php_php_literal_attributes_dict,\n        \"php_phpdoc\": php_phpdoc_attributes_dict,\n        \"php_tags\": php_tags_attributes_dict,\n        \"php_tags_literal\": php_tags_literal_attributes_dict,\n    }\n\n**Note**:\nThe jEdit2Py script creates 'friendly' names for attribute dictionaries *solely* as an aid for people reading the code.\nLeo's colorer uses only the name x.attributeDictDict;\nLeo's colorer never uses the actual names of attribute dictionaries.\n", "children": []}, {"h": "Keyword dictionaries and x.keywordsDictDict", "gnx": "ekr.20060502090516.1", "b": "x.py contains a **keyword dictionary** for each ruleset in x.xml.\nx.py contains an empty keywords dictionary if a ruleset contains no <KEYWORDS> element.\n\nKeys are strings representing keywords of the language describe by the mode.\nValues are strings representing syntactic categories,\ni.e. a TYPE attribute valid in x.xml, namely:\nCOMMENT1, COMMENT2, COMMENT3, COMMENT4,\nFUNCTION,\nKEYWORD1, KEYWORD2, KEYWORD3, KEYWORD4,\nLABEL, LITERAL1, LITERAL2, LITERAL3, LITERAL4,\nMARKUP, NULL and OPERATOR.\n\nFor example, here (parts of) some keyword dictionaries in php.py::\n\n    # Keywords dict for mode php::PHP\n    php_PHP_keywords_dict = {\n        \"COM_invoke\": \"keyword2\",\n        \"COM_load\": \"keyword2\",\n        \"__CLASS__\": \"keyword3\",\n        ...\n        \"abs\": \"keyword2\",\n        \"abstract\": \"keyword1\",\n        \"accept_connect\": \"keyword2\",\n        ...\n    }\n\n    # Keywords dict for mode php::JAVASCRIPT_PHP\n    php_JAVASCRIPT_PHP_keywords_dict = {}\n\n    # Keywords dict for mode php::PHPDOC\n    php_PHPDOC_keywords_dict = {\n        \"@abstract\": \"label\",\n        \"@access\": \"label\",\n        \"@author\": \"label\",\n        ...\n        \"@var\": \"label\",\n        \"@version\": \"label\",\n    }\n\nx.py also contains **x.keywordsDictDict**.\nKeys are ruleset names, values are keywords dictionaries.\nHere is keywordsDictDict for php.py::\n\n    # Dictionary of keywords dictionaries for php mode.\n    keywordsDictDict = {\n        \"php_javascript\": php_javascript_keywords_dict,\n        \"php_javascript_php\": php_javascript_php_keywords_dict,\n        \"php_main\": php_main_keywords_dict,\n        \"php_php\": php_php_keywords_dict,\n        \"php_php_literal\": php_php_literal_keywords_dict,\n        \"php_phpdoc\": php_phpdoc_keywords_dict,\n        \"php_tags\": php_tags_keywords_dict,\n        \"php_tags_literal\": php_tags_literal_keywords_dict,\n    }\n\nThe colorizer can get the keywords dictionary for a ruleset as follows::\n\n    keywordsDict = x.keywordsDictDict(rulesetName)\n\n**Note**:\nThe jEdit2Py script creates 'friendly' names for keyword dictionaries *solely* as an aid for people reading the code.\nLeo's colorer uses only the name x.keywordsDictDict;\nLeo's colorer never uses the actual names of keywords dictionaries such as php_PHPDOC_keywords_dict.\n", "children": []}, {"h": "Rules, rules dictionaries and x.rulesDictDict", "gnx": "ekr.20060502090516.2", "b": "x.py contains one **rule function** for every rule in every ruleset (<RULES> element) in x.xml.\nThese rules have names rule1 through  ruleN,\nwhere N is the total number of rules in all rulesets in x.xml.\n\nEach rules *function* merely calls a rules *method* in Leo's colorizer.\nWhich method gets called depends on the corresponding element in `x.xml`.\nFor example, the first rule in php.xml is::\n\n    <SPAN TYPE=\"MARKUP\" DELEGATE=\"PHP\">\n\t\t<BEGIN>&lt;?php</BEGIN>\n\t\t<END>?&gt;</END>\n\t</SPAN>\n\nand the corresponding rule function is::\n\n    def php_rule0(colorer, s, i):\n        return colorer.match_span(s, i, kind=\"markup\", begin=\"<?php\", end=\"?>\",\n            at_line_start=False, at_whitespace_end=False, at_word_start=False,\n            delegate=\"PHP\",exclude_match=False,\n            no_escape=False, no_line_break=False, no_word_break=False)\n\n\nphp_rule0 calls colorer.match_span because the corresponding xml rule is a <SPAN> element.\n\nFor each ruleset, x.py also contains a **rules dictionary**,\na Python dictionary whose keys are characters and whose values are all lists\nof rules functions that that can match the key.\nFor example::\n\n    # Rules dict for phpdoc ruleset.\n    rulesDict8 = {\n        \"*\": [rule64,],\n        \"0\": [rule70,],\n        \"1\": [rule70,],\n        \"2\": [rule70,],\n        \"3\": [rule70,],\n        \"4\": [rule70,],\n        \"5\": [rule70,],\n        \"6\": [rule70,],\n        \"7\": [rule70,],\n        \"8\": [rule70,],\n        \"9\": [rule70,],\n        \"<\": [rule65,rule66,rule67,rule68,rule69,],\n        \"@\": [rule70,],\n        \"A\": [rule70,],\n        \"B\": [rule70,],\n        ...\n        \"X\": [rule70,],\n        \"Y\": [rule70,],\n        \"Z\": [rule70,],\n        \"_\": [rule70,],\n        \"a\": [rule70,],\n        \"b\": [rule70,],\n       ...\n        \"x\": [rule70,],\n        \"y\": [rule70,],\n        \"z\": [rule70,],\n        \"{\": [rule63,],\n    }\n\n**Note**: The order of rules in each rules list is important;\nit should be the same as rules element in x.xml.\n\nFinally, x.py contains **x.rulesDictDict**.\nKeys are ruleset names, values are rules dictionaries.\nThe colorer can get the rules list for character ch as follows::\n\n    self.rulesDict = x.rulesDictDict.get(rulesetName) # When a mode is inited.\n    ...\n    rules = self.rulesDict.get(ch,[]) # In the main loop.\n\nFor example, here is the rules dictionary for php.py::\n\n    # x.rulesDictDict for php mode.\n    rulesDictDict = {\n        \"php_javascript\": rulesDict6,\n        \"php_javascript_php\": rulesDict7,\n        \"php_main\": rulesDict1,\n        \"php_php\": rulesDict4,\n        \"php_php_literal\": rulesDict5,\n        \"php_phpdoc\": rulesDict8,\n        \"php_tags\": rulesDict2,\n        \"php_tags_literal\": rulesDict3,\n    }\n\n**Note**:\nThe jEdit2Py script creates 'friendly' names for rules lists *solely* as an aid for people reading the code.\nLeo's colorer uses only the name x.rulesDictDict;\nLeo's colorer never uses the actual names of rules lists such as rulesDict8,\nand Leo's colorer never uses the actual names of rules functions such as rule64.\n", "children": []}, {"h": "x.importDict and imported versus delegated rulesets", "gnx": "ekr.20060503072213", "b": "x.importDict is a Python dictionary.\nKeys are ruleset names; values are a list of ruleset names.\nFor example::\n\n    # Import dict for php mode.\n    importDict = {\n        \"php_javascript_php\": [\"javascript::main\"],\n    }\n\nFor any ruleset R whose ruleset name is N, x.importDict.get(N)\nis the list of rulesets names whose rulesets appear in\na DELEGATE attribute of an <IMPORT> rule element in R's ruleset.\nSuch **imported** ruleset are copied to the end of the R's rules list.\nLeo's colorizer does this copying only once, when loading ruleset R for the first time.\n\n**Note 1**: Loading imported rulesets must be done at 'run time'.\nIt should definitely not be done by jEdit2Py at 'compile time';\nthat would require running jEdit2Py on *all* .xml files whenever any such file changed.\n\n**Note 2**:  Multiple <IMPORT> rule elements in a single ruleset are allowed:\ndelegated rules are copied to the end of N's rules list in the order they appear in the ruleset.\n\n**Note 3**: The DELEGATE attribute of <IMPORT> elements is, in fact,\ncompletely separate from the DELEGATE attributes of other rules as\ndiscussed in `Arguments to rule methods`_.\nIndeed, the DELEGATE attribute of <IMPORT> elements creates entries in\nx.importDict, which in turn causes the colorizer to append the rules of the imported ruleset\nto the end of the present rules list.\nIn contrast, the DELEGATE attributes of other rules sets the delegate argument to rules methods,\nwhich in tern causes the colorizer to recursively color the matched text with the **delegated** ruleset.\nIn short:\n\n- The rules of **imported** rulesets are appended to the end of another rules list;\n  the rules of **delegated** rulesets never are.\n\n- **Imported** ruleset names appear as the values of items in x.importDict;\n  **delegated** ruleset names appear as delegate arguments to rule methods.\n", "children": []}, {"h": "Rule methods", "gnx": "ekr.20060502122950", "b": "This section describes each rules method in Leo's new colorizer.\nRules methods are called by rules functions in colorizer control file;\nthey correspond directly to rules elements in jEdit's language description files.\nIn fact, this documentation is a 'refactoring' of `jEdit's documentation`_.\n\nAll rule methods attempt to match a pattern at a particular spot in a string.\nThese methods all return True if the match succeeds.\n", "children": ["ekr.20060503064515", "ekr.20060502122950.7", "ekr.20060502122950.10", "ekr.20060502122950.13", "ekr.20060502122950.14", "ekr.20060502125223", "ekr.20060502122950.40", "ekr.20060502122950.41", "ekr.20060502122950.42", "ekr.20060502122950.47", "ekr.20060502122950.48"]}, {"h": "Arguments to rule methods", "gnx": "ekr.20060503064515", "b": "All rule methods take three required arguments and zero or more optional keyword arguments.\n\nHere is a list of the required arguments and their meaning:\n\n- **self**: An instance of Leo's colorizer.\n\n- **s**: The string in which matches may be found.\n\n- **i**: The location within the string at which the rule method looks for a match.\n\nHere is a list of all optional keyword arguments and their meaning:\n\n- **at_line_start**:\n  If True, a match will succeed only if i is at the start of a line.\n\n- **at_whitespace_end**:\n  If True, the match will succeed only if i is at the first non-whitespace text in a line.\n\n- **at_word_start**:\n  If True, the match will succeed only if i is at the beginning of a word.\n\n- **delegate**:\n  If non-empty, the value of this argument is a `ruleset name`_.\n  If the match succeeds, the matched text will be colored recursively with the indicate ruleset.\n\n- **exclude_match**:\n  If True, the actual text that matched will not be colored.\n  The meaning of this argument varies slightly depending on whether one or two sequences are matched.\n  See the individual rule methods for details.\n\n- **kind**: A string representing a class of tokens, i.e., one of:\n  'comment1', 'comment2', 'comment3', 'comment4', 'function',\n  'keyword1', 'keyword2', 'keyword3', 'keyword4',\n  'label', 'literal1', 'literal2', 'literal3', 'literal4',\n  'markup', 'null' and 'operator'.\n\n- **no_escape**:\n  If True, the ruleset's escape character will have no effect before the end argument to match_span.\n  Otherwise, the presence of the escape character will cause that occurrence of the end string to be ignored.\n\n- **no_line_break**:\n  If True, the match will not succeed across line breaks.\n\n- **no_word_break**:\n  If True, the match will not cross word breaks.\n\nNew in Leo 4.4.1 final: the regular expression rule matchers no longer get a hash_char argument\nbecause such matchers are called only if the present search pattern starts with hash_char.\n", "children": []}, {"h": "match_eol_span", "gnx": "ekr.20060502122950.7", "b": "::\n\n    def match_eol_span (self,s,i,kind,begin,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        delegate = '',\n        exclude_match = False):\n\nmatch_eol_span succeeds if s[i:].startswith(begin) and\nthe at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_eol_span highlights from i to the end of the line\nwith the color specified by kind.\nIf the exclude_match argument is True, only the text before the matched text will be colored.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_eol_span_regexp", "gnx": "ekr.20060502122950.10", "b": "::\n\n    def match_eol_span_regexp (self,s,i,kind,regex,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        delegate = '',\n        exclude_match = False):\n\nmatch_eol_span_exp succeeds if:\n\n1. The regular expression regex matches at s[i:], and\n\n2. The at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_eol_span_regexp  highlights from i to the end of the line.\nIf the exclude_match argument is True, only the text before the matched text will be colored.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_keywords", "gnx": "ekr.20060502122950.13", "b": "::\n\n    def match_keywords (self,s,i):\n\nmatch_keywords succeeds if s[i:] starts with an identifier contained in the mode's keywords dictionary d.\n\nIf successful, match_keywords colors the keyword.\nmatch_keywords does not take a kind keyword argument.\nInstead, the keyword is colored as specified by d.get(theKeyword).\n", "children": []}, {"h": "match_mark_following", "gnx": "ekr.20060502122950.14", "b": "::\n\n    def match_mark_following (self,s,i,kind,pattern,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        exclude_match = False):\n\nmatch_mark_following succeeds if s[i:].startswith(pattern), and\nthe at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_mark_following colors from i to the start of the next token\nwith the color specified by kind.\nIf the exclude_match argument is True, only the text after the matched text will be colored.\n", "children": []}, {"h": "match_mark_previous", "gnx": "ekr.20060502125223", "b": "::\n\n    def match_mark_previous (self,s,i,kind,pattern,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        exclude_match = False):\n\nmatch_mark_previous succeeds if s[i:].startswith(pattern),and\nthe at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_mark_previous colors from the end of the previous token to i\nwith the color specified by kind.\nIf the exclude_match argument is True, only the text before the matched text will be colored.\n", "children": []}, {"h": "match_seq", "gnx": "ekr.20060502122950.40", "b": "::\n\n    def match_seq (self,s,i,kind,seq,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        delegate = ''):\n\nmatch_seq succeeds if s[i:].startswith(seq) and\nthe at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_seq highlights from i to the end of the sequence\nwith the color specified by kind.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_seq_regexp", "gnx": "ekr.20060502122950.41", "b": "::\n\n    def match_seq_regexp (self,s,i,kind,regex,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        delegate = ''):\n\nmatch_seq succeeds if:\n\n1. The regular expression regex matches at s[i:], and\n\n2. The at_line_start, at_whitespace_end and at_word_start conditions are all satisfied.\n\nIf successful, match_seq_regexp highlights from i to the end of the sequence\nwith the color specified by kind.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_span", "gnx": "ekr.20060502122950.42", "b": "::\n\n    def match_span (self,s,i,kind,begin,end,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        exclude_match = False,\n        delegate = ''\n        no_escape = False,\n        no_line_break = False,\n        no_word_break = False):\n\nmatch_span succeeds if there is an index j > i such that\ns[:i].startswith(begin) and s[i:j].endswith(end) and the\nat_line_start, at_whitespace_end, at_word_start,\nno_escape, no_line_break and no_word_break conditions are all satisfied.\n\nIf successful, match_span highlights from s[i:j\nwith the color specified by kind;\nbut if the exclude_match argument is True, the begin and end text are not colored.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_span_regexp", "gnx": "ekr.20060502122950.47", "b": "::\n\n    def match_span (self,s,i,kind,regex,end,\n        at_line_start = False,\n        at_whitespace_end = False,\n        at_word_start = False,\n        exclude_match = False,\n        delegate = ''\n        no_escape = False,\n        no_line_break = False,\n        no_word_break = False):\n\nmatch_span_regex succeeds if:\n\n1. The regular expression regex matches at s[i:],\n\n2. There is an index j > i such that s[i:j].endswith(end),\n\n3. The at_line_start, at_whitespace_end, at_word_start,\n   no_escape, no_line_break and no_word_break conditions are all satisfied.\n\nIf successful, match_span colors s[i:j],\nwith the color specified by kind;\nbut if the exclude_match argument is True, the begin and end text are not colored.\nThe delegate argument, if present, specifies the ruleset to color the colored text.\n", "children": []}, {"h": "match_terminate", "gnx": "ekr.20060502122950.48", "b": "::\n\n    def match_terminate (self,s,i,kind,at_char):\n\nmatch_terminate succeeds if s[i:] contains at least at_char more characters.\n\nIf successful, match_terminate colors at_char characters\nwith the color specified by kind.\n", "children": []}, {"h": "Creating documents with Leo", "gnx": "ekr.20050831184021.1", "b": "", "children": ["ekr.20100805165051.7164"]}, {"h": "@file rstplugin3.txt", "gnx": "ekr.20100805165051.7164", "b": "@language rest\n@tabwidth -4\n\n@all\n", "children": ["ekr.20050818163826"]}, {"h": "@rst html\\rstplugin3.html", "gnx": "ekr.20050818163826", "b": ".. publish_argv_for_missing_stylesheets = --language=de,--documentclass=report,--use-latex-toc\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nshow_options_doc_parts=False\nstylesheet_path=..\\doc\nwrite_intermediate_file=True\nverbose=True\n@c\n\n############################\nCreating Documents with Leo\n############################\n\nThis chapter discusses Leo's rst3 command. The rst3 command creates HTML, PDF,\nLaTeX and other kinds of documents from Leo outlines containing\n`reStructuredText`_ (rST) or `Sphinx`_ markup.\n\n**Note**: `docutils`_ is a document processing system using rST markup.\n`Sphinx`_ extends docutils: Sphinx markup is a superset of rST markup. All of\nLeo's documentation is written in Sphinx and processed with the rst3 command to\nproduce HTML files.\n\nLeo and rst3 make writing rST/Sphinx documents a *lot* easier:\n\n1. Leo outlines organize writing in all the usual ways. You always see the\n   structure of your writing clearly no matter how large it is. You can\n   reorganize chapters, sections and paragraphs effortlessly. View nodes can\n   show you many different views of your writing simultaneously. These\n   features, all by themselves, would make Leo an excellent choice for\n   editing rST documents.\n\n2. But the rst3 command does more: it automatically creates rST sections from\n   headlines. Without Leo, changing the level of a section is clumsy and error\n   prone: you must carefully change the section's underlining character. Leo's\n   rst3 command eliminates all this bother.\n\n3. The rst3 command converts an \\@rst tree to rST and then sends this text to\n   docutils or Sphinx for further processing.\n\nIn addition to these basic features, the rst3 command provides *many* other\ncapabilities for power users. We'll discuss these features later.\n\n.. contents::\n    :depth: 4\n", "children": ["ekr.20050818163826.1", "ekr.20100810203016.4296", "ekr.20100809162244.4289", "ekr.20100813075851.4296", "ekr.20100813075851.4297", "ekr.20050818163826.13", "ekr.20050818163826.16", "ekr.20050818163826.14"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050818163826.1", "b": ".. rST links used in this document...\n\n.. _`Scripting`:            scripting.html\n\n.. External links...\n.. _docutils:               http://docutils.sourceforge.net\n.. _LaTeX:                  http://www.latex-project.org/\n.. _reStructuredText:       http://docutils.sourceforge.net/rst.html\n.. _SilverCity:             http://silvercity.sourceforge.net\n.. _Sphinx:                 http://sphinx.pocoo.org/\n.. _`Leo's Google Group`:   http://groups.google.com/group/leo-editor\n\n.. Hard links to Leo's web site...\n.. _ListManagerDocs.html: http://webpages.charter.net/edreamleo/ListManagerDocs.html\n.. _wxListManager.leo:    http://webpages.charter.net/edreamleo/wxListManager.leo\n", "children": []}, {"h": "@rst-ignore", "gnx": "ekr.20100810203016.4296", "b": "", "children": ["ekr.20050818163826.6", "ekr.20050818163826.4"]}, {"h": "Options that set command names", "gnx": "ekr.20050818163826.6", "b": ".. EKR: This kind of \"flexibility\" is a really bad idea.\n\nThe following options specify the 'spelling' of headline commands. The\noption_prefix and option_prefixes command also define the spelling of special\ndoc parts.\n\nYou can change these to make them shorter or to avoid conflicts with headlines\nin your Leo files. The list below merely gives the default value for each\nsetting.\n\n`code_prefix`: '\\@rst-code'\n\n`ignore_headline_prefix`: '\\@rst-no-head'\n\n`ignore_headlines_prefix`: '\\@rst-no-headlines'\n\n`ignore_prefix_tree`: '\\@rst-ignore'\n\n`ignore_node_prefix`: '\\@rst-ignore-node'\n\n`ignore_tree_prefix`: '\\@rst-ignore-tree'\n\n`option_prefix`: '\\@rst-option'\n\n`options_prefix`: '\\@rst-options'\n\n`preformat_prefix`: '\\@rst-preformat'\n\n`rst_prefix`: '\\@rst'\n\n`show_headline_prefix`: '\\@rst-head'\n", "children": []}, {"h": "Advanced topics", "gnx": "ekr.20050818163826.4", "b": "The material covered so far in this chapter suffices to create most books\nand documentation, including Leo's own documentation.\n\nThe rest of this chapter covers advanced topics. These can seem bewilderingly\ncomplex. Alas, they are complex! However, they all arose from a single problem::\n\n    How to generate documentation from computer source code in a Leo outline.\n\nor equivalently::\n\n    How to embed documentation in computer source code in a Leo outline.\n\nThis is an interesting problem, but it has little general interest. Please stop\nreading now if this problem doesn't interest you!\n", "children": ["ekr.20100810203016.4298", "ekr.20100810091118.4301", "ekr.20100810091118.4306", "ekr.20050818163826.10", "ekr.20060527103630"]}, {"h": "Modes", "gnx": "ekr.20100810203016.4298", "b": "By default, the rst3 command operates in **rst mode**. In rst mode, the rst3\ncommand treats body text as rST (or Sphinx) markup. This is the mode of\noperation discussed in the Tutorial.\n\nIn **code mode** the rst3 command treats body text as computer source code.\n**Note**: both rST and Sphinx have markup designed to represent computer\nprograms. The rst3 command generates that markup automatically in code mode.\n\nCode mode is inherently complex. As we shall see, there are *many* possible\noptions in code mode. This can hardly be helped--this is truly an advanced\ntopic!\n\nIn **doc_only_mode**, rst3 command outputs only regular doc parts and @\n@rst-markup doc parts. Headlines create section in doc_only mode only if:\n\n1. The node contains a doc part or\n\n2. The show_organizer_nodes option is in effect.\n\nThe code_mode and doc_only_mode options determine the mode as follows:\n\n- By default (code_mode=False; doc_only_mode=False), the rst3 command is in\n  rst mode.\n\n- Setting code_mode=True causes the rst3 command to enter code mode.\n\n- Setting code_mode=False cause the rst3 command to enter rst mode.\n\n- Setting doc_only_mode=True causes the rst3 command to enter doc_only mode.\n\n", "children": []}, {"h": "Code mode options", "gnx": "ekr.20100810091118.4301", "b": "The following options have effect only in code mode.\n\n.. glossary::\n    :sorted:\n\nnumber_code_lines (default: True)\n\n    Controls whether to number code lines in code mode.\n    This option has no effect in rst mode.\n\nshow_leo_directives (default: True)\n\n    True: include Leo directives\n    False: ignore Leo directives.\n\nshow_markup_doc_parts (default: False)\n\n    True: include markup doc parts.\n    False: ignore markup doc parts.\n\nshow_options_doc_parts (default: False)\n\n    True: include options doc parts.\n    False: ignore options doc parts.\n\nshow_doc_parts_as_paragraphs (default: False)\n\n    True: Move doc parts outside of the code-block directive. False: Show doc\n    parts in the code-block directive. **Cool**: Any rST markup in doc parts\n    included as the result of this option will be rendered properly.\n\nshow_options_nodes (default: False)\n\n    True: show @rst-options nodes.\n    False: Ignore @\n", "children": []}, {"h": "Rst mode options", "gnx": "ekr.20100810091118.4306", "b": "The following option has effect only in rst mode.\n\n.. glossary::\n\nshow_doc_parts_in_rst_mode [True,False or class names] (default: True)\n\n    This option is most useful for rst documents which are not computer code.\n    It allows you to use doc parts to make comments on the draft document\n    which are either excluded from the output or formatted in a way that highlights\n    their nature as comments rather than content.  For example, you're writing a book, and\n    you want to use a doc part at the top of a section to remind yourself \"need\n    to explain how Ted got to Sally's\".    Note: you may need to add\n    CSS to have them formatted differently.\n\n    The option can be `True`, `False`, or one or more class names.\n\n    **True**: Treat the entire doc part from the opening '@' to the closing '@c\n    as normal markup.\n\n    **False**: Remove the doc part.\n\n    **class names**: Process the contents of the doc part as it if were in an rst\n    `container` directive. For example::\n\n         @ @rst-options\n         show_doc_parts_in_rst_mode = notes literal\n         @c\n\n    would wrap the doc part contents in the output in a div with classes\n    \"container notes literal\". Furthermore, if one of the class names is\n    `literal`, then the doc part content will be output as a literal block\n    wrapped in a container as described above. This allows you to use text which\n    is not valid rst as rough notes for annotating a draft document.\n", "children": []}, {"h": "The code-block directive", "gnx": "ekr.20050818163826.10", "b": "The rst3 command defines a code-block rST directive. The primary purpose of this\ndirective is to show formatted source code.\n\nIn rst mode you can insert the code-block directive like any other rST markup.\n\nThe rst3 command generates code-block directives automatically in code mode.\n\nThis directive takes one argument, a language name.  Like this::\n\n    .. code-block:: Python\n\n        import leo.core.leoPlugins as leoPlugins\n        import leo.core.leoGlobals as g\n\nThis directive syntax colors the code in the indented code block that follows the directive.\nThe result looks like this if the SilverCity syntax coloring module has been installed.\n\n.. .. code-block:: Python\n\n    .. import leo.core.leoPlugins as leoPlugins\n    .. import leo.core.leoGlobals as g\n\n.. Otherwise, the output looks like this::\n\n    .. import leo.core.leoPlugins as leoPlugins\n    .. import leo.core.leoGlobals as g\n\nSee `Scripting`_ for many examples of how to use code-blocks.\n", "children": []}, {"h": "Controlling the rst3 command from scripts", "gnx": "ekr.20060527103630", "b": "A new method has been added to make it more easily to write rST code from scripts::\n\n    c.rstCommands.writeNodeToString(p)\n\nwriteNodeToString scans p's tree (p defaults to presently selected node) looking for @rst nodes.\nWhen the first @rst node is found, writeNodeToString processes the node as usual, with the following changes:\n\n- @rst need not be followed by a filename; any filename and its extension are *ignored*.\n\n- Only the ext argument to writeNodeToString determines the type of output produced.\n  The valid values for the ext argument are None (for rst output), '.html', '.pdf', and '.tex'.\n\n- Instead of writing the result to a file, writeNodeToString returns the tuple (p,s),\n  where p is the node whose tree produced the output, and s is the output itself.\n\n- writeNodeToString returns after processing at most one @rst node.\n\nScripts can easily use writeNodeToString to convert @rst trees into various kinds of output.\nFor example::\n\n    p,s = c.rstCommands.writeNodeToString(p,ext='html')\n\nNotes:\n\n- This script scans the presently selected tree for @rst nodes.\n  In particular, if the presently selected tree does not contain an @rst node the search continues in parent trees.\n  When an @rst node is found, it converts the node (and descendants) to html and returns p,\n  the found @rst node and s, the html itself.\n\n- Valid values for the ext argument are \".html\", \".tex\" or None (specifies rst output)\n\n- There is some support for ext=\".pdf\", but this is experimental code.  Expect crashes.\n", "children": []}, {"h": "Tutorial", "gnx": "ekr.20100809162244.4289", "b": "This tutorial tells how to get started with Leo's rst3 command. The tutorial\ncovers only rst3's basic features. You can do a *lot* with these features--Leo's\ndocumentation uses only the features described here!\n\nStep-by-step, here is how to use the rst3 command:\n\n1. Create an \\@rst node. This node and its descendants will contain your\n   document. The \\@rst node itself is a good place to specify general\n   information about your documentation, including its title, one or more\n   external files created by the rst3 command, and global settings for the rst3\n   command.\n\n2. Write your documentation in the descendants of the \\@rst node. Within the\n   \\@rst tree, **headlines represent section headings**. Body text contain your\n   writing, including rST or Sphinx markup.\n\n3. To create your documents, run the rst3 command on an outline containing one\n   or more \\@rst nodes. \n\nThat's all there is to it! The organization of the \\@rst tree *is* the organization\nof your document. To reorganize your document, you just reorganize the nodes in\nthe \\@rst tree!  When you are done writing, create your output using the rst3 command.\n\nThe next sections will discuss these three steps in more detail. As you will\nsee, after you set up the \\@rst node, you can focus exclusively on writing and\norganizing. Leo's rst3 command will take care of the rest.\n", "children": ["ekr.20100809162244.4292", "ekr.20100809162244.4295", "ekr.20100809162244.4296", "ekr.20100809162244.4301"]}, {"h": "Step 1: Create the @rst node", "gnx": "ekr.20100809162244.4292", "b": "The headline of the \\@rst node has the form::\n\n        @rst <filename>\n\nDepending on options to be discussed later, the rst3 command will write one or two files:\nthe **output file** (<filename>), and the **intermediate file** (<filename>.txt).\n\nFor example, the rst3 command applied to \\@rst abc.html will write\nabc.html or abc.html.txt or both.\n\n**Important**: The intermediate file *always* contains rST/Sphinx markup\n*regardless* of the type of the final output files. When in doubt about the rst3\ncommand, you can examine the intermediate file to see what rst3 has done.\n\nLet's turn our attention to the the body of the \\@rst node...\n", "children": ["ekr.20100809162244.4298", "ekr.20100809162244.4297"]}, {"h": "Set global options", "gnx": "ekr.20100809162244.4298", "b": "The \\@rst node is a good place for options that apply to the entire \\@rst\ntree. Typically, you will just set these options once and then completely forget\nabout them.\n\nYou set rst3 options in body parts like this::\n\n    @ @rst-options\n    rst3 options, one per line\n    @c\n\nThis is a Leo doc part: the '@' must appear in the leftmost column. As usual,\nthe doc part ends with the \\@c directive, or the end of the body text.\n\nHere are the recommended options when using docutils::\n\n    @ @rst-options\n    call_docutils=True\n    code_mode=False\n    stylesheet_path=..\\doc\n    write_intermediate_file=True\n    @c\n\nAnd here are the recommended options when using Sphinx::\n\n    @ @rst-options\n    call_docutils=False\n    code_mode=False\n    stylesheet_path=..\\doc\n    write_intermediate_file=True\n    @c\n\n**Note 1**: It is good style to specify all these options explicitly, even if they are\nthe same as the standard default values. This ensures that the rst3 command\nwill produce the same results no matter where the \\@rst node is located.\n\n**Note 2**: You may have to change the stylesheet_path option so that the\ngenerated output file can find the proper stylesheets.\n", "children": []}, {"h": "Set your document's title", "gnx": "ekr.20100809162244.4297", "b": "Next, set your document's title by putting something like this in the\nbody text of the \\@rst node::\n\n    #############\n    War and Peace\n    #############\n\n**Important**: The rst3 command reserves the '#' character for the document\ntitles--don't use any other underlining character.\n\nSometimes I put the first words of a document in the \\@rst node::\n\n    Well, Prince, so Genoa and Lucca are now just family estates of the\n    Buonapartes. But I warn you, if you don't tell me that this means war, if\n    you still try to defend the infamies and horrors perpetrated by that\n    Antichrist--I really believe he is Antichrist--I will have nothing more to\n    do with you and you are no longer my friend, no longer my 'faithful slave,'\n    as you call yourself! But how do you do? I see I have frightened you--sit\n    down and tell me all the news.\n", "children": []}, {"h": "Step 2: Write your document", "gnx": "ekr.20100809162244.4295", "b": "Now comes the \"interesting\" part--actually writing your novel, short story,\ndocumentation or whatever.\n\nAs always with Leo, you organize your work with outlines. By default, (that is,\nwith the recommended options discussed in Step 1) the rst3 command will produce\nthe following output:\n\n1. Each node becomes an rST/Sphinx section.\n\n   The level of each section corresponds to the level of the node in the\n   headline. Children of the @rst node create level 1 sections. Grandchildren of\n   the \\@rst node create level 2 sections, and so on.\n\n2. The headline of each node becomes the section heading.\n\n3. The body text of each node becomes the contents of the node's section.\n\n   **Note**: The body text of any node in an \\@rst tree contains plain text,\n   with optional rST or Sphinx markup. Sphinx markup is a superset of rST\n   markup. For more details on markup, see the `Sphinx`_ or `reStructuredText`_\n   documentation.\n\nThat's all there is to it!\n\nWell almost. There is one other feature you should know about. Headlines that\nstart with '\\@rst-' control the rst3 command.  The three most useful are: \n\n.. glossary::\n\n\\@rst-no-head <ignored-text>\n\n    Causes the rst3 command to copy just the body text of the node. In other\n    words, the node's body text become part of the previous section. Leo's docs\n    use such nodes for rST links and other \"invisible\" markup.\n\n\\@rst-ignore <ignored-text>\n\n    The rst3 command ignores any \\@rst-ignore node. Neither the headline nor the\n    body text becomes part of the output. You can use such nodes for notes that\n    you do not want to become part of the actual document.\n\n\\@rst-ignore-tree <ignored-text>\n\n    The rst3 command ignores the \\@rst-ignore-tree node and all its descendants.\n", "children": []}, {"h": "Step 3: Run the rst3 command", "gnx": "ekr.20100809162244.4296", "b": "This step is easy. Select an outline containing one or more \\@rst trees. Now do\n<Alt-X>rst3<Return>. You can use <Ctrl-P> (repeat-complex-command) instead if\nthe last minibuffer command was the rst3 command.\n\nThe rst3 command writes its output to either the output file or the intermediate\nfile, or both:\n\n- With the recommended settings for docutils, the rst3 command will run docutils\n  automatically, producing the output file as the result.\n\n- With the recommended settings for Sphinx, the rst3 command will generate the\n  intermediate file. You must then run Sphinx's make utility to turn the\n  intermediate file into the final output file.\n", "children": []}, {"h": "Go forth and experiment", "gnx": "ekr.20100809162244.4301", "b": "You now know everything needed to get started with the rst3 command.\nSome possible next steps are:\n\n1. Look at Leo's own documentation in LeoDocs.leo. It's in the node \"@rst\n   html\\rstplugin3.html\". Discover how the nodes in this tree correspond to the\n   documentation you see before you.\n\n2. Create your own @rst nodes. Run the rst3 command on them and see what\n   happens. If you get stuck, you please ask for help at\n   `Leo's Google Group`_.\n", "children": []}, {"h": "Options", "gnx": "ekr.20100813075851.4296", "b": "This section discusses options--what they are, how to set them and how to set their defaults.\n", "children": ["ekr.20100809122216.4286", "ekr.20050818163826.7", "ekr.20050818163826.8", "ekr.20050818163826.9", "ekr.20050818163826.5", "ekr.20110612104631.16414"]}, {"h": "General options", "gnx": "ekr.20100809122216.4286", "b": "Here is a complete list of options for the rst3 and code-to-rst commands:\n\n.. glossary::\n    :sorted:\n\ncall_docutils (default: True):\n\n    Call docutils to process the intermediate file.\n\ndefault_path (default: '')\n\n    The path to be prepended to filenames given in root nodes.\n\ndefault_encoding (default: utf-8)\n\n    The default encoding to be used for non-ascii (unicode characters).\n\nencoding (default: the default_encoding setting)\n\n    The encoding to be used for non-ascii (unicode) characters.\n    **Important**: this option has effect only in @rst-options doc parts\n    in root @rst nodes.\n\ngenerate_rst (default: True)\n\n    A master switch.\n    True: generate rST markup for rST sections and rST code-blocks.\n    False: generate plain text and ignore @ @rst-markup doc parts.\n\ngenerate_rst_header_comment (default: True)\n\n    True: Leo writes a comment line of the form::\n\n        .. rst3: filename: <filename>\n\n    at the start of intermediate files. This option has effect only if the\n    generate_rst and write_intermediate_file options are both True.\n\npublish-argv-for-missing-stylesheets (Default: '')\n\n    The arguments to be passed to docutils.core.Publisher().publish() when no\n    stylesheet is in effect. This is a string that represents a comma-separated\n    list of strings: For example, the option::\n\n        publish-argv-for-missing-stylesheets=--language=de,--documentclass=report,--use-latex-toc\n\n    results in the call::\n\n        publish(['--language=de','--documentclass=report','--use-latex-toc'])\n\nshow_headlines (default: True)\n\n    True: automatically generate rST sections from headlines.\n    False: ignore headlines.\n\n    **Note**: The level of the node in the outline determines the level of the\n    section underlining in the rST markup. Higher-level headlines in the outline\n    correspond to higher-level section headings; lower-level headlines in the\n    outline correspond to lower-level section headings.\n\nshow_organizer_nodes (default: True)\n\n    True: generate rST sections for nodes that do not contain body text.\n\n    **Note**: This option has no effect unless the rST section would otherwise be written.\n\nshow_sections (default: True)\n\n    True: generate rST sections corresponding to headlines.\n    False: don't generate sections.  Instead, generate lines of the form::\n\n        **headline**\n\nstrip_at_file_prefixes (default: True)\n\n    True: remove @auto, @file, @nosent and @thin from the start of headlines.\n\nstylesheet_name (default: 'default.css')\n\n    The name of the stylesheet passed to docutils.\n\nstylesheet_path (default: '')\n\n    The directory containing the stylesheet passed to docutils.\n\n    **Note**: If the stylesheet_embed option is True, specify a path relative to\n    the location of the Leo file. If the stylesheet_embed option is False,\n    specify a path relative to the location of the HTML file.\n\nstylesheet_embed (default: True)\n\n    True: The content of the stylesheet file will be embedded in the HTML file.\n    False: The HTML file will link to an external stylesheet file.\n\nunderline_characters (default: #=+*^~\"'\\`-:>\\_)\n\n    The underlining characters to be used to specify rST sections.\n    The first character is reserved so you can specify the top-level section explicitly.\n\nverbose (default: True)\n\n    True: write informational messages.\n\nwrite_intermediate_file (default: False)\n\n    **Important**: the rst3 command *always* creates an intermediate file.\n    This option controls whether that file is an internal Python object\n    or an actual file on the external file system.\n\n    True: writes the intermediate file to the external file system. The name of\n    the intermediate file has the name of the output file with .txt appended.\n    This option has effect only if the generate_rst option is True.\n\n    False: writes the intermediate file to an internal Python object.\n", "children": []}, {"h": "Headline commands", "gnx": "ekr.20050818163826.7", "b": "Any headline that starts with @rst- controls the rst3 command.\n\n.. glossary::\n    :sorted:\n\n..  @rst-code <section> \n\n    ..  Enter code mode. (Code mode is covered in the advanced topics sections)\n    ..  Create a section if the show_headlines option is True.\n\n@rst-ignore <ignored-text>\n\n    Ignore the node and its descendants.\n\n@rst-ignore-node <ignored-text>\n\n    Ignore the node, but *not* its descendants.\n\n@rst-ignore-tree <ignored-text>\n\n    Same as \\@rst-ignore.  Ignore the node and its descendants.\n\n@rst-no-head <ignored-text>\n\n    Ignore the headline but not the body text of this node.\n    This has no effect on descendant nodes.\n\n@rst-no-headlines <ignored-text>\n\n    Ignore all headlines. (Set show_headlines=False)\n\n@rst-option <option> = <value>\n\n    Set a single option to the given value. The default value is True.\n\n@rst-options <ignored-text>\n\n    Set options from body text. The body text should contain nothing but\n    lines of the form::\n\n        <option>=<value>\n\n@rst-preformat <ignored-text>\n\n    Format the body text of the node as computer source code. In effect, this\n    option adds a line containing '::' at the start of the body text. The option\n    then indents all following lines.\n\n    This option has no effect on descendant nodes.\n\n..  @rst-rst\n\n    ..  Enter rst mode. (Rst mode is the mode of operation discussed in the tutorial.)\n    ..  Create a section if the show_headlines option is True.\n\n", "children": []}, {"h": "Option doc parts", "gnx": "ekr.20050818163826.8", "b": "**Option doc parts** set rst3 options. Option doc parts start with \\@\n\\@rst-options followed by lines of the form name=value. (Comment lines starting\nwith '..' are allowed.) For example::\n\n    @ @rst-options\n    .. This comment line is ignored.\n    show_headlines=False\n    show_leo_directives=False\n    verbose=True\n    @c\n\nThis is a real Leo doc part. Like all other doc parts an option doc part starts\nwith the \\@ directive and continues until the end of body text or until the next\n\\@c directive.\n", "children": []}, {"h": "Defaults for options", "gnx": "ekr.20050818163826.9", "b": "Settings in leoSettings.leo or myLeoSettings.leo specify the defaults\nto be used for all rst3 options.  The form of these settings is::\n\n    @bool rst3_<option name> = True/False\n    @string rst3_<option name> = aString\n\nThat is, to create a default value for an rst3 setting, you must\nprefix the option name with 'rst3\\_'.  For example::\n\n    @bool rst3_write_intermediate_file = True\n", "children": []}, {"h": "Http plugin options", "gnx": "ekr.20050818163826.5", "b": "The following options are for the use of Bernhard Mulder's http plugin. The http\nplugin creates an http server running on a local port, typically 8080. When the\nhttp plugin is running you will see a purple message in the log window that\nlooks something like this::\n\n    http serving enabled on port 8080, version 0.91\n\nTo use the http plugin, start a web browser and enter this url::\n\n    http://localhost:8080/\n\nYou will see a a top level page containing one link for every open .leo file.\nClicking on a link will cause the http server to pass a new page to the browser.\nYou can use the browser's refresh button to update the top-level view in the\nbrowser after you have opened or closed files.\n\n**Important**: See the docstring for the http plugin for information on\nconfiguring the plugin. Some of the following rst3 settings must match values of\nsettings for the http plugin.\n\nHere are the rst3 options that support the http plugin:\n\n.. glossary::\n\nhttp_server_support (default: False)\n\n    A master switch: none of the following options have any effect unless this\n    option is True. If True, the rst3 command does the following:\n\n    1. Writes **node markers** in the rst output for use by the http plugin.\n       Node markers are rst named hyperlink targets. By default they look like::\n\n            .. _http-node-marker-N\n\n       where N is a unique node number.\n\n    2. Adds additional information to all nodes of the tree being formatted using\n       Leo's unknownAttributes mechanism.\n\nhttp_attributename (default: 'rst_http_attribute')\n\n    The name of the attribute name written to the unknownAttributes attribute of\n    each outline node in the rst root tree. The default is\n    'rst_http_attribute'; it should match the following setting of the http\n    plugin::\n\n        @string rst_http_attributename = 'rst_http_attribute'\n\nclear_http_attributes (default: False)\n\n    If True the rst3 command initially clears the fields specified by `http_attributename`.  \n\nnode_begin_marker (default: 'http-node-marker-')\n\n    The string used for node markers.\n", "children": []}, {"h": "Section expansion options", "gnx": "ekr.20110612104631.16414", "b": "@language rest\n\n**New in Leo 4.9**: The following three options allow you\nto expand noweb section references, much like Leo itself does.\n\n**expand_noweb_references**\n\n   True: Replace references by definitions.\n   Definitions must be descendants of the referencing node.\n\n**ignore_noweb_definitions**\n\n    True: ignore section definition nodes.\n\n**expand_noweb_recursively**\n\n    True: recursively expand definitions by expanding any\n    references found in definitions.\n        \nNotes:\n\n- This is an experimental feature: all aspects might changed. The defaults for\n  all these options ensure that the rst3 command works as it has always.\n\n- The rst3 command ensures that unbounded expansions can not happen. While\n  expanding any section, the rst3 will not expand again any sections that have\n  already occurred in the expansion.\n", "children": []}, {"h": "Other topics", "gnx": "ekr.20100813075851.4297", "b": "", "children": ["ekr.20100810091118.4298", "ekr.20050818163826.11"]}, {"h": "Markup doc parts", "gnx": "ekr.20100810091118.4298", "b": "**Markup doc parts** have the following form::\n\n    @ @rst-markup\n    any rST markup\n    @c\n\nMarkup doc parts inserts the markup directly into the output. Markup doc parts\nare most useful when formatting an outline as code using the code-to-rst\ncommand.\n", "children": []}, {"h": "Required cascading style sheets", "gnx": "ekr.20050818163826.11", "b": "HTML files generated by the rst3 command assume that three .css (cascading style\nsheet) files exist in the same directory. For the HTML output to look good the\nfollowing .css files should exist:\n\n- default.css is the default style sheet that docutils expects to exist.\n\n- leo_rst.css contains some style improvements based on Gunnar Schwant's DocFactory.\n\n- silver_city.css is the style sheet that controls the syntax highlighting generated by SilverCity.\n\nThe latter two style sheets are imported at the end of the default.css.\n\n**Important:** You can use cascading style sheets to do things that otherwise\nwouldn't be possible with \"plain\" rST. For instance, the background color of\nthis page was specified in a body style.\n", "children": []}, {"h": "Further study", "gnx": "ekr.20050818163826.13", "b": "The file `ListManagerDocs.html`_ is an impressive example of the kind of output\nthat can be generated relatively easily using the rst3 command.\n\nThe source for ListManagerDocs.html is `wxListManager.leo`_. **Important**:\nwxListManager.leo was written for the old rst2 plugin; it could be greatly\nsimplified if adapted for the rst3 command.\n\nThis documentation was created using the rst3 command. The source code for this\ndocumentation is in LeoDocs.leo. The source code for the rst3 command is in\nleoRst.py in leoPy.leo.\n", "children": []}, {"h": "Acknowledgements", "gnx": "ekr.20050818163826.16", "b": "Josef Dalcolmo wrote the initial rst plugin.\nTimo Honkasalo, Bernhard Mulder, Paul Paterson, Kent Tenney and\nSteve Zatz made contributions to the rst and rst2 plugins.\n", "children": []}, {"h": "Theory of operation", "gnx": "ekr.20050818163826.14", "b": "The code for the rst3 command is more complex than usual. Fortunately, the\noverall organization is straightforward.\n\ndefaultOptionsDict\n    This dictionary represents each rst3 option.\n    To add another option, just add another entry to this dictionary.\n    Keys are the option name, including the `rst3_` prefix.\n    Values are the default value of the option.\n    The hard-coded values in the dictionary may be changed as the result of @settings entries.\n\nprocessTree\n    processTree is the top-level code that handles one rst root node.\n    It calls preprocessTree to create the **vnodeOptionDict** ivar.\n    processTree then calls either writeNormalTree or writeSpecialTree\n    depending on whether text will be sent to docutils for further processing.\n    These two methods handle mundane details of opening and closing files.\n    Both writeNormalTree and writeSpecialTree call **writeTree** to do the actual work.\n\nvnodeOptionDict\n    The entries in this dictionary represent the options that are set in one particular node.\n    The keys of vnodeOptionDict are vnodes, the values are anonymous dictionaries.\n    These anonymous inner dictionaries contain the options that are explicitly set at each vnode\n    (and thus each position).\n    Preprocessing the tree this way ensures that each node (headline and body text) is parsed exactly once.\n\nwriteTree\n    writeTree first calls **scanAllOptions**, which has the effect of\n    initializing all options. writeTree then calls **writeNode** for each node\n    that will be processed by the rst3 command. Options may cause the rst3 command to\n    skip a node or an entire subtree.\n\nwriteNode\n    writeNode first calls **scanAllOptions** to compute the options that are in\n    effect for that *single* node. Once options have been computed, processing the\n    node is straightforward. writeNode calls writeBody and writeHeadline\n    to do the real work. These methods generate or skip text based on various\n    options.\n\nscanAllOptions\n    scanAllOptions recreates the optionsDict ivar to represent *all* the options\n    in effect for *for the particular node being processed by writeNode*. Client\n    code gets these options by calling the getOption method.\n\n    scanAllOptions first inits all options from settings,\n    then updates those options using the anonymous\n    dictionaries contained in the vnodeOptionsDict.\n    scanAllOptions works like g.scanAllDirectives, but the code is much simpler.\n", "children": []}, {"h": "Scripting Leo with Python", "gnx": "ekr.20050831195331.4", "b": "", "children": ["ekr.20100805165051.7157"]}, {"h": "@file scripting.txt", "gnx": "ekr.20100805165051.7157", "b": "@language rest\n@pagewidth 75\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20040403171740"]}, {"h": "@rst html\\scripting.html", "gnx": "ekr.20040403171740", "b": "@ @rst-options\n.. A very cool option: doc parts will be rendered properly,\n.. but will be ignored by the Execute script command.\n..\nshow_doc_parts_as_paragraphs = True\n@c\n\n#########################\nScripting Leo with Python\n#########################\n\nThis chapter describes how to write Python scripts that control Leo and\naccess the data in Leo outlines. To write such scripts, you must understand\nthe basics of Leo's internal data structures. As we shall see, these basics\nare quite simple.\n\nAlthough this chapter discusses everything you will need to write most\nscripts, please keep in mind that your scripts have complete access to all\nof Leo's source code, that is, all the code in LeoPy.leo.\n\nYou can put Leo script in the body text of *any* outline node.  You can run\nscripts in several ways:\n\n1. Select a node containing the script and do Ctrl-B (execute-script).\n\n..  **Note**: If you are reading this documentation in leoDocs.leo you can\n..  execute all code examples in this chapter whit Ctrl-B. You may have to\n..  select the actual code to execute if a node contains comments\n..  interspersed with the code.\n\n2. \\@button and \\@command nodes allow you to run scripts while selecting\n   some *other* node. This brings scripts to data, an extremely powerful\n   capability. \\@button nodes create a button in Leo's icon area. You can\n   execute the script **on the presently selected node** by pressing the\n   button. \\@command nodes work similarly, but instead of creating a\n   button, they create a Leo command. (Actually, \\@button nodes also create\n   Leo commands).\n\n.. contents::\n    :depth: 3\n\n", "children": ["ekr.20050812134441.1", "ekr.20101124083644.5047", "ekr.20050903074833", "ekr.20101124083644.5048"]}, {"h": "@rst-no-head Links", "gnx": "ekr.20050812134441.1", "b": ".. Links used in this document.\n.. _front:          front.html\n.. _`Designing with Leo`:   design.html\n.. _`Customizing Leo`:      customizing.html\n.. _`rst3 plugin`:          rstplugin3.html\n", "children": []}, {"h": "Basics", "gnx": "ekr.20101124083644.5047", "b": "", "children": ["ekr.20070120075236", "ekr.20040403183229", "ekr.20040403173920.3", "ekr.20040403173920.6", "ekr.20040403173920.17", "ekr.20050902073404", "ekr.20040403173920.9", "ekr.20040903100514", "ekr.20101124083644.5049", "ekr.20050903161843", "ekr.20101124083644.5052", "ekr.20040403173920.26"]}, {"h": "c, g and p", "gnx": "ekr.20070120075236", "b": "All Leo scripts run with the execute-script command (Ctrl-B)\nhave access to the following three **predefined objects**:\n\n- c is the commander of the outline containing the script.\n\n- g is Leo's leo.core.leoGlobals module.\n\n- p is the presently selected position, the same as c.p.\n\nThe predefined c, g and p variables give *full* and *easy* access to all\nthe data in your outlines, as well as hundreds, if not thousands, of useful\nPython functions in Leo's core. These variables define an easy-to-use DOM\n(Document Object Model) through which you can get o set any data in *your*\noutlines. The hello world example is::\n\n   for p in c.all_positions():\n       indent = '.' * p.level()\n       print('%s%s' % (indent,p.h))\n\nHere, c.all_positions() delivers a list of positions, and p.level() and p.h\ndeliver the indentation level and head string of position p.\n", "children": []}, {"h": "Import objects", "gnx": "ekr.20040403183229", "b": "Leo scripts typically use the following objects:\n\n**g**\n    The predefined object g is the leo.core.leoGlobals module. This module\n    contains several dozen utility functions and classes.\n\n**g.app**\n    g.app is the **application object** representing the entire Leo application.\n    The instance variables (ivars) of g.app represent Leo's global variables.\n\n**commander**\n    The predefined object c is the commander of the window containing the\n    script. Commanders represent all aspects of a single Leo window. For any\n    commander c, c.p is the presently selected position (see below), and\n    c.rootPosition() is the root (first) position in the outline. Given\n    c, Leo scripts can gain access to all data present while Leo is running,\n    including all of Leo's classes, functions and data.\n\n**position**\n    The predefined object p is the position of the presently selected\n    node. Positions represent locations in Leo outlines. For any position p,\n    p.v is the vnode at that position.\n\n**vnode**\n    A vnode represents a single outline node. Because of clones, a vnode may\n    appear in several places on the screen. Vnodes hold most of the data in Leo\n    outlines. For any vnode v, v.h is the node's headline, and v.b is the node's\n    body text. As a convenience, for any position p, p.h and p.b are synonyms\n    for p.v.h and p.v.b.\n\nMost scripts will need only the objects and classes described above.\n", "children": []}, {"h": "g.es writes to the log pane", "gnx": "ekr.20040403173920.3", "b": "The g.es method prints its arguments to the Log tab of the log pane::\n\n    g.es(\"Hello world\")\n\ng.es converts non-string arguments using repr::\n\n    g.es(c)\n\ng.es prints multiple arguments separated by commas::\n\n    g.es(\"Hello\",\"world\")\n\nTo create a tab named 'Test' or make it visible if it already exists::\n\n    c.frame.log.selectTab('Test')\n\nWhen first created, a tab contains a text widget. To write to this widget,\nadd the tabName argument to g.es::\n\n    g.es('Test',color='blue',tabName='Test')\n", "children": []}, {"h": "p.h and p.b", "gnx": "ekr.20040403173920.6", "b": "Here is how to access the data of a Leo window::\n\n    g.es(p) # p is already defined.\n    p = c.p # get the current position.\n    g.es(p)\n    g.es(\"head:\",p.h)\n    g.es(\"body:\",p.b)\n\nHere is how to access data at position p.\n**Note**: these methods work whether or not p is the current position::\n\n    body = p.b # get the body text.\n    head = p.h # get the headline text.\n    p.b = body # set body text of p to body.\n    p.h = head # set headline text of p to head.\n\n**Note**: Sometimes you want to use text that *looks* like a section reference, but isn't.\nIn such cases, you can use g.angleBrackets.  For example::\n\n    g.es(g.angleBrackets('abc'))\n", "children": []}, {"h": "c.redraw", "gnx": "ekr.20040403173920.17", "b": "You can use c.redraw_now to redraw the entire screen immediately::\n\n    c.redraw_now()\n\nHowever, it is usually better to *request* a redraw to be done later as\nfollows::\n\n    c.redraw()\n\nLeo actually redraws the screen in c.outerUpdate, provided that a redraw has\nbeen requested. Leo will call c.outerUpdate at the end of each script, event\nhandler and Leo command.\n", "children": []}, {"h": "p.copy", "gnx": "ekr.20050902073404", "b": "Scripts must wary of saving positions because positions become invalid\nwhenever the user moves, inserts or deletes nodes.  It is valid to store\npositions **only** when a script knows that the stored position will be used\nbefore the outline's structure changes.\n\nTo store a position, the script must use the p.copy() method::\n\n    p2 = p.copy()   # Correct: p2 will not change when p changes later.\n\nThe following **will not work**::\n\n    p2 = p  # Wrong.  p2 will change if p changes later.\n\nFor example, the following creates a dictionary of saved positions::\n\n    d = {}\n    for p in c.all_positions():\n        d[p.v] = p.copy()\n\n", "children": []}, {"h": "Iterators", "gnx": "ekr.20040403173920.9", "b": "Leo scripts can easily access any node of an outline with iterator. Leo's\niterators return positions or nodes, one after another. Iterators do not\nreturn lists, but you can make lists from iterators easily. For example, the\nc.all_positions() iterator returns every position in c's tree, one after\nanother. You can use the iterator directly, like this::\n\n    for p in c.all_positions():\n        print(p.h)\n\nYou can create actual lists from generators in several ways::\n\n    aList = list(c.all_positions()) # Use the list built-in function.\n    print(aList)\n\nor::\n\n    aList = [p.copy() for p in c.all_positions()] # Use list comprehension.\n    print(aList)\n\nUsing the list built-in is simpler, but list comprehensions can be more\nflexible. For example::\n\n    aList = [p.copy().h for p in c.all_positions()\n        if p.h.startswith('@file')]\n    print(aList)\n", "children": ["ekr.20040403173920.10", "ekr.20040403173920.13", "ekr.20040403173920.14", "ekr.20040403173920.15", "ekr.20040403173920.16"]}, {"h": "c.all_positions & c.all_unique_positions", "gnx": "ekr.20040403173920.10", "b": "The c.all_positions generator returns a list of all positions in the outline.\nThis script makes a list of all the nodes in an outline::\n\n    nodes = list(c.all_positions())\n    print(\"This outline contains %d nodes\" % len(nodes))\n\nThe c.all_unique_positions generator returns a list of all unique positions in the outline.\nFor each vnode v in the outline, exactly one position p is returned such that p.v == v.\n\nThis script prints the *distinct* vnodes of an outline::\n\n    for p in c.all_unique_positions():\n        sep = g.choose(p.hasChildren(),'+','-')\n        print('%s%s %s' % (' '*p.level(),sep,p.h))\n", "children": []}, {"h": "p.children", "gnx": "ekr.20040403173920.13", "b": "The p.children generator returns a list of all children of position p::\n\n    parent = p.parent()\n    print(\"children of %s\" % parent.h)\n    for p in parent.children():\n        print(p.h)\n", "children": []}, {"h": "p.parents & p.self_and_parents", "gnx": "ekr.20040403173920.14", "b": "The p.parents generator returns a list of all parents of position p,\nexcluding p::\n\n    current = p.copy()\n    print(\"exclusive of %s\" % (current.h),color=\"purple\")\n    for p in current.parents():\n        print(p.h)\n\nThe p.self_and_parents generator returns a list of all parents of position\np, including p::\n\n    current = p.copy()\n    print(\"inclusive parents of %s\" % (current.h),color=\"purple\")\n    for p in current.self_and_parents():\n        print(p.h)    \n", "children": []}, {"h": "p.siblings & p.following_siblings", "gnx": "ekr.20040403173920.15", "b": "The p.siblings generator returns a list of all siblings of position p::\n\n    current = c.p\n    print(\"all siblings of %s\" % (current.h),color=\"purple\")\n    for p in current.self_and_siblings():\n        print(p.h)\n\nThe p.following_siblings generator returns a list of all siblings that\nfollow position p::\n\n    current = c.p\n    print(\"following siblings of %s\" % (current.h),color=\"purple\")\n    for p in current.following_siblings():\n        print(p.h)\n", "children": []}, {"h": "p.subtree & p.self_and_subtree", "gnx": "ekr.20040403173920.16", "b": "The p.subtree generator returns a list of all positions in p's subtree, excluding p::\n\n    parent = p.parent()\n    print(\"exclusive subtree of %s\" % (parent.h),color=\"purple\")\n    for p in parent.subtree():\n        print(p.h)\n\nThe p.self_and_subtree generator returns a list of all positions in p's subtree, including p::\n\n    parent = p.parent()\n    print(\"inclusive subtree of %s\" % (parent.h),color=\"purple\")\n    for p in parent.self_and_subtree():\n        print(p.h)\n", "children": []}, {"h": "Testing whether a position is valid", "gnx": "ekr.20040903100514", "b": "The tests::\n\n    if p:       # Right\n    if not p:   # Right\n\nare the **only** correct ways to test whether a position p is valid.\nIn particular, the following **will not work**::\n\n    if p is None:       # Wrong\n    if p is not None:   # Wrong\n", "children": []}, {"h": "g.pdb", "gnx": "ekr.20101124083644.5049", "b": ".. _`pdb`:  http://docs.python.org/library/pdb.html\n.. _`pudb`: http://pypi.python.org/pypi/pudb\n\ng.pdb() invokes Python `pdb`_ debugger.  You must be running Leo\nfrom a console to invoke g.pdb().\n\ng.pdb() is merely a convenience.  It is equivalent to::\n\n    import pdb\n    pdb.set_trace()\n\nThe debugger_pudb.py plugin causes g.pdb() to invoke the full-screen `pudb`_\ndebugger instead of pdb. pudb works on Linux and similar systems; it does not\nwork on Windows.\n", "children": []}, {"h": "\\@button scripts", "gnx": "ekr.20050903161843", "b": "Creating an @button script should be your first thought whenever you want to\nautomate any task. The scripting plugin, mod_scripting.py, must be enabled to\nuse @button scripts.\n\nWhen Leo loads a .leo file, the mod_scripting plugin creates a **script button**\nin Leo's icon area for every @button node in the outline. The plugin also\ncreates a corresponding minibuffer command for each @button node. Pressing the\nscript button (or executing the command from the minibuffer) applies the script\nin the @button node to the presently selected outline node.\n\nIn effect, each script button defines an instant command! The .leo files in Leo's\ndistribution contain many @button nodes (many disabled), that do repetitive chores.\nHere is one, @button promote-child-bodies, from LeoDocs.leo::\n\n    '''Copy the body text of all children to the parent's body text.'''\n\n    # Great for creating what's new nodes.\n    result = [p.b]\n    b = c.undoer.beforeChangeNodeContents(p)\n    for child in p.children():\n        if child.b:\n            result.append('\\n- %s\\n\\n%s\\n' % (child.h,child.b))\n        else:\n            result.append('\\n- %s\\n\\n' % (child.h))\n    p.b = ''.join(result)\n    c.undoer.afterChangeNodeContents(p,'promote-child-bodies',b)\n\nThis creates a fully undoable promote-child-bodies command.\n\n**Notes**:\n\n- Script buttons execute the **present** body text of the @button node. You\n  can modify a script button's script at any time without having to recreate the\n  script button.  This makes script buttons ideal for prototyping code.\n\n- You can bind keys to the commands created by script buttons.  For example::\n\n    @button my-button @key=Alt-8\n\n- You can delete any script button by right-clicking on it.\n\n- For more details, see the docstring of the mod_scripting plugin. If the plugin\n  is enabled, you can see this string by choosing mod_scripting from Leo's\n  Plugins menu.\n", "children": []}, {"h": "autocompletion", "gnx": "ekr.20101124083644.5052", "b": "Alt-1 (toggle-autocompleter) enables and disables Leo's autocompletion feature.\nAutocompletion is extremely useful for writing Leo scripts because it knows\nabout all of Python's standard library modules and all of Leo's source code.\n**Important**: \\@language python must be in effect for autocompletion to work.\n\nFor example, with autocompletion enabled typing::\n\n    c.atF\n\nwill put the only possible completion in the body pane::\n\n    c.atFileCommands\n\nContinuing to type::\n\n    .wr\n\nwill show you all of the write commands in leoAtFile.py::\n\n    write:method\n    writeAll:method\n    writeAllHelper:method\n    writeAtAutoNodes:method\n    writeAtAutoNodesHelper:method\n    writeAtShadowNodes:method\n    writeAtShadowNodesHelper:method\n    writeDirtyAtAutoNodes:method\n    writeDirtyAtShadowNodes:method\n    writeError:method\n    writeException:method\n    writeFromString:method\n    writeMissing:method\n    writeOneAtAutoNode:method\n    writeOneAtEditNode:method\n    writeOneAtShadowNode:method\n    writeOpenFile:method\n    writeVersion5:<class 'bool\n    writing_to_shadow_directory:<class 'bool\n\nWhen a single completion is shown, typing '?' will show the docstring for a method.\nFor example::\n\n    c.atFileCommands.write?\n\nshows::\n\n    Write a 4.x derived file.\n    root is the position of an @<file> node\n\nUsing autocompletion effectively can lots of time when writing Leo scripts.\n", "children": []}, {"h": "Summary", "gnx": "ekr.20040403173920.26", "b": "The following sections summarizes the most useful methods that your\nscripts can use.\n", "children": ["ekr.20040411151245", "ekr.20040403173920.27", "ekr.20040403173920.28"]}, {"h": "Iterators", "gnx": "ekr.20040411151245", "b": "Here is the list of Leo's iterators::\n\n    c.all_nodes             # all vnodes in c.\n    c.all_unique_nodes      # all unique vnodes in c.\n    c.all_positions         # all positions in c.\n    c.all_unique_positions  # all unique positions in c.\n\n    p.children              # all children of p.\n    p.following_siblings    # all siblings of p that follow p.\n    p.nodes                 # all vnodes in p's subtree.\n    p.parents               # all parents of p.\n    p.self_and_parents      # p and all parents of p.\n    p.siblings              # all siblings of p, including p.\n    p.subtree               # all positions in p's subtree, excluding p.\n    p.self_and_subtree      # all positions in p's subtree, including p.\n    p.unique_nodes          # all unique vnodes in p's subtree.\n    p.unique_subtree        # all unique positions in p's subtree.\n\n**Note**: An iterator that returns **unique positions** is an iterator that returns\na list of positions such that p.v == v at most once for any vnode v.\nSimilarly, a generator that returns **unique nodes** is a generator that returns\na list that contains any vnode at most once.\n\n**Note**: The names given above are the recommended names for Leo's iterators.\nLeo continues to support the names of iterators used before Leo 4.7.\nThese names typically end with the _iter suffix.\n", "children": []}, {"h": "Getters", "gnx": "ekr.20040403173920.27", "b": "Here are the most useful getters of the vnode and position classes.\n\nReturning strings::\n\n    p.b # the body string of p.\n    p.h # the headline string of p. A property.\n\nReturning ints::\n\n    p.childIndex()\n    p.numberOfChildren()\n    p.level()\n\nReturning bools representing property bits::\n\n    p.hasChildren()\n    p.isAncestorOf(v2) # True if v2 is a child, grandchild, etc. of p.\n    p.isCloned()\n    p.isDirty()\n    p.isExpanded()\n    p.isMarked()\n    p.isVisible()\n    p.isVisited()\n", "children": []}, {"h": "Setters", "gnx": "ekr.20040403173920.28", "b": "Here are the most useful setters of the Commands and position classes.\nThe following setters of the position class regardless of whether\np is the presently selected position::\n\n    p.b = s  # Sets the body text of p.\n    p.h = s  # Sets the headline text of p.\n\nMoving nodes::\n\n    p.moveAfter(v2)           # move p after v2\n    p.moveToNthChildOf(v2,n)  # move p to the n'th child of v2\n    p.moveToRoot(oldRoot)     # make p the root position.\n                              # oldRoot must be the old root position if it exists.\n\nThe \"visited\" bit may be used by commands or scripts for any purpose.\nMany commands use this bits for tree traversal, so these bits do not persist::\n\n    c.clearAllVisited() # Clears all visited bits in c's tree.\n    p.clearVisited()\n    p.setVisited()\n", "children": []}, {"h": "Event handlers", "gnx": "ekr.20050903074833", "b": "Plugins and other scripts can register event handlers (also known as hooks) with code such as::\n\n    leoPlugins.registerHandler(\"after-create-leo-frame\",onCreate)\n    leoPlugins.registerHandler(\"idle\", on_idle) \n    leoPlugins.registerHandler((\"start2\",\"open2\",\"command2\"), create_open_with_menu) \n\nAs shown above, a plugin may register one or more event handlers with a single call to\nleoPlugins.registerHandler. Once a hook is registered, Leo will call the\nregistered function' at the named **hook time**. For example::\n\n    leoPlugins.registerHandler(\"idle\", on_idle)\n\ncauses Leo to call on_idle at \"idle\" time.\n\nEvent handlers must have the following signature::\n\n    def myHook (tag, keywords):\n        whatever\n\n-   tag is the name of the hook (a string).\n-   keywords is a Python dictionary containing additional information.\n    The following section describes the contents of the keywords dictionary in detail.\n\n**Important**: hooks should get the proper commander this way::\n\n    c = keywords.get('c')\n", "children": ["ekr.20050903074833.1", "ekr.20071021102946"]}, {"h": "@rst-no-head Summary of event handlers", "gnx": "ekr.20050903074833.1", "b": "The following table tells about each event handler: its name, when it is called,\nand the additional arguments passed to the hook in the keywords dictionary.\nFor some kind of hooks, Leo will skip its own normal processing if the hook\nreturns anything *other* than None. The table indicates such hooks with 'yes' in\nthe 'Stop?' column.\n\n**Important**: Ever since Leo 4.2, the v, old_v and new_v keys in\nthe keyword dictionary contain *positions*, not vnodes. These keys are\ndeprecated. The new_c key is also deprecated. Plugins should use the c key instead.\n\n============================= ======== =================================== =============================\nEvent name (tag argument)     Stop?    When called                         Keys in keywords dict\n============================= ======== =================================== =============================\n'after-auto'                           after each @auto file loaded        c,p (note 13)\n'after-create-leo-frame'               after creating any frame            c\n'after-redraw-outline'                 end of tree.redraw                  c (note 6)\n'before-create-leo-frame'              before frame.finishCreate           c\n'bodyclick1'                   yes     before normal click in body         c,p,v,event\n'bodyclick2'                           after normal click in body          c,p,v,event\n'bodydclick1'                  yes     before double click in body         c,p,v,event\n'bodydclick2'                          after  double click in body         c,p,v,event\n'bodykey1'                     yes     before body keystrokes              c,p,v,ch,oldSel,undoType\n'bodykey2'                             after  body keystrokes              c,p,v,ch,oldSel,undoType\n'bodyrclick1'                  yes     before right click in body          c,p,v,event\n'bodyrclick2'                          after  right click in body          c,p,v,event\n'boxclick1'                    yes     before click in +- box              c,p,v,event\n'boxclick2'                            after  click in +- box              c,p,v,event\n'clear-all-marks'                      after clear-all-marks command       c,p,v\n'clear-mark'                           when mark is set                    c,p,v\n'close-frame'                          in app.closeLeoWindow               c\n'color-optional-markup'        yes *   (note 7)                            colorer,p,v,s,i,j,colortag (note 7)\n'command1'                     yes     before each command                 c,p,v,label (note 2)\n'command2'                             after  each command                 c,p,v,label (note 2)\n'create-optional-menus'                (note 8)                            c (note 8)\n'create-popup-menu-items'              in tree.OnPopup                     c,p,v,event (new)\n'draw-outline-box'             yes     when drawing +- box                 tree,p,v,x,y\n'draw-outline-icon'            yes     when drawing icon                   tree,p,v,x,y\n'draw-outline-node'            yes     when drawing node                   tree,p,v,x,y\n'draw-outline-text-box'        yes     when drawing headline               tree,p,v,x,y\n'drag1'                        yes     before start of drag                c,p,v,event\n'drag2'                                after  start of drag                c,p,v,event\n'dragging1'                    yes     before continuing to drag           c,p,v,event\n'dragging2'                            after  continuing to drag           c,p,v,event\n'enable-popup-menu-items'              in tree.OnPopup                     c,p,v,event\n'end1'                                 start of app.quit()                 None\n'enddrag1'                     yes     before end of drag                  c,p,v,event\n'enddrag2'                             after  end of drag                  c,p,v,event\n'headclick1'                   yes     before normal click in headline     c,p,v,event\n'headclick2'                           after  normal click in headline     c,p,v,event\n'headrclick1'                  yes     before right click in headline      c,p,v,event\n'headrclick2'                          after  right click in headline      c,p,v,event\n'headkey1'                     yes     before headline keystrokes          c,p,v,ch (note 12)\n'headkey2'                             after  headline keystrokes          c,p,v,ch (note 12)\n'hoist-changed'                        whenever the hoist stack changes    c\n'hypercclick1'                 yes     before control click in hyperlink   c,p,v,event\n'hypercclick2'                         after  control click in hyperlink   c,p,v,event\n'hyperenter1'                  yes     before entering hyperlink           c,p,v,event\n'hyperenter2'                          after  entering hyperlink           c,p,v,event\n'hyperleave1'                  yes     before leaving  hyperlink           c,p,v,event\n'hyperleave2'                          after  leaving  hyperlink           c,p,v,event\n'iconclick1'                   yes     before single click in icon box     c,p,v,event\n'iconclick2'                           after  single click in icon box     c,p,v,event\n'iconrclick1'                  yes     before right click in icon box      c,p,v,event\n'iconrclick2'                          after  right click in icon box      c,p,v,event\n'icondclick1'                  yes     before double click in icon box     c,p,v,event\n'icondclick2'                          after  double click in icon box     c,p,v,event\n'idle'                                 periodically (at idle time)         c\n'init-color-markup'                    (note 7)                            colorer,p,v (note 7)\n'menu1'                        yes     before creating menus               c,p,v (note 3)\n'menu2'                        yes     during creating menus               c,p,v (note 3)\n'menu-update'                  yes     before updating menus               c,p,v\n'new'                                  start of New command                c,old_c,new_c (note 9)\n'open1'                        yes     before opening any file             c,old_c,new_c,fileName (note 4)\n'open2'                                after  opening any file             c,old_c,new_c,fileName (note 4)\n'openwith1'                    yes     before Open With command            c,p,v,d (note 14)\n'openwith2'                            after  Open With command            c,p,v,(note 14)\n'recentfiles1'                 yes     before Recent Files command         c,p,v,fileName,closeFlag\n'recentfiles2'                         after  Recent Files command         c,p,v,fileName,closeFlag\n'redraw-entire-outline'        yes     start of tree.redraw                c (note 6)\n'save1'                        yes     before any Save command             c,p,v,fileName\n'save2'                                after  any Save command             c,p,v,fileName\n'scan-directives'                      in scanDirectives                   c,p,v,s,old_dict,dict,pluginsList (note 10)\n'select1'                      yes     before selecting a position         c,new_p,old_p,new_v,new_v\n'select2'                              after  selecting a position         c,new_p,old_p,new_v,old_v\n'select3'                              after  selecting a position         c,new_p,old_p,new_v,old_v\n'set-mark'                             when a mark is set                  c,p,v\n'show-popup-menu'                      in tree.OnPopup                     c,p,v,event\n'start1'                               after app.finishCreate()            None\n'start2'                               after opening first Leo window      c,p,v,fileName\n'unselect1'                    yes     before unselecting a vnode          c,new_p,old_p,new_v,old_v\n'unselect2'                            after  unselecting a vnode          c,new_p,old_p,old_v,old_v\n'\\@url1'                        yes     before double-click @url node       c,p,v,url (note 5)\n'\\@url2'                                after  double-click @url node       c,p,v(note 5)\n============================= ======== =================================== =============================\n\n**Notes**:\n\n1.  'activate' and 'deactivate' hooks have been removed because they do not work as expected.\n\n2.  'commands' hooks: The label entry in the keywords dict contains the\n    'canonicalized' form of the command, that is, the lowercase name of the command\n    with all non-alphabetic characters removed.\n    Commands hooks now set the label for undo and redo commands 'undo' and 'redo'\n    rather than 'cantundo' and 'cantredo'.\n\n3.  'menu1' hook: Setting g.app.realMenuNameDict in this hook is an easy way of\n    translating menu names to other languages. **Note**: the 'new' names created this\n    way affect only the actual spelling of the menu items, they do *not* affect how\n    you specify shortcuts settings, nor do they affect the 'official'\n    command names passed in g.app.commandName. For example::\n\n        app().realMenuNameDict['Open...'] = 'Ouvre'.\n\n4.  'open1' and 'open2' hooks: These are called with a keywords dict containing the following entries:\n\n    - c:          The commander of the newly opened window.\n    - old_c:      The commander of the previously open window.\n    - new_c:      (deprecated: use 'c' instead) The commander of the newly opened window.\n    - fileName:   The name of the file being opened.\n\n    You can use old_c.p and c.p to get the current position in the old and new windows.\n    Leo calls the 'open1' and 'open2' hooks only if the file is not already open. Leo\n    will also call the 'open1' and 'open2' hooks if: a) a file is opened using the\n    Recent Files menu and b) the file is not already open.\n\n5.  '\\@url1' and '\\@url2' hooks are only executed if the 'icondclick1' hook returns None.\n\n6.  These hooks are useful for testing.\n\n7.  These hooks allow plugins to parse and handle markup within doc parts,\n    comments and Python ''' strings. Note that these hooks are *not* called in\n    Python ''' strings. See the color_markup plugin for a complete example of how to\n    use these hooks.\n\n8.  Leo calls the 'create-optional-menus' hook when creating menus. This hook need\n    only create new menus in the correct order, without worrying about the placement\n    of the menus in the menu bar. See the plugins_menu and scripts_menu plugins for\n    examples of how to use this hook.\n\n9.  The New command calls 'new'.\n    The 'new_c' key is deprecated.  Use the 'c' key instead.\n\n10. g.scanDirectives calls 'scan-directives' hook.\n    g.scanDirectives returns a dictionary, say d.\n    d.get('pluginsList') is an a list of tuples (d,v,s,k) where:\n\n    - d is the spelling of the @directive, without the leading @.\n    - v is the vnode containing the directive, _not_ the original vnode.\n    - s[k:] is a string containing whatever follows the @directive.\n      k has already been moved past any whitespace that follows the @directive.\n\n    See the add_directives plugins directive for a complete example of how to use\n    the 'scan-directives' hook.\n\n11. g.app.closeLeoWindow calls the 'close-frame' hook just before\n    removing the window from g.app.windowList. The hook code may remove the window\n    from app.windowList to prevent g.app.closeLeoWindow from destroying the window.\n\n12. Leo calls the 'headkey1' and 'headkey2' when the headline *might* have changed.\n\n13. p is the new node (position) containing '@auto filename.ext'\n\n14. New in Leo 4.10: the d argument to the open-with event handlers is a python\n    dictionary whose keys are all the tags specified by the user in the body of the\n    @open-with node.\n", "children": []}, {"h": "Enabling idle time event handlers", "gnx": "ekr.20071021102946", "b": "Two methods in leoGlobals.py allow scripts and plugins to enable and disable 'idle' events.\n**g.enableIdleTimeHook(idleTimeDelay=100)** enables the \"idle\" hook.\nAfterwards, Leo will call the \"idle\" hook approximately every idleTimeDelay milliseconds.\nLeo will continue to call the \"idle\" hook periodically until disableIdleTimeHook is called.\n**g.disableIdleTimeHook()** disables the \"idle\" hook.\n", "children": []}, {"h": "Other topics", "gnx": "ekr.20101124083644.5048", "b": "", "children": ["ekr.20040403175157.1", "ekr.20070122093626", "ekr.20101124083644.5050", "ekr.20101124083644.5051", "ekr.20090223065025.3", "ekr.20040403173920.18", "ekr.20050907094633", "ekr.20040403173920.19", "ekr.20040403173920.25", "ekr.20050417072710.1", "ekr.20040403173920.5", "ekr.20111115063523.13619", "ekr.20061003204952", "ekr.20071026183116", "ekr.20080109074102", "ekr.20081205084002.2", "ekr.20040403173920.24", "ekr.20080922124033.1", "ville.20090603183524.5672", "ekr.20100506062734.11593", "ekr.20110531155858.20563", "ekr.20120317130339.8282"]}, {"h": "g.app.windowList: the list of all open frames", "gnx": "ekr.20040403175157.1", "b": "The windowlist attribute of the application instance contains the list of the\nframes of all open windows. The commands ivar of the frame gives the commander\nfor that frame::\n\n    aList = g.app.windowList # get the list of all open frames.\n    g.es(\"windows...\")\n    for f in aList:\n        c = f.c # c is f's commander\n        g.es(f)\n        g.es(f.shortFileName())\n        g.es(c)\n        g.es(c.rootPosition())\n\nThere is also g.app.commanders() method, that gives the list of all active\ncommanders directly.\n", "children": []}, {"h": "Ensuring that positions are valid", "gnx": "ekr.20070122093626", "b": "Positions become invalid whenever the outline changes. Plugins and scripts that\ncan make sure the position p is still valid by calling c.positionExists(p).\n\nThe following code will find a position p2 having the same vnode as p::\n\n    if not c.positionExists(p):\n        for p2 in c.all_positions():\n            if p2.v == p.v: # found\n                c.selectPosition(p2)\n        else:\n            print('position no longer exists')\n", "children": []}, {"h": "g.openWithFileName", "gnx": "ekr.20101124083644.5050", "b": "**g.openWithFileName** opens a .leo file. For example::\n\n    new_c = g.openWithFileName(fileName,c)\n\nnew_c is the commander of the newly-created outline.\n", "children": []}, {"h": "g.getScript", "gnx": "ekr.20101124083644.5051", "b": "**g.getScript(c,p)** returns the expansion of p's body text. (If p is the\npresently selected node and there is a text selection, g.getScript returns the\nexpansion of only the selected text.)\n\nLeo scripts can use g.getScript to implement new ways of executing Python code.\nFor example, the mod_scripting plugin uses g.getScript to implement @button nodes,\nand Leo's core uses g.getScript to implement @test nodes.\n", "children": []}, {"h": "c.frame.body.bodyCtrl", "gnx": "ekr.20090223065025.3", "b": "Let::\n\n    w = c.frame.body.bodyCtrl # Leo's body pane.\n\nScripts can get or change the context of the body as follows::\n\n    w.appendText(s)                     # Append s to end of body text.\n    w.delete(i,j=None)                  # Delete characters from i to j.\n    w.deleteTextSelection()             # Delete the selected text, if any.\n    s = w.get(i,j=None)                 # Return the text from i to j.\n    s = w.getAllText                    # Return the entire body text.\n    i = w.getInsertPoint()              # Return the location of the cursor.\n    s = w.getSelectedText()             # Return the selected text, if any.\n    i,j = w.getSelectionRange (sort=True) # Return the range of selected text.\n    w.replace(i,j,s)                    # Replace the text from i to j by s.\n    w.setAllText(s)                     # Set the entire body text to s.\n    w.setSelectionRange(i,j,insert=None) # Select the text.\n\n**Notes**:\n\n- These are only the most commonly-used methods.\n  For more information, consult Leo's source code.\n\n- i and j are zero-based indices into the the text.\n  When j is not specified, it defaults to i.\n  When the sort parameter is in effect, getSelectionRange\n  ensures i <= j.\n\n- color is a Tk color name, even when using the Gt gui.\n", "children": []}, {"h": "Invoking commands from scripts", "gnx": "ekr.20040403173920.18", "b": "Leo dispatches commands using c.doCommand,\nwhich calls the \"command1\" and \"command2\" hook routines for the given label.\nc.doCommand catches all exceptions thrown by the command::\n\n    c.doCommand(c.markHeadline,label=\"markheadline\")\n\nYou can also call command handlers directly so that hooks will not be called::\n\n    c.markHeadline()\n\nYou can invoke minibuffer commands by name.  For example::\n\n    c.executeMinibufferCommand('open-outline')\n\nc.keyHandler.funcReturn contains the value returned from the command.\nIn many cases, as above, this value is simply 'break'.\n", "children": []}, {"h": "Getting settings from @settings trees", "gnx": "ekr.20050907094633", "b": "Any .leo file may contain an @settings tree, so settings may be different for each commander.\nPlugins and other scripts can get the value of settings as follows::\n\n    format_headlines = c.config.getBool('rst3_format_headlines')\n    print('format_headlines',format_headlines)\n\nThe c.config class has the following getters.\nSee the configSettings in leoCommands.py for details::\n\n    c.config.getBool(settingName,default=None)\n    c.config.getColor(settingName)\n    c.config.getDirectory(settingName)\n    c.config.getFloat(settingName)\n    c.config.getInt(settingName)\n    c.config.getLanguage(settingName)\n    c.config.getRatio(settingName)\n    c.config.getShortcut(settingName)\n    c.config.getString(settingName)\n\nThese methods return None if no setting exists.\nThe getBool 'default' argument to getBool gives the value to be returned if the setting does not exist.\n", "children": []}, {"h": "Preferences ivars", "gnx": "ekr.20040403173920.19", "b": "Each commander maintains its own preferences.\nYour scripts can get the following ivars::\n\n    ivars = (\n        'output_doc_flag',\n        'page_width',\n        'page_width',\n        'tab_width',\n        'target_language',\n        'use_header_flag',\n    )\n\n    print(\"Prefs ivars...\\n\",color=\"purple\")\n    for ivar in ivars:\n        print(getattr(c,ivar))\n\nIf your script sets c.tab_width your script may call f.setTabWidth to redraw the screen::\n\n    c.tab_width = -4    # Change this and see what happens.\n    c.frame.setTabWidth(c.tab_width)\n", "children": []}, {"h": "Functions defined in leoGlobals.py", "gnx": "ekr.20040403173920.25", "b": "leoGlobals.py contains many utility functions and constants.\nThe following script prints all the names defined in leoGlobals.py::\n\n    print(\"Names defined in leoGlobals.py\",color=\"purple\")\n    names = g.__dict__.keys()\n    names.sort()\n    for name in names:\n        print(name)\n", "children": []}, {"h": "Making operations undoable", "gnx": "ekr.20050417072710.1", "b": "Plugins and scripts should call u.beforeX and u.afterX methods ato\ndescribe the operation that is being performed. **Note**: u is shorthand for\nc.undoer. Most u.beforeX methods return undoData that the client\ncode merely passes to the corresponding u.afterX method. This data contains\nthe 'before' snapshot. The u.afterX methods then create a bead containing\nboth the 'before' and 'after' snapshots.\n\nu.beforeChangeGroup and u.afterChangeGroup allow multiple calls to\nu.beforeX and u.afterX methods to be treated as a single undoable entry.\nSee the code for the Change All, Sort, Promote and Demote\ncommands for examples. The u.beforeChangeGroup and u.afterChangeGroup\nmethods substantially reduce the number of u.beforeX and afterX methods\nneeded.\n\nPlugins and scripts may define their own u.beforeX and afterX methods. Indeed,\nu.afterX merely needs to set the bunch.undoHelper and\nbunch.redoHelper ivars to the methods used to undo and redo the operation.\nSee the code for the various u.beforeX and afterX methods for guidance.\n\np.setDirty and p.setAllAncestorAtFileNodesDirty now return a\ndirtyVnodeList that all vnodes that became dirty as the result of an\noperation. More than one list may be generated: client code is responsible for\nmerging lists using the pattern dirtyVnodeList.extend(dirtyVnodeList2)\n\nSee the section << How Leo implements unlimited undo >> in leoUndo.py\nfor more details. In general, the best way to see how to implement undo is to\nsee how Leo's core calls the u.beforeX and afterX methods.\n", "children": []}, {"h": "Redirecting output from scripts", "gnx": "ekr.20040403173920.5", "b": "leoGlobals.py defines 6 convenience methods for redirecting stdout and stderr::\n\n    g.redirectStderr() # Redirect stderr to the current log pane.\n    g.redirectStdout() # Redirect stdout to the current log pane.\n    g.restoreStderr()  # Restores stderr so it prints to the console window.\n    g.restoreStdout()  # Restores stdout so it prints to the console window.\n    g.stdErrIsRedirected() # Returns True if the stderr stream is redirected to the log pane.\n    g.stdOutIsRedirected() # Returns True if the stdout stream is redirected to the log pane.\n\nCalls need *not* be paired. Redundant calls are ignored and the last call made\ncontrols where output for each stream goes.\n**Note**: you must execute Leo in a console window to see non-redirected output from the print statement::\n\n    print(\"stdout isRedirected: %s\" % g.stdOutIsRedirected())\n    print(\"stderr isRedirected: %s\" % g.stdErrIsRedirected())\n\n    g.redirectStderr()\n    print(\"stdout isRedirected: %s\" % g.stdOutIsRedirected())\n    print(\"stderr isRedirected: %s\" % g.stdErrIsRedirected())\n\n    g.redirectStdout()\n    print(\"stdout isRedirected: %s\" % g.stdOutIsRedirected())\n    print(\"stderr isRedirected: %s\" % g.stdErrIsRedirected())\n\n    g.restoreStderr()\n    print(\"stdout isRedirected: %s\" % g.stdOutIsRedirected())\n    print(\"stderr isRedirected: %s\" % g.stdErrIsRedirected())\n\n    g.restoreStdout()\n    print(\"stdout isRedirected: %s\" % g.stdOutIsRedirected())\n    print(\"stderr isRedirected: %s\" % g.stdErrIsRedirected())\n", "children": []}, {"h": "Creating Qt Windows from Leo scripts", "gnx": "ekr.20111115063523.13619", "b": "The following puts up a test window when run as a Leo script::\n\n    from PyQt4 import QtGui\n    w = QtGui.QWidget()\n    w.resize(250, 150)\n    w.move(300, 300)\n    w.setWindowTitle('Simple test')\n    w.show()\n    c.my_test = w # <-- Keep a reference to the window!\n    \n**Important**: Something like the last line is essential. Without it, the window\nwould immediately disappear after being created.  The assignment::\n\n    c.my_test = w\n    \ncreates a permanent reference to the window so the window won't be garbage\ncollected after the Leo script exits.\n    \n", "children": []}, {"h": "Writing to different log tabs", "gnx": "ekr.20061003204952", "b": "Plugins and scripts can create new tabs in the log panel.\nThe following creates a tab named test or make it visible if it already exists::\n\n    c.frame.log.selectTab('Test')\n\ng.es, g.enl, g.ecnl, g.ecnls write to the log tab specified by the optional\ntabName argument. The default for tabName is 'Log'. The put and putnl methods of\nthe gui's log class also take an optional tabName argument which defaults to\n'Log'.\n\nPlugins and scripts may call the c.frame.canvas.createCanvas method to create a\nlog tab containing a graphics widget. Here is an example script::\n\n    log = c.frame.log ; tag = 'my-canvas'\n    w = log.canvasDict.get(tag)\n    if not w:\n        w = log.createCanvas(tag)\n        w.configure(bg='yellow')\n    log.selectTab(tag)\n", "children": []}, {"h": "Invoking dialogs using the g.app.gui class", "gnx": "ekr.20071026183116", "b": "Scripts can invoke various dialogs using the following methods of the g.app.gui object.\nHere is a partial list. You can use typing completion(default bindings: Alt-1 and Alt-2) to get the full list!\n::\n\n    g.app.gui.runAskOkCancelNumberDialog(c,title,message)\n    g.app.gui.runAskOkCancelStringDialog(c,title,message)\n    g.app.gui.runAskOkDialog(c,title,message=None,text='Ok')\n    g.app.gui.runAskYesNoCancelDialog(c,title,message=None,\n        yesMessage='Yes',noMessage='No',defaultButton='Yes')\n    g.app.gui.runAskYesNoDialog(c,title,message=None)\n\nThe values returned are in ('ok','yes','no','cancel'), as indicated by the\nmethod names. Some dialogs also return strings or numbers, again as indicated by\ntheir names.\n\nScripts can run File Open and Save dialogs with these methods::\n\n    g.app.gui.runOpenFileDialog(title,filetypes,defaultextension,multiple=False)\n    g.app.gui.runSaveFileDialog(initialfile,title,filetypes,defaultextension)\n\nFor details about how to use these file dialogs, look for examples in Leo's own\nsource code. The runOpenFileDialog returns a list of file names.\n", "children": []}, {"h": "Inserting and deleting icons", "gnx": "ekr.20080109074102", "b": "You can add an icon to the presently selected node with\nc.editCommands.insertIconFromFile(path). path is an absolute path or a path\nrelative to the leo/Icons folder. A relative path is recommended if you plan to\nuse the icons on machines with different directory structures.\n\nFor example::\n\n    path = 'rt_arrow_disabled.gif' \n    c.editCommands.insertIconFromFile(path) \n\nScripts can delete icons from the presently selected node using the following methods::\n\n    c.editCommands.deleteFirstIcon() \n    c.editCommands.deleteLastIcon() \n    c.editCommands.deleteNodeIcons() \n", "children": []}, {"h": "Working with directives and paths", "gnx": "ekr.20081205084002.2", "b": "Scripts can easily determine what directives are in effect at a particular\nposition in an outline. c.scanAllDirectives(p) returns a Python dictionary whose\nkeys are directive names and whose values are the value in effect at position p.\nFor example::\n\n    d = c.scanAllDirectives(p)\n    g.es(g.dictToString(d))\n\nIn particular, d.get('path') returns the full, absolute path created by all\n\\@path directives that are in ancestors of node p. If p is any kind of @file node\n(including @file, @auto, @nosent, @shadow, etc.), the following script will\nprint the full path to the created file::\n\n    path = d.get('path')\n    name = p.anyAtFileNodeName()\n    if name:\n       name = g.os_path_finalize_join(path,name)\n       g.es(name)\n", "children": []}, {"h": "Running Leo in batch mode", "gnx": "ekr.20040403173920.24", "b": "On startup, Leo looks for two arguments of the form::\n\n    --script scriptFile\n\nIf found, Leo enters batch mode. In batch mode Leo does not show any windows.\nLeo assumes the scriptFile contains a Python script and executes the contents of\nthat file using Leo's Execute Script command. By default, Leo sends all\noutput to the console window. Scripts in the scriptFile may disable or enable\nthis output by calling app.log.disable or app.log.enable\n\nScripts in the scriptFile may execute any of Leo's commands except the Edit Body\nand Edit Headline commands. Those commands require interaction with the user.\nFor example, the following batch script reads a Leo file and prints all the\nheadlines in that file::\n\n    path = g.os_path_finalize_join(g.app.loadDir,'..','test','test.leo')\n    assert g.os_path_exists(path),path\n\n    g.app.log.disable() # disable reading messages while opening the file\n    c2 = g.openWithFileName(path)\n    g.app.log.enable() # re-enable the log.\n\n    for p in c2.all_positions():\n        g.es(g.toEncodedString(p.h,\"utf-8\"))\n", "children": []}, {"h": "Getting interactive input from scripts", "gnx": "ekr.20080922124033.1", "b": "The following code can be run from a script to get input from the user using the minibuffer::\n\n    def getInput (event=None):\n\n       stateName = 'get-input'\n       k = c.k\n       state = k.getState(stateName)\n\n       if state == 0:\n           k.setLabelBlue('Input: ',protect=True)\n           k.getArg(event,stateName,1,getInput)\n       else:\n           k.clearState()\n           g.es_print('input: %s' % k.arg)\n\n    getInput()\n\nLet's look at this in detail.  The lines::\n\n    stateName = 'get-input'\n    k = c.k\n    state = k.getState(stateName)\n\ndefine a state *name*, 'get-input', unique to this code.\nk.getState returns the present state (an int) associated with this state.\n\nWhen getInput() is first called, the state returned by k.getState will be 0,\nso the following lines are executed::\n\n    if state == 0:\n        k.setLabelBlue('Input: ',protect=True)\n        k.getArg(event,stateName,1,getInput)\n\nThese lines put a protected label in the minibuffer:\nthe user can't delete the label by backspacing.\ngetArg, and the rest of Leo's key handling code, take care of the extremely\ncomplex details of handling key strokes in states.\nThe call to getArg never returns.\nInstead, when the user has finished entering the input by typing <Return>\ngetArg calls getInput so that k.getState will return state 1, the value\npassed as the third argument to k.getArg.\nThe following lines handle state 1::\n\n    else:\n        k.clearState()\n        g.es_print('input: %s' % k.arg)\n\nk.arg is the value returned by k.getArg.\nThis example code just prints the value of k.arg and clears the input state.\n", "children": []}, {"h": "The @g.command decorator", "gnx": "ville.20090603183524.5672", "b": "You can use the @g.command decorator to create new commands. This is an easy-to-use\nwrapper for c.k.registerCommand(), with the following advantages over it:\n\n* The new command is automatically created for all Leo controllers (open Leo documents).\n\n* The new command is also automatically available on all new Leo controllers \n  (documents that will be opened in the future).\n\n* Prettier syntax.\n\nTherefore, @g.command can be naturally \nprototyped with execute-script (Ctrl+b) in Leo node.\n\nAs an example, you can execute this script to make command hello available::\n\n    @g.command('hello')\n    def hello_f(event):\n        # use even['c'] to access controller\n        c = event['c']\n        pos = c.currentPosition()\n        g.es('hello from', pos.h)\n\nIf you want to create a plugin that only exposes new commands, this is basically all you need in the plugins .py file.\nThere is no need to hook up for 'after-create-leo-frame' just to make your commands available.\n\nIf you want to create a command in object oriented style (so that the commands deal with your own objects), \ncreate them using closures like this (note how self is available inside command functions)::\n\n    class MyCommands:\n        def create(self):        \n            @g.command('foo1')\n            def foo1_f(event):\n               self.foo = 1\n\n            @g.command('foo2')\n            def foo2_f(event):\n               self.foo = 2\n\n            @g.command('foo-print')\n            def foo_print_f(event):\n               g.es('foo is', self.foo)\n\n    o = MyCommands()\n    o.create()\n\nNote that running create() in this example in `after-create-leo-frame` is pointless - the\nnewly created commands will override the commands in all previous controllers. You should consider \nthis in your plugin design, and create your commands only once per Leo session.\n", "children": []}, {"h": "Modifying plugins with @script scripts", "gnx": "ekr.20100506062734.11593", "b": "The mod_scripting plugin runs @scripts before plugin initiation is complete.\nThus, such scripts can not directly modify plugins. Instead, a script can create\nan event handler for the after-create-leo-frame that will modify the plugin.\n\nFor example, the following modifies the cleo.py plugin after Leo has completed loading it::\n\n    def prikey(self, v):\n        try:\n            pa = int(self.getat(v, 'priority'))\n        except ValueError:\n            pa = -1\n\n        if pa == 24:\n            pa = -1\n        if pa == 10:\n            pa = -2\n\n        return pa\n\n    import types\n    from leo.core import leoPlugins\n\n    def on_create(tag, keywords):\n        c.cleo.prikey = types.MethodType(prikey, c.cleo, c.cleo.__class__)\n\n    leoPlugins.registerHandler(\"after-create-leo-frame\",on_create)\n\nAttempting to modify c.cleo.prikey immediately in the @script gives an\nAttributeError as c has no .cleo when the @script is executed. Deferring it by\nusing registerHandler() avoids the problem.\n", "children": []}, {"h": "Creating minimal outlines", "gnx": "ekr.20110531155858.20563", "b": "The following script will create a minimal Leo outline::\n\n    if 1:\n        # Create a visible frame.\n        c2 = g.app.newCommander(fileName=None)\n    else:\n        # Create an invisible frame.\n        c2 = g.app.newCommander(fileName=None,gui=g.app.nullGui)\n\n    c2.frame.createFirstTreeNode()\n    c2.redraw()\n    \n    # Test that the script works.\n    for p in c2.all_positions():\n        g.es(p.h)\n", "children": []}, {"h": "Retaining pointers to Qt windows", "gnx": "ekr.20120317130339.8282", "b": "@language rest\n@pagewidth 75\n\nThe following script won't work as intended:\n\n    from PyQt4 import QtGui\n    w = QtGui.QWidget()\n    w.resize(250, 150)\n    w.move(300, 300)\n    w.setWindowTitle('Simple test')\n    w.show()\n    \nWhen the script exits the sole reference to the window, w, ceases to\nexist, so the window is destroyed (garbage collected). To keep the window\nopen, add the following code as the last line to keep the reference alive::\n\n    g.app.scriptsDict['my-script_w'] = w\n\nNote that this reference will persist until the next time you run the\nexecute-script. If you want something even more permanent, you can do\nsomething like::\n\n    g.app.my_script_w = w\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20050912125144", "b": "", "children": ["ekr.20100805165051.7162"]}, {"h": "@file plugins.txt", "gnx": "ekr.20100805165051.7162", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050912125144.1"]}, {"h": "@rst html\\plugins.html", "gnx": "ekr.20050912125144.1", "b": "#######\nPlugins\n#######\n\nThis chapter discusses the plugins contained in leoPlugins.leo.\nThese plugins are part of Leo's official distribution.\nThe next chapter, `Writing Plugins`_, tells how to write plugins.\n\nThe scripting plugin (mod_scripting.py) deserves special mention. This\nplugin lets you create **script buttons** in a matter of seconds. See `Creating\nscript buttons`_. Script buttons are extraordinarily useful. Try them, you'll be\ninstantly hooked.\n\n.. contents::\n    :depth: 5\n\n", "children": ["ekr.20050912125735", "ekr.20070814104719", "ekr.20101113063552.9398", "ekr.20101113063552.9528", "ekr.20101113063552.9399"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050912125735", "b": ".. External links...\n.. _docutils:             http://docutils.sourceforge.net\n.. _LaTeX:                http://www.latex-project.org/\n.. _reStructuredText:     http://docutils.sourceforge.net/rst.html\n.. _SilverCity:           http://silvercity.sourceforge.net\n\n.. Relative links...\n.. _`Specifying settings`:      customizing.html#specifying-settings\n.. _`Customizing Leo`:          customizing.html\n.. _`Writing Plugins`:          writingPlugins.html\n.. _`Creating script buttons`:  scripting.html#creating-script-buttons\n", "children": []}, {"h": "Enabling plugins", "gnx": "ekr.20070814104719", "b": "You enable or disable plugins using @enabled-plugins nodes in leoSettings files\n(leoSettings.leo, myLeoSettings.leo or the .leo file being loaded). See\n`Specifying settings`_ for full details of settings files.\n\nThe body text of the @enabled-plugins node contains a list of enabled plugins.\nNotes:\n\n- Leo attempts to load all plugins every time an @enabled-plugins node is seen.\n   If the plugin has already been loaded, Leo silently ignores the request to\n   re-enable the plugin. Leo never attempts to disable a plugin while processing\n   enabled plugin strings. Thus, plugins enabled in an @enabled-plugins node in\n   leoSettings.leo *will* be enabled regardless of the contents of any other\n   @enabled-plugins node.\n\n- g.app.gui.getEnabledPlugins contains the last processed @enabled-plugins node.\n", "children": []}, {"h": "Summary", "gnx": "ekr.20101113063552.9398", "b": "active_path.py\n   Synchronizes @path nodes with folders.\n\nadd_directives.py\n   Allows users to define new @directives.\n\nat_folder.py\n   Synchronizes @folder nodes with folders.\n\nat_produce.py\n   Executes commands in nodes whose body text starts with @produce.\n\nat_view.py\n   Adds support for \\@clip, \\@view and \\@strip nodes.\n\nattrib_edit.py\n   Edits user attributes in a Qt frame.\n\nbacklink.py\n   Allows arbitrary links between nodes.\n\n\nbibtex.py\n   Manages BibTeX files with Leo.\n\nbzr_qcommands.py\n   Adds a context menu to each node containing all the commands in the bzr Qt\n   interface. Bzr is invoked based on the path of the current node.\n\nchapter_hoist.py\n   Creates hoist buttons.\n\ncolorize_headlines.py\n   Manipulates appearance of individual tree widget items.\n\ncontextmenu.py\n   Defines various useful actions for context menus (Qt only).\n\ndatenodes.py\n   Allows users to insert headlines containing dates.\n\ndebugger_pudb.py\n   Makes g.pdb() enter the Pudb debugger instead of pdb.\n\ndetect_urls.py\n   Colorizes URLs everywhere in a node's body on node selection or saving. Double\n   click on any URL launches it in the default browser.\n\ndtest.py\n   Sends code to the doctest module and reports the result.\n\ndump_globals.py\n   Dumps Python globals at startup.\n\nEditAttributes.py\n   Lets the user associate text with a specific node.\n\nempty_leo_file.py\n   Allows Leo to open any empty file as a minimal .leo file.\n\nenable_gc.py\n   Enables debugging and tracing for Python's garbage collector.\n\nexpfolder.py\n   Adds @expfolder nodes that represent folders in the file system.\n\nFileActions.py\n   Defines actions taken when double-clicking on @<file> nodes and supports\n   @file-ref nodes.\n\ngeotag.py\n   Tags nodes with latitude and longitude.\n\ngraphcanvas.py\n   Adds a graph layout for nodes in a tab.\n   Requires Qt and the backlink.py plugin.\n\nimport_cisco_config.py\n   Allows the user to import Cisco configuration files.\n\ninitinclass.py\n   Modifies the Python @auto importer so that the importer\n   puts the __init__ method (ctor) into the body of the class node.\n\ninteract.py\n   Adds buttons so Leo can interact with command line environments.\n\nipython.py\n   Creates a two-way communication (bridge) between Leo\n   scripts and IPython running in the console from which Leo was launched.\n\nleo_interface.py\n   Allows the user to browse XML documents in Leo.\n\nleo_pdf.py\n   This NOT a Leo plugin: this is a docutils writer for .pdf files.\n\nleo_to_html.py\n   Converts a leo outline to an html web page.**.\n\nleo_to_rtf.py\n   Outputs a Leo outline as a numbered list to an RTF file. The RTF file can be\n   loaded into Microsoft Word and formatted as a proper outline.\n\nleocursor.py\n   Creates a LeoCursor object that can walk around a Leo outline and decode\n   attributes from nodes.\n\nleoremote.py\n   Remote control for Leo.\n\nleoscreen.py\n   Allows interaction with shell apps via screen.\n\nlineNumbers.py\n   Adds #line directives in perl and perlpod programs.\n\nmacros.py\n   Creates new nodes containing parameterized section references.\n\nmaximizeNewWindows.py\n   Maximizes all new windows.\n\nmime.py\n   Opens files with their default platform program.\n\nmod_autosave.py\n   Autosaves the Leo outline every so often.\n\nmod_framesize.py\n   Sets a hard coded frame size.\n\nmod_http.py\n   A minimal http plugin for LEO, based on AsyncHttpServer.py.\n\nmod_read_dir_outline.py\n   Allows Leo to read a complete directory tree into a Leo outline. Converts\n   directories into headlines and puts the list of file names into bodies.\n\nmod_scripting.py\n   Creates script buttons and @button, @command, @plugin and @script\n   nodes.\n\nmod_tempfname.py\n   Replaces c.openWithTempFilePath to create alternate temporary\n   directory paths.\n\nmod_timestamp.py\n   Timestamps all save operations to show when they occur.\n\nmultifile.py\n   Allows Leo to write a file to multiple locations.\n\nnav_qt.py\n   Adds \"Back\" and \"Forward\" buttons (Qt only).\n\nniceNosent.py\n   Ensures that all descendants of @file-nosent nodes end\n   with exactly one newline, replaces all tabs with spaces, and\n   adds a newline before class and functions in the derived file.\n\nnodeActions.py\n   Allows the definition of double-click actions.\n\nopen_shell.py\n   Creates an 'Extensions' menu containing two commands:\n   Open Console Window and Open Explorer.\n\noutline_export.py\n   Modifies the way exported outlines are written.\n\npaste_as_headlines.py\n   Creates new headlines from clipboard text.\n\nplugins_menu.py\n   Creates a Plugins menu and adds all actives plugins to it.\n\npretty_print.py\n   Customizes pretty printing.\n\nprojectwizard.py\n   Creates a wizard that creates @auto nodes.\n\nquickMove.py\n   Creates buttons to move nodes quickly to other nodes.\n\nquicksearch.py\n   Adds a fast-to-use search widget, like the \"Find in files\" feature of many editors.\n\nquit_leo.py\n   Shows how to force Leo to quit.\n\nread_only_nodes.py\n   Creates and updates @read-only nodes.\n\nredirect_to_log.py\n   Sends all output to the log pane.\n\nrun_nodes.py\n   Runs a program and interface Leos through its input/output/error streams.\n\nscreenshots.py\n   Creates stand-alone slideshows containing screenshots.\n\nscript_io_to_body.py\n   Sends output from the Execute Script command to the end of the body pane.\n\nscripts_menu.py\n   Creates a Scripts menu for LeoPy.leo.\n\nscrolledmessage.py\n   Provides a Scrolled Message Dialog service for Qt.\n\nsetHomeDirectory.py\n   Sets g.app.homeDir to a hard-coded path.\n\nslideshow.py\n   Support slideshows in Leo outlines.\n\nspydershell.py\n   Launches the spyder environment with access to Leo instance.\n   See http://packages.python.org/spyder/.\n\nstartfile.py\n   Launches (starts) a file given by a headline when double-clicking the icon.\n\nstickynotes.py\n   Adds simple \"sticky notes\" feature (popout editors) for Qt gui.\n\ntodo.py\n   Provides to-do list and simple task management for leo (Qt only).\n\ntomboy_import.py\n   Allows imports of notes created in Tomboy / gnote.\n\ntrace_gc_plugin.py\n   Traces changes to Leo's objects at idle time.\n\ntrace_keys.py\n   Traces keystrokes in the outline and body panes.\n\ntrace_tags.py\n   Traces most common hooks, but not key, drag or idle hooks.\n\nviewrendered.py\n   Creates a window for *live* rendering of rst, html, etc.\n   This plugin uses docutils, http://docutils.sourceforge.net/,\n   to do the rendering, so installing docutils is recommended.\n\nvim.py\n   Enables two-way communication with VIM.\n\nword_count.py\n   Counts characters, words, lines, and paragraphs in the body pane.\n\nword_export.py\n   Adds the Plugins\\:Word Export\\:Export menu item to format and export\n   the selected outline to a Word document, starting Word if necessary.\n\nxemacs.py\n   Allows you to edit nodes in emacs/xemacs.\n\nxsltWithNodes.py\n   Adds the Outline:XSLT menu containing XSLT-related commands.\n\nzenity_file_dialogs.py\n   Replaces Leo's file dialogs on Linux with external\n   calls to the zenity gtk dialog package.\n", "children": []}, {"h": "Gui-independent plugins", "gnx": "ekr.20101113063552.9528", "b": "", "children": ["ekr.20101113063552.9412", "ekr.20101113063552.9431", "ekr.20101113063552.9439", "ekr.20101113063552.9447", "ekr.20101113063552.9467", "ekr.20101113063552.9471", "ekr.20101113063552.9474", "ekr.20101113063552.9476", "ekr.20101113063552.9482"]}, {"h": "Commands & directives", "gnx": "ekr.20101113063552.9412", "b": "", "children": ["ekr.20101113063552.9413", "ekr.20101113063552.9414", "ekr.20101113063552.9415", "ekr.20101113063552.9416", "ekr.20101113063552.9417", "ekr.20101113063552.9418", "ekr.20101113063552.9419", "ekr.20101113063552.9420", "ekr.20101113063552.9421", "ekr.20101113063552.9422", "ekr.20101113063552.9423", "ekr.20101113063552.9798", "ekr.20101113063552.9425", "ekr.20101113063552.9426", "ekr.20101113063552.9427", "ekr.20101113063552.9428", "ekr.20101113063552.9429", "ekr.20101113063552.9430"]}, {"h": "add_directives.py", "gnx": "ekr.20101113063552.9413", "b": "Allows users to define new @direcives.\n\n", "children": []}, {"h": "bzr_qcommands.py", "gnx": "ekr.20101113063552.9414", "b": "Adds a context menu to each node containing all the commands in the bzr Qt\ninterface. Bzr is invoked based on the path of the current node.\n\n**Requires contextmenu.py.**\n\n", "children": []}, {"h": "empty_leo_file.py", "gnx": "ekr.20101113063552.9415", "b": "Allows Leo to open any empty file as a minimal .leo file.\n\n", "children": []}, {"h": "import_cisco_config.py", "gnx": "ekr.20101113063552.9416", "b": "Allows the user to import Cisco configuration files.\n\nAdds the \"File:Import:Import Cisco Configuration\" menu item. The plugin will:\n\n1)  Create a new node, under the current node, where the configuration will be\n    written. This node will typically have references to several sections (see below).\n\n2)  Create sections (child nodes) for the indented blocks present in the original\n    config file. These child nodes will have sub-nodes grouping similar blocks (e.g.\n    there will be an 'interface' child node, with as many sub-nodes as there are real\n    interfaces in the configuration file).\n\n3)  Create sections for the custom keywords specified in the customBlocks[] list in\n    importCiscoConfig(). You can modify this list to specify different keywords. DO\n    NOT put keywords that are followed by indented blocks (these are taken care of by\n    point 2 above). The negated form of the keywords (for example, if the keyword is\n    'service', the negated form is 'no service') is also included in the sections.\n\n\n4)  Not display consecutive empty comment lines (lines with only a '!').\n\nAll created sections are alphabetically ordered.\n\n", "children": []}, {"h": "initinclass.py", "gnx": "ekr.20101113063552.9417", "b": "Modifies the Python @auto importer so that the importer\nputs the __init__ method (ctor) into the body of the class node.\n\nThis makes it easier to keep the instance variable docs in the class\ndocstring in sync. with the ivars as manipulated by __init__, saves\nrepeating explanations in both places.\n\nNote that this is done *after* the consistency checks by the @auto\nimport code, so using this plugin is at your own risk.  It will change\nthe order of declarations if other methods are declared before __init__.\n\n", "children": []}, {"h": "leo_interface.py", "gnx": "ekr.20101113063552.9418", "b": "Allows the user to browse XML documents in Leo.\n\nThis file implements an interface to XML generation,\nso that the resulting file can be processed by leo.\n\n..  class file represents the whole leo file.\n..  class leo_node has a headline and body text.\n\n..  If you encounter the first of a set of clones, create a leo_node. If you\n..  encounter the same set of clones later, create a leo_clone node and refer back\n..  to the first element.\n\n", "children": []}, {"h": "lineNumbers.py", "gnx": "ekr.20101113063552.9419", "b": "Adds #line directives in perl and perlpod programs.\n\nOver-rides two methods in leoAtFile.py to write #line directives after node\nsentinels. This allows compilers to give locations of errors in relation to the\nnode name rather than the filename. Currently supports only perl and perlpod.\n\n", "children": []}, {"h": "macros.py", "gnx": "ekr.20101113063552.9420", "b": "Creates new nodes containing parameterized section reference.\n\n.. No longer available: http://sourceforge.net/forum/message.php?msg_id=2444117\n\nThis plugin adds nodes under the currently selected tree that are to act as\nsection references. To do so, go the Outline menu and select the\n'Parameterize Section Reference' command. This plugin looks for a top level node called\n'Parameterized Nodes'. If it finds a headline that matches the section reference\nit adds a node/nodes to the current tree.\n\nTo see this in action, do the following:\n\n0. **Important**: in the examples below, type << instead of < < and\n   type >> instead of > >.  Docstrings can not contain section references!\n\n1. Create a node called 'Parameterized Nodes', with a sub-node called  < < Meow \\>\\>.\n   The body of < < Meow > > should have the text::\n\n        I mmmm sooo happy I could  < < 1$  > >.\n        But I don't know if I have all the  < < 2$  > >\n        money in the world.\n\n2. In a node called A, type::\n\n        < < meow( purrrrrr, zzooot )  > >\n        (leave the cursor at the end of the line)\n\n3. In a node called B, type::\n\n         < < meow ( spit or puke, blinkin  )  > >\n        (leave the cursor at the end of the line)\n\n4. Leave the cursor in Node A at the designated point.\n\n5. Go to Outline and select Parameterize Section Reference.\n\nThe plugin searches the outline, goes to level one and finds a Node with the Headline,\n\"Parameterized Nodes\". It looks for nodes under that headline with the the headline\n<\\< meow >\\>. It then creates this node structure under Node A::\n\n        < < meow ( purrrrrr, zzooot ) > >\n            < <2$> >\n            < <1$> >\n\n6. Examine the new subnodes of Node A:  \n\n        < < meow ( purrrrrr, zzooot ) > > contains the body text of the < < meow > > node.\n        < < 1$ > > contains the word purrrrrr.\n        < < 2$ > > contains the word zzooot.\n\n7. Go to Node B, and leave the cursor at the designated point.\n\nGo to Outline Menu and select Parameterize Section Reference command.\n\n8. Examine the new subnodes of Node B.\n\nIt's a lot easier to use than to explain!\n\n", "children": []}, {"h": "mod_autosave.py", "gnx": "ekr.20101113063552.9421", "b": "Autosaves the Leo outline every so often.\n\nThe time between saves is given by the setting, with default as shown::\n\n    @int mod_autosave_interval = 300\n\nThis plugin is active only if::\n\n    @bool mod_autosave_active = True\n\n", "children": []}, {"h": "mod_read_dir_outline.py", "gnx": "ekr.20101113063552.9422", "b": "Allows Leo to read a complete directory tree into a Leo outline. Converts\ndirectories into headlines and puts the list of file names into bodies.\n\nCe plug-in permet de traduire l'arborescence d'un r\u00e9pertoire en une arborescence\nLeo : Chaque dossier est converti en noeud dans Leo ; son nom est plac\u00e9 dans\nl'ent\u00eate du noeud et chaque nom de fichier qu'il contient est list\u00e9 dans son\ncontenu.\n\nFeedback on this plugin can be sent to::\n\n    Fr\u00e9d\u00e9ric Momm\u00e9ja\n    <frederic [point] mommeja [at] laposte [point] net>\n\n", "children": []}, {"h": "mod_timestamp.py", "gnx": "ekr.20101113063552.9423", "b": "Timestamps all save operations to show when they occur.\n\n", "children": []}, {"h": "nodeActions.py", "gnx": "ekr.20101113063552.9798", "b": "Allows the definition of double-click actions.\n\nWhen the user double-clicks a node this plugin checks for a match of the clicked\nnode's headline text with a list of patterns. If a match occurs, the plugin\nexecutes the associated script.\n\n**nodeAction** nodes may be located anywhere in the outline. Such nodes should\ncontain one or more **pattern nodes** as children. The headline of each pattern\nnode contains the pattern; the body text contains the script to be executed when\nthe pattern matches the double-clicked node.\n\nFor example, the \"nodeActions\" node containing a \"launch URL\" pattern node\nand a \"pre-process python code\" node could be placed under an \"@settings\"\nnode::\n\n   @settings\n   |\n   +- nodeActions\n      |\n      +- http:\\\\*\n      |\n      +- @file *.py\n\n**Configuration**\n\nThe nodeActions plugin supports the following global configurations using\nLeo's support for setting global variables within an @settings node's\nsub-nodes in the leoSettings.leo, myLeoSettings.leo, and the project Leo\nfile:\n\n@bool nodeActions_save_atFile_nodes = False\n\n  :True:\n     Double-click on an @file type node will save the file to disk\n     before executing the script.\n\n  :False:\n     Double-click on an @file type node will **not** save the file to disk\n     before executing the script. (default)\n\n@int nodeActions_message_level = 1\n\n  Specifies the type of messages to be sent to the log pane.  Specifying a\n  higher message level will display that level and all lower levels.\n  The following integer values are supported::\n\n    0 no messages\n    1 Plugin triggered and the patterns that were matched (default)\n    2 Double-click event passed or not to next plugin\n    3 Patterns that did not match\n    4 Code debugging messages\n\n**Patterns**\n\nPattern matching is performed using python's support for Unix\nshell-style patterns unless overwritten by the \"X\" pattern directive.\nThe following pattern elements are supported::\n\n    *           matches everything\n    ?           matches any single character\n    [<seq>]     matches any character in <seq>\n    [!<seq>]    matches any character **not** in <seq>\n\nUnix shell-style pattern matching is case insensitive and always starts from\nthe beginning of the headline.  For example:\n\n     ======= =========== ==============\n     Pattern   Matches   Does not match\n     ======= =========== ==============\n     \\*.py   Abc_Test.py\n     .py     .py - Test  Abc_Test.py\n     test*   Test_Abc.py Abc_Test.py\n     ======= =========== ==============\n\nTo enable a script to run on any type of @file node (@thin, @shadow, ...),\nthe pattern can start with \"@files\" to match on any\nexternal file type.  For example, the pattern \"@files \\*.py\" will\nmatch a node with the headline \"@file abcd.py\".\n\nThe headline of the double-clicked node is matched against the patterns\nstarting from the first sub-node under the \"nodeActions\" node to the last\nsub-node.\n\nOnly the script associated with the first matching pattern is\ninvoked unless overwritten by the \"V\" pattern directive.\n\nUsing the \"V\" pattern directive allows a broad pattern such\nas \"@files \\*.py\" to be invoked, and then, by placing a more restrictive\npattern above it, such as \"@files \\*_test.py\", a different script can be\nexecuted for those files requiring pre-processing::\n\n  +- nodeActions\n     |\n     +- @files *_test.py\n     |\n     +- @files *.py\n\n**Note**: To prevent Leo from trying to save patterns that begin with a derived\nfile directive (@file, @auto, ...) to disk, such as \"@file \\*.py\", place the\n\"@ignore\" directive in the body of the \"nodeActions\" node.\n\nPattern nodes can be placed at any level under the \"nodeActions\" node.\nOnly nodes with no child nodes are considered pattern nodes.\nThis allows patterns that are to be used in multiple Leo files to be read\nfrom a file.  For example, the following structure reads the pattern\ndefinition from the \"C:\\\\Leo\\\\nodeActions_Patterns.txt\" file::\n\n    +- nodeActions\n    |\n    +- @files C:\\\\Leo\\\\nodeActions_Patterns.txt\n        |\n        +- http:\\\\*\n        |\n        +- @file *.py\n\n**Pattern directives**\n\nThe following pattern specific directives can be appended to the end of a\npattern (do not include the ':'):\n\n:[X]:\n  Use python's regular expression type patterns instead of the Unix\n  shell-style pattern syntax.\n\n  For example, the following patterns will match the same headline string::\n\n     Unix shell-style pattern:\n        @files *.py\n\n     Regular Expression pattern:\n        ^@files .*\\.py$ [X]\n\n:[V]:\n  Matching the pattern will not block the double-click event from\n  being passed to the remaining patterns.\n  The \"V\" represents a down arrow that symbolizes the passing of the event\n  to the next pattern below it.\n\n  For example, adding the \"[V]\" directive to the \"@files \\*_test.py\" in\n  the Patterns section above, changes its script from being 'an\n  alternate to' to being 'a pre-processor for' the \"@files \\*.py\" script::\n\n     +- nodeActions\n        |\n        +- @files *_test.py [V]\n        |\n        +- @files *.py\n\n:[>]:\n  Matching the pattern will not block the double-click event from being\n  passed to other plugins.\n  The \">\" represents a right arrow that\n  symbolizes the passing of the event to the next plugin.\n\n  If the headline matched more than one headline,\n  the double-click event will be passed to the next plugin if the\n  directive is associated with any of the matched patterns.\n\nThe directive(s) for a pattern must be contained within a single set of\nbrackets, separated from the pattern by a space, with or without a comma\nseparator.  For example, the following specifies all three directives::\n\n  ^@files .*\\.py$ [X,V>]\n\n**Scripts**\n\nThe script for a pattern is located in the body of the pattern's node.\nThe following global variables are available to the script::\n\n    c\n    g\n    pClicked - node position of the double-clicked node\n    pScript - node position of the invoked script\n\n**Examples**\n\nDouble-clicking on a node with a \"http:\\\\\\\\www.google.com\" headline\nwill invoke the script associated with the\n\"http:\\\\\\\\\\*\" pattern.  The following script in the body of the pattern's\nnode displays the URL in a browser::\n\n     import webbrowser\n     hClicked = pClicked.h     #Clicked node's Headline text\n     webbrowser.open(hClicked) #Invoke browser\n\nThe following script can be placed in the body of a pattern's node to\nexecute a command in the first line of the body of a double-clicked node::\n\n     g.os.system('\"Start /b ' + pClicked.bodyString() + '\"')\n", "children": []}, {"h": "outline_export.py", "gnx": "ekr.20101113063552.9425", "b": "Modifies the way exported outlines are written.\n\n", "children": []}, {"h": "paste_as_headlines.py", "gnx": "ekr.20101113063552.9426", "b": "Creates new headlines from clipboard text.\n\nIf the pasted text would be greater than 50 characters in length, the plugin\ntruncates the headline to 50 characters and pastes the entire line into the body\ntext of that node. Creates a \"Paste as Headlines\" option the Edit menu directly\nunder the existing Paste option.\n\n", "children": []}, {"h": "pretty_print.py", "gnx": "ekr.20101113063552.9427", "b": "Customizes pretty printing.\n\nThe plugin creates a do-nothing subclass of the default pretty printer. To\ncustomize, simply override in this file the methods of the base prettyPrinter\nclass in leoCommands.py. You would typically want to override putNormalToken or\nits allies. Templates for these methods have been provided. You may, however,\noverride any methods you like. You could even define your own class entirely,\nprovided you implement the prettyPrintNode method.\n\n", "children": []}, {"h": "quickMove.py", "gnx": "ekr.20101113063552.9428", "b": "Creates buttons to move nodes quickly to other nodes.\n\nQuickly move/copy/clone nodes from around the tree to one or more target nodes.\nIt can also create bookmark and tagging functionality in an outline (see `Set\nParent Notes` below).\n\nAdds `Move/Clone/Copy To Last Child Button` and `Move/Clone/Copy To First Child Button`,\n`Link To/From` and `Jump To` commands to the Move sub-menu on the\nOutline menu, and each node's context menu, if the `contextmenu` plugin is enabled.\n\nSelect a node ``Foo`` and then use the `Move To Last Child Button` command.\nThis adds a 'to Foo' button to the button bar. Now select another node and click\nthe 'to Foo' button. The selected node will be moved to the last child\nof the node 'Foo'.\n\n`To First Child Button` works the same way, except that moved nodes are inserted\nas the first child of the target node.\n\n`Clone` and `Copy` variants are like `Move`, but clone or copy instead of moving.\n\n`Link` works in conjunction with the `backlink` plugin (and also the\n`graphcanvas` plugin) creating a link to/from the target and current nodes.\n\n`Jump` buttons act as bookmarks, taking you to the target node.\n\nYou can right click on any of these buttons to access their context menu:\n\n  Goto Target\n    takes you to the target node (like a `Jump` button).\n  Make Permanent\n    makes the button permanent, it will reappear\n    when the file is saved / closed / re-opened.\n  Set Parent\n    allows you to move buttons to sub-menu items of other\n    `quickMove` buttons.  This implicitly makes the moved button\n    permanent.  It also causes the moved button to lose its context menu.\n  Remove Button\n    comes from the `mod_scripting` plugin, and just\n    removes the button for the rest of the current session.\n\nSet Parent Notes\n  `Set Parent` doesn't allow you to do anything with `quickMove` you couldn't\n  do with a long strip of separate buttons, but it collects quickMove buttons\n  as sub-menu items of one quickMove button, saving a lot of toolbar space.\n\nBookmarks \n  Create somewhere out of the way in your outline a node called\n  `Bookmarks`. Use the quickMove menu to make it a `Jump To` button, and use its\n  context menu to make it permanent. There is no particular reason to jump to\n  it, but it needs to be a `quickMove` button of some kind.\n\n  Now, when you want to bookmark a node, first use the quickMove menu to make\n  the node a `Jump To` button, and then use the context menu on the button to\n  set its parent to your `Bookmarks` button.  It becomes a sub-menu item\n  of the `Bookmarks` button.\n\nTags\n  In conjunction with the `backlinks` plugin you can use `quickMove` to\n  tag nodes.   The `backlinks` plugin adds a `Links` tab to the `Log pane`.\n\n  Create somewhere in your outline a node called `Tags`. Use the quickMove menu\n  to make it a `Jump To` button, and use its context menu to make it permanent.\n  Clicking on it will jump you to your tag list. Now create a node under the\n  `Tags` node for each tag you want. The node's name will be the tag name, and\n  can be changed later. Then use the quickMove menu to make each of these nodes\n  a `Link To` button, and then use the context menu on the button to set its\n  parent to your `Tags` button. It becomes a sub-menu item of the `Tags` button.\n\n  To see the tags on a node, you need to be looking at the `Links` tab in the\n  `Log pane`.  To see all the nodes with a particular tag, click on the `Tags`\n  button to jump to the tag list, and select the node which names the tag of\n  interest.  The nodes with that tag will be listed in th `Links` tab in the\n  `Log pane`.\n\n", "children": []}, {"h": "setHomeDirectory.py", "gnx": "ekr.20101113063552.9429", "b": "Sets g.app.homeDir to a hard-coded path.\n\n", "children": []}, {"h": "word_count.py", "gnx": "ekr.20101113063552.9430", "b": "Counts characters, words, lines, and paragraphs in the body pane.\n\nIt adds a \"Word Count...\" option to the bottom of the Edit menu that will\nactivate the command.\n\n", "children": []}, {"h": "Debugging", "gnx": "ekr.20101113063552.9431", "b": "", "children": ["ekr.20101113063552.9432", "ekr.20101113063552.9433", "ekr.20101113063552.9434", "ekr.20101113063552.9435", "ekr.20101113063552.9436", "ekr.20101113063552.9437", "ekr.20101113063552.9438"]}, {"h": "debugger_pudb.py", "gnx": "ekr.20101113063552.9432", "b": "Makes g.pdb() enter the Pudb debugger instead of pdb.\n\nPudb is a full-screen Python debugger:\nhttp://pypi.python.org/pypi/pudb\n\n", "children": []}, {"h": "dump_globals.py", "gnx": "ekr.20101113063552.9433", "b": "Dumps Python globals at startup.\n\n", "children": []}, {"h": "enable_gc.py", "gnx": "ekr.20101113063552.9434", "b": "Enables debugging and tracing for Python's garbage collector.\n\n", "children": []}, {"h": "quit_leo.py", "gnx": "ekr.20101113063552.9435", "b": "Shows how to force Leo to quit.\n\n", "children": []}, {"h": "trace_gc_plugin.py", "gnx": "ekr.20101113063552.9436", "b": "Traces changes to Leo's objects at idle time.\n\n", "children": []}, {"h": "trace_keys.py", "gnx": "ekr.20101113063552.9437", "b": "Traces keystrokes in the outline and body panes.\n\n", "children": []}, {"h": "trace_tags.py", "gnx": "ekr.20101113063552.9438", "b": "Traces most common hooks, but not key, drag or idle hooks.\n\n", "children": []}, {"h": "External programs", "gnx": "ekr.20101113063552.9439", "b": "", "children": ["ekr.20101113063552.9440", "ekr.20101113063552.9441", "ekr.20101113063552.9442", "ekr.20101113063552.9443", "ekr.20101113063552.9444", "ekr.20101113063552.9445", "ekr.20101113063552.9446"]}, {"h": "ipython.py", "gnx": "ekr.20101113063552.9440", "b": "Creates a two-way communication (bridge) between Leo\nscripts and IPython running in the console from which Leo was launched.\n\nUsing this bridge, scripts running in Leo can affect IPython, and vice versa.\nIn particular, scripts running in IPython can alter Leo outlines!\n\nFor full details, see Leo Users Guide:\nhttp://webpages.charter.net/edreamleo/IPythonBridge.html\n\n", "children": []}, {"h": "mod_tempfname.py", "gnx": "ekr.20101113063552.9441", "b": "Replaces c.openWithTempFilePath to create alternate temporary\ndirectory paths.\n\nTwo alternates are supported. The default method creates temporary files with a\nfilename that begins with the headline text, and located in a \"username_Leo\"\nsubdirectory of the temporary directory. The \"LeoTemp\" prefix is omitted. If\n'open_with_clean_filenames' is set to true then subdirectories mirror the node's\nhierarchy in Leo. Either method makes it easier to see which temporary file is\nrelated to which outline node.\n\n", "children": []}, {"h": "open_shell.py", "gnx": "ekr.20101113063552.9442", "b": "Creates an 'Extensions' menu containing two commands:\nOpen Console Window and Open Explorer.\n\nThe Open Console Window command opens xterm on Linux.\nThe Open Explorer command Opens a Windows explorer window.\n\nThis allows quick navigation to facilitate testing and navigating large systems\nwith complex directories.\n\nPlease submit bugs / feature requests to etaekema@earthlink.net\n\nCurrent limitations:\n- Not tested on Mac OS X ...\n- On Linux, xterm must be in your path.\n\n", "children": []}, {"h": "tomboy_import.py", "gnx": "ekr.20101113063552.9443", "b": "Allows imports of notes created in Tomboy / gnote.\n\nUsage:\n\n* Create a node with the headline 'tomboy'\n* Select the node, and do alt+x act-on-node    \n* The notes will appear as children of 'tomboy' node\n* The next time you do act-on-node, existing notes will be updated (they don't need to \n  be under 'tomboy' node anymore) and new notes added.\n\n", "children": []}, {"h": "vim.py", "gnx": "ekr.20101113063552.9444", "b": "Enables two-way communication with VIM.\n\nIt's recommended that you have gvim installed--the basic console vim is not recommended.\n\nWhen properly installed, this plugin does the following:\n\n- By default, the plugin opens nodes on icondclick2 events.\n  (double click in the icon box)\n\n- The setting::\n\n    @string vim_trigger_event = icondclick2\n\n  controls when nodes are opened in vim.  The default, shown above,\n  opens a node in vim on double clicks in Leo's icon box.\n  A typical alternative would be::\n\n      @string vim_trigger_event = iconclick2\n\n  to open nodes on single clicks in the icon box.\n  You could also set:\n\n      @string vim_trigger_event = select2\n\n  to open a node in vim whenever the selected node changes for any reason.\n\n- Leo will put Vim cursor at same location as Leo cursor in file if 'vim_plugin_positions_cursor' set to True.\n\n- Leo will put node in a Vim tab card if 'vim_plugin_uses_tab_feature' set to True.\n\n- Leo will update the node in the outline when you save the file in VIM.\n\nTo install this plugin do the following:\n\n1. On Windows, set the vim_cmd and vim_exe settings to the path to vim or gvim\n   as shown in leoSettings.leo. Alternatively, you can ensure that gvim.exe is\n   on your PATH.\n\n1. If you are using Python 2.4 or above, that's all you need to do. Jim\n   Sizelove's new code will start vim automatically using Python's subprocess\n   module. The subprocess module comes standard with Python 2.4. For Linux\n   systems, Leo will use subprocess.py in Leo's extensions folder if necessary.\n", "children": []}, {"h": "xemacs.py", "gnx": "ekr.20101113063552.9445", "b": "Allows you to edit nodes in emacs/xemacs.\n\n**Important**: the open_with plugin must be enabled for this plugin to work\nproperly.\n\nDepending on your preference, selecting or double-clicking a node will pass the\nbody text of that node to emacs. You may edit the node in the emacs buffer and\nchanges will appear in Leo.\n\n", "children": []}, {"h": "word_export.py", "gnx": "ekr.20101113063552.9446", "b": "Adds the Plugins\\:Word Export\\:Export menu item to format and export\nthe selected outline to a Word document, starting Word if necessary.\n\n", "children": []}, {"h": "Files and nodes", "gnx": "ekr.20101113063552.9447", "b": "", "children": ["ekr.20101113063552.9448", "ekr.20101113063552.9449", "ekr.20101113063552.9450", "ekr.20101113063552.9451", "ekr.20101113063552.9452", "ekr.20101113063552.9453", "ekr.20101113063552.9454", "ekr.20101113063552.9455", "ekr.20101113063552.9456", "ekr.20101113063552.9457", "ekr.20101113063552.9458", "ekr.20101113063552.9459", "ekr.20101113063552.9460", "ekr.20101113063552.9461", "ekr.20101113063552.9462", "ekr.20101113063552.9464", "ekr.20101113063552.9466"]}, {"h": "active_path.py", "gnx": "ekr.20101113063552.9448", "b": "Synchronizes @path nodes with folders.\n\nIf a node is named '@path path_to_folder', the content (file and folder names)\nof the folder and the children of that node will synchronized whenever the\nnode's status-iconbox is double clicked.\n\nFor files not previously seen in a folder a new node will appear on top of the\nchildren list (with a mark).\n\nFolders appear in the list as /foldername/. If you double click on the icon-box\nof the folder node, it will have children added to it based on the contents of\nthe folder on disk. These folders have the '@path' directive as the first line\nof their body text.\n\nWhen files are deleted from the folder and the list is updated by double\nclicking the files will appear in the list as *filename* (or */foldername/*).\n\nYou can describe files and directories in the body of the nodes.\n\nYou can organize files and directories with organizer nodes, an organizer node\nname cannot contain with '/'.\n\nFiles and folders can be created by entering a node with the required name as\nits headline (must start and/or end with \"/\" for a folder) and then double\nclicking on the node's status-iconbox.\n\n\\@auto nodes can be set up for existing files can be loaded by\ndouble clicking on the node's status-iconbox. If you prefer\n\\@shadow or something else use the \"active_path_attype\" setting,\nwithout the \"@\".\n\nThere are commands on the Plugins active_path submenu:\n\n- show path - show the current path\n- set absolute path - changes a node \"/dirname/\" to \"@path /absolute/path/to/dirname\".\n- purge vanished (recursive) - remove *entries*\n- update recursive - recursive load of directories, use with caution on large\n  file systems\n\nIf you want to use an input other than double clicking a node's status-iconbox\nset active_path_event to a value like 'iconrclick1' or 'iconclick1'.\n\nThere are @settings for ignoring directory entries and automatically loading files.  ``re.search`` is used, rather than ``re.match``, so patterns need only match part of the filename, not the whole filename.\n\nThe body of the @setting ``@data active_path_ignore`` is a list of regex\npatterns, one per line.  Directory entries matching any pattern in the list will be ignored.  The names of directories used for matching will have forward slashes around them ('/dirname/'), so patterns can use this to distinguish between directories and files.\n\nThe body of the @setting ``@data active_path_autoload`` is a list of regex\npatterns, one per line.  File entries matching any pattern in the list will be loaded automatically.  This works only with files, not directories (but you can load directories recursively anyway).\n\nSet ``@bool active_path_load_docstring = True`` to have active_path load the docstring\nof .py files automatically.  These nodes start with the special string::\n\n    @language rest # AUTOLOADED DOCSTRING\n\nwhich must be left intact if you want active path to be able to double-click load\nthe file later.\n\n\\@float active_path_timeout_seconds (default 10.) controls the maximum\ntime active_path will spend on a recursive operation.\n\n\\@int active_path_max_size (default 1000000) controls the maximum\nsize file active_path will open without query.\n\nactive_path is a rewrite of the at_directory plugin to use \\@path directives\n(which influence \\@auto and other \\@file type directives), and to handle\nsub-folders more automatically.\n\n", "children": []}, {"h": "at_folder.py", "gnx": "ekr.20101113063552.9449", "b": "Synchronizes @folder nodes with folders.\n\nIf a node is named '@folder path_to_folder', the content (filenames) of the\nfolder and the children of that node will be sync. Whenever a new file is put\nthere, a new node will appear on top of the children list (with mark). So that\nI can put my description (i.e. annotation) as the content of that node. In this\nway, I can find any files much easier from leo.\n\nMoreover, I add another feature to allow you to group files(in leo) into\nchildren of another group. This will help when there are many files in that\nfolder. You can logically group it in leo (or even clone it to many groups),\nwhile keep every files in a flat/single directory on your computer.\n\n", "children": []}, {"h": "at_produce.py", "gnx": "ekr.20101113063552.9450", "b": "Executes commands in nodes whose body text starts with @produce.\n\nTo use, put in the body text of a node::\n\n    @produce javac -verbose Test.java\n\nTo execute, you goto Outline and look at Produce.  Choose Execute All Produce\nor Execute Tree Produce.  The Tree does the current Tree, All does the whole\nOutline.  Executing will fire javac, or whatever your using.  @produce functions\nas a directive.  After executing, a log file/node is created at the top of the\nOutline.  Any output, even error messages, should be there.\n\nIt executes in a hierarchal manner.  Nodes that come before that contain @produce\ngo first.\n\nI'm hoping that this orthogonal to @run nodes and anything like that.  Its not\nintended as a replacement for make or Ant, but as a simple substitute when that\nmachinery is overkill.\n\nWARNING: trying to execute a non-existent command will hang Leo.\n\n", "children": []}, {"h": "at_view.py", "gnx": "ekr.20101113063552.9451", "b": "Adds support for \\@clip, \\@view and \\@strip nodes.\n\n- Selecting a headline containing \\@clip appends the contents of the clipboard to\n  the end of the body pane.\n\n- Double clicking the icon box of a node whose headline contains \\@view\n  *<path-to-file>* places the contents of the file in the body pane.\n\n- Double clicking the icon box of a node whose headline contains \\@strip\n  *<path-to-file>* places the contents of the file in the body pane, with all\n  sentinels removed.\n\nThis plugin also accumulates the effect of all \\@path nodes.\n\n", "children": []}, {"h": "backlink.py", "gnx": "ekr.20101113063552.9452", "b": "Allows arbitrary links between nodes.\n\n", "children": []}, {"h": "datenodes.py", "gnx": "ekr.20101113063552.9453", "b": "Allows users to insert headlines containing dates.\n\n'Date nodes' are nodes that have dates in their headlines. They may be added to\nthe outline one at a time, a month's-worth at a time, or a year's-worth at a\ntime. The format of the labels (headlines) is configurable.\n\nThere are options to omit Saturdays and Sundays.\n\nAn 'Insert Date Nodes ...' submenu will be created (by default) in the 'Outline'\nmenu.  This menu can be suppressed by using either of the following settings:\n\n    - @bool suppress-datenodes-menus\n    - @bool suppress-all-plugins-menus\n\nThe following commands are available for use via the minibuffer or in\n@menu/@popup settings.\n\n    - datenodes-today\n    - datenodes-this-month\n    - datenodes-this-year\n\n", "children": []}, {"h": "expfolder.py", "gnx": "ekr.20101113063552.9454", "b": "Adds @expfolder nodes that represent folders in the file system.\n\nDouble clicking on the icon of an @expfolder heading reads the files in the\ndirectory at the path specified and creates child nodes for each file in the\nsubfolder. Subdirectories are made into child @expfolder nodes so the tree can\nbe easily traversed. If files have extensions specified in the expfolder.ini\nfile they are made into @text nodes so the content of the files can be easily\nloaded into leo and edited. Double clicking a second time will delete all child\nnodes and refresh the directory listing. If there are any changed @text nodes\ncontained inside you will be prompted about saving them.\n\nThe textextensions field on the expfolder Properties page contains a list of\nextensions which will be made into @text nodes, separated by spaces.\n\nFor the @text and @expfolder nodes to interact correctly, the textnode plugin\nmust load before the expfolder plugin. This can be set using the Plugin\nManager's Plugin Load Order pane.\n\n", "children": []}, {"h": "FileActions.py", "gnx": "ekr.20101113063552.9455", "b": "Defines actions taken when double-clicking on @<file> nodes and supports\n@file-ref nodes.\n\nDouble-clicking any kind of @<file> node writes out the file if changes have\nbeen made since the last save, and then runs a script on it, which is retrieved\nfrom the outline.\n\nScripts are located in a node whose headline is FileActions. This node can be\nanywhere in the outline. If there is more than one such node, the first one in\noutline order is used.\n\nThe children of that node are expected to contain a file pattern in the headline\nand the script to be executed in the body. The file name is matched against the\npatterns (which are Unix-style shell patterns), and the first matching node is\nselected. If the filename is a path, only the last item is matched.\n\nExecution of the scripts is similar to the \"Execute Script\"\ncommand in Leo. The main difference is that the namespace\nin which the scripts are run contains these elements:\n\n- 'c' and 'g' and 'p': as in the regular execute script command.\n\n- 'filename': the filename from the @file directive.\n\n- 'shellScriptInWindow', a utility function that runs a shell script in an\n   external windows, thus permitting programs to be called that require user\n   interaction\n\nFile actions are implemented for all kinds @<file> nodes. There is also a new\nnode type @file-ref for referring to files purely for the purpose of file\nactions, Leo does not do anything with or to such files.\n\n", "children": []}, {"h": "geotag.py", "gnx": "ekr.20101113063552.9456", "b": "Tags nodes with latitude and longitude.\n\n", "children": []}, {"h": "leocursor.py", "gnx": "ekr.20101113063552.9457", "b": "Creates a LeoCursor object that can walk around a Leo outline and decode\nattributes from nodes.\n\nNode names can be used through . (dot) notation so ``cursor.Data.Name._B`` for\nexample returns the body text of the Name node which is a child of the Data node\nwhich is a child of the cursors current location.\n\nSee .../plugins/examples/leocursorexample.leo for application.\n\n", "children": []}, {"h": "mime.py", "gnx": "ekr.20101113063552.9458", "b": "Opens files with their default platform program.\n\nDouble-clicking @mime nodes will attempt to open the named file as if opened\nfrom a file manager. \\@path parent nodes are used to find the full filename\npath.  Fore example::\n\n    @mime foodir/document.pdf\n\nThe string setting 'mime_open_cmd' allows specifying a program to handle opening\nfiles::\n\n    @settings\n        @string mime_open_cmd = see\n        .. or ..\n        @string mime_open_cmd = see %s\n\nWhere '%s' is replaced with the full pathname.\n\n**Note**: This plugin terminates handling of the 'icondclick1' event by returning\nTrue. If another plugin using this event (e.g. vim.py) is also enabled, the\norder in @enabled-plugins matters. For example: if vim.py is enabled before\nmime.py, double-clicking on an @mime node will both open the body text in [g]vim\nAND call the mime_open_cmd.\n\nThis plugin is complementary to the UNL.py plugin's @url nodes. Use @url for\nopening either URLs or Uniform Node Locators in \"\\*.leo\" files and use @mime\nnodes for opening files on the local file system. It also replaces the\nstartfile.py plugin, where here the headline must start with @mime to activate\nthis plugin.\n\nFor other sys.platform's, add an elif case to the section \"guess file\nassociation handler\" and either define a default _mime_open_cmd string, where\n\"%s\" will be replaced with the filename, or define a function taking the\nfilename string as its only argument and set as open_func.\n\n", "children": []}, {"h": "multifile.py", "gnx": "ekr.20101113063552.9459", "b": "Allows Leo to write a file to multiple locations.\n\nThis plugin acts as a post-write mechanism, a file must be written to the\nfile system for it to work. At this point it is not a replacement for @path or an\nabsolute path, it works in tandem with them.\n\nTo use, place @multipath at the start of a line in the root node or an ancestor\nof the node. The format is (On Unix-like systems)::\n\n    @multipath /machine/unit/:/machine/robot/:/machine/\n\nNew in version 0.6 of this plugin: the separator used above is ';' not ':',\nfor example::\n\n    @multipath c:\\prog\\test;c:\\prog\\unittest\n\nIt will places copy of the written file in each of these directories.\n\nThere is an additional directive that simplifies common paths, it is called\n@multiprefix. By typing @multiprefix with a path following it, before a\n@multipath directive you set the beginning of the paths in the @multipath\ndirective. For example::\n\n    #@multiprefix /leo #@multipath /plugins \n\nor::\n\n    #@multiprefix /leo/\n    #@multipath plugins: fungus : drain\n\ncopies a file to /leo/plugins /leo/fungus /leo/drain.\n\nNote I put # in front of the directives here because I\ndon't want someone browsing this file to accidentally save multiple copies of\nthis file to their system :) )\n\nThe @multiprefix stays in effect for the entire tree until reset with another\n@multiprefix directive. @multipath is cumulative, in that for each @multipath in\nan ancestor a copy of the file is created. These directives must at the\nbeginning of the line and by themselves.\n\n", "children": []}, {"h": "niceNosent.py", "gnx": "ekr.20101113063552.9460", "b": "Ensures that all descendants of @file-nosent nodes end\nwith exactly one newline, replaces all tabs with spaces, and\nadds a newline before class and functions in the derived file.\n\n", "children": []}, {"h": "read_only_nodes.py", "gnx": "ekr.20101113063552.9461", "b": "Creates and updates @read-only nodes.\n\nHere's my first attempt at customizing leo. I wanted to have the ability to\nimport files in \"read-only\" mode, that is, in a mode where files could only\nbe read by leo (not tangled), and also kept in sync with the content on the\ndrive.\n\nThe reason for this is for example that I have external programs that generate\nresource files. I want these files to be part of a leo outline, but I don't\nwant leo to tangle or in any way modify them. At the same time, I want them\nto be up-to-date in the leo outline.\n\nSo I coded the directive plugin. It has the following characteristics:\n\n- It reads the specified file and puts it into the node content.\n\n- If the @read-only directive was in the leo outline already, and the file content\n  on disk has changed from what is stored in the outline, it marks the node as\n  changed and prints a \"changed\" message to the log window; if, on the other hand,\n  the file content has _not_ changed, the file is simply read and the node is\n  not marked as changed.\n\n- When you write a @read-only directive, the file content is added to the node\n  immediately, i.e. as soon as you press Enter (no need to call a menu\n  entry to import the content).\n\n- If you want to refresh/update the content of the file, just edit the headline\n  and press Enter. The file is reloaded, and if in the meantime it has changed,\n  a \"change\" message is sent to the log window.\n\n- The body text of a @read-only file cannot be modified in leo.\n\nThe syntax to access files in @read-only via ftp/http is the following::\n\n    @read-only http://www.ietf.org/rfc/rfc0791.txt\n    @read-only ftp://ftp.someserver.org/filepath\n\nIf FTP authentication (username/password) is required, it can be specified as follows::\n\n    @read-only ftp://username:password@ftp.someserver.org/filepath\n\nFor more details, see the doc string for the class FTPurl.\n\nDavide Salomoni\n\n", "children": []}, {"h": "run_nodes.py", "gnx": "ekr.20101113063552.9462", "b": "Runs a program and interface Leos through its input/output/error streams.\n\nDouble clicking the icon box whose headlines are @run 'cmd args' will execute\nthe command. There are several other features, including @arg and @input nodes.\n\nThe run_nodes.py plugin introduce two new nodes that transform leo into a\nterminal. It was mostly intended to run compilers and debuggers while having the\npossibility to send messages to the program.\n\nDouble clicking on the icon of an node whose headline is @run <command> <args>\nwill launch <command> with the given arguments. It will also mark the node. #\nTerminates the argument list. @run # <comment> is also valid.\n\n@in nodes are used to send input to the running process. Double clicking on\nthe icon of an @in <message> node will append a \"\\n\" to <message> and write it\nto the program, no matter where the node is placed. If no @run node is active,\nnothing happens.\n\nThe body text of every child, in which the headlines do not begin with '@run'\nor '@in', will be appended to <command>, allowing you to add an unlimited number\nof arguments to <command>.\n\nThe output of the program is written in the log pane (Error output in red).\nWhen the program exit the node is set unmarked and the return value is\ndisplayed... When the enter key is pressed in the body pane of an active @run\nnode the content of it body pane is written to the program and then emptied\nready for another line of input. If the node have @run nodes in its descendants,\nthey will be launched successively. (Unless one returned an exit code other\nthan 0, then it will stop there)\n\nBy Alexis Gendron Paquette. Please send comments to the Leo forums.\n\n", "children": []}, {"h": "startfile.py", "gnx": "ekr.20101113063552.9464", "b": "Launches (starts) a file given by a headline when double-clicking the icon.\n\nThis plugin ignores headlines starting with an '@'. Uses the @folder path if the\nheadline is under an @folder headline. Otherwise the path is relative to the Leo\nfile.\n\n", "children": []}, {"h": "xsltWithNodes.py", "gnx": "ekr.20101113063552.9466", "b": "Adds the Outline:XSLT menu containing XSLT-related commands.\n\nThis menu contains the following items:\n\n- Set StyleSheet Node:\n    - Selects the current node as the xsl stylesheet the plugin will use.\n\n- Process Node with Stylesheet Node:\n    - Processes the current node as an xml document,\n      resolving section references and Leo directives.\n    - Creates a sibling containing the results.\n\nRequires 4Suite 1.0a3 or better, downloadable from http://4Suite.org.\n\n", "children": []}, {"h": "Scripting", "gnx": "ekr.20101113063552.9467", "b": "", "children": ["ekr.20050912125735.363", "ekr.20101113063552.9468", "ekr.20101113063552.9469", "ekr.20101113063552.9470"]}, {"h": "dyna_menu", "gnx": "ekr.20050912125735.363", "b": "The dyna_menu plugin is a remarkable body of work by 'e'.\nThis plugin creates a dyna_menu menu from which you can execute commands.\nYou may download the latest version at: http://rclick.netfirms.com/dyna_menu.py.html\n", "children": []}, {"h": "leoscreen.py", "gnx": "ekr.20101113063552.9468", "b": "Allows interaction with shell apps via screen.\n\nAnalysis environments like SQL, R, scipy, ipython, etc. can be\nused by pasting sections of text from an editor (Leo) and a\nshell window.  Results can be pasted back into the editor.\n\nThis plugin streamlines the process by communicating with ``screen``,\nthe shell multiplexer\n\n**Commands**\n\nleoscreen-run-text\n  Send the text selected in Leo's body text to the shell app.\n  Selects the next line for your convenience.\n\nleoscreen-get-line\n  Insert a line of the last result from the shell into Leo's body text\n  at the current insert point.  Lines are pulled one at a time starting\n  from the end of the output.  Can be used repeatedly to get the\n  output you want into Leo.\n\nleoscreen-get-all\n  Insert all of the last result from the shell into Leo's body text\n  at the current insert point.\n\nleoscreen-get-note\n  Insert all of the last result from the shell into a new child node of\n  the current node.\n\nleoscreen-show-all\n  Show the output from the last result from the shell in a temporary\n  read only window. **Important**: The output is not stored.\n\nleoscreen-show-note\n  Insert all of the last result from the shell into a new child node of\n  the current node and display that node a a stickynote (requires stickynote\n  plugin).\n\nleoscreen-next\n  Switch screen session to next window.\n\nleoscreen-prev\n  Switch screen session to preceding window.\n\nleoscreen-other\n  Switch screen session to last window displayed.\n\nleoscreen-get-prefix\n  Interactively get prefix for inserting text into body (#, --, //, etc/)\n  Can also set using::\n\n      c.leo_screen.get_line_prefix = '#'\n\nleoscreen-more-prompt\n  Skip one less line at the end of output when fetching output into Leo.\n  Adjusts lines skipped to avoid pulling in the applications prompt line.\n\nleoscreen-less-prompt\n  Skip one more line at the end of output when fetching output into Leo\n  Adjusts lines skipped to avoid pulling in the applications prompt line.\n\n**Settings**\n\nleoscreen_prefix\n  Prepended to output pulled in to Leo. The substring SPACE in this\n  setting will be replaced with a space character, to allow for trailing\n  spaces.\n\nleoscreen_time_fmt\n  time.strftime format for note type output headings.\n\n**Theory of operation**\n\nleoscreen creates a instance at c.leo_screen which has some methods which might\nbe useful in ``@button`` and other Leo contexts.\n\n**Example SQL setup**\n\nIn a Leo file full of interactive SQL analysis, I have::\n\n    @settings\n        @string leoscreen_prefix = --SPACE\n    @button rollback\n        import time\n        c.leo_screen.run_text('ROLLBACK;  -- %s\\n' % time.asctime())\n    @button commit\n        import time\n        cmd = 'COMMIT;  -- %s' % time.asctime()\n        c.leo_screen.run_text(cmd)\n        c.leo_screen.insert_line(cmd)\n\nwhich creates a button to rollback messed up queries, another to commit\n(requiring additional action to supply the newline as a safeguard) and\nsets the prefix to \"-- \" for text pulled back from the SQL session into\nLeo.\n\n**Implementation note**: screen behave's differently if screen -X is executed\nwith the same stdout as the target screen, vs. a different stdout. Although\nstdout is ignored, Popen() needs to ensure it's not just inherited.\n\n", "children": []}, {"h": "mod_scripting.py", "gnx": "ekr.20101113063552.9469", "b": "Creates script buttons and @button, @command, @plugin and @script\nnodes.\n\nThis plugin puts buttons in the icon area. Depending on settings the plugin will\ncreate the 'Run Script', the 'Script Button' and the 'Debug Script' buttons.\n\nThe 'Run Script' button is simply another way of doing the Execute Script\ncommand: it executes the selected text of the presently selected node, or the\nentire text if no text is selected.\n\nThe 'Script Button' button creates *another* button in the icon area every time\nyou push it. The name of the button is the headline of the presently selected\nnode. Hitting this *newly created* button executes the button's script.\n\nFor example, to run a script on any part of an outline do the following:\n\n1.  Select the node containing the script.\n2.  Press the scriptButton button.  This will create a new button.\n3.  Select the node on which you want to run the script.\n4.  Push the *new* button.\n\nThat's all.\n\nFor every @button node, this plugin creates two new minibuffer commands: x and\ndelete-x-button, where x is the 'cleaned' name of the button. The 'x' command is\nequivalent to pushing the script button.\n\nYou can specify **global buttons** in leoSettings.leo or myLeoSettings.leo by\nputting \\@button nodes as children of an @buttons node in an \\@settings trees.\nSuch buttons are included in all open .leo (in a slightly different color).\nActually, you can specify global buttons in any .leo file, but \\@buttons nodes\naffect all later opened .leo files so usually you would define global buttons in\nleoSettings.leo or myLeoSettings.leo.\n\nThe cleaned name of an @button node is the headline text of the button with:\n\n- Leading @button or @command removed,\n- @key and all following text removed,\n- @args and all following text removed,\n- all non-alphanumeric characters converted to a single '-' characters.\n\nThus, cleaning headline text converts it to a valid minibuffer command name.\n\nYou can delete a script button by right-clicking on it, or by\nexecuting the delete-x-button command.\n\nThe 'Debug Script' button runs a script using an external debugger.\n\nThis plugin optionally scans for @button nodes, @command, @plugin nodes and\n@script nodes whenever a .leo file is opened.\n\n- @button nodes create script buttons.\n- @command nodes create minibuffer commands.\n- @plugin nodes cause plugins to be loaded.\n- @script nodes cause a script to be executed when opening a .leo file.\n\nSuch nodes may be security risks. This plugin scans for such nodes only if the\ncorresponding atButtonNodes, atPluginNodes, and atScriptNodes constants are set\nto True in this plugin.\n\nYou can specify the following options in leoSettings.leo.  See the node:\n@settings-->Plugins-->scripting plugin.  Recommended defaults are shown::\n\n    @bool scripting-at-button-nodes = True\n    True: adds a button for every @button node.\n\n    @bool scripting-at-commands-nodes = True\n    True: define a minibuffer command for every @command node.\n\n    @bool scripting-at-plugin-nodes = False\n    True: dynamically loads plugins in @plugins nodes when a window is created.\n\n    @bool scripting-at-script-nodes = False\n    True: dynamically executes script in @script nodes when a window is created.\n    This is dangerous!\n\n    @bool scripting-create-debug-button = False\n    True: create Debug Script button.\n\n    @bool scripting-create-run-script-button = False\n    True: create Run Script button.\n    Note: The plugin creates the press-run-script-button regardless of this setting.\n\n    @bool scripting-create-script-button-button = True\n    True: create Script Button button in icon area.\n    Note: The plugin creates the press-script-button-button regardless of this setting.\n\n    @int scripting-max-button-size = 18\n    The maximum length of button names: longer names are truncated.\n\nYou can bind key shortcuts to @button and @command nodes as follows.\n\n@button name @key=shortcut\n\n    Binds the shortcut to the script in the script button. The button's name is\n    'name', but you can see the full headline in the status line when you move the\n    mouse over the button.\n\n@command name @key=shortcut\n\n    Creates a new minibuffer command and binds shortcut to it. As with @buffer\n    nodes, the name of the command is the cleaned name of the headline.\n\nThis plugin is based on ideas from e's dynabutton plugin, quite possibly the\nmost brilliant idea in Leo's history.\n\nYou can run the script with sys.argv initialized to string values using @args.\nFor example:\n\n@button test-args @args = a,b,c\n\nwill set sys.argv to [u'a',u'b',u'c']\n\n", "children": []}, {"h": "script_io_to_body.py", "gnx": "ekr.20101113063552.9470", "b": "Sends output from the Execute Script command to the end of the body pane.\n\n", "children": []}, {"h": "Servers", "gnx": "ekr.20101113063552.9471", "b": "", "children": ["ekr.20101113063552.9472", "ekr.20101113063552.9473"]}, {"h": "leoremote.py", "gnx": "ekr.20101113063552.9472", "b": "Remote control for Leo.\n\nExample client::\n\n    from leo.external import lproto\n    import os\n\n\n    addr = open(os.path.expanduser('~/.leo/leoserv_sockname')).read()\n    print(\"will connect to\",addr)\n    pc  = lproto.LProtoClient(addr)\n    pc.send(\"\"\"\n        g.es(\"hello world from remote\") \n        c = g.app.commanders()[0]\n    \"\"\")\n\n    # note how c persists between calls\n    pc.send(\"\"\"c.k.simulateCommand('stickynote')\"\"\")\n\n", "children": []}, {"h": "mod_http.py", "gnx": "ekr.20101113063552.9473", "b": "A minimal http plugin for LEO, based on AsyncHttpServer.py.\n\nUse this plugin is as follows:\n\n1. Start Leo with the plugin enabled. You will see a purple message that says\n   something like::\n\n    \"http serving enabled on port 8080, version 0.91\"\n\n2. Start a web browser, and enter the following url: http://localhost:8080/\n\nYou will see a a \"top\" level page containing one link for every open .leo file.\nStart clicking :-)\n\nYou can use the browser's refresh button to update the top-level view in the\nbrowser after you have opened or closed files.\n\nTo enable this plugin put this into your file::\n\n    @settings\n        @bool http_active = True\n        @int  port = 8080\n        @string rst_http_attributename = 'rst_http_attribute'\n\n**Note**: the browser_encoding constant (defined in the top node of this file)\nmust match the character encoding used in the browser. If it does not, non-ascii\ncharacters will look strange.\n\n", "children": []}, {"h": "Slideshows and screenshots", "gnx": "ekr.20101113063552.9474", "b": "", "children": ["ekr.20101113063552.9475", "ekr.20101113063552.9463"]}, {"h": "screenshots.py", "gnx": "ekr.20101113063552.9475", "b": "Creates stand-alone slideshows containing screenshots.\n\nThis plugin defines five commands. The\n**apropos-slides** command prints this message to\nLeo's log pane. The **slide-show-info** command\nprints the settings in effect.\n\nThe **make-slide** and **make-slide-show**\ncommands, collectively called **slide commands**,\ncreate collections of slides from **@slideshow**\ntrees containing **@slide** nodes.\n\nSlides may link to screenshots. The slide commands\ncan generate screenshots from **@screenshot-tree**\nnodes, but this feature has proven to be clumsy\nand inflexible. It is usually more convenient to\nuse screenshots taken with a program such as Wink.\nThe **meld-slides** command creates references to\nexternally-generated screenshots within @slide\nnodes.\n\n\\@slide nodes may contain **@url nodes**. These @url\nnodes serve two purposes. First, they allow you to\nsee various files (slides, initial screenshots,\nworking files and final screenshots). Second,\nthese @url nodes guide the meld script and the\nfour commands defined by this plugin (see below).\nBy inserting or deleting these @url nodes you (or\nyour scripts) can customize how the commands (and\nmeld) work. In effect, the @url nodes become\nper-slide settings.\n\n**Prerequisites**\n\nInkscape (Required)\n  An SVG editor: http://www.inkscape.org/\n  Allows the user to edit screenshots.\n  Required to create final output (PNG) files.\n\nPIL (Optional but highly recommended)\n  The Python Imaging Library,\n  http://www.pythonware.com/products/pil/\n\nWink (Optional)\n  A program that creates slideshows and slides.\n  http://www.debugmode.com/wink/\n\n**Summary**\n\n@slideshow <slideshow-name>\n  Creates the folder:\n  <sphinx_path>/slides/<slideshow-name>\n\n@slide <ignored text>\n  Creates slide-<slide-number>.html\n  (in the sphinx _build directory).\n  **Note**: the plugin skips any @slide nodes\n  with empty body text.\n\n@screenshot\n  Specifies the contents of the screenshot.\n\n**Options** are child nodes of @slideshow or\n\\@slide nodes that control the make-slide and\nmake-slide-show commands. See the Options section\nbelow.\n\nThe make-slide and make-slide-show commands\ncreate the following @url nodes as children\nof each @slide node:\n\n@url built slide\n  Contains the absolute path to the final slide in\n  the _build/html subfolder of the slideshow\n  folder. If present, this @url node completely\n  disables rebuilding the slide.\n\n@url screenshot\n  Contains the absolute path to the original\n  screenshot file. If present, this @url node\n  inhibits taking the screenshot.\n\n@url working file\n  Contains the absolute path to the working file.\n  If present, this @url node disables taking the\n  screenshot, creating the working file. The final\n  output file will be regenerated if the working\n  file is newer than the final output file.\n\n@url final output file\n  Contains the absolute path to the final output\n  file.\n\nThus, to completely recreate an @slide node, you\nmust delete any of the following nodes that appear\nas its children::\n\n    @url screenshot\n    @url working file\n    @url built slide\n\n**Making slides**\n\nFor each slide, the make-slide and make-slide-show\ncommands do the following:\n\n1. Create a slide.\n\n  If the @slide node contains an @screenshot tree,\n  the plugin appends an ``.. image::`` directive\n  referring to the screenshot to the body text of\n  the @slide node. The plugin also creates a child\n  @image node referring to the screenshot.\n\n2. (Optional) Create a screenshot.\n\n  The plugin creates a screenshot for an @slide\n  node only if the @slide node contains an\n  @screenshot node as a direct child.\n\n  **Important**: this step has largely been\n  superseded by the ``@button meld`` script in\n  LeoDocs.leo.\n\n  Taking a screenshot involves the following steps:\n\n  A. Create the **target outline**: screenshot-setup.leo.\n\n    The target outline contains consists of all\n    the children (and their descendants) of the\n    @screenshot node.\n\n  B. Create the **screenshot**, a bitmap (PNG) file.\n\n    The slide commands take a screen shot of the\n    target outline. The @pause option opens the\n    target outline but does *not* take the\n    screenshot. The user must take the screenshot\n    manually. For more details, see the the\n    options section below.\n\n  C. Convert the screenshot file to a **work file**.\n\n    The work file is an SVG (Scalable Vector\n    Graphics) file: http://www.w3.org/Graphics/SVG/.\n\n  D. (Optional) Edit the work file.\n\n    If the @slide node has a child @edit node, the\n    plugin opens Inkscape so that the user can\n    edit the work file.\n\n  E. Render the **final output file**.\n\n    The plugin calls Inkscape non-interactively to\n    render the final output file (a PNG image)\n    from the work file. If the Python Imaging\n    Library (PIL) is available, this step will use\n    PIL to improve the quality of the final output\n    file.\n\n3. Build the slide using Sphinx.\n\n  After making all files, the plugins runs Sphinx\n  by running 'make html' in the slideshow folder.\n  This command creates the final .html files in the\n  _build/html subfolder of the slideshow folder.\n\n4. Create url nodes.\n\n  Depending on options, and already-existing @url\n  nodes, the make-slide and make-slide-show\n  commands may create one or more of the following\n  \\@url nodes::\n\n    @url built slide\n    @url screenshot\n    @url working file \n    @url final output file\n\n**Options and settings**\n\nYou specify options in the headlines of nodes.\n**Global options** appear as direct children of\n\\@slideshow nodes and apply to all @slide nodes\nunless overridden by a local option. **Local\noptions** appear as direct children of an @slide\nnode and apply to only to that @slide node.\n\n**Global options nodes**\n\nThe following nodes may appear *either* as a\ndirect child of the @slideshow node or as the\ndirect child of an @slide node.\n\n@sphinx_path = <path>\n  This directory contains the slides directory,\n  and the following files: 'conf.py',\n  'Leo4-80-border.jpg', 'Makefile' and 'make.bat'.\n\n@screenshot_height = <int>\n  The height in pixels of screenshots.\n\n@screenshot_width = <int>\n  The height in pixels of screenshots.\n\n@template_fn = <path>\n  The absolute path to inkscape-template.svg\n\n@title = <any text>\n  The title to use for one slide or the entire\n  slideshow.\n\n@title_pattern = <pattern>\n  The pattern used to generate patterns for one\n  slide or the entire slideshow. The title is\n  computed as follows::\n\n    d = {\n        'slideshow_name':slideshow_name,\n        'slide_name':    slide_name,\n        'slide_number':  sc.slide_number,\n    }\n    title = (pattern % (d)).title()\n\n  If neither an @title or @title_pattern option\n  node applies, the title is the headline of the\n  \\@slide node. If this is empty, the default\n  pattern is::\n\n    '%(slideshow_name)s:%(slide_number)s'\n\n\\@verbose = True/False\n  True (or true or 1):  generate informational message.\n  False (or false or 0): suppress informational messages.\n\n\\@wink_path = <path>\n  This path contains screenshots created by wink.\n  This is used only by the meld-slides command.\n\n**Local options nodes**\n\nThe following nodes are valid only as the direct\nchild of an @slide node.\n\n@callout <any text>\n  Generates a text callout in the working .svg file.\n  An @slide node may have several @callout children.\n\n@edit = True/False\n  If True (or true or 1) the plugin enters\n  Inkscape interactively after taking a\n  screenshot.\n\n@markers = <list of integers>\n  Generates 'numbered balls' in the working .svg file.\n\n@pause = True/False\n  If True (or true or 1) the user must take the\n  screenshot manually. Otherwise, the plugin takes\n  the screenshot automatically.\n\n  If the slide node contains an @pause node as one\n  of its directive children, the slide commands\n  open the target node, but do *not* take a screen\n  shot.\n\n  The user may adjust the screen as desired, for\n  example by selecting menus or showing dialogs.\n  The *user* must then take the screen shot\n  manually. **Important**: the screenshot need not\n  be of Leo--it could be a screenshot of anything\n  on the screen.\n\n  As soon as the user closes the target\n  outline, the slide commands look for the screen\n  shot on the clipboard. If found, the slide\n  commands save the screenshot to the screenshot\n  file.\n\n@screenshot\n  The root of a tree that becomes the entire\n  contents of screenshot. No screenshot is taken\n  if this node does not exist.\n\n@select <headline>\n  Causes the given headline in the @screenshot\n  outline to be selected before taking the screenshot.\n\n**Settings**\n\n@string screenshot-bin = <path to inkscape.exe>\n  The full path to the Inkscape program.   \n\n**File names**\n\nSuppose the @slide node is the n'th @slide node in\nthe @slideshow tree whose sanitized name is\n'name'. The following files will be created in\n(relative to) the slideshow directory::\n\n    slide-n.html.txt:   the slide's rST source.\n    screenshot-n.png:   the original screenshot.\n    screenshot-n.svg:   the working file.\n    slide-n.png:        the final output file.\n    _build/html/slide-n.html: the final slide.\n\n", "children": []}, {"h": "slideshow.py", "gnx": "ekr.20101113063552.9463", "b": "Support slideshows in Leo outlines.\n\nThis plugin defines four new commands:\n\n- next-slide-show:  move to the start of the next slide show,\n  or the first slide show if no slide show has been seen yet.\n- prev-slide-show:  move to the start of the previous slide show,\n  or the first slide show if no slide show has been seen yet.\n- next-slide: move to the next slide of a present slide show.\n- prev-slide: move to the previous slide of the present slide show.\n\nSlides shows consist of a root @slideshow node with descendant @slide nodes.\n@slide nodes may be organized via non-@slide nodes that do not appear in the slideshow.\n\nAll these commands ignore @ignore trees.\n\n", "children": []}, {"h": "Text formatting", "gnx": "ekr.20101113063552.9476", "b": "", "children": ["ekr.20101113063552.9477", "ekr.20101113063552.9478", "ekr.20101113063552.9800", "ekr.20101113063552.9480"]}, {"h": "bibtex.py", "gnx": "ekr.20101113063552.9477", "b": "Manages BibTeX files with Leo.\n\nCreate a bibliographic database by\nputting '@bibtex filename' in a headline. Entries are added as nodes, with\n'@entrytype key' as the headline, and the contents of the entry in body text.\nThe plugin will automatically insert a template for the entry in the body pane\nwhen a new entry is created (hooked to pressing enter when typing the headline\ntext). The templates are defined in dictionary 'templates' in the \\<\\<globals\\>\\>\nsection, by default containing all required fields for every entry.\n\nThe file is written by double-clicking the node. Thus the following outline::\n\n    -@bibtex biblio.bib\n     +@book key\n      author = {A. Uthor},\n      year = 1999\n\nwill be written in the file 'biblio.bib' as::\n\n    @book{key,\n    author = {A. Uthor},\n    year= 1999}\n\nStrings are defined in @string nodes and they can contain multiple entries.\nAll @string nodes are written at the start of the file. Thus the following\noutline::\n\n    -@bibtext biblio.bib\n     +@string\n      j1 = {Journal1}\n     +@article AUj1\n      author = {A. Uthor},\n      journal = j1\n     +@string\n      j2 = {Journal2}\n      j3 = {Journal3}\n\nWill be written as::\n\n    @string{j1 = {Journal1}}\n    @string{j2 = {Journal2}}\n    @string{j3 = {Journal3}}\n\n    @article{AUj1,\n    author = {A. Uthor},\n    journal = j1}\n\nNo error checking is made on the syntax. The entries can be organized under\nnodes --- if the headline doesn't start with '@', the headline and body text are\nignored, but the child nodes are parsed as usual.\n\nBibTeX files can be imported by creating an empty node with '@bibtex filename'\nin the headline. Double-clicking it will read the file 'filename' and parse it\ninto a @bibtex tree. No syntax checking is made, 'filename' is expected to be a\nvalid BibTeX file.\n\n", "children": []}, {"h": "dtest.py", "gnx": "ekr.20101113063552.9478", "b": "Sends code to the doctest module and reports the result.\n\nWhen the Dtest plugin is enabled, the ``dtest`` command is active.\nTyping:: \n\n    Alt-X dtest\n\nwill run doctest on a file consisting of the current node and it's children.\nIf text is selected only the selection is tested.\n\nFrom Wikipedia::\n\n    'Doctest' is a module included in the Python programming language's \n    standard library that allows for easy generation of tests based on \n    output from the standard Python interpreter.\n\nhttp://tinyurl.com/cqh53 - Python.org doctest page    \n\nhttp://tinyurl.com/pxhlq - Jim Fulton's presentation::\n\n    Literate Testing:\n    Automated Testing with doctest\n\n", "children": []}, {"h": "leo_to_html.py", "gnx": "ekr.20101113063552.9800", "b": "Converts a leo outline to an html web page.\n\nThis plugin takes an outline stored in LEO and converts it to html which is then\neither saved in a file or shown in a browser. It is based on the original\nleoToHTML 1.0 plugin by Dan Rahmel which had bullet list code by Mike Crowe.\n\nThe outline can be represented as a bullet list, a numbered list or using html\n<h?> type headings. Optionally, the body text may be included in the output.\n\nIf desired, only the current node will be included in the output rather than\nthe entire outline.\n\nAn xhtml header may be included in the output, in which case the code will be\nvalid XHTML 1.0 Strict.\n\nThe plugin is fully scriptable as all its functionality is available through a\nLeo_to_HTML object which can be imported and used in scripts.\n\n**Menu items and @settings**\n\nIf this plugin loads properly, the following menu items should appear in\nyour File > Export... menu in Leo::\n\n    Save Outline as HTML  (equivalent to export-html)\n    Save Node as HTML     (equivalent to export-html-node)\n    Show Outline as HTML  (equivalent to show-html)\n    Show Node as HTML     (equivalent to show-html-node)\n\n*Unless* the following appears in an @setting tree::\n\n    @bool leo_to_html_no_menus = True\n\nin which case the menus will **not** be created. This is so that the user can\nuse @menu and @item to decide which commands will appear in the menu and where.\n\n**Commands**\n\nSeveral commands will also be made available\n\nexport-html\n  will export to a file according to current settings.\nexport-html-*\n  will export to a file using bullet type '*' which can be\n  **number**, **bullet** or **head**.\n\nThe following commands will start a browser showing the html.\n\nshow-html\n  will show the outline according to current settings.\n\nshow-html-*\n  will show the outline using bullet type '*' which can be\n  **number**, **bullet** or **head**.\n\nThe following commands are the same as above except only the current node is converted::\n\n    export-html-node\n    export-html-node-*\n    show-html-node\n    show-html-node-*\n\n**Properties**\n\nThere are several settings that can appear in the leo_to_html.ini properties\nfile in leo's plugins folder or be set via the Plugins > leo_to_html >\nProperties... menu. These are:\n\nexportpath:\n    The path to the folder where you want to store the generated html file.\n    Default: c:\\\\\n\nflagjustheadlines:\n    Default: 'Yes' to include only headlines in the output.\n\nflagignorefiles:\n    Default: 'Yes' to ignore @file nodes.\n\nuse_xhtml:\n    Yes to include xhtml doctype declarations and make the file valid XHTML 1.0 Strict.\n    Otherwise only a simple <html> tag is used although the output will be xhtml\n    compliant otherwise. Default: Yes\n\nbullet_type:\n    If this is 'bullet' then the output will be in the form of a bulleted list.\n    If this is 'number' then the output will be in the form of a numbered list.\n    If this is 'heading' then the output will use <h?> style headers.\n\n    Anything else will result in <h?> type tags being used where '?' will be a\n    digit starting at 1 and increasing up to a maximum of six depending on depth\n    of nesting. Default: number\n\nbrowser_command:\n    Set this to the command needed to launch a browser on your system or leave it blank\n    to use your systems default browser.\n\n    If this is an empty string or the browser can not be launched using this command then\n    python's `webbrowser` module will be tried. Using a bad command here will slow down the\n    launch of the default browser, better to leave it blank.\n    Default: empty string\n\n**Configuration**\n\nAt present, the file leo/plugins/leo_to_html.ini contains configuration\nsettings. In particular, the default export path, \"c:\\\" must be changed for \\*nix\nsystems.\n\n", "children": []}, {"h": "leo_to_rtf.py", "gnx": "ekr.20101113063552.9480", "b": "Outputs a Leo outline as a numbered list to an RTF file. The RTF file can be\nloaded into Microsoft Word and formatted as a proper outline.\n\nIf this plug-in loads properly, you should have an \"Outline to Microsoft RTF\"\noption added to your File > Export... menu in Leo.\n\nSettings such as outputting just the headlines (vs. headlines & body text) and whether\nto include or ignore the contents of @file nodes are stored in the rtf_export.ini file\nin your Leo\\plugins folder.\n\nThe default export path is also stored in the INI file. By default, it's set to c:\\ so\nyou may need to modify it depending on your system.\n\n", "children": []}, {"h": "User interface", "gnx": "ekr.20101113063552.9482", "b": "", "children": ["ekr.20101113063552.9483", "ekr.20101113063552.9484", "ekr.20101113063552.9485", "ekr.20101113063552.9486", "ekr.20101113063552.9487", "ekr.20101113063552.9488", "ekr.20101113063552.9489", "ekr.20101113063552.9794", "ekr.20101113063552.9491", "ekr.20101113063552.9492", "ekr.20101113063552.9493"]}, {"h": "UNL.py", "gnx": "ekr.20101113063552.9483", "b": "Supports Uniform Node Locators (UNL's) for linking to nodes in any Leo file.\n\nUNL's specify nodes within any Leo file. You can use them to create\ncross-Leo-file links! UNL\n\nThis plugin consists of two parts:\n\n1) Selecting a node shows the UNL in the status line at the bottom of the Leo\n   window. You can copy from the status line and paste it into headlines, emails,\n   whatever. \n\n2) Double-clicking @url nodes containing UNL's select the node specified in the\n   UNL. If the UNL species in another Leo file, the other file will be opened.\n\nFormat of UNL's:\n\nUNL's referring to nodes within the present outline have the form::\n\n    headline1-->headline2-->...-->headlineN\n\nheadline1 is the headline of a top-level node, and each successive headline is\nthe headline of a child node.\n\nUNL's of the form::\n\n    file:<path>#headline1-->...-->headlineN\n\nrefer to a node specified in <path> For example, double clicking the following\nheadline will take you to Chapter 8 of Leo's Users Guide::\n\n    @url file:c:/prog/leoCvs/leo/doc/leoDocs.leo#Users Guide-->Chapter 8: Customizing Leo\n\nFor example, suppose you want to email someone with comments about a Leo file.\nCreate a comments.leo file containing @url UNL nodes. That is, headlines are\n@url followed by a UNL. The body text contains your comments about the nodes in\nthe _other_ Leo file! Send the comments.leo to your friend, who can use the\ncomments.leo file to quickly navigate to the various nodes you are talking\nabout. As another example, you can copy UNL's into emails. The recipient can\nnavigate to the nodes 'by hand' by following the arrows in the UNL.\n\n**Notes**:\n\n- At present, UNL's refer to nodes by their position in the outline. Moving a\n  node will break the link.\n\n- Don't refer to nodes that contain UNL's in the headline. Instead, refer to the\n  parent or child of such nodes.\n\n- You don't have to replace spaces in URL's or UNL's by '%20'.\n\n", "children": []}, {"h": "chapter_hoist.py", "gnx": "ekr.20101113063552.9484", "b": "Creates hoist buttons.\n\nThis plugin puts two buttons in the icon area: a button called 'Save Hoist' and\na button called 'Dehoist'. The 'Save Hoist' button hoists the presently selected\nnode and creates a button which can later rehoist the same node. The 'Dehoist'\nbutton performs one level of dehoisting\n\nRequires at least version 0.19 of mod_scripting.\n\n", "children": []}, {"h": "detect_urls.py", "gnx": "ekr.20101113063552.9485", "b": "Colorizes URLs everywhere in node's body on node selection or saving. Double\nclick on any URL launches it in default browser.\n\nURL regex:  (http|https|file|ftp)://[^\\s'\"]+[\\w=/]\n\nRelated plugins:  color_markup.py; rClick.py\n\n", "children": []}, {"h": "EditAttributes.py", "gnx": "ekr.20101113063552.9486", "b": "Lets the user to associate text with a specific node.\n\nSummon it by pressing button-2 or button-3 on an icon Box in the outline. This\nwill create an attribute editor where the user can add, remove and edit\nattributes. Since attributes use the underlying tnode, clones will share the\nattributes of one another.\n\n", "children": []}, {"h": "interact.py", "gnx": "ekr.20101113063552.9487", "b": "Adds buttons so Leo can interact with command line environments.\n\n:20100226: see also leoscreen.py for a simpler approach.\n\nCurrently implements `bash` shell and `psql` (postresql SQL db shell).\n\nSingle-line commands can be entered in the headline with a blank body,\nmulti-line commands can be entered in the body with a descriptive\ntitle in the headline.  Press the `bash` or `psql` button to send\nthe command to the appropriate interpreter.\n\nThe output from the command is **always** stored in a new node added\nas the first child of the command node.  For multi-line commands\nthis new node is selected.  For single-line command this new node\nis not shown, instead the body text of the command node is updated\nto reflect the most recent output.  Comment delimiter magic is used\nto allow single-line and multi-line commands to maintain their\nsingle-line and multi-line flavors.\n\nBoth the new child nodes and the updated body text of single-line\ncommands are timestamped.\n\nFor the `bash` button the execution directory is either the directory\ncontaining the `.leo` file, or any other path as specified by ancestor\n`@path` nodes.\n\nCurrently the `psql` button just connects to the default database.  \";\"\nis required at the end of SQL statements.\n\nRequires `pexpect` module.\n\n", "children": []}, {"h": "maximizeNewWindows.py", "gnx": "ekr.20101113063552.9488", "b": "Maximizes all new windows.\n\n", "children": []}, {"h": "mod_framesize.py", "gnx": "ekr.20101113063552.9489", "b": "Sets a hard coded frame size.\n\nPrevents Leo from setting custom frame size (e.g. from an external .leo\ndocument)\n\n", "children": []}, {"h": "plugins_menu.py", "gnx": "ekr.20101113063552.9794", "b": "Creates a Plugins menu and adds all actives plugins to it.\n\nSelecting these menu items will bring up a short **About Plugin** dialog\nwith the details of the plugin. In some circumstances a submenu will be created\ninstead and an 'About' menu entry will be created in this.\n\n**INI files and the Properties Dialog**\n\nIf a file exists in the plugins directory with the same file name as the plugin\nbut with a .ini extension instead of .py, then a **Properties** item will be\ncreated in a submenu. Selecting this item will pop up a Properties Dialog which\nwill allow the contents of this file to be edited.\n\nThe .ini file should be formated for use by the python ConfigParser class.\n\n**Special Methods**\n\nCertain methods defined at the top level are considered special.\n\ncmd_XZY\n    If a method is defined at the module level with a name of the form\n    **cmd_XZY** then a menu item **XZY** will be created which will invoke\n    **cmd_XZY** when it is selected. These menus will appear in a sub menu.\n\napplyConfiguration\n\ntopLevelMenu\n    This method, if it exists, will be called when the user clicks on the plugin\n    name in the plugins menu (or the **About** item in its submenu), but only if\n    the plugin was loaded properly and registered with g.plugin_signon.\n\n**Special Variable Names**\n\nSome names defined at the top level have special significance.\n\n__plugin_name__\n    This will be used to define the name of the plugin and will be used\n    as a label for its menu entry.\n\n__plugin_priority__\n    Plugins can also attempt to select the order they will appear in the menu by\n    defining a __plugin_prioriy__. The menu will be created with the highest\n    priority items first. This behavior is not guaranteed since other plugins\n    can define any priority. This priority does not affect the order of calling\n    handlers.\n    To change the order select a number outside the range 0-200 since this range\n    is used internally for sorting alphabetically. Properties and INI files.\n\n", "children": []}, {"h": "redirect_to_log.py", "gnx": "ekr.20101113063552.9491", "b": "Sends all output to the log pane.\n\n", "children": []}, {"h": "scripts_menu.py", "gnx": "ekr.20101113063552.9492", "b": "Creates a Scripts menu for LeoPy.leo.\n\n", "children": []}, {"h": "zenity_file_dialogs.py", "gnx": "ekr.20101113063552.9493", "b": "Replaces the gui file dialogs on Linux with external\ncalls to the zenity gtk dialog package.\n\nThis plugin is more a proof of concept demo than\na useful tool.  The dialogs presented do not take\nfilters and starting folders can not be specified.\n\nDespite this, some Linux users might prefer it to the\ngui dialogs.\n\n", "children": []}, {"h": "Qt only plugins", "gnx": "ekr.20101113063552.9399", "b": "", "children": ["ekr.20101113063552.9400", "ekr.20101113063552.9401", "ekr.20101113063552.9402", "ekr.20101113063552.9403", "ekr.20101113063552.9404", "ekr.20101113063552.9405", "ekr.20101113063552.9406", "ekr.20101113063552.9407", "ekr.20101113063552.9408", "ekr.20101113063552.9409", "ekr.20101113063552.9410", "ekr.20101113063552.9411"]}, {"h": "attrib_edit.py", "gnx": "ekr.20101113063552.9400", "b": "Edits user attributes in a Qt frame.\n\nThis plugin creates a frame for editing attributes similar to::\n\n    Name:   Fred Blogs\n    Home:   555-555-5555\n    Work:   555-555-5556\n\n``attrib_edit`` is also intended to provide attribute editing for\nother plugins, see below.\n\nThe attributes can be stored in different ways, three modes are implemented\ncurrently:\n\nv.u mode\n  These attributes are stored in the \"unknownAttributes\" (uA) data for\n  each node, accessed via v.u.\n\nField:\n  Attributes are lines starting (no whitespace) with \"AttributeName:\" in\n  the body text.\n\n@Child\n  Attributes are the head strings of child nodes when the head string\n  starts with '@AttributeName' where the first letter (second character)\n  must be capitalized.\n\nThe plugin defines the following commands, available either in the\nplugin's sub-menu in the Plugins menu, or as ``Alt-X attrib-edit-*``.\n\nattrib-edit-modes\n    Select which attribute setting / getting modes to use.  More than one mode\n    can be used at the same time.\n\n    You can also control which modes are active by listing them \n    with the @data attrib_edit_active_modes setting.  For example::\n\n        Field:\n        @Child\n        # v.u mode\n\n    would cause only the \"Field:\" and \"@Child\" modes to be active be default.\n\nattrib-edit-manage\n    Select which attributes, from all attributes seen so\n    far in this outline, to include on the current node.\n\nattrib-edit-scan\n    Scan the entire outline for attributes so ``attrib-edit-manage``\n    has the complete list.\n\nattrib-edit-create\n    Create a new attribute on the current node.  If Field: or \\@Child modes\n    are active, they simply remind you how to create an attribute in the log pane.\n    If the \"v.u mode\" mode is active, you're prompted for a path for the attribute.\n    For example::\n\n        addressbook First\n\n    to store the attribute in v.u['addressbook']['_edit']['First']\n\n    As a convenience, entering a path like::\n\n        todo metadata created|creator|revised\n\n    would create::\n\n        v.u.['todo']['metadata']['_edit']['created']\n        v.u.['todo']['metadata']['_edit']['creator']\n        v.u.['todo']['metadata']['_edit']['revised']\n\n\n**Technical details**\n\nSee the source for complete documentation for use with other\nplugins. Here are some points of interest:\n\n- In addition to ``v.u['addressbook']['_edit']['first']``, paths\n  like ``v.u['addressbook']['_edit']['_int']['age']`` may be used\n  to identify type, although currently there's no difference in\n  the edit widget.\n\n- In the future the plugin may allow other plugins to register\n  to provide attribute path information, instead of just\n  scanning for ['_edit'] entries in v.u.\n\n- Currently there's no sorting of the attributes in \"v.u mode\", which is\n  a problem for some applications.  It's unclear where the\n  desired order would be stored, without even more repetition\n  in v.u.  When other plugins can register to manipulate the\n  attribute list each plugin could address this, with unordered\n  presentation in the absence of the client plugin.\n\n- There's code to have the editor appear in a tab instead\n  of its own area under the body editor, but (a) this is\n  always being buried by output in the log window, and\n  (b) there's a bug which leaves some (harmless) ghost \n  widgets in the background.  Enable by @setting\n  ``attrib_edit_placement`` to 'tab'.\n\n", "children": []}, {"h": "colorize_headlines.py", "gnx": "ekr.20101113063552.9401", "b": "Manipulates appearance of individual tree widget items.\n\nThis plugin is mostly an example of how to change the appearance of headlines.\nAs such, it does a relatively mundane chore of highlighting @thin, @auto,\n@shadow nodes in bold.\n", "children": []}, {"h": "contextmenu.py", "gnx": "ekr.20101113063552.9402", "b": "Defines various useful actions for context menus (Qt only).\n\nExamples are:\n\n- Edit in $EDITOR\n- Edit @thin node in $EDITOR (remember to do \"refresh\" after this!)\n- Refresh @thin node from disk (e.g. after editing it in external editor)\n- Go to clone\n\nHere's an example on how to implement your own context menu items \nin your plugins::\n\n    def nextclone_rclick(c,p, menu):\n        \"\"\" Go to next clone \"\"\"\n\n        # only show the item if you are on a clone\n        # this is what makes this \"context sensitive\"\n        if not p.isCloned():\n            return    \n\n        def nextclone_rclick_cb():\n            c.goToNextClone()\n\n        # 'menu' is a QMenu instance that was created by Leo \n        # in response to right click on tree item\n\n        action = menu.addAction(\"Go to clone\")\n        action.connect(action, QtCore.SIGNAL(\"triggered()\"), nextclone_rclick_cb)\n\nAnd call this in your plugin *once*::\n\n    g.tree_popup_handlers.append(nextclone_rclick)\n\n", "children": []}, {"h": "nav_qt.py", "gnx": "ekr.20101113063552.9403", "b": "Adds \"Back\" and \"Forward\" buttons (Qt only).\n\nCreates \"back\" and \"forward\" buttons on button bar. These navigate\nthe node history.\n\nThis plugin does not need specific setup. If the plugin is loaded, the buttons \nwill be available. The buttons use the icon specified in the active Qt style\n\n", "children": []}, {"h": "projectwizard.py", "gnx": "ekr.20101113063552.9404", "b": "Creates a wizard that creates @auto nodes.\n\nOpens a file dialog and recursively creates @auto & @path nodes from the path\nwhere the selected file is (the selected file itself doesn't matter.)\n\n", "children": []}, {"h": "quicksearch.py", "gnx": "ekr.20101113063552.9405", "b": "Adds a fast-to-use search widget, like the \"Find in files\" feature of many editors.\n\nJust load the plugin, activate \"Nav\" tab, enter search text and press enter.\n\nThe pattern to search for is, by default, a case *insensitive* fnmatch pattern\n(e.g. foo*bar), because they are typically easier to type than regexps. If you\nwant to search for a regexp, use 'r:' prefix, e.g. r:foo.*bar.\n\nRegexp matching is case sensitive; if you want to do a case-insensitive regular\nexpression search (or any kind of case-sensitive search in the first place), do it\nby searching for \"r:(?i)Foo\". (?i) is a standard feature of Python regular expression\nsyntax, as documented in \n\nhttp://docs.python.org/library/re.html#regular-expression-syntax\n\n", "children": []}, {"h": "scrolledmessage.py", "gnx": "ekr.20101113063552.9406", "b": "Provides a Scrolled Message Dialog service for Qt.\n\nThe plugin can display messages supplied as plain text or formatted as html. In\naddition the plugin can accept messages in rst format and convert them to be\ndisplayed as html.\n\nThe displayed format can be controlled by the user via check boxes, so rst\nmessages may be viewed either as text or as html. Html messages can also be\nviewed as raw text, which will be a good debug feature when creating complex\ndynamically generated html messages.\n\nThe user interface is provided by a ScrolledMessage.ui file which is dynamically\nloaded each time a new dialog is loaded.\n\nThe dialog is not modal and many dialogs can exist at one time. Dialogs can be\nnamed and output directed to a dialog with a specific name.\n\nThe plugin is invoked like this::\n\n    g.doHook('scrolledMessage', c=c, msg='message', title='title',  ...etc    )\n\nor::\n\n    g.app.gui.runScrolledMessageDialog(c=c, ...etc)\n\nAll parameters are optional except c.\n\n**Parameters**\n\nmsg:\n    The text to be displayed (html, rst, plain).\n\n    If the text starts with 'rst:' it is assumed to be rst text and\n    is converted to html for display after the rst: prefix has been removed.\n    If the text starts with '<' it is assumed to be html.\n    These auto detection features can be overridden by 'flags'.\n\nlabel:\n    The text to appear in a label above the display. If it is '', the label is hidden.\n\ntitle:\n    The title to appear on the window or dock.\n\nflags:\n    Says what kind of message: 'rst', 'text', 'html'. This overrides auto-detection.\n\n    Flags can be combined, for example, 'rst html' causes the message to be interpreted as rst and\n    displayed as html.\n\n..  To Do\n..  - Add parameters to control position, size, closing, hiding etc.\n..  - Save or print files from the dialog.\n..  - Add an option to put the dialog in leo's log notebook.\n..  - Add \\@settings to control default behavior\n..  - Provide a menu of plugins that allows their docstring to be displayed.\n..  - Provide a menu of @rst nodes in the current outline, automatically track changes\n..    if it is set to display any of these nodes.\n", "children": []}, {"h": "spydershell.py", "gnx": "ekr.20101113063552.9407", "b": "Launches the spyder environment with access to Leo instance.\nSee http://packages.python.org/spyder/\n\nExecute alt-x spyder-launch to start spyder. Execute alt-x spyder-update to pass\ncurrent c,p,g to spyder interactive session. spyder-update also shows the window\nif it was closed before.\n\n", "children": []}, {"h": "stickynotes.py", "gnx": "ekr.20101113063552.9408", "b": "Adds simple \"sticky notes\" feature (popout editors) for Qt gui.\n\nAdds the following (``Alt-X``) commands:\n\n``stickynote``\n  pop out current node as a sticky note\n``stickynoter``\n  pop out current node as a rich text note\n``stickynoteenc``\n  pop out current node as an encrypted note\n``stickynoteenckey``\n  enter a new en/decryption key\n``tabula``\n  add the current node to the stickynotes in the `Tabula`\n  sticky note dock window, and show the window\n``tabula-show``\n  show the`Tabula` sticky note dock window\n  (without adding the current node)\n``tabula-marked``\n  add all marked nodes to the stickynotes in the `Tabula`\n  sticky note dock window, and show the window\n\nSticky notes are synchronized (both ways) with their parent Leo node.\n\nEncrypted mode requires the python-crypto module.\n\nThe first time you open a note in encrypted mode you'll be asked for a pass\nphrase. That phrase will be used for the rest of the session, you can change it\nwith ``Alt-X`` ``stickynoteenckey``, but probably won't need to.\n\nThe encrypted note is stored in base64 encoded *encrypted* text in the parent\nLeo node, if you forget the pass phrase there's no way to un-encrypt it again.\nAlso, you must not edit the text in the Leo node.\n\nWhen **creating an encrypted note**, you should **start with an empty node**.\nIf you want to encrypt text that already exists in a node, select-all cut it to\nempty the node, then paste it into the note.\n\n", "children": []}, {"h": "todo.py", "gnx": "ekr.20101113063552.9409", "b": "Provides to-do list and simple task management for leo (Qt only).\n\nThis plugin adds time required, progress and priority settings for nodes. With\nthe @project tag a branch can display progress and time required with dynamic\nhierarchical updates.\n\nFor full documentation see:\n\n  - http://leo.zwiki.org/ToDo \n  - http://leo.zwiki.org/tododoc.html\n\n", "children": []}, {"h": "viewrendered.py", "gnx": "ekr.20101113063552.9410", "b": "Creates a window for *live* rendering of rst, html, etc.  Qt only.\n\nviewrendered.py creates a single ``Alt-X`` style command, ``viewrendered``,\nwhich opens a new window where the current body text is rendered as HTML\n(if it starts with '<'), or otherwise reStructuredText.  reStructuredText\nerrors and warnings may be shown.  For example, both::\n\n    Heading\n    -------\n\n    `This` is **really** a line of text.\n\nand::\n\n    <h1>Heading<h1>\n\n    <tt>This</tt> is <b>really</b> a line of text.\n\nwill look something like:\n\n**Heading**\n\n`This` is **really** a line of text.\n\n", "children": []}, {"h": "graphcanvas.py", "gnx": "ekr.20101113063552.9411", "b": "Adds a graph layout for nodes in a tab.\nRequires Qt and the backlink.py plugin.\n\n", "children": []}, {"h": "Writing Plugins", "gnx": "ekr.20060612102055", "b": "", "children": ["ekr.20100805165051.7163"]}, {"h": "@file writingPlugins.txt", "gnx": "ekr.20100805165051.7163", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20060612103240"]}, {"h": "@rst html\\writingPlugins.html", "gnx": "ekr.20060612103240", "b": "###############\nWriting Plugins\n###############\n\nA **plugin** is a Python file that appears in Leo's plugin directory. Plugins\nmodify how Leo works. With plugins you can give Leo new commands, modify how\nexisting commands work, or change any other aspect of Leo's look and feel.\nleoPlugins.leo contains all of Leo's official plugins. Studying this file is\na good way to learn how to write plugins.\n\nYou **enable** plugins using @enabled-plugins nodes in leoSettings.leo or\nmyLeoSettings.leo. For more details, see the @enabled-plugins node in\nleoSettings.leo. Leo imports all enabled plugins at startup time. Plugins become\n**active** if importing the plugin was successful.\n\nWriting plugins is quite similar to writing any other Leo script.  See\n`Scripting Leo with Python`_. In particular:\n\n1. Plugins can use any of Leo's source code simply by importing any module\n   defined in leoPy.leo.\n\n2. Plugins can register event handlers just like any other Leo script. For full\n   details, see the section called `event handlers`_ in Leo's scripting chapter.\n\nThe rest of this chapters discusses topics related specifically to plugins.\n\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20060612103824", "ville.20100807185755.4510", "EKR.20040524104904.240", "EKR.20040524104904.224"]}, {"h": "@rst-no-head links", "gnx": "ekr.20060612103824", "b": ".. External links...\n.. _docutils:             http://docutils.sourceforge.net\n.. _LaTeX:                http://www.latex-project.org/\n.. _reStructuredText:     http://docutils.sourceforge.net/rst.html\n.. _SilverCity:           http://silvercity.sourceforge.net\n\n.. Relative links...\n.. _`Event handlers`:               scripting.html#event-handlers\n.. _`Scripting Leo with Python`:    scripting.html\n.. _`Customizing Leo`:              customizing.html\n", "children": []}, {"h": "enabled-plugins", "gnx": "ville.20100807185755.4510", "b": "@enabled-plugins node is as list of plugins to load. If you have @enabled-plugins\nnode in your myLeoSettings.leo, the plugins are loaded from there. If such a\nnode doesn't exist, the global leoSettings.leo is used instead.\n\nThe @enabled-plugins bundled in leoSettings.leo contains a list of default\n(recommended) plugins. For your own @enabled-plugins in myLeoSettings.leo, you\nshould use the node in leoSettings.leo as a starting point unless you are\ncertain you want to disable a recommended plugin.\n\n@enabled-plugins nodes contain the list of enabled plugins, one per line.\n\nComment lines starting with '#' are ignored.\n\nPlugins are essentially normal python modules, and loading a plugin basically\nmeans importing it and running the \"init\" function in the module's root level\nnamespace. A line in @enabled-plugins is a module name that leo should import.\n\nHere's an example @enabled-plugins node::\n\n    # Standard plugins enabled in official distributions....\n\n    plugins_menu.py\n    quicksearch.py\n\n    # third party plugins\n\n    # 'leoplugin' module inside python package 'foo'\n    foo.leoplugin\n\n    # top-level module\n    barplugin\n\nNote that some entries end with .py. This is done to retain backwards\ncompatibility - if an entry ends with .py, it means a plugin in Leo's 'plugins'\ndirectory (package) and is translated to e.g. \"leo.plugins.plugins_menu\" before\nimporting.\n\nNormally, a third party plugin should be a basic python module that is installed\nglobally for the python interpreter with \"python setup.py install\". Installing \nplugins to Leo's 'plugins' directory is not recommended, as such plugins \ncan disappear when Leo is upgraded. \n", "children": []}, {"h": "Support for unit testing", "gnx": "EKR.20040524104904.240", "b": "The plugins test suite creates a new convention: if a plugin has a function at\nthe outer (module) level called unitTest, Leo will call that function when\ndoing unit testing for plugins. So it would be good if writers of plugins would\ncreate such a unitTest function. To indicate a failure the unitTest just\nthrows an exception. Leo's plugins test suite takes care of the rest.\n", "children": []}, {"h": "Important security warnings", "gnx": "EKR.20040524104904.224", "b": "Naively using plugins can expose you and your .leo files to malicious attacks.\nThe fundamental principles are::\n\n    Scripts and plugins must never blindly execute code from untrusted sources.\n\nand::\n\n    .leo files obtained from other people may potentially contain hostile code.\n\nStephen Schaefer summarizes the danger this way::\n\n    I foresee a future in which the majority of leo projects come from\n    marginally trusted sources...a world of leo documents sent hither and yon -\n    resumes, project proposals, textbooks, magazines, contracts - and as a race\n    of Pandora's, we cannot resist wanting to see \"What's in the box?\" And are\n    we going to fire up a text editor to make a detailed examination of the\n    ASCII XML? Never! We're going to double click on the cute leo file icon, and\n    leo will fire up in all its raging glory. Just like Word (and its macros) or\n    Excel (and its macros).\n\nIn other words::\n\n    When we share \"our\" .leo files we can NOT assume that\n    we know what is in our \"own\" documents!\n\nNot all environments are untrustworthy. Code in a commercial cvs repository is\nprobably trustworthy: employees might be terminated for posting malicious code.\nStill, the potential for abuse exists anywhere.\n\nIn Python it is very easy to write a script that will blindly execute other scripts::\n\n    # Warning: extremely dangerous code\n\n    # Execute the body text of all nodes that start with `@script`.\n    def onLoadFile():\n        for p in c.all_positions():\n            h = p.h.lower()\n            if g.match_word(h,0,\"@script\"):\n                s = p.b\n                if s and len(s) > 0:\n                    try: # SECURITY BREACH: s may be malicious!\n                        exec(s + '\\n')\n                    except:\n                        es_exception()\n\nExecuting this kind of code is typically an intolerable security risk.\n**Important**: rexec provides *no protection whatever*.\nLeo is a repository of source code, so any text operation is potentially malicious.\nFor example, consider the following script, which is valid in rexec mode::\n\n    badNode = c.p\n    for p in c.all_positions():\n        << change `rexec` to `exec` in p's body >>\n    << delete badNode >>\n    << clear the undo stack >>\n\nThis script will introduce a security hole the .leo file without doing anything\nprohibited by rexec, and without leaving any traces of the perpetrating script\nbehind. The damage will become permanent *outside* this script when the user\nsaves the .leo file.\n", "children": []}, {"h": "Unit testing with Leo", "gnx": "ekr.20070628083442", "b": "", "children": ["ekr.20100805165051.7170"]}, {"h": "@file unitTesting.txt", "gnx": "ekr.20100805165051.7170", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20070628083442.1"]}, {"h": "@rst html\\unitTesting.html", "gnx": "ekr.20070628083442.1", "b": "#####################\nUnit testing with Leo\n#####################\n\nThis chapter describes how you can execute Python unit test from within Leo outlines.\n\nLeo's **unit test commands** run the unit tests\ncreated by @test and @suite nodes. run-unit-tests and run-unit-tests-locally\nrun all unit tests in the presently selected part of the Leo outline;\nrun-all-unit-tests and run-all-unit-tests-locally run all unit\ntests in the entire Leo outline.\n\nImportant: you must `run Leo in a console window`_ to see the output the unit tests.\nLeo's unit test commands run all the unit tests using the standard unittest text test\nrunner, and the output of the unit tests appears in the console.\n\ntest/unitTest.leo contains many examples of using @test and @suite nodes.\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20070628083442.2", "ekr.20070628084351", "ekr.20070628094515.1", "ekr.20120229094652.15125", "ekr.20070628094515.2", "ekr.20080729064227.6", "ekr.20080729064227.7"]}, {"h": "@rst-no-head links", "gnx": "ekr.20070628083442.2", "b": ".. Links\n\n.. _`run Leo in a console window`:      installing.html#running-leo-from-a-console-window\n", "children": []}, {"h": "Using @test nodes", "gnx": "ekr.20070628084351", "b": "**@test nodes** are nodes whose headlines start with @test. The unit test\ncommands convert the body text of @test nodes into a unit test automatically.\nThat is, Leo's unit test commands automatically create a unittest.TestCase\ninstances which run the body text of the @test node. For example, let us\nconsider one of Leo's actual unit tests. The headline is::\n\n    @test consistency of back/next links\n\nThe body text is::\n\n    if g.unitTesting:\n        c,p = g.getTestVars() # Optional: prevents pychecker warnings.\n        for p in c.all_positions():\n            back = p.back()\n            next = p.next()\n            if back: assert(back.getNext() == p)\n            if next: assert(next.getBack() == p)\n\nWhen either of Leo's unit test commands finds this @test node the command will\nrun a unit test equivalent to the following::\n\n    import leo.core.leoGlobals as g\n\n    class aTestCase (unittest.TestCase):\n        def shortDescription():\n            return '@test consistency of back/next links'\n        def runTest():\n            c,p = g.getTestVars()\n            for p in c.all_positions():\n                back = p.back()\n                next = p.next()\n                if back: assert(back.getNext() == p)\n                if next: assert(next.getBack() == p)\n\nAs you can see, using @test nodes saves a lot of typing:\n\n- You don't have to define a subclass of unittest.TestCase.\n- Within your unit test, the c, g and p variables are predefined, just like in Leo scripts.\n- The entire headline of the @test node becomes the short description of the unit test.\n\n**Important note**: notice that the first line of the body text is a **guard line**::\n\n    if g.unitTesting:\n\nThis guard line is needed because this particular @test node is contained in the\nfile leoNodes.py. @test nodes that appear outside of Python source files do not\nneed guard lines. The guard line prevents the unit testing code from being\nexecuted when Python imports the leoNodes module; the g.unitTesting variable is\nTrue only while running unit tests.\n\n**New in Leo 4.6**: When Leo runs unit tests, Leo predefines the 'self' variable to\nbe the instance of the test itself, that is an instance of unittest.TestCase.\nThis allows you to use methods such as self.assertTrue in @test and @suite nodes.\n\n**Note**: Leo predefines the c, g, and p variables in @test and @suite nodes,\njust like in other scripts.  Thus, the line::\n\n    c,p = g.getTestVars()\n\nis not needed.  However, it prevents pychecker warnings that c and p are undefined.\n", "children": []}, {"h": "Using @suite nodes", "gnx": "ekr.20070628094515.1", "b": "**@suite nodes** are nodes whose headlines start with @suite. @suite nodes allow\nyou to create and run custom subclasses of unittest.TestCase.\n\nLeo's test commands assume that the body of an suite node is a script that\ncreates a suite of tests and places that suite in g.app.scriptDict['suite'].\nSomething like this::\n\n    if g.unitTesting:\n        __pychecker__ = '--no-reimport' # Prevents pychecker complaint.\n        import unittest\n        c,p = g.getTestVars() # Optional.\n        suite = unittest.makeSuite(unittest.TestCase)\n        << add one or more tests (instances of unittest.TestCase) to suite >>\n        g.app.scriptDict['suite'] = suite\n\n**Note**: as in @test nodes, the guard line, 'if unitTesting:', is needed only if the\n@suite node appears in a Python source file.\n\nLeo's test commands first execute the script and then run suite in\ng.app.scriptDict.get('suite') using the standard unittest text runner.\n\nYou can organize the script in an @suite nodes just as usual using @others,\nsection references, etc. For example::\n\n    if g.unitTesting:\n        __pychecker__ = '--no-reimport'\n        import unittest\n        c,p = g.getTestVars() # Optional.\n        # children define test1,test2..., subclasses of unittest.TestCase.\n        @others \n        suite = unittest.makeSuite(unittest.TestCase)\n        for test in (test1,test2,test3,test4):\n            suite.addTest(test)\n        g.app.scriptDict['suite'] = suite\n", "children": []}, {"h": "Using @mark-for-unit-tests", "gnx": "ekr.20120229094652.15125", "b": "When running unit tests externally, Leo copies any @mark-for-unit-tests nodes\nto dynamicUnitTest.leo.  Of course, this is in addition to all @test nodes\nand @suite nodes that are to be executed.\nYou can use @mark-for-unit-test nodes to include any \"supporting data\"\nyou want, including, say, \"@common test code\" to be imported as\nfollows::\n\n    exec(g.findTestScript(c,'@common test code'))\n\n**Note**: putting @settings trees as descendants of an @mark-for-unit-test node\nwill copy the @setting tree, but will *not* actually set the corresponding settings.\n", "children": []}, {"h": "How the unit test commands work", "gnx": "ekr.20070628094515.2", "b": "The run-all-unit-tests-locally and run-unit-tests-locally commands run unit\ntests in the process that is running Leo. These commands *can* change the\noutline containing the unit tests.\n\nThe run-all-unit-tests and run-unit-tests commands run all tests in a separate\nprocess, so unit tests can never have any side effects. These commands never\nchanges the outline from which the tests were run. These commands do the\nfollowing:\n\n1. Copy all @test, @suite, @unit-tests and @mark-for-unit-test nodes\n   (including their descendants) to the file test/dynamicUnitTest.leo.\n\n2. Run test/leoDynamicTest.py in a separate process.\n\n   - leoDynamicTest.py opens dynamicUnitTest.leo with the leoBridge module.\n     Thus, all unit tests get run with the nullGui in effect.\n\n   - After opening dynamicUnitTest.leo, leoDynamicTest.py runs all unit tests\n     by executing the leoTest.doTests function.\n\n   - The leoTests.doTests function searches for @test and @suite nodes and\n     processes them generally as described above. The details are a bit\n     different from as described, but they usually don't matter. If you *really*\n     care, see the source code for leoTests.doTests.\n", "children": []}, {"h": "\\@button timer", "gnx": "ekr.20080729064227.6", "b": "The timit button in unitTest.leo allows you to apply Python's timeit module.\nSee http://docs.python.org/lib/module-timeit.html.\nThe contents of @button timer is::\n\n    import leo.core.leoTest as leoTest\n    leoTest.runTimerOnNode(c,p,count=100)\n\nrunTimerOnNode executes the script in the presently selected node using timit.Timer and prints the results.\n", "children": []}, {"h": "\\@button profile", "gnx": "ekr.20080729064227.7", "b": "The profile button in unitTest.leo allows you to profile nodes using Python's profiler module.\nSee http://docs.python.org/lib/module-profile.html\nThe contents of @button profile is::\n\n    import leo.core.leoTest as leoTest\n    leoTest.runProfileOnNode(p,outputPath=None) # Defaults to leo\\test\\profileStats.txt\n\nrunProfileOnNode runs the Python profiler on the script in the selected node, then reports the stats.\n", "children": []}, {"h": "Debugging with Leo", "gnx": "ekr.20060527105211", "b": "", "children": ["ekr.20100805165051.7166"]}, {"h": "@file debuggers.txt", "gnx": "ekr.20100805165051.7166", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20060527105617"]}, {"h": "@rst html\\debuggers.html", "gnx": "ekr.20060527105617", "b": "##################\nDebugging with Leo\n##################\n\nThis chapter discusses debugging Python scripts with Leo.\nBe aware of the distinction between **Leo-specific** scripts and **general** scripts.\nLeo-specific scripts access data in the Leo outline in which they are contained;\ngeneral scripts do not.\n\n.. contents::\n    :depth: 3\n", "children": ["ekr.20060527105804", "ekr.20070116062405", "ekr.20060527112801", "ekr.20070115172724"]}, {"h": "@rst-no-head links", "gnx": "ekr.20060527105804", "b": ".. External links...\n.. _Idle:                       http://www.python.org/idle/\n.. _pdb:                        http://docs.python.org/lib/module-pdb.html\n.. _winpdb:                     http://www.digitalpeers.com/pythondebugger/\n.. _`the FAQ`:                  http://webpages.charter.net/edreamleo/FAQ.html#how-can-i-use-python-s-pdb-debugger-with-leo\n.. _`embedded winpdb`:          http://www.digitalpeers.com/pythondebugger/embedded.htm\n.. _`Leo's forums`:             http://sourceforge.net/forum/?group_id=3458\n.. _`work flow`:                http://webpages.charter.net/edreamleo/FAQ.html#how-can-i-use-leo-to-develop-leo-itself\n\n.. .. _`running Leo in a console`: http://webpages.charter.net/edreamleo/FAQ.html#how-can-i-run-leo-from-a-console-window\n.. _`running Leo from a console window`:    installing.html#running-leo-from-a-console-window\n.. _`run Leo in a console window`:          installing.html#running-leo-from-a-console-window\n.. _`console window`:                       installing.html#running-leo-from-a-console-window\n", "children": []}, {"h": "Using g.trace and g.pdb", "gnx": "ekr.20070116062405", "b": "Inserting g.trace statements in my Python code is usually my first debugging\nchoice. The g.trace statement prints the name of the function in which the call\nto g.trace occurs, followed by the value of its arguments. The output of the\ng.trace goes to the console, so you must `run Leo in a console window`_ to use\ng.trace.\n\nInserting and deleting g.trace statements is fast, provided that your `work\nflow`_ makes it easy to restart the program under test. As a result, using\ng.trace statements is similar to setting tracepoints in a debugger, with the\nadvantage that (disabled) tracepoints remain in the source code for future use.\nYou will find many examples of using g.trace throughout Leo's source code.\n\nMy second choice is using g.pdb to set breakpoints for the pdb_ debugger. Pdb\nuses the console for all interaction, so you must `run Leo in a console window`_.\nSee `the FAQ`_ for a discussion of both g.trace and g.pdb.\n", "children": []}, {"h": "Settings for winpdb", "gnx": "ekr.20060527112801", "b": "The following settings in leoSettings.leo control debugger operation.\nThe settings shown here will be assumed to be in effect throughout this chapter::\n\n    @string debugger_kind = winpdb\n\nThis setting controls what debugger the 'Debug Script' script button uses.\nEventually this setting will control what debugger the debug command uses::\nAt present the only valid value is 'winpdb'\n\n    @bool write_script_file = True\n\nTrue: The execute script command writes the script to be executed to a file,\nthen executes the script using Python's execFile function. The script_file_path\nsetting specifies the path to this file. False (legacy): The execute script\ncommand uses Python's exec command to execute the script.\n\n@string script_file_path = ../test/scriptFile.py\n\nThe path to the file to be written by the execute-script command. Notes:\n\n- This setting has effect only if the write_script_file setting is True.\n- Use / as the path delimiter, regardless of platform.\n- The default path is ../test/scriptFile.py if no path is given.\n- The path starts at g.app.loadDir, so for example ../test/scriptFile.py is equivalent to leo/test/scriptFile.py.\n- The filename should end in .py.\n\n@string debugger_path = None\n\n", "children": []}, {"h": "Debugging scripts with winpdb", "gnx": "ekr.20070115172724", "b": "The following three section discuss three ways of debugging scripts with winpdb_.\nThe first two sections tell how to debug general scripts;\nthe last section tells how to debug Leo-specific scripts.\n\nwinpdb_ and its documentation have been improved recently.\nFor more details, see the `embedded winpdb`_ docs.\nThe discussion of embedded debugging may have been written specifically with Leo in mind.\n", "children": ["ekr.20070115172724.1", "ekr.20070115172724.3"]}, {"h": "The debug command", "gnx": "ekr.20070115172724.1", "b": "This way of debugging can only be used for general scripts, not leo-specific scripts.  \nThe debug command writes the script to scriptFile.py and invokes winpdb.\nwinpdb opens and is already 'attached' to the script to be debugged.\nYou can single-step as you like.\nLeo continues to run, but killing the debugger will also kill Leo.\n", "children": []}, {"h": "The execute-script command with explicit debugger breaks", "gnx": "ekr.20070115172724.3", "b": "This way of debugging scripts allows winpdb to debug scripts that use c, g and p.\nA bit more work is needed because winpdb does not start automatically.\nHere are step-by step instructions:\n\n1. Insert the following two lines of code at the start of the script to be debugged::\n\n    import rpdb2\n    rpdb2.start_embedded_debugger('go',fAllowUnencrypted=True)\n\n2. Execute Leo's execute-script command (*not* the debug command).\n   Leo will appear to hang: start_embedded_debugger is waiting for *another* copy of winpdb to 'attach' to the script's process.\n   The default timeout is 5 minutes, after which an exception gets thrown.\n\n3. Start winpdb explicitly by executing something like the following in a console::\n\n    python /Python26/Scripts/_winpdb.py -t\n\n   The -t option tells winpdb that no encoding of password is necessary.\n   The password is specified in the call to rpdb2.start_embedded_debugger in your script.\n   In our example, the password is 'go'.\n\n4. Use winpdb's File:Attach command to attach winpdb to Leo.\n   Specify the password as 'go' and you will see the scriptFile.py containing your entire script.\n   You can now execute or single-step through the script. \n   To repeat, c, g and p are defined, so you can debug any script this way.\n", "children": []}, {"h": "Using @shadow", "gnx": "ekr.20080730212711.14", "b": "", "children": ["ekr.20100805165051.7173"]}, {"h": "@file atShadow.txt", "gnx": "ekr.20100805165051.7173", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20080730212711.15"]}, {"h": "@rst html\\atShadow.html", "gnx": "ekr.20080730212711.15", "b": "#############\nUsing @shadow\n#############\n\nThis chapter describes an important new feature that debuted in Leo 4.5 b2: @shadow trees.\nThese trees combine the benefits of @auto, @file and @nosent trees:\n\n- The (public) files created by @shadow trees contain no sentinels, but\n- Leo is able to update @shadow trees in the Leo outline based on changes made\n  to public files outside of Leo.\n\n@shadow trees are often useful for studying or editing source files from projects that don't use Leo. \nIn such situations, it is convenient to import the @shadow tree from the (public) sources.\nAs discussed below, Leo can import @shadow trees automatically,\nusing the same algorithms used by `@auto trees`_.\n\nThe crucial ideas and algorithms underlying @shadow trees are the invention of Bernhard Mulder.\n\n.. contents::\n    :depth: 2\n\n", "children": ["ekr.20080730212711.16", "ekr.20080730212711.39", "ekr.20080730212711.42", "ekr.20080730212711.40", "ekr.20080730212711.52"]}, {"h": "@rst-no-head links", "gnx": "ekr.20080730212711.16", "b": ".. Links\n.. _`@auto trees`:          directives.html#auto    \n", "children": []}, {"h": "Overview", "gnx": "ekr.20080730212711.39", "b": "Using @shadow trees is the best choice when you want to have the full power of\nLeo's outlines, but wish to retain the source files in their original format,\nwithout Leo sentinels (markup) in comments in the source file. \n\nLeo's @file trees create external files containing comments called sentinels.\nThese sentinel lines allow Leo to recreate the outlines structure of @file\ntrees. Alas, many people and organizations find these added sentinel lines\nunacceptable. \\@nosent nodes create external files without sentinels, but at a\ncost: Leo can not update \\@nosent trees when the corresponding external file is\nchanged outside of Leo.\n\n\\@shadow trees provide a way around this dilemma. When Leo saves an \\@shadow\ntree, it saves two copies of the tree: a **public** file without sentinels, and\na **private** file containing sentinels. Using Bernhard Mulder's brilliant\n**update algorithm**, Leo is able to update @shadow trees in the Leo outline\nbased *solely* on changes to public files.\n\nLeo writes private files to a subfolder of the folder containing the public file:\nby default this folder is called .leo_shadow.\nYou can change the name of this folder using the @string shadow_subdir setting.\nNote that private files need not be known to source code control systems such as bzr or cvs.\n\nThat's *almost* all there is to it.  The following sections discuss important details:\n\n- How to create @shadow trees.\n- How @shadow works.\n- Why the update algorithm is sound.\n", "children": []}, {"h": "Creating @shadow trees", "gnx": "ekr.20080730212711.42", "b": "The first step in creating an @shadow tree is to create a node whose headline is @shadow *<filename>*.\n\nThus, you can create an @shadow node and save your outline, regardless of\nwhether the original file exists. The next time Leo reads the @shadow node, Leo\nwill **create** the entire @shadow tree using the same logic as for `@auto\ntrees`_. You can cause Leo to read the @shadow node in two ways: 1) by closing\nand reloading the Leo outline or 2) by selecting the @shadow node and executing\nthe File:Read/Write:Read @shadow Node command.\n\n**Important**: Leo imports the private file into the @shadow tree only if\n\na) the public file exists and\nb) the private file does *not* exist.\n\nThus, Leo will import code into each @shadow node at most once. After the first\nimport, updates are made using the update algorithm.\n\n**Note**: just as for @auto, Leo will never read (import) or write an @shadow\ntree if the @shadow node is under the influence of an @ignore directive.\n", "children": []}, {"h": "What the update algorithm does", "gnx": "ekr.20080730212711.40", "b": "Suppose our @shadow tree is @shadow a.py. When Leo writes this tree it creates a\npublic file, a.py, and a private file, .leo_shadow/xa.p (or just xa.p for\nshort). Public files might can committed to a source code control system such as\ncvs or bzr. Private files should *not* be known to cvs or bzr.\n\nNow suppose a.py has been changed outside of Leo, say as the result of a bzr\nmerge. The corresponding private file, xa.p, will *not* have been changed.\n(Private files should *never* change outside of Leo.\n\nWhen Leo reads the *new* (and possibly updated) public file it does the\nfollowing:\n\n1. Recreates the *old* public file by removing sentinels from the (unchanged!) *private* file.\n2. Creates a set of diffs between the old and new *public* files.\n3. Uses the diffs to create a new version of the *private* file.\n4. Creates the @shadow tree using  the new *private* file.\n\n**Important**: The update algorithm never changes sentinels. This means that the\nupdate algorithm never inserts or deletes nodes. The user is responsible for\ncreating nodes to hold new lines, or for deleting nodes that become empty as the\nresult of deleting lines.\n\nStep 3 is the clever part. To see all the details of how the algorithm works,\nplease study the x.propagate_changed_lines method in leoShadow.py. This code is\nheavily commented.\n", "children": []}, {"h": "Aha: boundary cases don't matter", "gnx": "ekr.20080730212711.52", "b": "There are several boundary cases that the update algorithm can not resolve.\nFor example, if a line is inserted at the boundary between nodes,\nthe updated algorithm can not determine whether the line should be inserted\nat the end of one node of the start of the next node.\n\nHappily, the inability of the update algorithm to distinguish between\nthese two cases **does not matter**, for three very important reasons:\n\n1. No matter which choice is made, the *public* file that results is the same.\n   **The choice doesn't matter**, so the update algorithm is completely and\n   absolutely safe.\n\n2. Leo reports any nodes that were changed as the result of the update\n   algorithm. In essence, these reports are exactly the same as the reports Leo\n   makes when @file trees were changed as the result of changes made externally\n   to Leo. It is as easy for the user to review changes to @shadow trees as it\n   is to review changes to @thin or @file trees.\n\n3. Suppose the user moves a line from the end of one node to the beginning of\n   the following node, or vice versa. Once the user saves the file, the\n   *private* file records the location of the moved line. The next time the user\n   reads the @shadow file, the line will *not* be subject to the update\n   algorithm because the line has not been changed externally. The location of\n   the line (on the boundary) will be completely determined and it will never\n   need to be moved across the boundary.\n\nUnderstanding these three reasons finally convinced me that @shadow could be\nmade to work reliably.\n", "children": []}, {"h": "The leoInspect Module", "gnx": "ekr.20120315101404.14224", "b": "@pagewidth 70", "children": ["ekr.20120315101404.14225"]}, {"h": "@file leoInspect.txt", "gnx": "ekr.20120315101404.14225", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20120315101404.14233"]}, {"h": "@rst html\\leoInspect.html", "gnx": "ekr.20120315101404.14233", "b": "#######################\nThe leoInspect Module\n#######################\n\nThe leoInspect module provides answers to questions about Python\nsource code such as:\n\n- Where are all assignments to 'w' in leoEditCommands.py?\n\n- Which of those assignments are \"unusual\" in some way?\n\nThe leoInspect module grew out of a re-imagining of the new-pylint\nproject, which has been a \"hobby\" project of mine for several years.\nRather than attempting global \"proofs\" of difficult propositions, as\nnew-pylint does, the leoInspect module answers specific questions\nabout modules, functions, classes, methods and statements. We can use\nsuch answers while debugging, or as documentation, or especially as\nthe foundation for *fast* unit tests.\n\nThe leoInspect module provides answers to questions about Python\nsource code. leoInspect is an elegant and easy-to-use front end for\nPython's AST (Abstract Syntax Tree) trees *and* a window into a richly\nconnected set of semantic data built *from* AST trees.\n\nThe simplicity of the leoInspect module could be called \"third\ngeneration\" simplicity. Several implementation Ahas lie behind it.\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20120315101404.14243", "ekr.20120315101404.14258", "ekr.20120316081721.14292", "ekr.20120316081721.14278"]}, {"h": "A query language", "gnx": "ekr.20120315101404.14243", "b": "Mathematica's expressions inspired the design of the query language:\nsimple and task oriented. All details in the background. leoInspect\nmakes *Python* the query language! Let's see how.\n\nAll queries start with a call to leoInspect.module::\n\n    import leo.core.leoInspect as inspect\n    o = inspect.module('leoApp.py')\n    \nThe call to inspect.module creates a **query object** o representing\nall the data contained in the AST for leoApp.py. But this query object\n*also* represents a **context**, a module, class, function, method or\nstatement.\n\nFor any context o, we can use **getters** to get lists of other contexts::\n\n    aList = o.calls()      # All function/method calls in context o.\n    aList = o.classes()    # All classes in context o.\n    aList = o.functions()  # All functions in context o.\n    aList = o.statements() # All the statements in context o.\n    \nAssignments and calls are especially important for queries. The following\ngetters return the assignments related to some name s::\n\n    aList = o.assignments_to(s)\n    aList = o.assignments_using(s)\n    aList = o.calls_to(s)\n    aList = o.call_args_of(s)\n    \nThe o.name getter returns the name of any module, class, method,\nfunction or var::\n\n    s = o.name()\n    \nThe o.format getter returns a human-readable representation of a\ncontext's AST tree::\n\n    s = o.format()\n    \nThese getters generally make it unnecessary to access AST trees\ndirectly: ASTs are merely part of the \"plumbing\" of the leoInspect\nmodule. However, the o.tree getter returns the actual AST tree if you\nreally need it::\n\n    ast_tree = o.tree()\n\nLet's see how to create actual queries. Here is a script to discover\nall assignments to 'w' in leoEditCommands.py is::\n\n    import leo.core.leoInspect as inspect\n    m = inspect.module('leoEditCommands.py')\n    for a in m.assignments_to('w'):\n        print(a.format())\n        \nIt is easy to \"zero in\" on particular classes or method using the\no.name getter. The following script prints all assignments to the\n'files' ivar of the LoadManager class in leoApp.py::\n\n    import leo.core.leoInspect as inspect\n    m = inspect.module('leoApp.py')\n    for theClass in m.classes():\n        if theClass.name() == 'LoadManager':\n            for a in m.assignments_to('files'):\n                print(a.format())\n\nWe have seen that the getters hide all the messy details of Python AST\ntrees. This is a revolution in using AST trees!\n", "children": []}, {"h": "Comparing leoInspect and Pylint", "gnx": "ekr.20120315101404.14258", "b": "Could one create a lint-like programming using leoInspect? Perhaps,\nbut much more work would be required. Indeed, pylint is an extremely\ncapable program. It can make complex deductions that are presently far\nbeyond leoInspect's capabilities.\n\nHowever, leoInspect is a supremely elegant front end. It might serve\nas the basis of more complex analysis. Multi-pass algorithms are often\n*faster* and more elegant than single-pass algorithms, so the \"extra\"\noverhead of the leoInspect prepass is probably not significant. What\nmatters are the deductions that can be made using leoInspect.Context\ndata.\n\nSpeed is not an obstacle for a lint-like tool based on leoInspect.\nIndeed, the module getter creates *all* the context data in a very\nfast pass over the modules AST tree. It takes about 4.6 seconds to\ncreate the context data for all 34 of Leo's source files. Because\ngetters are extremely fast, even complex queries will be fast. A\nmultiple-pass query will typically take about 0.1 sec per pass. Using\nAstFormatter in the InspectTraverser class adds a negligible amount of\ntime, less than 10% of the total tree-traversal time.\n", "children": []}, {"h": "Still to do", "gnx": "ekr.20120316081721.14292", "b": "The assignments_to, assignments_using and the new calls_to getters all\nspecify a **pattern** to be matched against the the lhs of assignments\n(or against function names in the calls_to getter).  At present, the\npattern must match as a plain word match, but it would be more natural\nto use regex matches.  That's coming.\n\nThree new getters would give leoInspect the ability to replace\nrefactored code:\n\n- o.token_range: Returns pointers the list of tokens comprising o.\n\n- o.text: Returns o's source text (a string).\n\n- o.text_range: Returns the starting and ending offsets of the text in the file.\n\nThese getters are non-trivial to do, but a reasonable design is in place.\n", "children": []}, {"h": "Theory of operation", "gnx": "ekr.20120316081721.14278", "b": ".. _`this post`: http://groups.google.com/group/leo-editor/browse_thread/thread/62f0e7b84a25e0d0/39f848ad8a96bcbc\n\nThe module getter creates *all* the data used by the other getters.\nThis data is a richly-linked set of Context objects. Getters are very\nfast because the getter of an object o merely returns one of o's\nivars.\n\nThe o.format getter is an exception. It traverses o's AST to create\nthe human-readable representation of o.\n\nIn a remarkable collapse in complexity, InspectTraverser.do_Attribute\nuses the *formatting* code to compute the value of the attribute. This\nreplaces complex AST-traversal code with a call to the formatter. This\nis one of the most clever refactorings I have ever discovered. For the\ngory details behind this Aha, see `this post`_.\n\nThe InspectTraverser class is now so simple that it is now a bit hard\nto see what exactly it is doing. Most of the InspectTraverser class\nmethods are simple variants of the base AstTraverser class. BTW,\nmaking InspectTraverser class be a subclass of AstFormatter would be\nbad style. We want the InspectTraverser class to *have* a formatter,\nnot *be* a formatter.\n", "children": ["ekr.20120316081721.14295", "ekr.20120315101404.14256", "ekr.20120315101404.14264"]}, {"h": "Getters", "gnx": "ekr.20120316081721.14295", "b": "Getters all follow roughly the same pattern.  For example::\n\n    def assignments_to (self,s,all=True):\n        \n        format,result = self.formatter.format,[]\n    \n        for assn in self.assignments(all=all):\n            tree = assn.tree()\n            kind = self.ast_kind(tree)\n            if kind == 'Assign':\n                for target in tree.targets:\n                    lhs = format(target)\n                    if s == lhs:\n                        result.append(assn)\n                        break\n            else:\n                assert kind == 'AugAssign',kind\n                lhs = format(tree.target)\n                if s == lhs:\n                    result.append(assn)\n    \n        return result\n        \nThis is AST-traversal code. Indeed, the tree getter returns an AST,\nand ast_kind is an internal getter that returns the AST type for an\nAST node.\n\nThis code is elegant. It uses the assignments getter to get the list\nof all assignments in this context and all contained (descendant)\ncontexts. All public getters are members of the base Context class, so\nthis code code \"just works\" for *all* contexts. Furthermore,\nassignments are StatementContext objects, so they \"just work\" as\nelements returned by the getter. Comparing this code with the code\nfound in pylint shows how elegant this code truly is.\n\nNo simpler code is possible. AST trees for assignments are a bit\ndifferent from AST trees for augmented assignments. Once the type of\nassignment is identified, the code simply *formats* the left hand side\n(lhs) of the assignment, and compares s with the lhs. If there is a\nmatch, the entire assignment is appended to the result.\n", "children": []}, {"h": "The AstFormatter class", "gnx": "ekr.20120315101404.14256", "b": "The AstFormatter class is a crucial part of the leoInspect module. It\nis elegant enough that it might be difficult to understand. The basic\ncoding pattern used throughout the formatter class is simple. The code\nthat handles each construct does the following:\n\nA. Calls self.visit for interior contexts to get the *formatted*\n   string for those contexts.\n\nB. Computes a result string s.\n\nC. Calls self.append(s) to \"return\" the result.\n\nLet's look at AstFormatter.do_Attribute. Attributes can be complex.\nFor example, the following would be represented at the top level by an\nAST Attribute node::\n\n    a.f(...)[1:g(...)].c.e\n\nHere is the code for f.do_Attribute::\n\n    def do_Attribute(self,tree,tag=''):\n        name = tree.attr\n        expr = self.visit(tree.value,'attribute value')\n        self.append('%s.%s' % (expr,name))\n\nThe AstFormatter.visit method is the crucial part of this design\npattern. It returns a string that properly \"flattens\" what might be an\narbitrarily complex tree. Here it is, slightly edited::\n\n    def visit (self,tree,tag=None):\n        kind = tree.__class__\n        f = self.dispatch_table.get(kind)\n        if f:\n            self.push()\n            f(tree,tag)\n            val = self.pop()\n            return val\n        else:\n            g.trace('bad ast type',kind)\n            return None\n\nThe visit method calls self.push() to save the present string being\n\"accumulated\", determines the proper function f to call using the\ndispatch table, visits the node by calling f and then calls\nself.pop().\n\n    def push (self):\n        self.stack.append(self.result)\n        self.result = []\n\n    def pop (self):\n        val = ''.join(self.result)\n        self.result = self.stack.pop()\n        return val\n\nThe result from the \"interior\" call to f is ''.join(self.result).  The\npop method computes this result and *then* pops the stack, restoring\nthe previous value of self.result.\n\nThe final piece of the puzzle is::\n\n    def append(self,s):\n        self.result.append(s)\n\n**Important**: the patten allows multiple calls to self.append in a\nsingle method.  The do_arguments method shows how flexible this pattern is.\n", "children": []}, {"h": "Computing token ranges", "gnx": "ekr.20120315101404.14264", "b": "This section describes the how the unfinished o.token_range getter will work.\n\nThere are two parts to the problem...\n", "children": ["ekr.20120315101404.14265", "ekr.20120315101404.14266"]}, {"h": "Token-info prepass", "gnx": "ekr.20120315101404.14265", "b": "For each node N of a module's tree, we want to inject the following\ntwo new ivars:\n\n- N.end_lineno: the line number of the last character of the token.\n\n- N.end_col_offset: the (byte) offset of the last character of the token.\n\n**Important**: tree structure is irrelevant when computing these fields: we\nsimply want a **sorted** list of (N.lineno,No.col_offset, N) tuples!\n\nThe prepass will use ast.walk(root), to generate the list.  After\nsorting the list, the prepass will inject inject N.end_lineno and\nN.end_col_offset ivars into each node N by stepping through the list.\nThe ending values of the previous node on the list are the the same as\nthe beginning values of the next node on the list.\n\nThis prepass need only be done once per module.\n", "children": []}, {"h": "token_range", "gnx": "ekr.20120315101404.14266", "b": "To compute token_range for a *particular* N, we want to discover\nvalues M.end_lineno and M.end_col_offset for M, the **last** token in\nN's entire tree.\n\ntoken_range will do the prepass on the modules tree if necessary.\ntoken_range will then call ast.walk(N) to discover all of N's nodes,\nsort the list, and return the last element of the list!\n\ntoken_range will, by its design, include *all* text in the range,\nincluding comments.\n", "children": []}, {"h": "Leo and Other Programs", "gnx": "ekr.20101025080245.5798", "b": "", "children": ["ekr.20061025065357", "ekr.20080203101507", "ekr.20070317033759", "TL.20080804095315.1", "ekr.20060913164304"]}, {"h": "Leo and Emacs", "gnx": "ekr.20061025065357", "b": "", "children": ["ekr.20100805165051.7168"]}, {"h": "@file emacs.txt", "gnx": "ekr.20100805165051.7168", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20061025065357.1"]}, {"h": "@rst html\\emacs.html", "gnx": "ekr.20061025065357.1", "b": "#############\nLeo and Emacs\n#############\n\nThis chapter several topics relating to the Emacs editor.\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20061025065357.2", "ekr.20061025081359", "ekr.20061025070825.1", "ekr.20061025142434"]}, {"h": "@rst-no-head links", "gnx": "ekr.20061025065357.2", "b": ".. Links\n.. _elisp:              http://en.wikipedia.org/wiki/Emacs_Lisp\n.. _Emacs:              http://www.xemacs.org/\n.. _ZODB:               http://www.zope.org/Wikis/ZODB/guide/zodb.html\n.. _`Installing ZODB`:  http://www.zope.org/Wikis/ZODB/guide/node3.html#SECTION000310000000000000000\n.. _pymacs:             http://pymacs.progiciels-bpi.ca/index.html\n.. _`Customizing Leo`:  customizing.html\n", "children": []}, {"h": "Controlling Leo from Emacs using Pymacs", "gnx": "ekr.20061025081359", "b": "Leo's leoPymacs module is a simple 'server' for the pymacs_ package.\nUsing pymacs and leoPymacs, elisp_ scripts in Emacs_ can open .leo files and execute *Python* scripts\nas if they were executed inside Leo.\nIn particular, such scripts can use Leo's predefined c, g and p variables.\nThus, *Python* scripts running in Emacs can:\n\n- Open any .leo file. \n- Access any part of the outline. \n- Change any part of the outline, including external files, \n- Save .leo files.\n- Execute *any* Leo script.\n\nIn short, you can now do from Emacs anything that you can do with Leo scripting inside Leo.\n\nHere are step-by-step instructions for executing Python scripts in Emacs:\n\n**Step 1. Install pymacs** \n\n   The pymacs installation instructions should be clear enough.\n   A clarification is needed about two-way communication between Python and lisp scripts:\n   in truth, Python scripts can call the Pymacs.lisp function *only* if the Python script\n   was invoked from emacs.\n   Otherwise, calling Pymacs.lisp will hang the process making the call.\n   For example, executing the following script as an ordinary Leo script will hang Leo::\n\n        from Pymacs import lisp\n        print lisp(\"\"\"2+2\"\"\") # Hangs\n\n**Step 2. Load the leoPymacs module from Emacs, creating a hidden Leo application**\n\n  From inside Emacs, you load Leo's leoPymacs module as follows::\n\n    (pymacs-load \"leoPymacs\" \"leo-\")\n\n  The call to pymacs-load is similar to 'import leoPymacs as leo-' in Python.\n  The side effect of pymacs-load is to define the elisp function leo-x for every top-level function x in leoPymacs.py,\n  namely leo-dump, leo-get-app, leo-get-g, leo-get-script-result, leo-init, leo-open and leo-run-script.\n  The first call to any of these functions creates a **hidden Leo application**\n  in which .leo files may be loaded, modified and saved,\n  and in which Leo scripts may be executed.\n  This hidden Leo application uses Leo's nullGui class as its gui,\n  so Leo commands and Leo scripts that require a fully functional gui will not work as\n  expected in the hidden Leo application.\n  Steps 3 and 4 tell how to use this hidden Leo application.\n\n  pymacs-load works like a Python reload, so you can redefine leoPymacs.py while Emacs is running.\n  However, calling pymacs-load destroys the old hidden Leo application and creates a new one,\n  so typically you would want to call pymacs-load only once per Emacs session.\n  Like this::\n\n        (setq reload nil) ; change nil to t to force a reload.\n\n        (if (or reload (not (boundp 'leoPymacs)))\n            (setq leoPymacs (pymacs-load \"leoPymacs\" \"leo-\"))\n            (message \"leoPymacs already loaded\")\n        )\n\n**Step 3. From Emacs, open .leo files**\n\n   Once we have loaded the leoPymacs module\n   we can open a .leo file as follows::\n\n    (setq c (leo-open fileName))\n\n   This binds the elisp c variable to the Leo commander created by opening fileName.\n   fileName should be the full path to a .leo file.\n   In the next step we will use this c variable to execute *Leo* scripts in the\n   context of an open Leo outline.\n\n   Sometimes we want to execute a Leo script before opening any Leo commanders.\n   For example, we might want to compute the fileName passed to leo-open.\n   leo-run-script allows the c argument to be nil,\n   in which case leo-run-script creates a dummy commander in which to run the script.\n   For example, the following script calls g.os_path_join and g.os_path_abspath::\n\n        (setq script \"g.app.scriptResult =\n            g.os_path_abspath(g.os_path_join(\n                g.app.loadDir,'..','test','ut.leo'))\"\n        )\n\n        (setq fileName (leo-run-script nil script))\n\n   leo-run-script returns the value of g.app.scriptResult\n   As shown above, Python scripts may set g.app.scriptResult to indicate their result.\n   elisp scripts can also get g.app.scriptResult using leo-script-result.\n   Note that the Python script may span multiple lines.\n\n**Step 4. From Emacs, execute Leo (Python) scripts**\n\n   From emacs we can execute a Python script **as if** it were executed in an\n   open Leo outline.\n   Suppose aLeoScript is an **elisp** string containing a Leo (Python) script.\n   We can execute that script in the hidden Leo application as follows::\n\n        (leo-run-script c aLeoScript)\n\n   For example::\n\n        (setq c (leo-open fileName)\n        (csetq script \"print 'c',c,'h',c.p.h\")\n        (leo-run-script c script)\n\nPutting this all together, we get::\n\n        ; Step 1: load leoPymacs if it has not already been loaded.\n        (setq reload nil)\n        (if (or reload (not (boundp 'leoPymacs)))\n            (setq leoPymacs (pymacs-load \"leoPymacs\" \"leo-\"))\n            (message \"leoPymacs already loaded\")\n        )\n\n        ; Step 2: compute the path to leo/test/ut.leo using a Leo script.\n        (setq script\n            \"g.app.scriptResult = g.os_path_abspath(\n                g.os_path_join(g.app.loadDir,'..','test','ut.leo'))\"\n        )\n        (setq fileName (leo-run-script nil script))\n\n        ; Step 3: execute a script in ut.leo.\n        (setq c (leo-open fileName))\n        (setq script \"print 'c',c.shortFileName() ,'current:',c.p.h\")\n        (leo-run-script c script)\n", "children": []}, {"h": "Functions in leoPymacs.py", "gnx": "ekr.20061025070825.1", "b": "The leoPymacs module is intended to be called from Emacs using pymacs.  It contains the following top-level functions:\n\n- get_app()\n\n  Returns the hidden app created by the leoPymacs.init function.\n\n- dump(anyPythonObject)\n\n  Returns str(repr(anyPythonObject)).\n\n- get_g()\n\n  Returns the leoGlobals module of the hidden app created by the leoPymacs.init function.\n\n- get_script_result()\n\n  Returns g.app.scriptResult, where g.app is the hidden app.\n\n- init()\n  Calls leo.run(pymacs=True) to create a hidden Leo application.\n  Later calls to open can open hidden Leo outlines that can be accessed via runScript.\n\n- open(fileName)\n\n  Opens the .leo file given by fileName.\n  fileName must be the full path to a .leo file.\n  Returns the commander of the open Leo outline, or None if the outline could not be opened.\n\n- run_script(c,script,p=None)\n\n  Executes a script in the context of a commander c returned by the leoPymacs.open.\n  c may be None, in which case a dummy commander is created in which to run the script.\n  In the executed script, p is set to c.p if no p argument is specified.\n  Returns g.app.scriptResult, where g.app is the hidden app.\n", "children": []}, {"h": "The minibuffer", "gnx": "ekr.20061025142434", "b": "Leo's mini-buffer is a text area at the bottom of the body pane.\nYou use Leo's minibuffer like the Emacs mini-buffer to invoke commands by their so-called *long name*.\nThe following commands affect the minibuffer:\n\n- **full-command**: (default shortcut: Alt-x) Puts the focus in the minibuffer. Type a\n  full command name, then hit <Return> to execute the command. Tab completion\n  works, but not yet for file names.\n\n- **quick-command-mode**: (default shortcut: Alt-x) Like Emacs Control-C. This mode is\n  defined in leoSettings.leo. It is useful for commonly-used commands.\n\n- **universal-argument**: (default shortcut: Alt-u) Like Emacs Ctrl-u. Adds a repeat\n  count for later command. Ctrl-u 999 a adds 999 a's.\n\n- **keyboard-quit**: (default shortcut: Ctrl-g) Exits any minibuffer mode and puts\n  the focus in the body pane.\n\nFor example, to print a list of all commands type Alt-X print-commands <Return>.\n", "children": []}, {"h": "ILeo - the IPython bridge", "gnx": "ekr.20080203101507", "b": "", "children": ["ekr.20100805165051.7171"]}, {"h": "@file IpythonBridge.txt", "gnx": "ekr.20100805165051.7171", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20080203101507.1"]}, {"h": "@rst html\\IPythonBridge.html", "gnx": "ekr.20080203101507.1", "b": "###############\nIPython and Leo\n###############\n\n.. _`run Leo in a console window`: installing.html#running-leo-from-a-console-window\n\nLeo's ipython plugin provides two-way communication (a bridge) between Leo and\nIPython: you can run Leo scripts from IPython, and IPython scripts from Leo. To\nuse this plugin, you must `run Leo in a console window`_. When this plugin is\nenabled, Leo's start-ipython command starts IPython_ in this console.\n\nRemarkably, Leo and IPython run simultaneously in the same process,\nyet their separate event loops do not interfere with each other.\nScripts run from IPython *immediately* change Leo,\n*exactly* as if the script were run from Leo.\nConversely, scripts run from Leo *immediately* affect the IPython interpreter.\nAs a result, Leo might be considered an `IPython Notebook`_.\n\nThe bridge between Leo and IPython is powerful because it is simple. Indeed,\n\n1. **You can run any IPython script from Leo**.\nOn the Leo side, a single statement::\n\n    ip = IPython.ipapi.get()\n\nassigns ip to IPython's _ip variable. The ip variable allows scripts running in\nLeo to do *anything* that an IPython script can do.\n\n2. **You can run any Leo script from IPython**. \nThe ipython plugin injects a single object named '_leo' into the IPython namespace. \nIPython scripts access Leo's c and g objects as\nfollows::\n\n    c,g = _leo.c, _leo.g\n\nThe c and g variables allow scripts running in IPython to do *anything* that a\nLeo script can do. \n\nThis is basically everything that is required for IPython-Leo interaction.\nHowever, you probably wont use 'c' and 'g' directly, but use a series of\nconvenience wrappers described in this document that make interactive work\npainless and powerful.\n\n.. contents::\n    :depth: 2\n\n\n", "children": ["ekr.20080203101507.2", "vivainio.20080302174639.1", "vivainio.20080302174639.2", "vivainio.20080302174639.3", "vivainio.20080302174639.4", "vivainio.20080302174639.5", "vivainio.20080302174639.6", "vivainio.20080401152121.2", "vivainio.20080302174639.7", "vivainio.20080302174639.8", "vivainio.20080318125834.2", "vivainio.20080302194307", "vivainio.20080302174639.9", "vivainio.20080302174957"]}, {"h": "@rst-no-head links", "gnx": "ekr.20080203101507.2", "b": ".. Links\n\n.. _ipython:                http://ipython.scipy.org/\n.. _IPython:                http://ipython.scipy.org/\n.. _`IPython Notebook`:     http://projects.scipy.org/ipython/ipython/wiki/NoteBook\n.. _extensionAPI:           http://ipython.scipy.org/moin/IpythonExtensionApi\n.. _`The Ipython Extension API`: extensionAPI_\n.. _`Scripting Leo with Python`:    scripting.html\n\n.. _`run Leo in a console window`:  installing.html#running-leo-from-a-console-window\n.. _`console window`:               installing.html#running-leo-from-a-console-window\n", "children": []}, {"h": "Introduction", "gnx": "vivainio.20080302174639.1", "b": "ILeo, or leo-ipython bridge, creates a two-way communication channel between Leo\nand IPython. The level of integration is much deeper than conventional\nintegration in IDEs; most notably, you are able to store and manipulate **data**\nin Leo nodes, in addition to mere program code - essentially making ILeo a\nhierarchical spreadsheet, albeit with non-grid view of the data. The\npossibilities of this are endless, and the approach can be applied in wide range\nof problem domains with very little actual coding.\n\nIPython users are accustomed to using things like %edit to produce non-trivial\nfunctions/classes (i.e. something that they don't want to enter directly on the\ninteractive prompt, but creating a proper script/module involves too much\noverhead). In ILeo, this task consists just going to the Leo window, creating a node\nand writing the code there, and pressing alt+I (push-to-ipython).\n\nObviously, you can save the Leo document as usual - this is a great advantage\nof ILeo over using %edit, you can save your experimental scripts all at one\ntime, without having to organize them into script/module files (before you\nreally want to, of course!)\n", "children": []}, {"h": "Installation and startup", "gnx": "vivainio.20080302174639.2", "b": "You need at least Leo 4.4.8, and IPython 0.8.3\n\nThe ILeo concept is still being developed actively, so if you want to get access\nto latest features you can get IPython from Launchpad by installing bzr and\ndoing::\n\n    bzr branch lp:ipython\n    cd ipython\n    python setupegg.py develop\n\nYou need to enable the 'ipython.py' plugin in Leo: \n\n- Help -> Open LeoSettings.leo\n\n- Edit @settings-->Plugins-->@enabled-plugins, add/uncomment 'ipython.py'\n\n- Alternatively, you can add @settings-->@enabled-plugins with body ipython.py to your leo document.\n\n- Restart Leo. Be sure that you have the console window open\n  (`run Leo in a console window`_, or double-click leo.py on windows)\n\n- When using the Qt ui, add --ipython argument to command line (e.g. launchLeo.py --ipython).\n\n- Press alt+shift+i OR alt-x start-ipython to launch IPython in the console that\n  started leo. You can start entering IPython commands normally, and Leo will keep\n  running at the same time.\n\n- Note that you can just press alt-I (push-to-ipython) - it will start IPython\n  if it has not been previously started. However, when you open a new leo\n  document, you have to execute start-ipython (alt+shift+I) again to tell\n  IPython that the new commands should target the new document. IPython session\n  will not be restarted, only the leo commander object is updated in the\n  existing session.\n\n- If you want to specify command line arguments to IPython (e.g. to choose a\n  profile, or to start in 'pylab' mode), add this to your @settings:\n  '@string ipython_argv = ipython -pylab' (where -pylab is the command line argument)\n", "children": []}, {"h": "Accessing IPython from Leo", "gnx": "vivainio.20080302174639.3", "b": "IPython code\n------------\n\nJust enter IPython commands on a Leo node and press alt-I to execute\npush-to-ipython in order to execute the script in IPython. 'commands' is\ninterpreted loosely here - you can enter function and class definitions, in\naddition to the things you would usually enter at IPython prompt - calculations,\nsystem commands etc.\n\nEverything that would be legal to enter on IPython prompt is legal to execute\nfrom ILeo.\n\nResults will be shows in Leo log window for convenience, in addition to the console.\n\nSuppose that a node had the following contents::\n\n    1+2\n    print \"hello\"\n    3+4\n\n    def f(x):\n        return x.upper()\n\n    f('hello world')\n\nIf you press alt+I on that node, you will see the following in Leo log window (IPython tab)::\n\n    In: 1+2\n    <2> 3\n    In: 3+4\n    <4> 7\n    In: f('hello world')\n    <6> 'HELLO WORLD'\n\n(numbers like <6> mean IPython output history indices; the actual object can be\nreferenced with _6 as usual in IPython).\n\n\nPlain Python code\n-----------------\n\nIf the headline of the node ends with capital P, alt-I will not run the code\nthrough IPython translation mechanism but use the direct python 'exec' statement\n(in IPython user namespace) to execute the code. It wont be shown in IPython\nhistory, and sometimes it is safer (and more efficient) to execute things as\nplain Python statements. Large class definitions are good candidates for P\nnodes.\n", "children": []}, {"h": "Accessing Leo nodes from IPython", "gnx": "vivainio.20080302174639.4", "b": "The real fun starts when you start entering text to leo nodes, and are using\nthat as data (input/output) for your IPython work.\n\nAccessing Leo nodes happens through the variable **wb** (short for \"WorkBook\")\nthat exist in the IPython user namespace. Nodes that are directly accessible are\nthe ones that have simple names which could also be Python variable names;\n'foo_1' will be accessible directly from IPython, whereas 'my scripts' will not.\nIf you want to access a node with arbitrary headline, add a child node '@a foo'\n(@a stands for 'anchor'). Then, the parent of '@a foo' is accessible through\n'wb.foo'.\n\nYou can see what nodes are accessible be entering (in IPython) wb.<TAB>. Example::\n\n    [C:leo/core]|12> wb.\n    wb.b           wb.tempfile    wb.rfile       wb.NewHeadline\n    wb.bar         wb.Docs        wb.strlist     wb.csvr    \n    [C:leo/core]|12> wb.tempfile\n                <12> <ipy_leo.LeoNode object at 0x044B6D90>\n\nSo here, we meet the 'LeoNode' class that is your key to manipulating Leo\ncontent from IPython!\n\nLeoNode\n-------\n\nSuppose that we had a node with headline 'spam' and body::\n\n    ['12',2222+32]\n\nwe can access it from IPython (or from scripts entered into other Leo nodes!) by doing::\n\n    C:leo/core]|19> wb.spam.v\n               <19> ['12', 2254]\n\n'v' attribute stands for 'value', which means the node contents will be run\nthrough 'eval' and everything you would be able to enter into IPython prompt\nwill be converted to objects. This mechanism can be extended far beyond direct\nevaluation (see '@cl definitions').\n\n'v' attribute also has a setter, i.e. you can do::\n\n    wb.spam.v = \"mystring\"\n\nWhich will result in the node 'spam' having the following text::\n\n    'mystring'\n\nWhat assignment to 'v' does can be configured through generic functions\n('simplegeneric' module, see ipy_leo.py for examples).\n\nBesides v, you can set the body text directly through::\n\n    wb.spam.b = \"some\\nstring\", \n\nheadline by::\n\n    wb.spam.h = 'new_headline' \n\n(obviously you must access the node through wb.new_headline from that point\nonwards), and access the contents as string list (IPython SList) through\n'wb.spam.l'.\n\nIf you do 'wb.foo.v = 12' when node named 'foo' does not exist, the node titled\n'foo' will be automatically created and assigned body 12.\n\nLeoNode also supports go() that focuses the node in the Leo window, and ipush()\nthat simulates pressing alt+I on the node (beware of the possible recursion!).\n\nYou can access unknownAttributes by .uA property dictionary. Unknown attributes\nallow you to store arbitrary (pickleable) python objects in the Leo nodes; the\nattributes are stored when you save the .leo document, and recreated when you\nopen the document again. The attributes are not visible anywhere, but can be\nused for domain-specific metadata. Example::\n\n    [C:leo/core]|12> wb.spam.uA['coords'] = (12,222)\n    [C:leo/core]|13> wb.spam.uA\n                <13> {'coords': (12, 222)}    \n\nAccessing children with iteration and dict notation\n---------------------------------------------------\n\nSometimes, you may want to treat a node as a 'database', where the nodes\nchildren represent elements in the database. You can create a new child node for\nnode 'spam', with headline 'foo bar' like this::\n\n    wb.spam['foo bar'] = \"Hello\"\n\nAnd assign a new value for it by doing::\n\n    wb.spam['foo bar'].v = \"Hello again\"\n\nNote how you can't use .v when you first create the node - i.e. the node needs\nto be initialized by simple assignment, that will be interpreted as assignment\nto '.v'. This is a conscious design choice.\n\nIf you try to do wb.spam['bar'] = 'Hello', ILeo will assign '@k bar' as the\nheadline for the child instead, because 'bar' is a legal python name (and as\nsuch would be incorporated in the workbook namespace). This is done to avoid\ncrowding the workbook namespace with extraneous items. The item will still be\naccessible as wb.spam['bar']\n\nLeoNodes are iterable, so to see the headlines of all the children of 'spam' do::\n\n    for n in wb.spam:\n        print n.h\n", "children": []}, {"h": "@cl definitions", "gnx": "vivainio.20080302174639.5", "b": "If the first line in the body text is of the form '@cl sometext', IPython will\nevaluate 'sometext' and call the result with the rest of the body when you do\n'wb.foo.v' or press alt+I on the node. An example is in place here. Suppose that we have defined a class (I\nuse the term class in a non-python sense here)::\n\n    def rfile(body,node):\n        \"\"\" @cl rfile \n\n        produces a StringIO (file like obj) of the rest of the body \"\"\"\n\n        import StringIO\n        return StringIO.StringIO(body)\n\n(note that node is ignored here - but it could be used to access headline,\nchildren etc.),\n\nNow, let's say you have node 'spam' with text::\n\n    @cl rfile\n    hello\n    world\n    and whatever\n\nNow, in IPython, we can do this::\n\n    [C:leo/core]|22> f = wb.spam.v\n    [C:leo/core]|23> f\n                <23> <StringIO.StringIO instance at 0x04E7E490>\n    [C:leo/core]|24> f.readline()\n                <24> u'hello\\n'\n    [C:leo/core]|25> f.readline()\n                <25> u'world\\n'\n    [C:leo/core]|26> f.readline()\n                <26> u'and whatever'\n    [C:leo/core]|27> f.readline()\n                <27> u''    \n\nYou should declare new @cl types to make ILeo as convenient your problem domain\nas possible. For example, a \"@cl etree\" could return the elementtree object for\nxml content.\n\nIn the preceding examples, the return value matter. That, of course, is optional.\nYou can just use the @cl node as a convenient syntax for \"run this body text through \na function\". \n\nConsider this example::\n\n    def remote(body, node):\n        out = sshdo(body)\n        c = node.append()\n        c.b = \"@nocolor\\n\" + out\n        c.h = \"Command output\"\n\n(sshdo(s) is a just a trivial function implemented using paramiko, that\nreturns the output from command run over ssh on remote host).\n\nAfter running the above node (by, say, wb.require('remote_impl') if the function is \ndeclared in a node named 'remote_impl'), you can create nodes that have various \nlittle sysadmin tasks (grep the logs, gather data, kick out all the users) like this::\n\n    @cl remote\n    cd /var/log\n    ls -l\n    echo \" --- temp ---\"\n    cd /var/tmp\n    ls -l\n\nPress alt+I on the node to run it. The output will be written to\n\"Command output\" child node.\n", "children": []}, {"h": "Special node types", "gnx": "vivainio.20080302174639.6", "b": "@ipy-startup\n------------\n\nIf this node exist, the *direct children* of this will be pushed to IPython when\nILeo is started (you press alt+shift-i). Use it to push your own @cl\ndefinitions, import the modules you will be using elsewhere in the document, etc.\n\nThe contents of of the node itself will be ignored.\n\n\n@ipy-results\n------------\n\nIf you press alt+I on a node that has @cl, it will be evaluated and the result\nwill be put into this node. Otherwise, it will just be displayed in log tab.\n\n@ipy-root\n---------\n\nYou can set up a subportion of the leo document as a \"sandbox\" for your IPython\nwork. Only the nodes under @ipy-root will be visible through the 'wb' variable.\n\nAlso, when you create a new node (wb.foo.v = 'stuff'), the node foo will be created as\na child of this node. \n\n@a nodes\n--------\n\nYou can attach these as children of existing nodes to provide a way to access\nnodes with arbitrary headlines, or to provide aliases to other nodes. If\nmultiple @a nodes are attached as children of a node, all the names can be used\nto access the same object.\n", "children": []}, {"h": "Launching ILeo from IPython", "gnx": "vivainio.20080401152121.2", "b": "Sometimes you may decide to launch Leo when an IPython session is already\nrunning. This is typically the case when IPython is launched from/as another\napplication (Turbogears/Django shell, Sage, etc.), or you only decide later on\nthat you might want to roll up some scripts or edit your variables in Leo.\n\nLuckily, this is quite easy, if not automatic (yet) using IPython's %run command\nthat runs python code in the IPython process. The only special consideration is\nthat we need to run IPython.Shell.hijack_tk() to prevent Leo Tk mainloop from\nblocking IPython in %run. Here we launch an embedded Leo instance, and create a\nmacro 'embleo' for later use (so that we don't have to repeat these steps)::\n\n    IPython 0.8.3.bzr.r57   [on Py 2.5.1]\n    [C:opt/Console2]|2> import IPython.Shell\n    [C:opt/Console2]|3> IPython.Shell.hijack_tk()\n    [C:opt/Console2]|4> cd c:/leo.repo/trunk\n    [c:leo/leo.repo/trunk]|5> %run launchLeo.py\n\n    reading settings in C:\\leo\\leo\\config\\leoSettings.leo\n\n    ... Leo is starting at this point, but IPython prompt returns ...\n\n    [c:leo/leo.repo/trunk]|6> macro embleo 2-5\n\n    [c:leo/leo.repo/trunk]|7> store embleo\n    Stored 'embleo' (Macro)\n\nNow, in Leo, you only need to press Alt+Shift+I (launch-ipython) to actually\nmake the document visible in IPython. Despite the name, launch-ipython will not\ncreate a new instance of IPython; if an IPython session already exists, it will\nbe automatically used by ILeo.\n", "children": []}, {"h": "Declaring custom push-to-ipython handlers", "gnx": "vivainio.20080302174639.7", "b": "Sometimes, you might want to configure what alt+I on a node does. You can do\nthat by creating your own push function and expose it using\nipy_leo.expose_ileo_push(f, priority). The function should check whether the\nnode should by handled by the function and raise IPython.ipapi.TryNext if it\nwill not do the handling, giving the next function in the chain a chance to see\nwhether it should handle the push.\n\nThis example would print an uppercase version of node body if the node headline ends\nwith U (yes, this is completely useless!)::\n\n    def push_upcase(node):\n        if not node.h.endswith('U'):\n            raise TryNext\n        print node.b.upper()\n\n    ipy_leo.expose_ileo_push(push_upcase, 12)\n\n(the priority should be between 0-100, with 0 being the highest (first one to\ntry) - typically, you don't need to care about it and can usually omit the\nargument altogether)\n", "children": []}, {"h": "Example code snippets", "gnx": "vivainio.20080302174639.8", "b": "Get list of all headlines of all the nodes in leo::\n\n    [node.h for node in wb]\n\nCreate node with headline 'baz', empty body::\n\n    wb.baz\n\nCreate 10 child nodes for baz, where i is headline and 'Hello ' + i is body::\n\n    for i in range(10):\n        wb.baz[i] = 'Hello %d' % i\n\nCreate 5 child nodes for the current node (note the use of special _p variable,\nwhich means \"current node\") and moves focus to node number 5::\n\n    for i in range(10):\n        _p[i] = 'hello %d' % d\n    _p[5].go()\n\nSort contents of a node in alphabetical order (after pushing this to\nIPython, you can sort a node 'foo' in-place by doing sort_node(wb.foo))::\n\n    def sort_node(n):\n        lines = n.l\n        lines.sort()\n        n.l = lines\n", "children": []}, {"h": "Example use case: pylab", "gnx": "vivainio.20080318125834.2", "b": "If you install matplotlib and numpy, you can use ILeo to interactively edit and\nview your data. This is convenient for storing potentially valuable information\nin Leo document, and yields an interactive system that is comparable in\nconvenience to various commercial mathematical packages (at least if you compare\nit against plain IPython, that forgets the data on exit unless explicitly saved\nto data files or %store:d).\n\nStartup\n-------\n\nIt's probably safest to rely on TkAgg back end, to avoid two event loops running\nin the same process. TkAgg is the default, so the only thing you need to do is\nto install numpy and matplotlib::\n\n    easy_install numpy\n    easy_install matplotlib\n\nFinally, you need to start up IPython with '-pylab' option. You can accomplish\nthis by having the following under some @settings node::\n\n    @string ipython_argv = ipython -pylab\n\nThen, you just need to press alt+I to launch IPython.\n\nUsage\n-----\n\nThe simplest use case is probably pushing an existing array to Leo for editing.\nLet's generate a simple array and edit it::\n\n    [c:/ipython]|51> a = arange(12).reshape(3,4)\n    [c:/ipython]|52> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11]])\n    [c:/ipython]|53> %lee a\n\nThis (the magic command %lee, or 'leo edit') will open variable 'a' for editing\nin Leo, in a convenient pretty-printed format. You can press alt+I on the node\nto push it back to IPython.\n\nIf you want to store the variable in a node with a different name (myarr), you can do::\n\n    [c:/ipython]|54> wb.myarr.v = a\n\nThen, you can always get the value of this array with wb.myarr.v. E.g. you could\nhave a node that plots the array, with content::\n\n    # press alt+i here to plot testarr\n\n    plot(wb.myarr.v)\n\nAnd, as per instructions, pressing alt+I will launch a new Tk window with the\nplotted representation of the array!\n", "children": []}, {"h": "Magic functions", "gnx": "vivainio.20080302194307", "b": "%mb\n---\n\nExecute leo minibuffer command. Tab completion works. Example::\n\n    mb open-outline\n\n%lee\n----\n\nStands for \"LEo Edit\". Allows you to open file(s), and even objects in Leo for editing. Examples::\n\n    lee *.txt\n\nOpens all txt files in @auto nodes\n\n::\n\n    lee MyMacro\n\nOpens the macro MyMacro for editing. Press alt-I to push the edited macro back to IPython.\n\n::\n\n  s = 'hello word'\n  lee s\n\nOpens the variable s for editing. Press alt+I to push the new value to IPython.\n\n::\n\n    lee hist   \n\nOpens IPython interactive history (both input and output) in Leo.\n", "children": []}, {"h": "Acknowledgements and history", "gnx": "vivainio.20080302174639.9", "b": "This idea got started when I (Ville M. Vainio) saw this post by Edward Ream (the author of\nLeo) on IPython developer mailing list:\n\n    http://lists.ipython.scipy.org/pipermail/ipython-dev/2008-January/003551.html\n\nI was using FreeMind as mind mapping software, and so I had an immediate use\ncase for Leo (which, incidentally, is superior to FreeMind as mind mapper). The\nwheels started rolling, I got obsessed with the power of this concept\n(everything clicked together), and Edwards excitement paralleled mine.\nEverything was mind-bogglingly easy/trivial, something that is typical of all\npromising technologies.\n\nThe goal of close cooperation between Leo and IPython went from\nvague dream to completed reality over the span of about 10 days.\n", "children": []}, {"h": "@rst-ignore Old documentation - not completely valid anymore", "gnx": "vivainio.20080302174957", "b": "", "children": ["ekr.20080204100523.1", "ekr.20080204100523", "ekr.20080204100523.2", "ekr.20080205080801", "ekr.20080204100523.3", "ekr.20080210101336"]}, {"h": "Commands", "gnx": "ekr.20080204100523.1", "b": "This plugin creates the following Leo commands commands:\n\n- The start-ipython command starts the singleton IPython instance running in the\n  console and injects a Leo Interface Object into IPython's user namespace.\n  **Run the start-ipython command before running the other commands**.\n\n\n  **Important**: The start-ipython command blocks. That is, the command does not\n  finish execution until IPython exits. In a typical workflow, IPython exits\n  after Leo does, so the the start-ipython command *never* completes.\n\n  Remarkably, this does not affect Leo's main loop: Leo itself does not block.\n  However, because the start-ipython command blocks, it is not possible for the\n  command to do any follow up initialization of IPython. In practice, this does\n  not matter, because IPython provides several ways of executing scripts on\n  startup. In short, it is often more convenient to initialize Leo from IPython\n  than to initialize IPython from Leo.\n\n- The push-to-ipython command pushes data to IPython.\n  By default, it executes the body text of the presently\n  selected node in IPython.\n", "children": []}, {"h": "Startup", "gnx": "ekr.20080204100523", "b": "This plugin creates an instance of the **ipythonController** class for each Leo\nwindow. The ipythonController objects manage a singleton instance of IPython's\nIPShellEmbed class. See http://ipython.scipy.org/doc/manual/node9.html. Creating\nthis singleton instance starts IPython running in the console from which Leo was\nrun. As mentioned in the introduction, Leo and IPython appear to run\nsimultaneously. Their event loops do not interfere with each other.\n\nThe term **startup time** refers to the time that the singleton IPython instance is created.\n\nInitializing Leo from IPython is easier than initializing IPython from Leo.\nIndeed, the start-ipython command typically blocks and never returns, so it is not possible\nto schedule a Leo script to be run after the start-ipython command returns.\nInstead, it will typically be more convenient to use IPython's normal facilities to\nschedule a script that initializes Leo when IPython starts.\n\nThe start-ipython command starts IPython running in the console and injects leox, a\n**Leo Interface Object** into IPython's user namespace.\nUsing the leox object, IPython scripts can gain access to Leo's c and g variables::\n\n    c,g = leox.c,leox.g\n\nThus, IPython scripts can do *anything* that can be done in Leo.\nSee `Scripting Leo from IPython`_ for full details.\n\nConversely, Leo scripts can gain access to IPython's _ip variable::\n\n    ip = c.ipythonController.ip\n\nThus, Leo scripts can do *anything* that can be done in IPython.\nSee `Scripting IPython from Leo`_ for full details.\n", "children": []}, {"h": "Scripting IPython from Leo", "gnx": "ekr.20080204100523.2", "b": "Just as c and g provide full access to all aspects of Leo,\nIPython's _ip var (and _ip.IP) provide full access of all of IPython's internals.\nSee extensionAPI_ for details.\nThe following script sets ip to IPython's _ip var::\n\n    ip = c.ipythonController.ip # set ip to IPython's _ip var.\n\nWith ip defined as above, IPython scripts **running in Leo**\ncan do anything that a script running in IPython can do.\n\nLeo scripts can simulate this plugins's minibuffer commands as follows.\n\nTo simulate the start-ipython command::\n\n    x = c.ipythonController\n    if x and not x.started(): x.startIPython()\n\nTo simulate the push-to-ipython command::\n\n    x = c.ipythonController\n    if x and x.started(): x.pushToIPython()\n\nTo run a given script in IPython::\n\n    x = c.ipythonController\n    if x and x.started(): x.pushToIPython(script=script)\n", "children": []}, {"h": "Scripting Leo from IPython", "gnx": "ekr.20080205080801", "b": "The start-ipython command injects the leox object into IPython's\nuser namespace.\nThe c and g ivars of the leox object are\nthe leoGlobals module and\nthe commander of the Leo outline that created the IPython shell, respectively.\nThus scripts **running in IPython** can do *anything* a Leo script can do.\nFor, such scripts can insert and delete nodes in Leo outlines.\nThe changes will become visible as soon as the script (running in IPython)\nredraws the screen.\n\nSee `Scripting Leo with Python`_ for full details about how to script\nLeo.  The following are merely examples about what can be done from IPython.\nAll these examples have been tested.\n\n1. g.app.windowList is a list of all open Leo frames, so an IPython script can\n   get a list of all commanders as follows::\n\n    c,g = leox.c, leox.g\n    commanders = [f.c for f in g.app.windowList]\n\n2. IPython scripts can use the c.config object to get Leo settings.\n   Suppose the body text of an @data\n   ipython-bridge-startup-script setting contains a script to be executed when\n   ipython starts up. An Ipython script can get that startup script as follows::\n\n    c = leox.c\n    startupScript = c.config.getData('ipython-bridge-startup-script')\n\n3. Suppose the body text of an @data ipython-bridge-auto-open setting contains a\n   list of .leo files to be automatically opened on startup. The following\n   IPython script opens those files::\n\n    c,g = leox.c, leox.g\n    files = c.config.getData('ipython-bridge-auto-open-leo-files')\n        # getData strips lines starting with '#'.\n    for z in files:\n        fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,z))\n        g.openWithFileName(fileName, old_c=c)\n", "children": []}, {"h": "@rst-ignore User Settings", "gnx": "ekr.20080204100523.3", "b": "", "children": []}, {"h": "Acknowledgements", "gnx": "ekr.20080210101336", "b": "This plugin would not have been possible without the help of Ville M. Vainio.\n", "children": []}, {"h": "Embedding Leo with the leoBridge module", "gnx": "ekr.20070317033759", "b": "", "children": ["ekr.20100805165051.7169"]}, {"h": "@file leoBridge.txt", "gnx": "ekr.20100805165051.7169", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20070317033759.1"]}, {"h": "@rst html\\leoBridge.html", "gnx": "ekr.20070317033759.1", "b": "#######################################\nEmbedding Leo with the leoBridge module\n#######################################\n\nThe leoBridge module allows complete access to all aspects of Leo from other\nPython programs running independently of Leo. Let us call such a program a\n**host** program. Using the leoBridge module, host programs can get access to:\n\n- all of Leo's source code,\n- the contents of any .leo file,\n- the commander of any .leo file.\n\n.. contents::\n    :depth: 2\n\n", "children": ["ekr.20070317033759.2", "ekr.20070317033759.3", "ekr.20071210094621"]}, {"h": "@rst-no-head links", "gnx": "ekr.20070317033759.2", "b": ".. Links\n", "children": []}, {"h": "The basics", "gnx": "ekr.20070317033759.3", "b": "Host programs use the leoBridge module as follows::\n\n    import leo.core.leoBridge as leoBridge\n    controller = leoBridge.controller(gui='nullGui')\n    g = controller.globals()\n    c = controller.openLeoFile(path)\n\nLet us look at these statements in detail.  The statements::\n\n    import leo.core.leoBridge as leoBridge\n    controller = leoBridge.controller(gui='nullGui')\n\nimport the leoBridge module and create a **bridge controller**. In effect, these\nstatements embed an invisible copy of Leo into the host program. This embedded\ncopy of Leo uses a null gui, which simulates all aspects of Leo's normal gui\ncode without creating any screen objects.\n\nThe statement::\n\n    g = controller.globals()\n\nprovides access to Leo's leoGlobals module, and properly inits globals such as\ng.app, g.app.gui, etc. *Host programs should not import leoGlobals directly*,\nbecause doing so would not init the g.app object properly.\n\nThe statement::\n\n    c = controller.openLeoFile(path)\n\ninvisibly opens the .leo file given by the path argument. This call returns a\ncompletely standard Leo commander, properly inited. This is the big payoff from\nthe leoBridge module: the host program gets instant access to c.config.getBool,\netc. Do you see how sweet this is?\n\nFor example, the following script runs leo/test/leoBridgeTest.py outside of Leo.\nleoBridgeTest.py uses the leoBridge module to run all unit tests in leo/test/unitTest.leo::\n\n    import os,sys\n\n    path = g.os_path_abspath(\n        g.os_path_join(\n            g.app.loadDir,'..','test','leoBridgeTest.py'))\n\n    os.system('%s %s' % (sys.executable,path))\n\nThe file leo/test/test.leo contains the source code for leoBridgeTest.py.\nHere it is, stripped of its sentinel lines::\n\n    '''A program to run unit tests with the leoBridge module.'''\n\n    import leo.core.leoBridge as leoBridge\n    import leo.core.leoTest as leoTest\n\n    def main ():\n        tag = 'leoTestBridge'\n\n        # Setting verbose=True prints messages that would be sent to the log pane.\n        bridge = leoBridge.controller(gui='nullGui',verbose=False)\n        if bridge.isOpen():\n            g = bridge.globals()\n            path = g.os_path_abspath(g.os_path_join(\n                g.app.loadDir,'..','test','unitTest.leo'))\n            c = bridge.openLeoFile(path)\n            g.es('%s %s' % (tag,c.shortFileName()))\n            runUnitTests(c,g)\n\n        print tag,'done'\n\n    def runUnitTests (c,g):\n        nodeName = 'All unit tests' # The tests to run.\n        try:\n            u = leoTest.testUtils(c)\n            p = u.findNodeAnywhere(nodeName)\n            if p:\n                g.es('running unit tests in %s...' % nodeName)\n                c.selectPosition(p)\n                c.debugCommands.runUnitTests()\n                g.es('unit tests complete')\n            else:\n                g.es('node not found:' % nodeName)\n        except Exception:\n            g.es('unexpected exception')\n            g.es_exception()\n            raise\n\n    if __name__ == '__main__':\n        main()\n", "children": []}, {"h": "Running leoBridge from within Leo", "gnx": "ekr.20071210094621", "b": "This following is adapted from Terry Brown's entry in Leo's wiki.\n\nYou can not just run leoBridge from Leo, because the leoBridge module is designed\nto run a separate copy of Leo. However, it is possible to run leoBridge from a\nseparate process. That turned out to be more, um, interesting than anticipated,\nso I'm recording the results here.\n\nThe idea is that script A running in Leo (i.e. in a regular GUI Leo session)\ncalls script B through subprocess.Popen(), script B uses LeoBridge to do\nsomething (parse unloaded Leo files), and returns the result to script A.\nPassing the result back via the clipboard seemed like a possibility, but\nXWindows / tcl/tk clipboard madness being what it is, that didn't seem to work.\n\nFirst trick, calling script B from script A::\n\n    import subprocess\n    p = subprocess.Popen(('python',\n        path_to_script_B,\n        parameter_for_script_B,),\n        stdout=subprocess.PIPE,\n        env={'PYTHONPATH': g.app.loadDir,'USER': g.app.leoID},\n    )\n    p.wait()\n\nSetting PYTHONPATH in the environment seemed like the easiest way to let\nscript B find leoBridge.py (which it needs to import).  But by setting the\nenv parameter you limit script B's environment to be **only** PYTHONPATH,\nwhich causes leoBridge to fail because, in unix at least, it depends\non USER in the environment.  So you need to pass that through, too.\n\nNow, because passing stuff back on the clipboard seems unreliable, at least\nin XWindows, script B passes results back to script A via stdout (print),\nbut there's some Leo initialization chatter you want to avoid.  So put a\nsentinel, 'START_CLIPBOARD', in the output, and collect it like this::\n\n    response = p.stdout.readlines()\n    while response and 'START_CLIPBOARD' not in response[0]:\n        del response[0]\n    del response[0]  # delete the sentinel as well\n    response = ''.join(response)\n\nThis is the basic mechanism.  What I *actually* wanted to do was have script\nB generate a branch of nodes and pass that back to script A for insertion in\nthe tree script A is running in.  That's relatively easy if you use::\n\n    c.setCurrentPosition(pos_of_branch_to_return)\n    c.copyOutline()\n    print '<!-- START_CLIPBOARD -->'\n    print g.app.gui.getTextFromClipboard()\n    print '<!-- END_CLIPBOARD -->'\n\nat the end of script B. Back in script A, after you've rebuilt\n`response` as shown above, do::\n\n    g.app.gui.replaceClipboardWith(response)\n    c.pasteOutline()\n", "children": []}, {"h": "Using Vim with Leo", "gnx": "TL.20080804095315.1", "b": "", "children": ["ekr.20100805165051.7172"]}, {"h": "@file vimBindings.txt", "gnx": "ekr.20100805165051.7172", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["TL.20080804095315.2"]}, {"h": "@rst html\\vimBindings.html", "gnx": "TL.20080804095315.2", "b": "###########################\nUsing Vim Bindings with Leo\n###########################\n\nThis chapter describes Leo's vim-like bindings, including how to install them.\n\n.. contents::\n    :depth: 3\n", "children": ["TL.20080804095315.4", "TL.20080804095315.5", "TL.20080804095315.6", "TL.20080804095315.7", "TL.20080804095315.8", "TL.20080804095315.9"]}, {"h": "Installing vim bindings", "gnx": "TL.20080804095315.4", "b": "Place a copy of the \"@keys Vim bindings\" node and its sub-nodes,\nlocated in the leoSettings.leo file, under the \"@settings\" node\nin the myLeoSettings.leo file\n\nThe same procedure is performed to update to a new version.\n\nNote: Place any local customized key bindings in a separate\n\"@keys My Vi\" node in the myLeoSettings.leo file to prevent\nthem from being overwritten when updating to a new version.\n", "children": []}, {"h": "General commands", "gnx": "TL.20080804095315.5", "b": "The following commands are always available.\n\nState change commands::\n\n    i           Change state to insert from command state\n    Esc         Change state to command from insert state\n    Ctrl-[      Same as ESC\n\nSave/Exit/Quite commands::\n\n    :e          Revert\n    :w<return>  Save '.leo' file\n    :wq<return> Save '.leo' file and quit Leo\n    :q<return>  Quit Leo   (Leo will prompt if file not saved)\n    ZZ          Save leo file and exit\n\nUndo/Redo commands::\n\n    u           Undo previous command\n    Ctrl-r      Redo previous command\n\n\nSearch options::\n\n    Ctrl-/      Prompt for option to change\n                Options:\n                    a   Search all nodes (also <cr> key)\n                    h   Toggle headline search\n                    b   Toggle body search\n                    m   Toggle marking of nodes (specify sub-option)\n                        f   Toggle marking of nodes with found text\n                        c   Toggle marking of nodes with changed text\n                            (only supported with 'Alt-/', 'Alt-p')\n                    r   Toggle regex matches\n                        ('/' key turns off regex. 'n' key uses regex if turned on)\n\n    Note: Whether a search is limited to node's body or the node's sub-outline\n          is determined by which pane has focus when search text specified.\n          (See \"Find text commands:\" sub-sections in Outline/Body Pane sections)\n\nMiscellaneous commands::\n\n    Tab         Toggle focus between Outline and Body pane\n    =           Simulate double-click on current node's icon box\n    Alt-G       Go to specified line number (relative to external file)\n    Ctrl-:      Enter Leo's command line\n", "children": []}, {"h": "Body pane commands", "gnx": "TL.20080804095315.6", "b": "Move cursor commands::\n\n    h           Go back 1 character\n       LtArrow  Mapped to \"h\" for convenience\n    j           Go down 1 line\n       DnArrow  Mapped to \"j\" for convenience\n    k           Go up 1 line\n       UpArrow  Mapped to \"k\" for convenience\n    l           Go forward 1 character\n       RtArrow  Mapped to \"l\" for convenience\n\n    w           Go to beginning of next word\n       W        Mapped to \"w\" until \"stop after blank characters\" supported\n    b           Go to beginning of current/previous word\n       B        Mapped to \"b\" until \"stop at blank character\" supported\n    e           Go to end of current/next word\n       E        Mapped to \"e\" until \"stop at blank character\" supported\n\n    Note: Move by word commands stop at non-alpha characters\n\n    |           Goto beginning of current line\n    ^           Go to 1st non-blank character on current line\n    $           Goto end of current line\n\n    %           Go to matching bracket\n\n    (           Go to beginning of current sentence\n    )           Go to beginning of next sentence\n    {           Go to beginning of current paragraph\n    }           Go to beginning of next paragraph\n\n    gg          Go to the first line (Cursor at column 1)\n    G           Go to the last line  (Cursor at column 1)\n\nMark commands::\n\n    m<label>    Assign cursor location to a single character label\n    `<label>    Go to location associated with label\n\n      Note: Only character count is tracked. Any inserts or deletes will change mark.\n          Mark's are not node specific; `<label> will go to location in current node.\n\nSelect commands::\n\n    Ctrl-v      Toggle text select mode (Vim's \"visual\" mode)\n       V        Mapped to 'Ctrl-v' for convenience (Should toggle line select)\n\nInsert/substitute commands::\n\n    a           Insert at cursor\n    i           Mapped to \"a\" until \"cursor on a character\" supported\n    A           Insert at end of line\n    I           Insert at first non-space\n    o           Open new line below current line\n    O           Open new line above current line\n    R           Overwrite text\n    s           Substitute character (Delete character, enter insert state)\n    S           Substitute line (Delete line, enter insert state)\n\nChange commands::\n\n    C           Change to end of line\n    cc          Change all of current line\n    cw          Change to end of word\n    cb          Change to beginning of word\n    c)          Delete to end of sentence\n    c(          Delete to beginning of sentence\n    c}          Delete to end of paragraph\n    c{          Delete to beginning of paragraph\n    c%          Change from current bracket type its matching bracket type\n    ct<char>    Selects forward to <char> (follow with 'i' to change selection)\n    cT<char>    Selects backward to <char> (follow with 'i' to change selection)\n    c<cr>       Change selected text\n\nDelete commands::\n\n    x           Delete next character\n    delete      Delete next character\n    D           Delete to the end of the current line\n    dd          Delete current line\n    dw          Delete to end of word\n    db          Delete to beginning of word\n    d)          Delete to end of sentence\n    d(          Delete to beginning of sentence\n    d}          Delete to end of paragraph\n    d{          Delete to start of paragraph\n    d%          Delete from current bracket type to its apposing bracket\n    dt<ch>      Delete to character (not limited to current line)\n    d<cr>       Delete selected text\n\n    J           Join next line to end of current line (deletes carriage return)\n\nYank text commands::\n\n    Y           Yank to end of line\n    yy          Yank line\n    yw          Yank to beginning of next word\n    yb          Yank to beginning of current word\n    y)          Yank to end of sentence\n    y(          Yank to beginning of sentence\n    y}          Yank to end of paragraph\n    y{          Yank to beginning of paragraph\n    y%          Yank from current bracket type to its opposing bracket\n    yt<char>    Select forward to <char>  (use 'y<cr>' to yank selection)\n    yT<char>    Select backward to <char> (use 'y<cr>' to yank selection)\n    y<cr>       Yank selected text (Vim uses 'y' in visual mode)\n\nFind character commands::\n\n    f           Find next occurrence of user specified character\n    F           Find previous occurrence of user specified character\n\nFind text commands::\n\n    /           Search forward within current node's body text\n    ?           Search backward within current node's body text\n    n           Find next (same scope, same direction)\n    N           Find next (same scope, other direction)\n\n    Note: See \"Search options\" in General Commands section to change options.\n\nReplace [and find next] commands::\n\n    Commands using Paste buffer (clipboard)\n    P           Paste text before cursor.\n    p           Mapped to \"P\" until character based cursor supported.\n    Ctrl-p      Paste then find next match\n                Note: Use 'pn' instead of 'Ctrl-p' in headlines (Leo limitation)\n                      Command will continue to paste when match no longer found.\n\n    Commands prompting for replace string\n    Note: Scope and direction taken from last use of '/','?' or 'Ctrl-/'(scope only)\n    Alt-/       Prompt for search & replace string\n    Alt-p       Replace then search (use after Alt-/)\n                Note: Works in headlines and body panes.\n                      Doesn't paste unless last search found a match.\n\nIndent/Unindent line commands::\n\n    >>          Indent the current line\n    >)          Indent to the end of sentence\n    >(          Indent to the beginning of sentence\n    >}          Indent to the end of paragraph\n    >{          Indent to the beginning of paragraph\n    >g          Indent to the start of buffer\n    >G          Indent to the end of buffer\n\n    <>          Unindent the current line\n    <)          Unindent to the end of sentence\n    <(          Unindent to the beginning of sentence\n    <}          Unindent to the end of paragraph\n    <{          Unindent to the beginning of paragraph\n    <g          Unindent to the start of buffer\n    <G          Unindent to the end of buffer\n\nFormat commands::\n\n    gqap        Split long line into separate lines\n    gwap        Split long line into separate lines\n    gqq         Split long line into separate lines\n    gww         Split long line into separate lines\n\n    Note: 'gwap' and 'gww' should not move cursor but do.\n\nScroll commands::\n\n    Ctrl-b      Scroll text up by pane's height\n    Ctrl-f      Scroll text down by pane's height\n       Ctrl-y   Mapped to Ctrl-b until scroll up one line is supported\n       Ctrl-e   Mapped to Ctrl-f until scroll down one line is supported\n       Ctrl-u   Mapped to Ctrl-b until scroll up half a pane height is supported\n       Ctrl-d   Mapped to Ctrl-f until scroll down half a pane height is supported\n\nWindow commands::\n\n    Ctrl-w s    Open another view into current node's body (Vim: Split window)\n       Ctrl-w n Mapped to \"Ctrl-w s\" (Vim: New buffer in split window)\n    Ctrl-w w    Switch to next view (Vim: Go to up/left window w/wrapping)\n       Ctrl-w p Mapped to \"Ctrl-w w\" (Vim: Cycle through windows)\n       Ctrl-w k Mapped to \"Ctrl-w w\" (Vim: Go to window above current window)\n       Ctrl-w j Mapped to \"Ctrl-w w\" (Vim: Go to window below current window)\n    Ctrl-w c    Close current view in body pane (Vim: Close current window)\n       Ctrl-w q Mapped to \"Ctrl-w c\" (Vim: Quit current window)\n\nNode commands::\n\n    Go to another node while focus remains in the body pane.\n    Ctrl-j      Go to next visible node\n    Ctrl-k      Go to previous visible node\n    Ctrl-h      Hide sub-nodes or, if hidden, go up 1 level\n    Ctrl-l      Display sub-nodes or, if displayed, go down 1 level\n       Ctrl-DnArrow    Mapped to \"Ctrl-j\" for convenience\n       Ctrl-UpArrow    Mapped to \"Ctrl-k\" for convenience\n       Ctrl-LtArrow    Mapped to \"Ctrl-h\" for convenience\n       Ctrl-RtArrow    Mapped to \"Ctrl-l\" for convenience\n", "children": []}, {"h": "Outline commands", "gnx": "TL.20080804095315.7", "b": "The following commands are supported when in a headline's command mode.\n\nState change commands::\n\n    Ctrl-i      Change state to command from grayed state\n    return      Change state to command from insert state\n    Ctrl-]      Change state to grayed from command state\n\nCursor movement commands::\n\n    h           Go to previous character\n       LtArrow  Mapped to 'h' for convenience\n    l           Go to next character\n       RtArrow  Mapped to \"l\" for convenience\n\n    Note: 'j' and 'k' will scroll the buffer contents up and down;\n          leaving the focus in the outline pane.\n\n    w           Go to beginning of next word\n       W        Mapped to \"w\" until \"stop after blank characters\" supported\n    b           Go to beginning of current/previous word\n       B        Mapped to \"b\" until \"stop at blank character\" supported\n    e           Go to end of current/next word\n       E        Mapped to \"e\" until \"stop at blank character\" supported\n\n    Note: Move by word commands stop at non-alpha characters\n\n    |           Go to beginning of line\n    ^           Go to beginning of line\n    $           Go to end of line\n\n    %           Go to matching bracket\n\nEdit commands::\n\n    x           Delete next character\n    delete      Delete next character\n    dd          kill-line\n\n    s           Select current character\n\n    v           Toggle text select mode (issue cursor movement commands)\n    y<return>   Yank selected text\n\n    C           Select to end of line (follow with 'i' to change text)\n    cc          Delete line (follow with 'i' to change text)\n\n    D           Select to end of line (follow with 'x' to delete text)\n    dd          Delete line\n\n    Y           Select to end of line (follow with 'y<return>' to yank text)\n    yy          Select line (follow with 'y<return>' to yank text)\n\nFind character commands::\n\n    f           Find next occurrence of user specified character\n    F           Find previous occurrence of user specified character\n\nFind text commands::\n\n    /           Search forward within current node and its subnodes\n    n           Find next (same scope, same direction)\n    N           Find next (same scope, other direction)\n\n    Note: See \"Search options\" section above to change options using 'Ctrl-/'\n\nReplace [and find next] commands::\n\n    Commands that use Paste buffer (clipboard)\n    Note: Paste-then-search command not possible in headlines (Use 'pn')\n    P           Paste text before cursor.\n    p           Mapped to \"P\" until character based cursor supported.\n\n    Commands that prompt for the replace string\n    Alt-/       Prompt for search & replace string\n    Alt-p       Replace then search (use after Alt-/)\n                Note: Works in headlines and body panes.\n                      Doesn't paste unless last search found a match.\n\nNode edit commands::\n\n    o           Insert node after current node\n\n    Ctrl-x      Delete current node\n    Ctrl-c      Yank current node\n    Ctrl-v      Paste current node\n\nNode goto commands::\n\n    G           Go to the outline's last node\n    gg          Go to the outline's first node\n\n    Ctrl-j      Go to next visible node\n    Ctrl-k      Go to previous visible node\n    Ctrl-h      Hide sub-nodes or, if hidden, go up 1 level\n    Ctrl-l      Display sub-nodes or, if displayed, go down 1 level\n\n       DnArrow  Mapped to \"Ctrl-j\" for convenience\n       UpArrow  Mapped to \"Ctrl-k\" for convenience\n\n       Ctrl-DnArrow Mapped to \"Ctrl-j\" for convenience\n       Ctrl-UpArrow Mapped to \"Ctrl-k\" for convenience\n       Ctrl-LtArrow Mapped to \"Ctrl-h\" for convenience\n       Ctrl-RtArrow Mapped to \"Ctrl-l\" for convenience\n\nNode move commands::\n\n    Ctrl-Shift-k    Move node down\n    Ctrl-Shift-h    Move node left\n    Ctrl-Shift-l    Move node right\n    Ctrl-Shift-j    Move node up\n\n       Ctrl-Shift-DnArrow    Mapped to \"Ctrl-Shift-k\" for convenience\n       Ctrl-Shift-LtArrow    Mapped to \"Ctrl-Shift-h\" for convenience\n       Ctrl-Shift-RtArrow    Mapped to \"Ctrl-Shift-l\" for convenience\n       Ctrl-Shift-UpArrow    Mapped to \"Ctrl-Shift-j\" for convenience\n\nNode mark commands::\n\n    m           Toggle node mark\n    Ctrl-m      Go to next marked node\n    Alt-m       Clear all marked nodes\n\nNode clone commands::\n\n    t           Clone the current node (transclude)\n    Ctrl-t      Go to next clone of current node\n\nOutline scroll commands::\n\n   Ctrl-y       Scroll outline up one line\n   Ctrl-e       scroll outline down one line\n   Ctrl-u       Scroll outline up one half page\n   Ctrl-d       scroll outline down one half page\n   Ctrl-b       Scroll outline up one page\n   Ctrl-f       scroll outline down one page\n\n", "children": []}, {"h": "Commands not supported", "gnx": "TL.20080804095315.8", "b": "Notable missing editing commands::\n\n    t<char>     Move cursor to character before specified character\n    r           Replace a single character with a single character\n    0           Go to 1st column in current line (Use '|' instead)\n    bksp        Move one character to the left\n    ~           Toggle character's case\n    .           Repeat last editing command\n    ;           Repeat last cursor movement command\n    <n><cmd>    Perform command 'n' number of times\n    <cmd><n><object>    Perform the command on the n'th or up to the n'th object\n\nNotable missing body pane commands::\n\n    <num>G      Go to specified line number\n    z<movement> Slide buffer to put current line at top/middle/bottom of pane\n    '<command>  Go to line of last edit, jump, ...\n    `<command>  Go to character of last edit, jump, ...\n", "children": []}, {"h": "Avoiding changes to 'tag' files", "gnx": "TL.20080804095315.9", "b": "If you use the open-with plugin to open node text in Vim and your Vim's \"tag\"\nfile refers to external files then there is a risk that a external file that is\ninitially displayed via the \"tag\" command\" in Vim is accidentally edited and\nsaved from the external Vim editor while your Leo session still contains the\nexternal file's original text that may later recreate the original external file\nduring a Leo save operation (overwriting the changes saved from the Vim editor).\n\nTo prevent this problem, modifications to external files can be avoided by using\nVim's \"modeline\" feature to disable editing of external files.\n\nVim's \"modeline\" feature scans each loaded buffer for text at the top or bottom\nof the file containing \" vim:\" followed by a series of Vim options. The text is\nusually embedded within a comment. The following example prevents modifications\nto a buffer in a Python file::\n\n    # vim:noma (A space is required between the '#' and \"vim:noma\")\n\nIf this line is placed in a separate Leo node at the top or bottom of the list\nof nodes under a external file node (ex: @file) then any external file saved and\nthen later loaded into Vim will, by default, not be modifiable. If a derived\nfile does need to be edited then modifications can be re-enabled on a\nfile-by-file basis by issuing Vim's \":ma\" command while viewing the derived\nfile.\n\nThe number of lines that Vim checks at the top and bottom of the buffer is\nconfigurable. The following Vim command must be placed in the vimrc file to\nallow for Leo's trailing sentinel lines::\n\n    set modelines=8\n\nIssue the \":help modeline\" command within Vim for the more information about\nmodelines.\n", "children": []}, {"h": "Using ZODB with Leo", "gnx": "ekr.20060913164304", "b": "", "children": ["ekr.20100805165051.7167"]}, {"h": "@file zodb.txt", "gnx": "ekr.20100805165051.7167", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20060913164304.1"]}, {"h": "@rst html\\zodb.html", "gnx": "ekr.20060913164304.1", "b": "###################\nUsing ZODB with Leo\n###################\n\nThis chapter discusses how to write Leo scripts that store and retrieve data using ZODB_.\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20060913164311", "ekr.20060913170145", "ekr.20060913170403", "ekr.20060913170403.1", "ekr.20060913175437", "ekr.20060913170403.2", "ekr.20060913175437.1", "ekr.20060913165542.1"]}, {"h": "@rst-no-head links", "gnx": "ekr.20060913164311", "b": ".. External links...\n.. _ZODB:               http://www.zope.org/Wikis/ZODB/guide/zodb.html\n.. _`Installing ZODB`:  http://www.zope.org/Wikis/ZODB/guide/node3.html#SECTION000310000000000000000\n", "children": []}, {"h": "Configuring Leo to use zodb", "gnx": "ekr.20060913170145", "b": "To enable zodb scripting within Leo, you must set use_zodb = True in the root node of leoNodes.py.\nYou must also install ZODB itself.  See `Installing ZODB`_ for details.\n\nWhen ZODB is installed and use_zodb is True,\nLeo's vnode class becomes a subclass of ZODB.Persistence.Persistent.\nThis is all that is needed to save/retrieve vnodes or tnodes to/from the ZODB.\n\n**Important notes**:\n\n- Scripts **should not** store or retrieve positions using the ZODB!\n  Doing so makes sense neither from Leo's point of view nor from ZODB's point of view.\n\n- The examples below show how to store or retrieve Leo data by accessing the\n  so-called root of a ZODB connection. However, these are only examples. Scripts\n  are free to do with Leo's vnodes *anything* that can be done with\n  ZODB.Persistence.Persistent objects.\n", "children": []}, {"h": "Initing zodb", "gnx": "ekr.20060913170403", "b": "Scripts should call g.init_zodb to open a ZODB.Storage file.\ng.init_zodb returns an instance of ZODB.DB.  For example::\n\n    db = g.init_zodb (zodbStorageFileName)\n\nYou can call g.init_zodb as many times as you like.\nOnly the first call for any path actually does anything:\nsubsequent calls for a previously opened path simply return the same value as the first call.\n", "children": []}, {"h": "Writing data to zodb", "gnx": "ekr.20060913170403.1", "b": "The following script writes v, a tree of vnodes, to zodb::\n\n    db = g.init_zodb (zodbStorageFileName)\n    connection = db.open()\n    try:\n        root = connection.root()\n        root[aKey] = v # See next section for how to define aKey.\n    finally:\n        get_transaction().commit()\n        connection.close()\n\nNotes:\n\n- v must be a vnode.\n  Scripts should *not* attempt to store Leo positions in the zodb.\n  v can be the root of an entire outline or a subtree.\n  For example, either of the following would be reasonable::\n\n    root[aKey] = c.rootPosition().v\n    root[aKey] = c.p.v\n\n- To write a single vnode without writing any of its children you can use v.detach.\n  For example::\n\n    root[aKey] = v.detach()\n\n- **Important**: It is simplest if only one zodb connection is open at any one time,\n  so scripts would typically close the zodb connection immediately after processing the data.\n  The correct way to do this is in a finally statement, as shown above.\n\n- The script above does not define aKey.\n  The following section discusses how to define reasonable zodb keys.\n", "children": []}, {"h": "Defining zodb keys", "gnx": "ekr.20060913175437", "b": "The keys used to store and retrieve data in connection.root() can be any string that uniquely identifies the data.\nThe following are only suggestions; you are free to use any string you like.\n\n1. When saving a file, you would probably use a key that is similar to a real file path.\n   For example::\n\n        aKey = c.fileName()\n\n2. When saving a single vnode or tree of vnodes, say v,\n   a good choice would be to use v's gnx, namely::\n\n        aKey = g.app.nodeIndices.toString(v.fileIndex)\n\n   Note that v.detach() does not automatically copy v.fileIndex to the detached node,\n   so when writing a detached node you would typically do the following::\n\n       v2 = v.detach()\n       v2.fileIndex = v.fileIndex\n       aKey = g.app.nodeIndices.toString(v2.fileIndex)\n", "children": []}, {"h": "Reading data from zodb", "gnx": "ekr.20060913170403.2", "b": "The following script reads a tree of vnodes from zodb and sets p as the root position of the tree::\n\n    try:\n        connection = db.open()\n        root = connection.root()\n        v = root.get(aKey)\n        p = leoNodes.position(v)\n    finally:\n        get_transaction().commit()\n        connection.close()\n", "children": []}, {"h": "About connections", "gnx": "ekr.20060913175437.1", "b": "The scripts shown above close the zodb connection after processing the data.\nThis is by far the simplest strategy.\nI recommend it for typical scripts.\n\n**Important**: you must **leave the connection open** if your script modifies persistent data in any way.\n(Actually, this statement is not really true,\nbut you must define zodb transaction managers if you intend to use multiple connections simultaneously.\nThis complication is beyond the scope of this documentation.)\nFor example, it would be possible to create a new Leo outline from the data just read,\nbut the script must leave the connection open.\nI do not recommend this tactic, but for the adventurous here is some sample code::\n\n    connection = self.db.open()\n    root = connection.root()\n    v = root.get(fileName)\n    if v:\n        c2 = c.new()\n        c2.openDirectory = c.openDirectory # A hack.\n        c2.mFileName = fileName # Another hack.\n        c2.beginUpdate()\n        try:\n            c2.setRootVnode(v)\n            c2Root = c2.rootPosition()\n            c2.atFileCommands.readAll(c2Root)\n            g.es_print('zodb read: %s' % (fileName))\n        finally:\n            c2.endUpdate()\n        # Do *not* close the connection while the new Leo window is open!\n    else:\n        g.es_print('zodb read: not found: %s' % (fileName))\n\n\nThis will work **provided** that no other zodb connection is ever opened while this connection is opened.\nUnless special zodb precautions are taken (like defining zodb transaction managers)\ncalling get_transaction().commit() will affect **all** open connections.\nYou have been warned.\n", "children": []}, {"h": "Convenience routines", "gnx": "ekr.20060913165542.1", "b": "", "children": ["ekr.20060913165542.2", "ekr.20060913165542.3"]}, {"h": "g.init_zodb (pathToZodbStorage,verbose=True)", "gnx": "ekr.20060913165542.2", "b": "This function inits the zodb.\npathToZodbStorage is the full path to the zodb storage file.\nYou can call g.init_zodb as many times as you like.\nOnly the first call for any path actually does anything:\nsubsequent calls for a previously opened path simply return the same value as the first call.\n", "children": []}, {"h": "v.detach()", "gnx": "ekr.20060913165542.3", "b": "This vnode method returns v2, a copy of v that is completely detached from the\noutline. v2.fileIndex is unrelated to v.fileIndex initially, but it may be\nconvenient to copy this field::\n\n    v2 = v.detach()\n    v2.fileIndex = v.fileIndex\n", "children": []}, {"h": "Reference", "gnx": "ekr.20101025080245.5796", "b": "", "children": ["ekr.20050831184021.5", "EKR.20040524104904.161", "EKR.20040524104904.245", "EKR.20040524104904.261", "ekr.20050901084134", "EKR.20040524104904.274", "ekr.20091111112709.6671"]}, {"h": "Leo's Reference", "gnx": "ekr.20050831184021.5", "b": "", "children": ["ekr.20100805001344.7253"]}, {"h": "@file directives.txt", "gnx": "ekr.20100805001344.7253", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050828061213"]}, {"h": "@rst html/directives.html", "gnx": "ekr.20050828061213", "b": "###############\nLeo's Reference\n###############\n\nThis chapter is a reference for all of Leo's directives.\n\nThis chapter does *not* teach how to use Leo. It assumes you are *thoroughly*\nfamiliar with `Leo's tutorial`_.\n\n.. contents::\n    :depth: 5\n\n", "children": ["ekr.20050828160132", "ekr.20100806170836.4392", "ekr.20100806170836.4411", "ekr.20100806170836.4398", "ekr.20100806170836.4408", "ekr.20100804133903.7262"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050828160132", "b": ".. Links to other chapters\n.. _front:                      front.html\n.. _`Leo's tutorial`:           intro.html\n.. _`Leo and reStructuredText`: rstplugin3.html\n.. _`History of Leo`:           history.html\n.. _`Using Chapters`:           outlines.html#using-chapters\n\n.. For reasons unknown, images must appear in the _images folder on the web site.\n.. |leoAtFileMainNode| image:: screen-shots/leo-qt-at-file-main-node.JPG\n.. |leoAtFileFirstChild| image:: screen-shots/leo-qt-at-file-first-child.JPG\n.. |leoAtFileNamedChild| image:: screen-shots/leo-qt-at-file-named-child.JPG\n", "children": []}, {"h": "Part 1: \\@<file> directives", "gnx": "ekr.20100806170836.4392", "b": ".. index::\n    pair: @<file>; Reference\n\nThis section discusses the \\@<file> directives. These directives create or\nimport external files.\n\n**Important**: Newcomers to Leo should create external files with \\@auto or\n\\@file. Use \\@auto if your external files must not contain sentinel lines. Use\n\\@file otherwise. In particular, \\@file is **highly recommended** when sharing\nexternal files in a collaborative environment.\n\n**Note**: All these directive must appear in headlines.\n\nThe following table summarizes the various ways of creating external files.\n\n+---------+------------+------------------+-----------------+\n|         | Sentinels  | Sections and     | File data stored|\n| Kind    | in external| @others expanded | in .leo file?   |\n|         | file?      | on write?        |                 |\n+---------+------------+------------------+-----------------+\n| @asis   | no         | no               | yes             |\n+---------+------------+------------------+-----------------+\n| @auto   | no         | yes              | no              |\n+---------+------------+------------------+-----------------+\n| @edit   | no         | yes: note 3      | no              |\n+---------+------------+------------------+-----------------+\n| @nosent | no         | yes              | yes             |\n+---------+------------+------------------+-----------------+\n| @shadow | Note 1     | yes              | no              |\n+---------+------------+------------------+-----------------+\n| @file   | yes        | yes              |                 |\n| @thin   |            |                  | no              |\n| Note 2  |            |                  |                 |\n+---------+------------+------------------+-----------------+\n\n**Note 1**: \\@shadow nodes create two files, a **public** file without sentinels\nand a **private** file with sentinels.\n\n**Note 2**: \\@file and \\@thin nodes are synonyms.\n\n**Note 3**: Outline structure created in \\@edit nodes is not saved in the\nexternal file.\n\nWithin @path and @<file> paths, {{exp}} gets evaluated with the following\nsymbols known: c, g, p, os and sys.  For example::\n\n    @file {{os.path.abspath(os.curdir)}}/abc.py\n\nrefers to the file abc.py in (absolute path of) the current directory.\n\n", "children": ["ekr.20100806170836.4393", "ekr.20100806170836.4396", "ekr.20100806170836.4395", "ekr.20100806170836.4403", "ekr.20100806170836.4399", "ekr.20100806170836.4402"]}, {"h": "\\@asis <path>", "gnx": "ekr.20100806170836.4393", "b": ".. index::\n    pair: @asis; Reference\n\nThe \\@asis directive creates an external file without sentinels and without any\nexpansions.\n\nUse this directive only when you must have complete control over every character\nof the external file. When writing \\@asis nodes, writes the body text of all\nnodes in outline order. Leo writes the body text *as is*, without recognizing\nsection definitions, without expanding section references, and without treating\ndirectives specially in any way. In particular, Leo copies all directives,\nincluding \\@ or \\@c directives, to the external file as text.\n\n.. index::\n    pair: @@ convention in @asis trees; Reference\n\n**The @@ convention**: Within \\@asis trees only, if a headline starts with \\@@,\nLeo writes everything in the headline following the \\@@ just before the\ncorresponding body text.\n\nFiles created from \\@asis trees contain *nothing* not contained in body text (or\n\\@@ headlines). In particular, if body text does not end in a newline, the first\nline from the next node will concatenated to the last line of the preceding\nnode.\n\nWithin \\@asis trees, Leo writes no sentinels to the external file, so Leo can not update the outline\nusing changes to the external file. When reading .leo files, Leo does *not* read\nexternal files created from \\@asis nodes. Instead, all data in an \\@asis tree is\nstored in the .leo file.\n\nWithin \\@asis trees, Leo recognizes the \\@ignore directive only in the\n*ancestors* of \\@asis nodes. This allows you to use the \\@ignore directive to\nprevent Leo from writing \\@asis trees.\n\n**Note**: \\@file-asis and \\@silent are deprecated synonyms for \\@asis.\n", "children": []}, {"h": "\\@auto <path>", "gnx": "ekr.20100806170836.4396", "b": ".. index::\n    pair: @auto; Reference\n\nThe \\@auto directive imports an external file into a tree of nodes. Using \\@auto\nis *highly recommended* when using external files that must not contain Leo\nsentinels.\n\n\\@auto trees allow people to use Leo in collaborative environments without using\nsentinels in external files. Even without sentinels, \\@auto trees can change\nwhen the corresponding external file changes outside of Leo.\n\n.. index::\n    pair: Importer; Reference\n\nWhen reading \\@auto nodes, Leo creates the \\@auto tree using **importers**,\nparsers that create an outline with nodes for each class, method and function in\nthe external file. Some importers create other kinds of nodes as well.\n\nImporters presently exist for C, elisp, HTML, .ini files, Java, Javascript, Pascal, PHP,\nPython and xml. Leo determines the language using the file's extension. If no\nparser exists for a language, Leo copies the entire body of the external file\ninto the \\@auto node.\n\n.. index::\n    pair: Organizer tag; Reference\n\n**Note**: the \\@data import_xml_tags setting specifies the **organizer tags**\nthat cause the HTML and XML importers to create outline nodes. By default, the\n**organizer tags** are html, body, head, and div.\n\nWhen writing \\@auto nodes, Leo writes the external file without sentinels. This\nallows you to use Leo in collaborative environments without disturbing colleagues.\n\nWhen importing files into \\@auto trees, Leo performs several checks to ensure\nthat writing the imported file will produce exactly the same file. These checks\ncan produces **errors** or **warnings**. Errors indicate a potentially serious\nproblem. Leo inserts an \\@ignore directive in the \\@auto tree if any error is\nfound. This prevents the \\@auto tree from modifying the external file.\n\n.. index::\n    pair: Strict language; Reference\n\nBefore importing a file, Leo **regularizes** the leading whitespace of all\nlines of the original source file. That is, Leo converts blanks to tabs or\ntabs to blanks depending on the value of the \\@tabwidth directive in effect\nfor the \\@auto node. Leo also checks that the indentation of any non-blank\nline is a multiple of the indentation specified by the \\@tabwidth directive.\n**Strict languages** are languages such as Python for which leading\nwhitespace must be preserved exactly as it appears in the original source\nfile. Problems during regularizing whitespace generate errors for strict\nlanguages and warnings for non-strict languages.\n\nAfter importing a file, Leo verifies that writing the \\@auto node would create\nthe same file as the original file. Such file comparison mismatches\ngenerate errors unless the problem involves only leading whitespace for\nnon-strict languages. Whenever a mismatch occurs the first non-matching line is\nprinted.\n\nFile comparison mismatches can arise for several reasons:\n\n1. Bugs in the import parsers. Please report any such bugs immediately.\n\n2. Underindented lines in classes, methods or function.\n\n.. index::\n    pair: Underindented line; Reference\n\nAn **underindented line** is a line of body text that is indented less then the\nstarting line of the class, method or function in which it appears. Leo outlines\ncan not represent such lines exactly: every line in an external file will have\nat least the indentation of any unindented line of the corresponding node in the\noutline. Leo will issue a warning (not an error) for underindented Python\ncomment lines. Such lines can not change the meaning of Python programs.\n", "children": []}, {"h": "\\@edit <path>", "gnx": "ekr.20100806170836.4395", "b": ".. index::\n    pair: @edit; Reference\n\nThe \\@edit directive imports an external file into a single node.\n\nWhen reading \\@edit nodes, Leo reads the entire file into the \\@edit node. Lines\nthat look like sentinels will be read just as they are.\n\nWhen writing \\@edit nodes, Leo writes expands section references, \\@all and\n\\@others just as with \\@file trees. However, Leo writes no sentinels, so the\nstructure created by sections references, \\@all and \\@others is not preserved.\n", "children": []}, {"h": "\\@file <path> (aka @thin)", "gnx": "ekr.20100806170836.4403", "b": ".. index::\n    pair: @file; Reference\n    pair: @thin; Reference\n\nThe \\@file directive creates an external file containing sentinels. When writing\n\\@file trees, Leo expands section references and \\@all and \\@others directives.\n\nWhen reading external files created by \\@file, the sentinels allow Leo to\nrecreate all aspects of the outline. In particular, Leo can update the\noutline based on changes made to the file by another editor. \n\n**Important**: \\@file is the recommended way to create and edit most files. In\nparticular, using \\@file nodes is **highly recommended** when sharing external\nfiles in a collaborative environment.\n\nThe \\@thin directive is a synonym for \\@file.\n\nPrior to Leo 4.7, \\@file worked differently from \\@thin. This should not be\na problem: Leo 4.7 can read all external files written by Leo 4.6.\n", "children": []}, {"h": "\\@nosent <path>", "gnx": "ekr.20100806170836.4399", "b": ".. index::\n    pair: @nosent; Reference\n\nThe \\@nosent <filename> creates an external file without sentinel lines.\n\nWhen writing an \\@nosent tree, Leo expands section references, \\@all and\n\\@others directives, but Leo writes no sentinels to the external file.\nThus, Leo can not update \\@nosent trees from changes made to the external\nfile. However, \\@nosent trees do have their uses: unlike \\@auto trees,\ncloned nodes *are* valid in \\@nosent trees.\n\nWhen reading an \\@nosent node, Leo does *not* read the external file.\nInstead, all the data in the \\@nosent tree is stored in the .leo file.\n\n**Note**: \\@auto or \\@shadow are usually better choices than \\@nosent for\ncreating external files without sentinels.\n\n**Note**: The \\@bool force_newlines_in_at_nosent_bodies setting controls whether\nLeo writes a trailing newline if non-empty body text does not end in a newline.\nThe default is True.\n", "children": []}, {"h": "\\@shadow <path>", "gnx": "ekr.20100806170836.4402", "b": ".. index::\n    pair: @shadow; Reference\n    pair: Private file; Reference\n    pair: Public file; Reference\n\nThe \\@shadow directive creates *two* external files, a **public** file without\nsentinels, and a **private** file containing sentinels.\n\nWhen reading an \\@shadow node, Leo uses a brilliant algorithm devised by\nBernhard Mulder that compares the public and private files, and then updates the\noutline based on changes to the *public* file. In this way, \\@shadow provides\nmany of the benefits of \\@file trees without writing sentinels in the (public)\nexternal file.\n\nLeo can do an initial import of \\@shadow trees by parsing the corresponding\npublic file, exactly as is done for \\@auto nodes.\n", "children": []}, {"h": "Part 2: \\@all and \\@others", "gnx": "ekr.20100806170836.4411", "b": "These control how Leo places text when writing external files.\nThey are two of the most important directives in Leo.\n\n.. glossary::\n    :sorted:\n\n.. index::\n    pair: @all; Reference\n\n\\@all\n\n    Copies *all* descendant nodes to the external file. Use \\@all to place\n    unrelated data in an external file.\n\n    The \\@all directive is valid only in the body of \\@file trees.\n\n    Within the range of an \\@all directive, Leo ignores the \\@others directive\n    and section references, so Leo will not complain about orphan nodes.\n\n.. index::\n    pair: @others; Reference\n\n\\@others\n\n    Writes the body text of all unnamed descendant into the external file, in\n    outline order.\n\n    Whitespace appearing before \\@others directive adds to the indentation of\n    all nodes added by the \\@others directive.\n\n    A single node may contain only one \\@others directive, but descendant nodes\n    may have other \\@others directives.\n", "children": []}, {"h": "Part 3: Syntax coloring directives", "gnx": "ekr.20100806170836.4398", "b": "The \\@color, \\@killcolor, \\@nocolor and \\@nocolor-node directives control how\nLeo colors text in the body pane.\n\n.. index::\n    pair: Ambiguous node; Reference\n\nThese directives typically affect the node in which they appear and all\ndescendant nodes. Exception: an **ambiguous node**, a node containing both\n\\@color and \\@nocolor directives, has no effect on how Leo colors text in\ndescendant nodes.\n\n.. glossary::\n    :sorted:\n\n.. index::\n    pair: @color; Reference\n\n\\@color\n\n    Enables syntax coloring until the next \\@nocolor directive.\n\n.. index::\n    pair: @killcolor; Reference\n\n\\@killcolor\n\n    Disables syntax coloring in a node, overriding all \\@color, \\@nocolor or\n    \\@nocolor-node directives in the same node.\n\n.. index::\n    pair: @nocolor; Reference\n\n\\@nocolor\n\n    Disables syntax coloring until the next \\@nocolor directive.\n\n.. index::\n    pair: @nocolor-node; Reference\n\n\\@nocolor-node\n\n    Disables coloring for only the node containing it. The \\@nocolor-node\n    directive overrides the \\@color and \\@nocolor directives within the same\n    node.\n", "children": []}, {"h": "Part 4: Dangerous directives", "gnx": "ekr.20100806170836.4408", "b": "These directives alter how Leo represents data in external files. They are\n**dangerous**--mistakes in using these sentinels can make it impossible for Leo\nto read the resulting external file. Use them with care!\n\nNevertheless, these sentinels can be useful in special situations.\n\n.. glossary::\n    :sorted:\n\n.. index::\n    pair: @comment; Reference\n\n\\@comment <1, 2 or three comment delims>\n\n    Sets the comment delimiters in \\@file and \\@shadow files.\n    **Important**: Use \\@comment for unusual situations only. In most cases, you\n    should use the \\@language directive to set comment delimiters.\n\n    The \\@comment directive may be followed by one, two or three delimiters,\n    separated by whitespace. If one delimiter is given, it sets the delimiter\n    used by single-line comments. If two delimiters are given, they set the\n    block comment delimiter. If three delimiters are given, the first sets the\n    single-line-comment delimiter, and the others set the block-comment\n    delimiters.\n\n    Within these delimiters, underscores represent a significant space, and\n    double underscores represent a newline. Examples::\n\n        @comment REM_\n        @comment __=pod__ __=cut__\n\n    The second line sets PerlPod comment delimiters.\n\n    **Warning**: the \\@comment and \\@delims directives **must not** appear in\n    the same node. Doing so may create a file that Leo can not read.\n\n    **Note**: \\@language and \\@comment may appear in the same node, provided\n    that \\@comment appears *after* the \\@language directive: \\@comment overrides\n    \\@language.\n\n    The \\@comment directive must precede the first section name or \\@c\n    directive.\n\n.. index::\n    pair: @delims; Reference\n\n\\@delims <1 or 2 comment delims>\n\n    Sets comment delimiters in external files containing sentinel lines.\n\n    The \\@delims directive requires one or two delimiters, separated by\n    whitespace. If one delimiter is present it sets the single-line-comment\n    delimiter. If two delimiters are present they set block comment delimiters.\n\n    This directive is often used to place Javascript text inside XML or HTML\n    files. Like this::\n\n        @delims /* */\n        Javascript stuff\n        @delims <-- -->\n        HTML stuff\n\n    **Warning**: you **must** change back to previous delimiters using another\n    \\@delims directive. Failure to change back to the previous delimiters will\n    thoroughly corrupt the external file as far as compilers, HTML renderers,\n    etc. are concerned. Leo does not do this automatically at the end of a node.\n\n    **Warning**: the \\@comment and \\@delims directives **must not** appear in\n    the same node. Doing so may create a file that Leo can not read.\n\n    **Note**: The \\@delims directive can not be used to change the comment\n    strings at the start of the external file, that is, the comment strings for\n    the \\@+leo sentinel and the initial \\@+body and \\@+node sentinels.\n\n.. index::\n    pair: @raw; Reference\n    pair: @end_raw; Reference\n\n\\@raw and \\@end_raw\n\n    \\@raw starts a section of \"raw\" text that ends *only* with the \\@end_raw directive\n    or the end of the body text containing the \\@raw directive. Within this\n    range, Leo ignores all section references and directives, and Leo generates\n    no additional leading whitespace.\n", "children": []}, {"h": "Part 5: All other directives", "gnx": "ekr.20100804133903.7262", "b": "This section is a reference guide for all other Leo directives, organized\nalphabetically.\n\nUnless otherwise noted, all directives listed are valid only in body text,\nand they must start at the leftmost column of the node.\n\n.. glossary::\n     :sorted:\n\n.. index::\n    pair: @; Reference\n.. index::\n    pair: @doc; Reference\n.. index::\n    pair: Doc part; Reference\n\n\\@ and \\@doc\n\n    These directives start a doc part. \\@doc is a synonym for \\@. Doc parts\n    continue until an \\@c directive or the end of the body text. For example::\n\n        @ This is a comment in a doc part.\n        Doc parts can span multiple lines.\n        The next line ends the doc part\n        @c\n\n    When writing external files, Leo writes doc parts as comments.\n\n    Leo does not recognize \\@ or \\@doc in \\@asis trees or when the \\@all or\n    \\@delims directives are in effect.\n\n.. index::\n    pair: @c; Reference\n.. index::\n    pair: @code; Reference\n\n\\@c and \\@code\n\n    Ends any doc part and starts a code part.\n\n    \\@code is a deprecated synonym for \\@c.\n\n    Leo does not recognize this directive in \\@asis trees or when the\n    \\@all or \\@raw directives are in effect.\n\n.. index::\n    pair: @chapter; Reference\n.. index::\n    pair: @chapters; Reference\n\n\\@chapter and \\@chapters\n\n    An \\@chapter tree represents a chapter. All @chapter nodes should be\n    contained in an \\@chapters node.\n\n    These directives are too complex to describe here. For full details, see\n    `Using Chapters`_.\n\n    These directives must appear in the node's headline.\n\n.. index::\n    pair: @encoding; Reference\n\n\\@encoding <encoding>\n\n    Specifies the Unicode encoding for an external file. For example::\n\n        @encoding iso-8859-1\n\n    When reading external files, the encoding given must match the encoding\n    actually used in the external file or \"byte hash\" will result.\n\n.. index::\n    pair: @first; Reference\n\n\\@first <text>\n\n    Places lines at the very start of an external file, before any Leo\n    sentinels. \\@first lines must be the very first lines in an \\@<file> node.\n    More then one \\@first lines may appear.\n\n    This creates two first lines, a shebang line and a Python encoding line::\n\n        @first #! /usr/bin/env python\n        @first # -*- coding: utf-8 -*-\n\n    Here is a perl example::\n\n        @first #!/bin/sh -- # perl, to stop looping\n        @first eval 'exec /usr/bin/perl -w -S $0 ${1+\"$@\"}'\n        @first     if 0;\n\n\\@ignore\n\n    Tells Leo to ignore the subtree in which it appears.\n\n    In the body text of most top-level @<file> nodes, the \\@ignore directive\n    causes Leo not to write the tree. However, Leo ignores \\@ignore directives\n    in \\@asis trees.\n\n    Plugins and other parts of Leo sometimes @ignore for their own purposes. For\n    example, Leo's unit testing commands will ignore trees containing @ignore.\n    In such cases, the \\@ignore directive may appear in the headline or body\n    text.\n\n.. index::\n    pair: @language; Reference\n\n\\@language <language name>\n\n    Specifies the language in effect, including comment delimiters.\n    If no \\@language directive is in effect, Leo uses the defaults specified\n    by the \\@string target-language setting.\n\n    A node may contain at most one \\@language directive.\n\n    The valid language names are: actionscript, ada, autohotkey, batch, c, config,\n    cpp, csharp, css, cweb, elisp, forth, fortran, fortran90, haskell, haxe,\n    html, ini, java, javascript, kshell, latex, lua, noweb, pascal, perl,\n    perlpod, php, plain, plsql, python, rapidq, rebol, rest, rst, ruby, shell,\n    tcltk, tex, unknown, unknown_language, vim, vimoutline, xml, xslt.\n\n    **Note**: Shell files have comments that start with #.\n\n    Case is ignored in the language names. For example, the following are\n    equivalent::\n\n        @language html\n        @language HTML\n\n    The \\@language directive also controls syntax coloring. For language x, the\n    file leo/modes/x.py describes how to colorize the language. To see the\n    languages presently supported, look in the leo/modes directory. There are\n    over 100 such languages.\n\n.. index::\n    pair: @last; Reference\n\n\\@last <text>\n\n    Places lines at the very end of external files.\n\n    This directive must occur at the very end of top-level \\@<file> nodes. More\n    than one \\@last directive may exist. For example::\n\n        @first <?php\n        ...\n        @last ?>\n\n    Leo does not recognize \\@last directive in \\@asis trees.\n\n.. index::\n    pair: @lineending; Reference\n\n\\@lineending cr/lf/nl/crlf\n\n    Sets the line endings for external files.\n    This directive overrides the \\@string output_newline setting.\n\n    The valid forms of the @lineending directive are:\n\n    ========================   ======================================================\n    \\@lineending nl            The default, Linux.\n    ------------------------   ------------------------------------------------------\n    \\@lineending cr            Mac\n    ------------------------   ------------------------------------------------------\n    \\@lineending crlf          Windows\n    ------------------------   ------------------------------------------------------\n    \\@lineending lf            Same as 'nl', not recommended\n    ------------------------   ------------------------------------------------------\n    \\@lineending platform      Same as platform value for output_newline setting.\n    ========================   ======================================================\n\n.. index::\n    pair: @nowrap; Reference\n\n\\@nowrap\n\n    Disables line wrapping the Leo's body pane.\n\n    Only the first \\@wrap or \\@nowrap directive in a node has any effect.\n\n    \\@nowrap may appear in either headlines or body text.\n\n..  If \\@others occurs multiple times in the same node, all non-section nodes\n..  appear at the location of the first instance of the \\@others directive; the\n..  remainder are remembered as sentinels but have no other content.\n\n.. index::\n    pair: @pagewidth; Reference\n\n\\@pagewidth <n>\n\n   Sets the page width used to break doc parts into lines.\n   <n> should be a positive integer.  For example::\n\n      @pagewidth 100\n\n  The \\@pagewidth directive overrides the \\@int page_width setting.\n\n.. index::\n    pair: @path; Reference\n.. index::\n    pair: Absolute path; Reference\n.. index::\n    pair: Path prefix; Reference\n\n\\@path <path>\n\n   Sets the **path prefix** for relative filenames for all \\@<file> tree.\n\n   This directive may appear in headlines or body text, and may\n   appear in top-level \\@<file> nodes.\n\n   The path is an **absolute path** if it begins with c:\\\\ or /,\n   otherwise the path is a **relative** paths.\n\n   Multiple \\@path directives may contribute to the path prefix.\n   Absolute paths overrides any ancestor \\@path directives.\n   Relative paths add to the path prefix.\n\n   If no \\@path directives are in effect, the default path prefix is\n   the directory containing the .leo file.\n\n   Within @path and @<file> paths, {{exp}} gets evaluated with the following\n   symbols known: c, g, p, os and sys.  For example::\n\n       @file {{os.path.abspath(os.curdir)}}/abc.py\n\n   refers to the file abc.py in (absolute path of) the current directory.\n\n.. index::\n    pair: @tabwidth; Reference\n.. index::\n    pair: Negative tab width; Reference\n\n\\@tabwidth <n>\n\n  Sets the width of tabs.\n  Negative tab widths cause Leo to convert tabs to spaces.\n\n.. index::\n    pair: @wrap; Reference\n\n\\@wrap\n\n    Enables line wrapping in Leo's body pane.\n\n    Only the first \\@wrap or \\@nowrap directive in a node has any effect.\n\n    \\@wrap may appear in either headlines or body text.\n", "children": []}, {"h": "Designing with Leo", "gnx": "EKR.20040524104904.161", "b": "", "children": ["ekr.20100805165051.7156"]}, {"h": "@file design.txt", "gnx": "ekr.20100805165051.7156", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901101608.3"]}, {"h": "@rst html\\design.html", "gnx": "ekr.20050901101608.3", "b": "##################\nDesigning with Leo\n##################\n\nThis chapter discusses how outlines can improve the design of programs, web\nsites and any other complex data. The more complex your program or data, the\nmore useful Leo becomes.\n\nFurthermore, the same features that help with design also help with\nimplementation, maintenance and testing. In all cases, being able to organize,\nunderstand and manipulate (script) complex data is what Leo does best.\n\n.. contents::\n    :depth: 2\n\n", "children": ["ekr.20100807120250.4399", "ekr.20100807120250.4398", "ekr.20100807120250.4400", "ekr.20100807120250.4401"]}, {"h": "Outlines embody design", "gnx": "ekr.20100807120250.4399", "b": "Leo's outlines don't merely represent design. They often *are* the design.\nOutlines effortlessly show relationships between class, methods or any other\ndata.\n\nOutlines express design and structure directly. In most programs, the grouping\nof functions into files, or the organization of a single file as a set of\nfunctions, etc. \n\nTypical design tools are separate from the resulting product. With Leo, your\ndesigns become your programs or web site.\n\nLeo's outline pane always shows you the big picture, and the relationship of the\npresently selected outline to that big picture. At all times you are aware of\nboth the overall design and all the intermediate levels of detail.\n\nOutlines create new design dimensions.\n\nThere are many ways to express a program as a Leo outline. Such choices are\nimportant. They add clarity to the entire program. These are different *kind* of\nchoices. They simply can not be expressed at all in other editors. In other\nwords, such choices exist in a new design space. \n\nOutlines add a new dimension to the design and coding process. Choices about\nwhat sections do, what they are named, what order they appear in, are choices in\na design space different from \"normal\" programming. This an abstract concept, to\nbe sure. However, the previous paragraphs are really a manifestation of\nworking in this new design space.\n", "children": []}, {"h": "Nodes hide details", "gnx": "ekr.20100807120250.4398", "b": "Organizer nodes convey information about the structure and design of a large\nsystem. Decoupling structure from content in this way is precisely what is\nneeded for flexibility: one can reorganize at will without worrying about\nchanging the meaning of the code.\n\nOutlines clarify the shape of code\n\nThese last several paragraphs have discussed comments in detail because the net\neffect of \"putting comments where they belong\" is that comments don't clutter\nthe code. Section references hide irrelevant detail, so larger-scale patterns\nwithin functions (or declarations) become more apparent. Often just recasting\ncode into web format has created Aha's about my own code, with no special\nattention to recoding or redesign! Recasting a function as a web raises the real\nand apparent level of abstraction.\n\nOrganizer nodes eliminate mundane comments\nThe headline of an organizer node is often all that needs to be said.\n\nNodes create places for comments\n\nEach of Leo's nodes provide a place for lengthy comments that do not clutter\nother code. In practice this encourages comments where they are needed.\n\nOutlines reduce the need for comments\n\nBridge or transition phrases are almost always unnecessary in a\nLeo outline. One never needs to say something like, \"having just finished\nwith topic x, we turn now to topic y.\"\n\nComments and formatting no longer have to indicate overall design; node do that.\n\nNodes reduce the visual \"weight\" of code\n\nNodes and their helpers (usually in child nodes) can be as complex as\nnecessary without affecting the organization of the outline. Moreover,\ncollapsed nodes are inconspicuous, no matter how many children they contain\nand no matter how much code each child contains.\n", "children": []}, {"h": "Clones create views", "gnx": "ekr.20100807120250.4400", "b": "Typical browsers show you a fixed view of code. In contrast, Leo allows you to\norganize your programs as *you* want, and *Leo remembers your organizations*.\n\nFurthermore, Leo does not constrain you to a single \"right\" view of your data,\nprograms or designs. By using clones, a single outline may contain dozens or\neven thousands of views of the nodes in the outline. You are free to create a\nnew view for every new task or project.\n\nFinally, you can insert organizer nodes anywhere in an outline, including\nanywhere in any view. Organizer nodes do not change the meaning of programs,\nhtml pages or web sites, yet they can clarify and simplify designs, programs,\nweb sites or data.\n", "children": []}, {"h": "Nodes create context", "gnx": "ekr.20100807120250.4401", "b": "Nodes naturally provide **useful** context. For example, @button and @test nodes.\n\nOutlines provide a convenient way of expressing the intended scope of commands.\nMany of Leo's commands operates on the presently selected tree.\n", "children": []}, {"h": "History of Leo", "gnx": "EKR.20040524104904.245", "b": "", "children": ["ekr.20100805165051.7159"]}, {"h": "@file history.txt", "gnx": "ekr.20100805165051.7159", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901101608.5"]}, {"h": "@rst html\\history.html", "gnx": "ekr.20050901101608.5", "b": "##############\nHistory of Leo\n##############\n\nThis chapter discusses the history of Leo and tells the essential features of each version.\nHere are the most important dates in Leo's history:\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20050901102147", "ekr.20050902105852", "ekr.20050902105852.1", "ekr.20050902105852.2", "ekr.20050902105852.3", "ekr.20050902105852.4", "ekr.20050902105852.5", "ekr.20050902105852.6", "ekr.20050902105852.7", "ekr.20050902105852.8", "ekr.20050902105852.9", "ekr.20050902105852.10", "ekr.20050902105852.11", "ekr.20050902105852.12", "ekr.20060629083935", "ekr.20080315115427.568", "ekr.20101025080245.6085", "ekr.20101025080245.6086", "ekr.20101025080245.6087", "ekr.20101025080245.6089", "ekr.20050902100834"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050901102147", "b": ".. Relative links...\n.. _`Scripting Leo with Python`:        scripting.html\n.. _`Customizing Leo`:                  customizing.html\n.. _`Theory of Operation`:              theory.html\n.. _`Controlling Syntax Coloring`:      coloring.html\n.. _`Debugging with Leo`:               debuggers.html\n.. _`Using ZODB with Leo`:              zodb.html\n.. _`Leo and Emacs`:                    emacs.html\n.. _`Embedding Leo with the leoBridge Module`: leoBridge.html\n.. _`Unit testing with Leo`:            unitTesting.html\n.. _`ILeo - the IPython bridge`:        IPythonBridge.html\n.. _`the IPython bridge`:               IPythonBridge.html\n.. _`Using @shadow`:                    atShadow.html\n.. _`What's New`:                       what-is-new.html\n\n.. Absolute links..\n.. _OPML:   http://en.wikipedia.org/wiki/OPML\n", "children": []}, {"h": "Beginnings", "gnx": "ekr.20050902105852", "b": "Leo grew out of my efforts to use Donald Knuth's \"CWEB system of Structured\ndocumentation.\" I had known of literate programming since the mid 1980's, but I\nnever understood how to make it work for me. In November 1995 I started thinking\nabout programming in earnest. Over the holidays I mused about making programs\nmore understandable. In January 1996 the fog of confusion suddenly cleared. I\nsummarized my thinking with the phrase, **web are outlines in disguise**. I\nsuspected that outline views were the key to programming, but many details\nremained obscure.\n", "children": []}, {"h": "Breakthrough", "gnx": "ekr.20050902105852.1", "b": "March 5, 1996, is the most important date in Leo's history. While returning from\na day of skiing, I discussed my thoughts with Rebecca. During that conversation\nI realized that I could use the MORE outliner as a prototype for a \"programming\noutliner.\" I immediately started work on my first outlined program. It quickly\nbecame apparent that outlines work: all my old problems with programming\nvanished. The @others directive dates from this day. I realized that MORE's\noutlines could form the basis for Leo's screen design. Rather than opening body\ntext within the outline, as MORE does, I decided to use a separate body pane.\n\nI hacked a translator called M2C which allowed me to use MORE to write\nreal code. I would write code in MORE, copy the text to the clipboard in\nMORE format, then run M2C, which would convert the outline into C code.\nThis process was useful, if clumsy. I called the language used in the outline\nSWEB, for simplified CWEB. Much later Leo started supporting the noweb\nlanguage.\n", "children": []}, {"h": "Apple and YellowBox", "gnx": "ekr.20050902105852.2", "b": "Throughout 1996 I created a version of Leo on the Macintosh in plain C and the\nnative Mac Toolbox. This was a poor choice; I wasted a huge amount of time\nprogramming with these primitive tools. However, this effort convinced me that\nLeo was a great way to program.\n\nLate in 1997 I wrote a Print command to typeset an outline. Printing (Weaving)\nis supposedly a key feature of literate programming. Imagine my surprise when I\nrealized that such a \"beautiful\" program listing was almost unintelligible; all\nthe structure inherent in the outline was lost! I saw clearly that typesetting,\nno matter how well done, is no substitute for explicit structure.\n\nIn 1998 I created a version of Leo using Apple's YellowBox environment. Alas,\nApple broke its promises to Apple developers. I had to start again.\n", "children": []}, {"h": "Borland C++", "gnx": "ekr.20050902105852.3", "b": "I rewrote Leo for Borland C++ starting in May 1999. Borland C++ was much better\nthan CodeWarrior C, but it was still C++. This version of Leo was the first\nversion to use xml as the format of .leo files. The last version of Borland Leo,\n3.12 Final went out the door July 17, 2003.\n", "children": []}, {"h": "Discovering Python", "gnx": "ekr.20050902105852.4", "b": "I attended the Python conference in early 2001. In May of 2000 I began work on\nan wxWindows version of Leo. This did not work out, but something good did come\nfrom this effort. I spent a lot of time adding Python scripting to the wxWindows\ncode and I became familiar with Python and its internals.\n\nI really started to 'get' Python in September 2001. I wrote the white papers at\nabout this time. Python solved *all* my programming problems. I rewrote Leo in\nPython in about two months! For the first time in my career I was no longer\nanxious while programming; it simply isn't possible to create bad bugs in\nPython. The Python version of Leo was the first officially OpenSoftware version of\nLeo. The first functional version of Leo in Python was 0.05 alpha, December 17,\n2001.\n", "children": []}, {"h": "SourceForge", "gnx": "ekr.20050902105852.5", "b": "I registered the Leo project on SourceForge on March 10, 2003. It is certainly\nno accident that Leo started a new life shortly thereafter. Prior to SourceForge\nmy interest in Leo had been waning.\n", "children": []}, {"h": "Allowing sentinel lines in external files", "gnx": "ekr.20050902105852.6", "b": "In the summer of 2001 I began to consider using sentinel lines in external files.\nPreviously I had thought that outline structure must be 'protected' by remaining\ninside .leo files. Accepting the possibility that sentinels might be corrupted\nopened vast new design possibilities. In retrospect, problems with sentinel\nalmost never happen, but that wasn't obvious at the time! The result of this\ndesign was known at first as Leo2. That terminology is extinct. I think of\nthis version as the first version to support @file and automatic tangling\nand untangling.\n", "children": []}, {"h": "Untangling @file is easy!", "gnx": "ekr.20050902105852.7", "b": "The biggest surprise in Leo's history was the realization it is **much** easier\nto untangle files derived from @file. Indeed, the old tangle code created all\nsorts of problems that just disappear when using @file. The new Python version\nof Leo became fully operational in early 2002. It was probably about this time\nthat I chose noweb as Leo's preferred markup language. My decision not to\nsupport noweb's escape sequences made Leo's read code much more robust.\n", "children": []}, {"h": "Leo 3.x: Continuous improvement", "gnx": "ekr.20050902105852.8", "b": "I spent 2002 taking advantages of Python's tremendous power and safety.\nMany improvements were at last easy enough to do:\n\n- Nested @others directives appeared in 3.2.\n- Unicode support started in 3.3.\n- @first and @last appeared in 3.7\n- @asis and @nosent appeared in 3.8.\n- Incremental syntax coloring and incremental undo appeared in 3.9.\n- Paul Paterson created Leo's plugin architecture sometime during this period.\n  Plugins have been a driving force in Leo's development because people can\n  change how Leo works without altering Leo's core.\n- 3.12 fixed a huge memory leak.\n- 3.12 Final, the last 3.x version, appeared July 17, 2003.\n", "children": []}, {"h": "Leo 4.0: Eliminating error 'recovery'", "gnx": "ekr.20050902105852.9", "b": "In late 2002 and throughout 2003 I worked on an entirely new file format.\n4.0 final went out the door October 17, 2003 after almost a year intense\ndesign work trying to improve error recovery scheme used while reading\nexternal files. In the summer of 2003 I realized that orphan and @ignore'd\nnodes must be prohibited in @file trees. With this restriction, Leo\ncould finally recreate @file trees in outlines using **only** the\ninformation in external files. This made the read code much more robust, and\neliminated all the previous unworkable error recovery schemes. At last Leo\nwas on a completely firm foundation.\n", "children": []}, {"h": "Leo 4.1: The debut of gnx's", "gnx": "ekr.20050902105852.10", "b": "Leo first used gnx's (global node indices) as a foolproof way of associating\nnodes in .leo files with nodes in external files. At the time, there was\nstill intense discussions about protecting the logical consistency of\noutlines. \\@thin was later to solve all those problems, but nobody knew\nthat then.\n", "children": []}, {"h": "Leo 4.2: Complete at last", "gnx": "ekr.20050902105852.11", "b": "Leo 4.2 Final went out the door September 20, 2004.\nThis surely is one of the most significant dates in Leo's history:\n\n-   This marked the end worries about consistency of outlines and external files:\n    Leo recreates all essential information from thin external files,\n    so *there is nothing left in the .leo file to get out of synch*.\n\n- Thin external files use gnx's extensively. This simplifies the file format and\n    makes thin external files more cvs friendly.\n\n-   A sensational scripting plugin showed how to create script buttons.\n    This has lead to improvements in the Execute Script command and\n    other significant improvements in Unit testing.\n\n-   As if this were not enough, 4.2 marked the 'great divide' in Leo's internal\n    data structures. Before 4.2, Leo every node in the outline had its own\n    vnode. This was a big performance problem: clone operations had to\n    traverse the entire outline! 4.2 represents clones by sharing subtrees.\n    Changing Leo's fundamental data structures while retaining compatibility\n    with old scripts was engineering work of which the entire Leo community can\n    be proud. `Scripting Leo with Python`_ tells how the position\n    class makes this happen.\n    This was a cooperative effort. Kent Tenney and Bernhard Mulder made\n    absolutely crucial contributions. Kent pointed out that it is a tnode,\n    not a vnode that must form the root of the shared data. Bernhard showed\n    that iterators are the way to avoid creating huge numbers of positions.\n\nLeo 4.2 marked so many significant changes. I often find it hard to remember\nwhat life with Leo was like before it.\n", "children": []}, {"h": "Leo 4.3 Settings", "gnx": "ekr.20050902105852.12", "b": "Leo 4.3 corrected many problems with leoConfig.txt. Instead, Leo gets\nsettings from one or more leoSettings.leo files. This version also\nintroduced a way to changed settings using a settings dialog.  However,\nthe settings dialog proved not to be useful (worse, it inhibited design) and\nthe settings dialog was retired in Leo 4.4.\n", "children": []}, {"h": "Leo 4.4 The minibuffer and key bindings", "gnx": "ekr.20060629083935", "b": "Leo 4.4 was a year-long effort to incorporate an Emacs-style minibuffer and\nrelated commands into Leo. Thinking in terms of minibuffer commands frees my\nthinking. Leo 4.4 also featured many improvements in how keys are bound to\ncommands, including per-pane bindings and user-defined key-binding modes.\n\nDevelopment on long-delayed projects accelerated after 4.4 final went out the door.\nRecent projects include:\n\n- Controlling syntax coloring with jEdit's xml language-description files.\n- Support for debugging scripts using external debuggers.\n- Modifying Leo's vnodes and tnodes so that Leo's data can be used with ZODB.\n- Using pymacs to write Leo scripts within Emacs.\n- Using the leoBridge module to embed Leo support in other programs.\n- Using Leo to run unit tests.\n\n", "children": []}, {"h": "Leo 4.4.x Improvements", "gnx": "ekr.20080315115427.568", "b": "This series of releases featured **hundreds** of improvements.  The highlights were truly significant:\n\n- Added the leoBridge module. See `Embedding Leo with the leoBridge Module`_.\n\n- Added support for @enabled-plugins and @open-with nodes in settings files.\n\n- Added support for ZODB. See `Using ZODB with Leo`_.\n\n- Added leoPymacs module. See `Leo and Emacs`_.\n\n- Added perfect import of external files with @auto nodes.\n\n- Used the sax parser to .leo files. This allows the format of .leo files to be\n  expanded easily.\n\n- Added support for myLeoSettings.leo.\n\n- Supported multiple editors in body pane.\n\n- Added the jEdit_colorizer plugin. See `Controlling Syntax Coloring`_.\n\n- Many other new plugins.\n\nFor a complete list, see the `What's New`_ chapter.\n", "children": []}, {"h": "Leo 4.5 @shadow files", "gnx": "ekr.20101025080245.6085", "b": "Added support for @shadow files. This was a major breakthrough.\nSee the `Using @shadow`_ chapter for full details.\n", "children": []}, {"h": "Leo 4.6 Caching, Qt and more", "gnx": "ekr.20101025080245.6086", "b": "This version of Leo featured more significant improvements:\n\n- Added support for the Qt gui.  This was a major project that\n  significantly improves the look and feel of Leo.\n\n- A file-caching scheme produced spectacular improvements in the\n  speed of loading Leo outlines.\n\n- Added support for @auto-rst nodes. These import reStructuredText (rST) files\n  so that the files can be \"round-tripped\" without introducing extraneous\n  changes. This makes Leo a superb environment for using rST.\n\n- Added support for @edit nodes.\n", "children": []}, {"h": "Leo 4.7 The one node world and Python 3k", "gnx": "ekr.20101025080245.6087", "b": "Leo 4.7 accomplishes something I long thought to be impossible: the unification\nof vnodes and tnodes. tnodes no longer exist: vnodes contain all data. The Aha\nthat made this possible is that iterators and positions allow a single node to\nappear in more than one place in a tree traversal.\n\nThis is one of the most significant developments in Leo's history. At last the\nendless confusion between vnodes and tnodes is gone. At the most fundamental\nlevel, Leo's data structures are as simple as possible. This makes them as\ngeneral and as powerful as possible!\n\nThis version successfully produced a common code base that can run on both\nPython 2.x and Python 3.x.\n", "children": []}, {"h": "Leo 4.8 Simple sentinels & better data recovery", "gnx": "ekr.20101025080245.6089", "b": "Leo 4.8 simplified Leo's sentinels as much as possible.\nLeo's sentinel lines look very much like Emacs org-mode comment lines,\nexcept for the addition of gnx's.\n\nThis version also produced a fundamentally important addition to Leo's error\nrecovery. Leo now shows \"Resurrected\" and \"Recovered\" nodes when loading an\noutline. These nodes protect against data loss, and also implicitly warn when\nunusual data-changing events occur. Creating this scheme is likely the final\nchapter in the epic saga of error recovery in Leo.\n", "children": []}, {"h": "@rst-ignore-tree Details", "gnx": "ekr.20050902100834", "b": "This following information may be of interest to historians. It is not of\ngeneral enough interest to put in Leo's Users Guide on the web. I am including\nthis mass of detail here to indicate the complexities that were involved in\ndesigning Leo's simple-looking mechanisms.\n", "children": ["EKR.20040524104904.247", "EKR.20040524104904.248"]}, {"h": "Versions", "gnx": "EKR.20040524104904.247", "b": "In May of 1999 I began work on the Borland version of Leo for Windows.  The\nBorland Delphi classes were a pleasure to use and free of bugs.  I redesigned\nLeo's file format for the Windows version of Leo; the Yellow Box file format is\na binary format that requires the Yellow Box runtime.  Fortunately, I choose to\nuse XML for Leo's file format.  I have Marc-Antoine Parent to thank for this\ndecision; he urged me to use XML and patiently explained how to use XML\nproperly.  However, there are two significant problems with the Borland version\nof Leo.  First, it works only on Windows.  Second, it can never be Open\nsoftware, because it uses Borland's Delphi classes and a commercial syntax\ncoloring component. \n\nIn October of 2001 I began work on the leo.py, an Open Software version of\nleo.py, a version of Leo written in Python and Tk.  At last I have found the\nproper platform for Leo.  leo.py naturally supports scripting in Python.  The\ncombination of Python and Tk is incredibly powerful, very easy to use, and truly\ncross platform.  I rewrote Leo in Python in about two months!  For the first\ntime in my career I no longer am anxious while programming; it simply isn't\npossible to create bad bugs in Python.\n\nTk was officially retired in June 2011.\n", "children": []}, {"h": "Designing @file trees", "gnx": "EKR.20040524104904.248", "b": "The following sections give a pseudo-chronological list of the major Aha's\ninvolved in creating Leo2. These Aha's form the real design and theory of\noperation of Leo. See the \"Diary\", \"Notes\" and \"Letters to Speed Ream\" sections\nin LeoDocs.leo for a more accurate and less tidy history of Leo2.\n\nI am writing these notes for several reasons. First, the initial design and\ncoding of Leo2, spanning a period of about 8 weeks, was some of the most\ncreative and rewarding work I have ever done. The result is elegant and simple.\nI'm proud of it. Second, much of the design work is not reflected in the code,\nbecause improved design often eliminated code entirely. The final code is so\nelegant that it obscures the hard work that created it. Third, you must\nunderstand this design in order to understand the implementation of @file trees\nand their external files. Someday someone else may take charge of Leo. That\nperson should know what really makes Leo2 work.\n", "children": ["EKR.20040524104904.249", "EKR.20040524104904.250", "EKR.20040524104904.251", "EKR.20040524104904.252", "EKR.20040524104904.253", "EKR.20040524104904.254", "EKR.20040524104904.255", "EKR.20040524104904.256", "EKR.20040524104904.257"]}, {"h": "Deciding to do Leo2", "gnx": "EKR.20040524104904.249", "b": "In the summer of 2001 I began work on a project that for a long time I had\nconsidered impossible. I had long considered that \"private\" file formats such as\n.leo files were the only way to represent an outline properly and safely. I'm\nnot sure exactly what changed my mind, but I finally was willing to consider\nthat information embedded in external files might be useful. This meant accepting\nthe possibility that sentinel lines might be corrupted. This was a crucial first\nstep. If we can trust the user not to corrupt sentinel lines than we can embed\nalmost any kind of information into a external file.\n\nThere were several motivations for this work. I wanted to eliminate the need for\nexplicit Tangle and Untangle commands. I thought of this as \"Untangle on\nRead/Tangle on Write.\" If tangling and untangling could be made automatic it\nwould save the user a lot of work. I also wanted to make external files the\nprimary sources files. .leo files might be made much smaller external files\ncontained the primary source information. This hope turned out to be false.\n\nThe result of this design work was something I originally called Leo2, though I\nnow usually prefer to talk about @file trees. Initially most design issues were\nunresolved or unknown. I resolved to attempt a robust error-recovery scheme, not\nknowing in advance what that might involve. I also wanted to solve what I\nthought of as the \"cross-file clone\" problem: clones that point from a .leo\noutline into a external file. With Leo1 cross-file clones do not exist;\neverything is in the same .leo file. It was clear that Leo2 would have to change\nsome aspects of clones, but all details were fuzzy.\n", "children": []}, {"h": "A prototype", "gnx": "EKR.20040524104904.250", "b": "The next step was also crucial. I started to use Leo1 as a prototype to design\nwhat the new body pane would look like to the user. In retrospect, using Leo1 as\na prototype for Leo2 was just as inspired as using MORE as a prototype for Leo1.\nBoth prototypes marked the true beginning of their respective projects. The Leo2\nprototype was a mockup in Python of the code for reading and writing derived\nfiles. The file LeoDocs.leo contain these first prototype nodes.\n\nWriting the prototype got me thinking about improving noweb. With my experience\nwith Leo1, I was able to create a new markup language that took advantage of\noutline structure. I called the new language \"simplified noweb\", though that\nterminology is obsolete. I created @file nodes to distinguish between the old\nand new ways of creating external files. In Leo1, the @code directive is simply\nan abbreviation for a section definition line. Simplified noweb used @c as an\nabbreviation for @code. More importantly, simplified noweb used @c to separate\ndoc parts from code parts without necessarily specifying a section name. It\nquickly became apparent that most nodes could be unnamed. All I needed was the\n@others directive to specify the location for all such unnamed nodes.\n\nFrom the start, simplified noweb was a joy to use. Indeed, the @others directive\ncould replace all section definition lines. Furthermore, I could make @doc\ndirective optional if the body pane started in \"code mode\". But this meant that\nplain body text could become a program! This was an amazing discovery. These\nAha's got me excited about Leo2. This was important, as it motivated me to do a\nlot of difficult design work.\n", "children": []}, {"h": "User interaction", "gnx": "EKR.20040524104904.251", "b": "In spite of this excitement, I was uneasy. After much \"daydreaming\" I realized\nthat I was afraid that reading and writing external files would be interrupted by\na long series of alerts. I saw that designing the \"user interaction\" during\nreading and writing would be very important. The next Aha was that I could\nreplace a long series of alerts with messages to the log window, followed by a\nsingle \"summary\" alert. Much later I saw how to eliminate alerts entirely.\n\nAt this time I thought there would be two kinds of \"errors\" while reading\nexternal files. Warnings would alert the user that something non-serious had\nhappened. True errors would alert the user that data might have been lost.\nIndeed, if Leo2 saves orphan and ignored nodes in a .leo file under an @file\nnode, then read errors could endanger such nodes. Much later I saw that a robust\nerror recovery scheme demands that @file nodes not contain orphan and @ignored\nnodes. (More on this subject later.) But if orphan and @ignored nodes are moved\nout of @file trees, there are no read errors that can cause data loss! So the\ndistinction between warnings and errors finally went away.\n", "children": []}, {"h": "The write code", "gnx": "EKR.20040524104904.252", "b": "I next turned my attention to writing @file nodes. A huge Aha: I realized that\nsentinel lines must contain both a leading and a trailing newline. The general\nprinciple is this: the write code must contain absolutely no \"conditional\"\nlogic, because otherwise the read code could not figure out whether the\ncondition should be true or false. So external files contain blank lines between\nsentinel lines. These \"extra\" newlines are very useful, because the read\n(untangle) code can now easily determine exactly where every blank, tab and\nnewline of the external file came from. It would be hard to overstate how\nimportant this simplifying principle was in practice.\n\nMuch later, with urging from a customer, I realized that the write code could\nsafely remove \"extra\" newlines between sentinels with a caching scheme in the\nlow level atFile::os() routine. This scheme does not alter the body of the write\ncode in any way: in effect, sentinels still contain leading and trailing\n\"logical\" newlines. The read code had to be modified to handle \"missing\" leading\nnewlines, but this can always be done assuming that sentinels still contain\nlogical leading and trailing newlines!\n\nAt about this time I designed a clever way of having the write code tell the\nread code which newlines were inserted in doc parts. (The whole point of doc\nparts is to have the write code format long comments by splitting long lines.)\nTo quote from my diary:\n\n\"We can use the following convention to determine where putDocPart has inserted\nline breaks: A line in a doc part is followed by an inserted newline if and only\nif the newline is preceded by whitespace. This is a really elegant convention,\nand is essentially invisible to the user. Tangle outputs words until the line\nwould become too long, and then it inserts a newline. To preserve all\nwhitespace, tangle always includes the whitespace that terminates a word on the\nsame line as the word itself. Therefore, split lines always end in whitespace.\nTo make this convention work, tangle only has to delete the trailing whitespace\nof all lines that are followed by a 'real' newline.\"\n", "children": []}, {"h": "The read code", "gnx": "EKR.20040524104904.253", "b": "After the write code was working I turned my attention to the read (untangle)\ncode. Leo's Untangle command is the most complex and difficult code I have ever\nwritten. Imagine my surprise when I realized that the Leo2 read code is\nessentially trivial! Indeed, the Leo2 untangle code is like an assembler. The\nread code scans lines of a external files looking for \"opcodes\", that is,\nsentinel lines, and executes some simple code for each separate opcode. The\nheart of this code is the scanText routine in atFile.cpp.\n\nThe read code was written and debugged in less than two days! It is the most\nelegant code I have ever written. While perfecting the read code I realized that\nsentinel lines should show the complete nesting structure found in the outline,\neven if this information seems redundant. For example, I was tempted to use a\nsingle sentinel to represent an @other directive, but finally abandoned this\nplan in favor of the @+other and @-other sentinels.\n\nThis redundancy greatly simplified the read code and made the structure of\nexternal files absolutely clear. Moreover, it turned out that we need, in\ngeneral, all the information created by the present sentinel lines. In short,\nsentinels are as simple as they can be, and no simpler.\n\nThe atFile::createNthChild method is a very important: it ensures that nodes\nwill be correctly inserted into the outline. createNthChild must be bullet-proof\nif the Read code is to be robust. Note that the write code outputs @node\nsentinels, that is, section definitions, in the order in which sections are\nreferenced in the outline, not the order in which sections appear in the\noutline. So createNthChild must insert the n'th node of parent p properly even\nif p contains fewer than n-1 children! The write code ensures that section\nreferences are properly nested: @node sentinels are enclosed in @node sentinels\nfor all their ancestors in the @file tree. createNthChild creates dummy siblings\nas needed, then replaces the dummy siblings later when their actual definitions,\nthat is, @node sentinels, are encountered.\n\nAt this point the fundamental read/write code was complete. I found three minor\nbugs in the code over the next week or so, but it was clear that the read/write\ncode formed a rock-solid base from which to continue design and implementation.\nThis was an entirely unexpected surprise.\n", "children": []}, {"h": "The load/save code", "gnx": "EKR.20040524104904.254", "b": "At this point I could read and write external files \"by hand\", using temporary\nRead and Write commands. The next step was to integrate the reading and writing\nof external files with the loading and saving of .leo files. From time to time I\nmade minor changes to the drivers for the read/write code to accommodate the\nLoad and Save code, but at no time did I significantly alter the read or write\ncode itself.\n\nThe user interaction of the Load and Save commands drove the design and\nimplementation of the load/store code. The most important questions were: \"what\ndo we tell the user?\", and \"what does the user do with the information?\" It\nturns out that the user can't make any complex decision during error recovery\nbecause the user doesn't have nearly enough information to make an informed\nchoice. In turn, this means that certain kinds of error recovery schemes are out\nof the question...\n", "children": []}, {"h": "Attributes, mirroring and dummy nodes", "gnx": "EKR.20040524104904.255", "b": "I now turned my attention to \"attributes\" of nodes. Most attributes, like user\nmarks, are non-essential. However, clone information is essential; we must never\nlose clone links. At this time I had a preliminary design for cross-file clones\nthat involved a two part \"pointer\" consisting of a full path name and an\nimmutable clone index within the external file. Eventually such pointers\ncompletely disappeared, but the immutable clone indices remain.\n\nMy first thought was that it would be good to store all attributes in @node\nsentinels in the external file, but experience showed that would be irritating.\nIndeed, one wants Leo2 to rewrite external files only if something essential has\nchanged. For example, one doesn't want to rewrite the external file just because\na different node as been selected.\n\nAt this point I had another Aha: we can use the .leo file to store all\nnon-essential attributes. For example, this means that the .leo file, not the\nexternal files, will change if we select a new node. In effect, the .leo file\nmirrors the external file. The only reason to store nodes in the .leo file under\nan @file node is to carry these attributes, so Leo2 wrote dummy nodes that do\nnot reference body text. Much later I saw that dummy nodes were dangerous and\nthat .leo files should contain all information found in external files.\n", "children": []}, {"h": "Clones", "gnx": "EKR.20040524104904.256", "b": "The concept of mirroring created a huge breakthrough with cross-file clones:\nHere is an excerpt of an email i sent to my brother Speed:\n\n\"I realized this morning that since a .leo file contains dummy vnodes for all\nnodes in a external file, those dummy nodes can carry clone info! I changed one\nline to make sure that the write code always writes clone info in dummy vnodes\nand voila! Cross-file clones worked!\"\n\nAll of Leo1's clone code could be used completely unchanged. Everything \"just\nworks\".\n", "children": []}, {"h": "Error recovery, at last", "gnx": "EKR.20040524104904.257", "b": "At first I thought we could make sure that the .leo file always correctly\nmirrors all external file, but disastrous experience showed that is a completely\nfalse hope. Indeed, backup .leo files will almost never mirror external file\ncorrectly. So it became urgent to find a completely fool-proof error recovery\nscheme.\n\nI had known for quite a while that error recovery should work \"as if\" the\nmirroring nodes were deleted, then recreated afresh. Several failed attempts at\nan error recovery scheme convinced me that error recovery would actually have to\ndelete all dummy nodes and then do a complete reread. This is what Leo2 does.\n\nBut erasing dummy nodes would destroy any orphan and ignored nodes--by\ndefinition such nodes appear nowhere in the external file. Therefore, I had to\nenforce the rule that @file nodes should contain no such nodes. Here is an email\nI wrote to my brother, Speed Ream discussing what turned out to be the\npenultimate error recovery scheme:\n\n\"The error recovery saga continues. After much pondering and some trial coding I\nhave changed my mind about orphans and @ignored nodes. They simply should never\nappear as descendants of @file nodes. Fortunately, this simplifies all aspects\nof Leo2. Leo2 will issue a warning (not an error) if an orphan or @ignored node\nappears as the descendant of an @file node when a .leo file is being saved. If\nany warnings occur while writing the external file, Leo2 will write the\n\"offending\" @file tree to the .leo file instead of the external file. This has\nseveral advantages:\n\n1. The user gets warned about orphan nodes. These are useful warnings! Orphan\nnodes arise from missing @others directives or missing section references.\n\n2. The user doesn't have to change anything immediately in order to save an\noutline. This is very important. Besides warnings about orphans, Leo2 will also\nwarn about undefined or unreferenced sections. User's shouldn't have to fix\nthese warnings to do a Save!\n\n3. No errors or alerts will occur during Reading or Writing, so the user's\nanxiety level goes way down. At worst, some informational message will be sent\nto the log. The user will never have to make important decisions during Loads or\nSaves. [At last the dubious distinction between errors and warnings disappears.]\n\n4. Error recovery can be bullet-proof. Simple code will guarantee that after any\nread operation the structure of an @file node will match the structure of the\nexternal file. Also, sentinels in external files will now account for all children\nof an @file node. There are no more \"missing nodes\" that must be filled in using\nthe .leo file. Finally, error recovery will never change the @file tree in any\nway: no more \"recovered nodes\" nodes.\n\n5. The present read code can be used almost unchanged. The only addition is the\nposting of a warning if the structure of the .leo file does not match the\nstructure of the external file. We need a warning because non-essential attribute\nof nodes (like user marks) may be altered.\"\n\nThis ends the original history of Leo2. In fact, it took quite a while before\nLeo recovered properly from all errors. I finally saw that .leo files should\nduplicate all information in external files. This allows a .leo file to be used a\nsingle backup file and allows maximal error recovery in all situations. It took\nseveral months to stamp out several subtle bugs involving clones that caused\nspurious read errors. Such errors undermine confidence in Leo and can cause\ndisastrous reversions. See my diary entries for January 2002 in leo.py for\ndetails.\n", "children": []}, {"h": "Theory of Operation", "gnx": "EKR.20040524104904.261", "b": "", "children": ["ekr.20100805165051.7160"]}, {"h": "@file theory.txt", "gnx": "ekr.20100805165051.7160", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901101608.6"]}, {"h": "@rst html\\theory.html", "gnx": "ekr.20050901101608.6", "b": "###################\nTheory of Operation\n###################\n\nThis chapter discusses how Leo's code works,\npaying particular attention to topics that have caused difficulties in design or implementation.\nThis chapter will be of use primarily to those wanting to change Leo's code.\n\n.. contents::\n    :depth: 2\n", "children": ["ekr.20050901102300", "ekr.20120319065417.6092", "EKR.20040524104904.265", "EKR.20040524104904.264", "EKR.20040524104904.266", "ekr.20110611085637.5019", "EKR.20040524104904.263", "EKR.20040524104904.262", "EKR.20040524104904.268", "EKR.20040524104904.269", "ekr.20120229094652.15141"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050901102300", "b": ".. _`History of Leo`:   history.html\n.. _`White Papers`:     whitepapers.html\n", "children": []}, {"h": "Autocompletion", "gnx": "ekr.20120319065417.6092", "b": "", "children": ["ekr.20120229094652.15115", "ekr.20120229094652.15117", "ekr.20120229094652.15119"]}, {"h": "UI notes", "gnx": "ekr.20120229094652.15115", "b": "Both the legacy and new completer now work *exactly* the same way, because\nthey both use the AutoCompleterClass to compute the list of completions.\n\nThe strict \"stateless\" requirement means that the \"intermediate\"\ncompletions must be entered into the body pane while completion is active.\nIt works well as a visual cue when using the tabbed completer: indeed, the\ntabbed completer would be difficult to use without this cue.\n\nThe situation is slightly different with the qcompleter. Adding code before\nthe user accepts the completion might be considered an \"advanced\" feature.\nHowever, it does have two important advantages, especially when \"chaining\"\nacross periods: it indicates the status of the chaining and it limits what\nmust appear in the qcompleter window.\n", "children": []}, {"h": "Appearance", "gnx": "ekr.20120229094652.15117", "b": "There is little change to the legacy completer, except that no text is\nhighlighted in the body pane during completion. This is calmer than before.\nFurthermore, there is no longer any need for highlighting, because when the\nuser types a backspace the legacy completer now simply deletes a single\ncharacter instead of the highlighted text.\n\nOne minor change: the legacy completer now *does* insert characters that do\nnot match the start of any possible completion. This is an experimental\nfeature, but it might play well with using codewise completions as a\nfallback to Leo-related completions.\n\n", "children": []}, {"h": "Performance", "gnx": "ekr.20120229094652.15119", "b": "Performance of Leo-related completions is *much* better than before. The\nold code used Python's inspect module and was horribly complex. The new\ncode uses eval and is perfectly straightforward.\n\nThe present codewise-related code caches completions for all\npreviously-seen prefixes. This dramatically speeds up backspacing. Global\ncaching is possible because completions depend *only* on the present\nprefix, *not* on the presently selected node. If ContextSniffer were used,\ncompletions would depend on the selected node and caching would likely be\nimpractical. Despite these improvements, the performance of\ncodewise-oriented completions is noticeably slower than Leo-related\ncompletions.\n\nThe ac.get_cached_options cuts back the prefix until it finds a cached\nprefix. ac.compute_completion_list then uses this\n(perhaps-way-too-long-list) as a starting point, and computes the final\ncompletion list by calling g.itemsMatchingPrefixInList.\n\nThis may not be absolutely the fastest way, but it is much simpler and more\nrobust than attempting to do \"prefix AI\" based on comparing old and new\nprefixes. Furthermore, this scheme is completely independent of the how\ncompletions are actually computed. The autocompleter now caches options\nlists, regardless of whether using eval or codewise.\n\nIn most cases the scheme is extremely fast: calls to get_completions\nreplace calls to g.itemsMatchingPrefixInList. However, for short prefixes,\nthe list that g.g.itemsMatchingPrefixInList scans can have thousands of\nitems. Scanning large lists can't be helped in any case for short prefixes.\n\nHappily, the new scheme is still *completely* stateless: the completionDict\ndoes *not* define state (it is valid everywhere) and no state variables had\nto be added. In short, the new caching scheme is much better than before,\nand it probably is close to optimal in most situations.\n", "children": []}, {"h": "Clones", "gnx": "EKR.20040524104904.265", "b": "New in Leo 4.7. All clones of a node **are the same node**. This is the\nso-called **one-node** world. In this world, vnodes represent data, generators\nand positions represent the location of the data in an outline.  This is a much\nsimpler world than all previous data representations.\n\nIn Leo versions 4.2 to 4.6 clones were represented by sharing **tnodes**. Cloned\nvnodes shared the same tnode. This shared tnode represented the entire shared\nsubtree of both clones. Thus, the _firstChild link had to reside in\n*tnodes*, not *vnodes*.\n\nPrior to Leo version 4.2, Leo duplicated all the descendants of vnode v when\ncloning v. This created many complications that were removed in the shared tnode\nworld. In particular, in the shared tnode scheme a vnode v is cloned if and only\nif len(v.vnodeList) > 1.\n", "children": []}, {"h": "Drawing and events", "gnx": "EKR.20040524104904.264", "b": "Leo must redraw the outline pane when commands are executed and as the result of mouse and keyboard events.\nThe main challenges are eliminating flicker and handling events properly.\nThese topics are interrelated.\n\n**Eliminating flicker**. Leo must update the outline pane with minimum flicker.\nVarious versions of Leo have approached this problem in different ways. The\ndrawing code in leo.py is robust, flexible, relatively simple and should work in\nalmost any conceivable environment. Leo assumes that all code that changes the\noutline pane will be enclosed in matching calls to the c.beginUpdate and\nc.endUpdate methods of the Commands class. c.beginUpdate() inhibits drawing\nuntil the matching c.endUpdate(). These calls may be nested; only the outermost\ncall to c.endUpdate() calls c.redraw() to force a redraw of the outline pane.\n\nCode may call c.endUpdate(flag) instead of c.endUpdate(). Leo redraws\nthe screen only if flag is true. This allows code to suppress redrawing entirely\nwhen needed. For example, here is how the idle_body_key event handler in\nleoTree.py conditionally redraws the outline pane::\n\n\tredraw_flag = false\n  \tc.beginUpdate()\n\tval = v.computeIcon()\n\tif val != v.iconVal:\n\t\tv.iconVal = val\n\t\tredraw_flag = true\n\tc.endUpdate(redraw_flag) # redraw only if necessary\n\nThe leoTree class redraws all icons automatically when c.redraw() is called.\nThis is a major simplification compared to previous versions of Leo. The entire\nmachinery of drawing icons in the vnode class has been eliminated. The\nv.computeIcon method tells what the icon should be. The v.iconVal ivar\ntells what the present icon is. The event handler simply compares these two\nvalues and sets redraw_flag if they don't match.\n\n**Handling events.** Besides redrawing the screen, Leo must handle events or\ncommands that change the text in the outline or body panes.\n\nThe leoTree class contains all the event handlers for the body and outline\npanes. The actual work is done in the idle_head_key and idle_body_key methods.\nThese routines are surprisingly complex; they must handle all the tasks\nmentioned above, as well as others. The idle_head_key and idle_body_key methods\nshould not be called outside the leoTree class. However, it often happens that\ncode that handles user commands must simulate an event. That is, the code needs\nto indicate that headline or body text has changed so that the screen may be\nredrawn properly. The leoTree class defines the following simplified event\nhandlers: onBodyChanged, onBodyWillChange, onBodyKey, onHeadChanged and\nonHeadlineKey. Commanders and subcommanders call these event handlers to\nindicate that a command has changed, or will change, the headline or body text.\nCalling event handlers rather than c.beginUpdate and c.endUpdate ensures that\nthe outline pane is redrawn only when needed.\n", "children": []}, {"h": "Find and change commands", "gnx": "EKR.20040524104904.266", "b": "The find and change commands are tricky; there are many details that must be\nhandled properly. The following principles govern the LeoFind class:\n\n1.  Find and Change commands initialize themselves using only the state of the\n    present Leo window. In particular, the Find class must not save internal\n    state information from one invocation to the next. This means that when the\n    user changes the nodes, or selects new text in headline or body text, those\n    changes will affect the next invocation of any Find or Change command.\n    Failure to follow this principle caused all kinds of problems in the Borland\n    and Macintosh codes. There is one exception to this rule: we must remember\n    where interactive wrapped searches start. This principle simplifies the code\n    because most ivars do not persist. However, each command must ensure that\n    the Leo window is left in a state suitable for restarting the incremental\n    (interactive) Find and Change commands. Details of initialization are\n    discussed below.\n\n2.  The Find and Change commands must not change the state of the outline or body\n    pane during execution. That would cause severe flashing and slow down the\n    commands a great deal. In particular, the c.selectPosition and c.editPosition\n    methods must not be called while looking for matches.\n\n3.  When incremental Find or Change commands succeed they must leave the Leo\n    window in the proper state to execute another incremental command. We\n    restore the Leo window as it was on entry whenever an incremental search\n    fails and after any Find All and Change All command. Initialization involves\n    setting the self.c, self.v, self.in_headline, self.wrapping and\n    self.s_text ivars.\n\nSetting self.in_headline is tricky; we must be sure to retain the state of the\noutline pane until initialization is complete. Initializing the Find All and\nChange All commands is much easier because such initialization does not depend\non the state of the Leo window. Using the same kind of text widget for both\nheadlines and body text results in a huge simplification of the code.\n\nIndeed, the searching code does not know whether it is searching headline or\nbody text. The search code knows only that self.s_text is a text widget that\ncontains the text to be searched or changed and the insert and sel attributes\nof self.search_text indicate the range of text to be searched. Searching\nheadline and body text simultaneously is complicated. The selectNextVnode()\nmethod handles the many details involved by setting self.s_text and its insert\nand sel attributes.\n", "children": []}, {"h": "Key handling", "gnx": "ekr.20110611085637.5019", "b": "The following three sections deal with different aspects of how Leo handle's\nkeystrokes that the user types. This is the most complex code in Leo.\n", "children": ["ekr.20110611085637.5014", "ekr.20060602142732", "ekr.20110609120520.16494", "ekr.20120315101404.14218", "ekr.20120315101404.14219", "ekr.20120315101404.14220"]}, {"h": "Key domains", "gnx": "ekr.20110611085637.5014", "b": "Leo's key-handling code has almost nothing to do with supporting multiple guis.\nRather, the key-handling code is complex because it must deal with the following\nfour fundamentally different problem domains.\n", "children": ["ekr.20110611085637.5015", "ekr.20110611085637.5016", "ekr.20110611085637.5017", "ekr.20110611085637.5018"]}, {"h": "Domain 1: Parsing user bindings in @keys, @mode and @shortcut nodes", "gnx": "ekr.20110611085637.5015", "b": "In this domain, complexity arises from allowing the user a variety of\n*equivalent* ways of specifying bindings. Furthermore, this domain allows the\nuser to specify modes and per-pane bindings. Thus, all these complexities are\nunavoidable.\n", "children": []}, {"h": "Domain 2: Maintaining and using binding tables", "gnx": "ekr.20110611085637.5016", "b": "The result of parsing user bindings are a set of binding tables. These tables\nare complex, but we need not go into details here because only one method,\nk.masterKeyHandler (and its helper, getPaneBinding) uses the tables.\n\nThe only thing we have to remember about the binding tables is that bindings are\nexpressed in terms of so-called **strokes**.  Strokes are the \"official\" form of\nevery user binding.  The essential property of a stroke is that it contains\n*all* the information required to handle the stroke: Leo can unambiguously\ndetermine exactly what a stroke means and what bindings are in effect for a\nstroke.  If necessary, Leo can correctly insert the proper character\n*corresponding* to the stroke into any text widget. \n\nThis correspondence (association) between the stroke and the actual\ncharacter to be inserted into text widgets is crucial.  This\ncorrespondence is created in the next domain.\n\nAnticipating a bit, for any incoming key event, event.stroke is the\nstroke, and event.char is the character (if any) that *might*\n(depending on bindings) be inserted into text widgets.\n\n**New in Leo 4.9**: k.stroke2char calculates the to-be-inserted char from\nany stroke.\n", "children": []}, {"h": "Domain 3: Translating incoming key events into standard events", "gnx": "ekr.20110611085637.5017", "b": "The eventFilter method in qtGui.py creates leoKeyEvent objects.  Turning \"raw\"\nQt key events into leoKeyEvents is unavoidably complicated because eventFilter\n(and its allies) **must** carefully compute the stroke corresponding to the raw\nkey event.  There is no way around this requirement if Leo's binding machinery\nin domain 2 is to work.  This code has been stable for a long time. \n", "children": []}, {"h": "Domain 4: Printing key bindings in a human-readable format", "gnx": "ekr.20110611085637.5018", "b": "It's important not to forget this domain: there are some situations in which we\nwant to represent '\\b','\\r','\\n' and '\\t' as 'BackSpace','Linefeed','Return' and\n'Tab'.\n", "children": []}, {"h": "Key bindings", "gnx": "ekr.20060602142732", "b": "There are two kinds of bindings, gui bindings and pane bindings.\n\n**Gui bindings** are the actual binding as seen by  whatever gui is in effect.\nLeo binds every key that has a binding to k.masterKeyHander.\n\nAt present Leo makes gui bindings in several places, all equivalent.\nBindings are made to callbacks, all of which have this form::\n\n     def callback(event=None,k=k,stroke=stroke):\n        return k.masterKeyHandler(event,stroke)\n\nAs a result, changing gui bindings actually has no effect whatever.\nIt would be clearer to have a single place to make these bindings...\n\nIn any case, the purpose of these callbacks is to capture the value of 'stroke' so\nthat it can be passed to k.masterKeyHandler.\nThis relieves k.masterKeyHandler of the impossible task of computing the stroke from the event.\n\n**Important**:  No function argument is ever passed to k.masterKeyHandler from these callbacks,\nbecause k.masterKeyHandler binds keys to command handlers as described next.\n\n**Pane bindings** are bindings represented by various Python dictionaries in the\nkeyHandlerClass (see below). k.masterKeyHandler and its helpers use these\ndictionaries to call the proper command or mode handler. This logic is hairy,\nbut it is completely separate from the gui binding logic.\n\nHere are the dictionaries that k.masterKeyHandler uses:\n\n- c.commandsDict:\n  Keys are minibuffer command names; values are functions f.\n\n- k.inverseCommandsDict:\n  Keys are f.__name__l values are emacs command names.\n\n- k.bindingsDict:\n  Keys are shortcuts; values are *lists* of g.bunch(func,name,warningGiven).\n\n- k.masterBindingsDict:\n  Keys are pane names: 'all','text',etc. or mode names.\n  Values are dicts:  keys are strokes; values are g.Bunch(commandName,func,pane,stroke).\n\n- k.modeWidgetsDict:\n  Keys are mode names; values are lists of widgets to which bindings have been made.\n\n- k.settingsNameDict:\n  Keys are lowercase settings; values are 'real' Tk key specifiers.\n  Important: this table has no inverse.\n\n- inverseBindingDict:\n  This is *not* an ivar; it is computed by k.computeInverseBindingDict().\n  Keys are emacs command names; values are *lists* of shortcuts.\n", "children": []}, {"h": "Handling key events", "gnx": "ekr.20110609120520.16494", "b": "", "children": ["ekr.20120313134250.15733", "ekr.20120313134250.15734"]}, {"h": "All events are key events", "gnx": "ekr.20120313134250.15733", "b": "All event objects passed around Leo are *key* event objects. Taking a look at\nthe eventFilter method, we see clearly see that *only* key events ever get\npassed to Leo's core. All other events are handled by Qt-specific event\nhandlers.\n\nAs can be seen, these non-key events *can* be passed to Leo, but only as the\nevent arg in g.doHook (!) At present, no plugin ever calls k.masterKeyHandler.\nThe only call to k.masterKeyHandler in qtGui.py is the expected call in\neventFilter.\n\nThere are other calls to k.masterKeyHandler in Leo's core, but we can prove (by\ninduction, if you will), that all events passed to k.masterKeyHandler are proper\nleoKeyEvent objects.\n", "children": []}, {"h": "c.check_event", "gnx": "ekr.20120313134250.15734", "b": "The essential invariant is that the events passed to Leo's core methods really\nare leoKeyEvent objects created by qtGui.py.  Rather than asserting this\ninvariant, the code will contains calls to c.check_event in essential places. \nc.check_event is a \"relaxed\" place to do as much error checking is needed.  In\nparticular, running the unit tests calls c.check_event many times. \n\nc.check_event is a happy \"accident\".  It turns out to be the essential\nconsistency check that continually verifies that the Qt event methods are\ndelivering the expected keys to k.masterKeyHandler. \n", "children": []}, {"h": "About the KeyStroke class", "gnx": "ekr.20120315101404.14218", "b": "The KeyStroke class distinguish between \"raw\" user settings\nand the \"canonicalized\" form used throughout Leo. Indeed,\nthe ability to explicitly distinguish between the two, using\ntype checking, substantially clarifies and simplifies the\ncode.\n\nThe KeyStroke class makes possible vital type-related\nassertions. Knowing *for sure* exactly what crucial data is\nand what it means is a huge step forward.\n\nObjects of the KeyStroke class can be used *exactly* as a\nstrings may be used:\n\nA. KeyStroke objects may be used as dictionary keys, because\nthey have __hash__ methods and all the so-called rich\ncomparison methods: __eq__, __ne__, __ge__, __gt__, __le__\nand __lt__. Note that KeyStroke objects may be compared with\nother KeyStroke objects, strings and None.\n\nB. At present, KeyStroke objects supports the find, lower\nand startswith methods. This simplifies the code\nsubstantially: we can apply these methods to either strings\nor KeyStroke objects, so there is no need to create\ndifferent versions of the code depending on the value of\ng.new_strokes.\n\nHowever, having the KeyStroke class support string methods\nis bad design. Indeed, it is a symptom that the client code\nthat uses KeyStroke objects knows too much about the\ninternals of KeyStroke objects. Instead, the KeyStroke class\nshould have higher-level methods that use s.find, s.lower\nand s.startswith internally.\n\nYou could say that the fact that code in leoKeys.py calls\ns.find, s.lower and s.startswith is a symptom of non OO\nprogramming. The internal details of settings and strokes\n\"pollutes\" the code. This must be fixed. This will likely\ncreate opportunities for further simplifications.\n\n> Why not just have .s attribute in KeyStroke, that contains\nthe string version?\n\nIt is truly impossible to understand the key code without\nknowing whether an object is a string representing a user\nsetting or the canonicalized version used in Leo's core,\nthat is, a KeyStroke object. Using ks.s instead of ks\ndestroys precisely the information needed to understand the\ncode.\n\nAgain, this is not a theoretical concern. The key code now\ncontains assertions of the form::\n\n    assert g.isStroke(stroke)\n\nor::\n\n    assert g.isStrokeOrNone(stroke)\n\nGetting these assertions to pass in *all* situations\nrequired several important revisions of the code. The code\nthat makes the assertions pass is \"innocuous\", that is,\nalmost invisible in the mass of code, but obviously, these\nsmall pieces of code are vital.\n\nThis is in no way a violation of OO principles. The code is\nnot dispatching on the type of objects, it is merely\nenforcing vital consistency checks. This code is complex:\nconfusion about the types of objects is intolerable.\nHappily, the resulting clarity allows the code to be\nsubstantially simpler than it would otherwise be, which in\nturn clarifies the code further, and so on...\n", "children": []}, {"h": "Simplifying the Qt input code", "gnx": "ekr.20120315101404.14219", "b": "The Qt key input code can be greatly simplified by calling a\nnew k.makeKeyStrokeFromData factory method. At present, the\nQt key input code knows *all* the details of the format of\n*canonicalized* settings. This is absolutely wretched\ndesign.\n\nInstead, the Qt input key code should simply pass the key\nmodifiers and other key information to\nk.makeKeyStrokeFromData, in a some kind of \"easy\" format.\nFor example, the Qt input key code would represent the\ninternal Qt modifiers as lists of strings like \"alt\",\n\"ctrl\", \"meta\", \"shift\". k.makeKeyStrokeFromData would then\ncreate a *user* setting from the components, and then call\nk.strokeFromSetting to complete the transformation.\n", "children": []}, {"h": "Typed dicts", "gnx": "ekr.20120315101404.14220", "b": "Leo's key dictionaries will always be complex, but basing\nthem on the TypedDict class is a major improvement.\n\nThe g.TypedDict and g.TypedDictOfLists classes are useful\nfor more than type checking: they have unique names and a\ndump method that dumps the dict in an easy-to-read format\nthat includes the name, and valid types for keys and values.\n\nPlain dicts do have their uses, but for \"long-lived\" dicts,\nand dicts passed around between methods, plain dicts are as\nill-advised as g.Bunches.\n\n", "children": []}, {"h": "Nodes", "gnx": "EKR.20040524104904.263", "b": "The vnode class is Leo's fundamental model class. A **vnode** represents the\ndata represented by headlines. As of Leo 4.7, all clones of a node are in fact\n**exactly the same node**.\n\nThe vnode contains **all** data associated with a node. A vnode contains\nheadline text, body text, and **user attributes**, uA's for short.\n\nBecause Leo has unlimited Undo commands, Leo deletes vnodes only when a window\ncloses. Leo deletes nodes indirectly using destroy methods. Several classes,\nincluding the vnode, leoFrame and leoTree classes, have destroy methods. destroy\nmethods merely clear links so that Python's reference counting mechanisms will\neventually delete vnodes and other data when a window closes.\n\nLeo's XML file format uses **tx** and **t** attributes to associate <v> elements\nwith <t> elements. <v> elements represent nodes. <t> elements represent the body\ntext of nodes. This is a (somewhat dubious) space optimization. The values of tx\nand t attributes are **gnx's** (global node indices). These indices do not\nchange once a node has created.\n", "children": []}, {"h": "Overview", "gnx": "EKR.20040524104904.262", "b": "All versions of Leo are organized as a collection of classes. The general\norganization of Leo has remained remarkably stable throughout all versions of\nLeo, although the names of classes are different in different versions.\nSmalltalk's Model/View/Controller terminology is a good way think about Leo's\nclasses. **Model classes** represent the fundamental data. The vnode\nclass is Leo's primary model class.\n\n**View classes** draw the screen. The main view classes are leoFrame.py and\nleoTree.py. The colorizer class in leoColor.py handles syntax coloring in the\nbody pane. Leo's view classes know about data stored in the vnode class. Most\nevents (keystrokes and mouse actions) in the outline and body pane are handled\nin the leoTree class. The leoFrame class also creates the Leo window, including\nmenus, and dispatches the appropriate members of the controller classes in\nresponse to menu commands.\n\n**Controller classes** (aka commanders) control the application. In Leo,\ncontrollers mostly handle menu commands. Commanders create subcommanders to\nhandle complex commands. The atFile class reads and writes files derived from\n\\@file trees. The LeoFind class handles the Find and Change commands. The\nleoImportCommands class handles the Import and Export commands, and the undoer\nclass handles the Undo command. Other classes could be considered controller\nclasses.\n\nEach Leo window has its own commander and subcommanders. Subcommanders are not\nsubclasses of their commander. Instead, subcommanders know the commander that\ncreated them, and call that commander as needed. Commanders and subcommanders\ncall the model and view classes as needed. For example, the Commands class\nhandles outline commands. To move a headline, the commander for the window calls\na vnode move routine to alter the data, then calls the view class to redraw the\nscreen based on the new data.\n\nA singleton instance of the **LeoApp** class represents the application itself.\nAll code uses the app() global function to gain access to this singleton member.\nThe ivars of the LeoApp object are the equivalent of Leo's global variables.\nleo.py uses no global Python variables, except the gApp variable returned by\napp(). leoGlobals.py defines all application constants. Naturally, most\nconstants are local to the class that uses them.\n\nSeveral classes combine aspects of model, view and controller. For example, the\n**LeoPrefs** class represents user preferences (model), the Preference Panel\n(view) and the Preferences menu command (controller). Similarly, the **LeoFind**\nclass represents find settings, the Find/Change dialog, and the Find/Change\ncommands.\n\nWe use the following convention throughout this documentation. Any variable\nnamed c is a commander, i.e., an instance of the Commands class in\nleoCommands.py. Variables named v are vnodes. These classes are defined in\nleoNodes.py.\n", "children": []}, {"h": "Unicode", "gnx": "EKR.20040524104904.268", "b": "Leo uses unicode objects in vnodes to denote headline and body text.\nNote that unicode strings have no encoding; only plain strings have encodings.\nThis means that once an (encoded) plain string has been converted to a unicode\nstring it doesn't matter how the unicode string was created. This is the key\nthat makes Leo's new code robust: internally Leo never has to worry about\nencodings. Encoding matter only when encoded strings are converted to and from\nUnicode. This happens when Leo reads or writes files.\n\nPython expressions that mix unicode strings u and plain strings s, like one of these::\n\n\tu + s\n\tu == s\n\tu[5] == s[2:]\n\nare promoted to unicode objects using the \"system encoding\". This encoding\nshould never be changed, but we can't assume that we know what it is, so for\nsafety we should assume the most restrictive encoding, namely \"ascii\". With this\nassumption, Leo's code can't throw an exception during these promotions provided\nthat: \n\n- Leo converts all text to unicode when Leo reads files or gets text from\n  text widgets.\n\n- All string literals in Leo's code have only ascii characters.\n", "children": []}, {"h": "Unlimited undo", "gnx": "EKR.20040524104904.269", "b": "Unlimited undo is straightforward; it merely requires that all commands that\naffect the outline or body text must be undoable. In other words, everything\nthat affects the outline or body text must be remembered. We may think of all\nthe actions that may be Undone or Redone as a string of beads (undo nodes).\n\nUndoing an operation moves backwards to the next bead; redoing an operation moves\nforwards to the next bead. A bead pointer points to the present bead. The bead\npointer points in front of the first bead when Undo is disabled. The bead\npointer points at the last bead when Redo is disabled. An undo node is a Python\ndictionary containing all information needed to undo or redo the operation. The\nUndo command uses the present bead to undo the action, then moves the bead\npointer backwards.\n\nThe Redo command uses the bead after the present bead to redo the action, then\nmoves the bead pointer forwards. All undoable operations call setUndoParams() to\ncreate a new bead. The list of beads does not branch; all undoable operations\n(except the Undo and Redo commands themselves) delete any beads following the\nnewly created bead. I did not invent this model of unlimited undo.\nI first came across it in the documentation for Apple's Yellow Box classes.\n", "children": []}, {"h": "Leo's load process", "gnx": "ekr.20120229094652.15141", "b": "Leo reads local files twice. The first load discovers the\nsettings to be used in the second load. This ensures that\nproper settings are *available* during the second load.\n\nCtors init settings \"early\", before calling the ctors for\nsubsidiary objects. This ensures that proper settings are\n*in effect* for the subsidiary ctors.\n\nAfter creating all subsidiary objects, c.__init__ simply\ncalls c.finishCreate! Creating Commands objects is now\ncompletely self-contained. In particular, c.__init__ now\ncreates the fully-inited gui frame. This is a revolution in\nLeo's startup code! c.__init__ no longer needs a frame\nargument, a surprisingly important conceptual\nsimplification.\n\nThe old code inited Leo windows in several *places*\n(c.__init__, the end of g.app.newLeoCommanderAndFrame and\nthe end of g.openWithFileName) and in several *phases*,\n(g.app.newCommanderAndFrame, g.openWithFileName and\nc.finishCreate.)\n\nThe new code has c.__init__ do *all* the work, in one place,\nand in one phase. This is supremely important for future\nmaintainers. The old code was difficult for me to understand\nyesterday, even after a full week of study. The new code is\na simple as could possibly be imagined. This is a gigantic\nstep forward for Leo.\n", "children": []}, {"h": "White papers", "gnx": "ekr.20050901084134", "b": "", "children": ["ekr.20100805165051.7161"]}, {"h": "@file whitepapers.txt", "gnx": "ekr.20100805165051.7161", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050901092232"]}, {"h": "@rst html\\whitepapers.html", "gnx": "ekr.20050901092232", "b": "############\nWhite Papers\n############\n\n..  I wrote the first two white papers soon after discovering Python.\n..  The conclusions in these papers have remained largely unchanged.\n..  I wrote the third in November 2004, and rewrote it in February 2006.\n\nI wrote this white paper soon after discovering Python in 2001.\nThe conclusions are still valid today.\n\n.. contents::\n    :depth: 4\n\n", "children": ["ekr.20050901092232.1", "EKR.20040524104904.260", "ekr.20060218085144", "ekr.20061129170454"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050901092232.1", "b": ".. External links...\n.. _pychecker:              http://pychecker.sourceforge.net/\n.. _`region inference`:     http://en.wikipedia.org/wiki/Region_inference\n\n.. Relative links...\n.. _`Theory of Operation`:  theory.html\n.. _appendices:             appendices.html\n.. _`Rst3 plugin`:          rstplugin3.html\n.. _`Scripting plugin`:     plugins.html#mod-scripting\n.. _`test buttons`:         scripting.html#test-and-suite-nodes\n", "children": []}, {"h": "Why I like Python", "gnx": "EKR.20040524104904.260", "b": "I've known for a while that Python was interesting; I attended a Python\nconference last year and added Python support to Leo. But last week I got that\nPython is something truly remarkable. I wanted to convert Leo from wxWindows to\nwxPython, so I began work on c2py, a Python script that would help convert from\nC++ syntax to Python. While doing so, I had an Aha experience. Python is more\nthan an incremental improvement over Smalltalk or C++ or objective-C; it is\n\"something completely different\". The rest of this post tries to explain this\ndifference.\n", "children": ["ekr.20050901092232.2", "ekr.20050901092232.3", "ekr.20050901092232.4", "ekr.20050901092232.5", "ekr.20050901092232.6"]}, {"h": "Clarity", "gnx": "ekr.20050901092232.2", "b": "What struck me first as I converted C++ code to Python is how much less blah,\nblah, blah there is in Python. No braces, no stupid semicolons and most\nimportantly, *no declarations*. No more pointless distinctions between\nconst, char \\*, char const \\*, char \\* and wxString.\nNo more wondering whether a variable should be signed, unsigned, short or long.\n\nDeclarations add clutter, declarations are never obviously right and\ndeclarations don't prevent memory allocation tragedies. Declarations also hinder\nprototyping. In C++, if I change the type of something I must change all related\ndeclarations; this can be a huge and dangerous task. With Python, I can change\nthe type of an object without changing the code at all! It's no accident that\nLeo's new log pane was created first in Python.\n\nFunctions returning tuples are a \"minor\" feature with a huge impact on code\nclarity. No more passing pointers to data, no more defining (and allocating and\ndeallocating) temporary structs to hold multiple values.\n\nPython can't check declarations because there aren't any. However, there is a\nreally nifty tool called Pychecker that does many of the checks typically done\nby compilers. See `pychecker`_ for details.\n", "children": []}, {"h": "Power", "gnx": "ekr.20050901092232.3", "b": "Python is much more powerful than C++, not because Python has more features, but\nbecause Python needs *less* features. Some examples:\n\n-   Python does everything that the C++ Standard Template Library (STL) does,\n    without any of the blah, blah, blah needed by STL.\n    No fuss, no muss, no code bloat.\n\n-   Python's slicing mechanism is very powerful and applies to any sequence (string, list or tuple).\n    Python's string library does more with far less functions because slices replace many functions\n    typically found in other string libraries.\n\n-   Writing dict = {} creates a dictionary (hash table).\n    Hash tables can contain anything, including lists and other hash tables.\n\n-   Python's special functions,  __init__, __del__, __repr__, __cmp__, etc.\n    are an elegant way to handle any special need that might arise.\n", "children": []}, {"h": "Safety", "gnx": "ekr.20050901092232.4", "b": "Before using Python I never fully realized how difficult and dangerous memory allocation is in C++.\nTry doing::\n\n        aList[i:j] = list(aString)\n\nin C.  You will write about 20 lines of C code.\nAny error in this code will create a memory allocation crash or leak.\n\nPython is fundamentally safe. C++ is fundamentally unsafe. When I am using\nPython I am free from worry and anxiety. When I am using C++ I must be\nconstantly \"on guard.\" A momentary lapse can create a hard-to-find pointer bug.\nWith Python, almost nothing serious can ever go wrong, so I can work late at\nnight, or after a beer. The Python debugger is always available. If an exception\noccurs, the debugger/interpreter tells me just what went wrong. I don't have to\nplan a debugging strategy! Finally, Python recovers from exceptions, so Leo can\nkeep right on going even after a crash!\n", "children": []}, {"h": "Speed", "gnx": "ekr.20050901092232.5", "b": "Python has almost all the speed of C. Other interpretive environments such as\nicon and Smalltalk have clarity, power and safety similar to Python. What makes\nPython unique is its seamless way of making C code look like Python code.\nPython executes at essentially the speed of C code because most Python modules\nare written in C. The overhead in calling such modules is negligible. Moreover,\nif code is too slow, one can always create a C module to do the job.\n\nIn fact, Python encourages optimization by moving to higher levels of\nexpression. For example, Leo's Open command reads an XML file. If this command\nis too slow I can use Python's XML parser module. This will speed up Leo while\nat the same time raising the level of the code.\n", "children": []}, {"h": "Conclusions", "gnx": "ekr.20050901092232.6", "b": "Little of Python is completely new. What stands out is the superb engineering\njudgment evident in Python's design. Python is extremely powerful, yet small,\nsimple and elegant. Python allows me to express my intentions clearly and at the\nhighest possible level.\n\nThe only hope of making Leo all it can be is to use the best possible tools. I\nbelieve Python will allow me to add, at long last, the new features that Leo\nshould have.\n\nEdward K. Ream, October 25, 2001.  P.S., September, 2005:\n\nFour years of experience have only added to my admiration for Python. Leo could\nnot possibly be what it is today without Python.\n", "children": []}, {"h": "@rst-ignore Why Leo is special", "gnx": "ekr.20060218085144", "b": "\nThis white paper originally appeared in November 2003 as a series of postings to comp.lang.python.\nMany features have been added since then.\nI rewrote this paper in February 2006.\n\nThose who use Leo know that it is a superb environment for\nprogramming, authoring and managing data and project.\nLeo's power comes from combining just two basic elements:\n\n- The organization power of outlines, including clones.\n- The power and simplicity of the Python language.\n\nThis paper explains in detail how combining these two features can, in fact,\ncreate immense and largely unexpected power and flexibility.\nTo summarize:\n\n- Outlines with clones are a superb filing cabinet for organizing text,\n  including programs and scripts, or in fact any other information.\n  This is the obvious aspect of outlines, but it is by no means the most powerful.\n\n- Scripts can be composed of multiple nodes using noweb markup.\n  Not only do outlines organize scripts, but scripts can be composed of outlines.\n  In other words, Leo can *compose* scripts by concatenating descendant nodes and sections.\n  Leo uses the noweb markup language to compose scripts in a flexible manner.\n\n- Outline nodes split text, including programs and scripts, into *easily accessible*, discreet parts.\n  Scripts may access nodes and their headlines and body text without any parsing.\n\n- Nodes provide an easy associating the *description* of data with the data itself.\n  Indeed, headlines naturally describe the node's body text.\n  Leo's users have discovered many ways to take advantage of the unification of data and its description.\n\n- Programs may treat nodes as *separate objects*, no matter what data the nodes contain.\n  Because nodes are truly separate objects,\n  it becomes easy and natural to define new *operations* on those objects,\n  **based on the description of those outline found in the node's headline**.\n\nThe combination of these features created a chain reaction of creative uses for outlines.\nThe result has been an explosion of new ideas and capabilities.\n\nLeo supports the following kinds of 'special' nodes:\n@test, @suite, @script, @url, @button, @button timer, @rst, @command, etc.\nEach of these kinds of nodes defines new objects and new operations on those objects.\nThe following paragraph show how Leo's users can use these new objects and their operations\n\nScripting\n\n- The execute script command executes the body text of the presently selected node\n  in an environment containing three variables: c, g and p.\n  Thus, all scripts have full and *easy* access to all data in the outline containing the script.\n\n- The scripting plugin creates support for script nodes.\n  We can treat a node as a script, and *apply that script to any other part of an outline*.\n  This is called 'bringing scripts to data'.\n  Leo's users can do this using script buttons as follows.\n  Any @button node creates a script button in Leo's icon area.\n  The name of the button is the node's headline; the script is the node's body text.\n  The user can also create new script buttons using the 'Script Button' button.\n  Pressing the 'Script Button' button creates a new script button,\n  just as if the presently selected node were an @button node.\n  Bringing scripts to data is an immensely powerful and useful feature:\n  it has eliminated the need for Leo's previous script-find features.\n\n- @command nodes create new minibuffer commands, complete with keyboard shortcuts.\n  The headline defines the command name and an optional keyboard shortcut;\n  the body text defines the command.\n\nUnit testing\n\n- We can treat a node as an individual unit test,\n  and *automatically* create a subclass of UnitTest.TestCase for the script in that node.\n  This is Leo's @test node feature.\n  Leo will convert the body text of any @test node into a unit tests.\n\n- Similarly, @suite nodes create suites of unit tests using the script in the @suite node.\n\n- A unit test can get test data from any node in the outline in which it resides.\n  Thus, outlines can contain not only unit tests, but the data for those tests.\n\nText formatting\n\n- The rst3 plugin creates support for @rst nodes.\n  @rst trees use outline structure to create document structure.\n  This is a revolution in organizing documents.\n  Full details [ref]\n\nOrganizing data\n\n- @url nodes contain references to web addresses, including files on a local disk.\n  Double-clicking an @url node opens a web browser on the given URL.\n\nPlugins\n\n- Plugins support many other kinds of user-defined objects and their associated operations.\n  Some examples are @view, @read-only, @folder, @produce, @run, @startfile, etc.\n  Writing plugins is easy.\n  Python makes the programming as easy as possible;\n  and Leo provides plugins with easy access to outlines and their data.\n", "children": ["ekr.20060218085144.1", "ekr.20060218085144.2", "ekr.20060218085144.3", "ekr.20060218085144.4", "ekr.20060218085144.5", "ekr.20060218085144.6", "ekr.20060218085144.7", "ekr.20060218095651", "ekr.20060218092725", "ekr.20060218085144.8"]}, {"h": "1. You can execute Python scripts directly from anywhere in a Leo outline", "gnx": "ekr.20060218085144.1", "b": "The body text of any Leo node may contain a Python script.\nThe Execute Script commands executes this script in a in an environment,\nthat predefines three variables: c, g and p.\nThese variables allow easy access to all the data in the present outline.\nFor example: the following script prints all the node of the\noutline in which the script is embedded::\n\n    for p in c.all_positions():\n        indent = ' '*p.level()\n        print '%s + %s' % (indent,p.h) # print the node's headline.\n        print p.b # print the node's body.\n\nFor that matter, scripts can access any data anywhere on your hard drive, or all\nthe data available on the web, for that matter. You knew that, but this\n\"innocent\" fact will be important later.\n\n**Result 1**:  Leo is a great environment in which to write Python scripts.\n", "children": []}, {"h": "2. Leo's outlines are the perfect tool for organizing scripts", "gnx": "ekr.20060218085144.2", "b": "Leo's outline can organize any text (or other data for that matter).\n\n**Result 2**:  Leo is a great way to organize standalone scripts.\n\nThis seemingly simple result will turn out to have important implications.\n", "children": []}, {"h": "3. Scripts can access the structure of Leo's outlines", "gnx": "ekr.20060218085144.3", "b": "As shown in the example above, scripts may get access to the\nheadline or body text of any node in a Leo outline.  Therefore, scripts may\nuse the *structure* of the outline to gain access to\n\na) other scripts,\nb) fragments of code for exec or eval or\nc) other data.\n\n**Result 3**: Scripts have can treat outline structure as first-class data.\n\nThe first \"big\" reason why the combination of Python & Leo is spectacular.\nIt gets better...\n", "children": []}, {"h": "4. Leo's nodes naturally separate data from meta-data", "gnx": "ekr.20060218085144.4", "b": "The body text of a node is the perfect place data itself (including other\nscripts).  The headline of the node is the perfect place to *describe* the\ndata.  That is, headlines are a natural place for meta-data.  Scripts can\nuse this meta-data in many creative ways.\n\n**Result 4**: Scripts have easy access to user-definable meta-data.\n", "children": []}, {"h": "5. Leo is the ultimate platform for unit testing", "gnx": "ekr.20060218085144.5", "b": "I first saw the power of results 2, 3 and 4 when creating unit tests for Leo.\nIndeed, the body text of a node is the perfect place for putting regression test\ndata. Headlines describe the data, which is exactly what is needed for\norganizing tests. Indeed, I use a script to create regression tests based on the\nstructure of the outline of the children of the node containing the script (!)\n\nFor example, I run the following script to create and run unit tests of\nLeo's colorizer::\n\n    import unittest,leoTest\n    suite = leoTest.makeColorSuite(\"colorizerTests\",\"tempNode\")\n    runner = unittest.TextTestRunner()\n    runner.run(suite)\n\nThis works as follows:  the arguments to makeColorSuite tell it to look up\nthe tree for of an ancestor of the present node (the node containing this\nscript) for a node whose headline is \"colorizerTests\".  makeColorSuite then\nlooks for children of *that* node for nodes containing test data.  The node\nwhose headline is \"tempNode\" is used by the colorizer during the tests.\nHere is the actual code of makeColorSuite::\n\n    def makeColorSuite(testParentHeadline,tempHeadline):\n        \"\"\"Create a colorizer test for every descendant of testParentHeadline.\"\"\"\n        u = testUtils() ; c = top() ; v = c.currentVnode()\n        root = u.findRootNode(v)\n        temp_v = u.findNodeInTree(root,tempHeadline)\n        vList = u.findSubnodesOf(testParentHeadline)\n        # Create the suite and add all test cases.\n        suite = unittest.makeSuite(unittest.TestCase)\n        for v in vList:\n            test = colorTestCase(c,v,temp_v)\n            suite.addTest(test)\n        return suite\n\nThe power and simplicity of this code is breathtaking.  All that is required\nare two utility routines, findNodeInTree and findSubnodesOf that find\nvarious nodes in an outline based on the outline structure and the headlines\nof the nodes:\n\n- findNodeInTree(root,tempHeadline) returns the node in the entire tree\n  contain the current node whose headline is tempHeadline.\n\n- u.findSubnodesOf(testParentHeadline) returns a list of all children of the\n  node whose name is testParentHeadline.\n\nIn short, it is absolutely trivial for a script embedded in a Leo outline to\ngenerate unit tests based on the data in the outline in which the script is\nembedded!\n\nNotice, please, what does *not* have to be done:\n\nA. No unit tests are created statically: everything is driven by data (the\n   outline itself)\n\nB. No Python test data is created *at all*.   Before I saw this approach, I\n   was putting text for the syntax-coloring text in Python strings and passing\n   those strings to the regression tests.  Now, the *unchanged* data in the\n   body text of nodes becomes the regression test data.\n\nC.  There is no need to mark meta-data as separate from test data: headlines\nare naturally distinct from body text.\n\nWe see now that Reasons 2, 3 and 4 are a lot more potent than they might\nappear at first.  Indeed, Leo plus Python is the ultimate merging of code,\nstructure and data.   Scripts can use data organized in outlines.  Outlines\norganize scripts.  Outlines (particularly their structure) are *data* for\nscripts.  Outlines contains metadata for scripts.  Outlines naturally keep\ndata and meta-data separate.\n\nPlease notice, this discussion merely hints at all the games that scripts\ncould play with outline structure.  Just for example, scripts can easily\ninsert, delete and reorganize nodes.  And the uses to which outline\nstructure may be put are practically unlimited, as we shall see later...\n\nLet's turn now to a completely separate topic...\n", "children": []}, {"h": "6. Leo is the ultimate platform for finding and changing text.", "gnx": "ekr.20060218085144.6", "b": "A few days ago I have added a script-based option to Leo's Find/Change\npanel.  For more than 30 years I have been disgusted with tools like regular\nexpressions.  Calling re powerful is an utter joke; it's way too complex and\nway too wimpy.  Script-based find-change is infinitely more powerful.\nInstead of containing find text or change *text*, Leo's Find/Change panel\nmay contains find or change *scripts*.  This becomes possible because scripts\nhave complete access to both the structure of the outline and all of Leo's\ncode.\n\nIt all works so smoothly:   The find script is responsible for traversing\nthe tree and for highlighting the found text or otherwise indicating to the\nchange script what the found text was.  Leo dedicates a Python dict called\napp.searchDict for communication between the search script and the change\nscript.  The change script is responsible for:\n\n-  changing the text, typically by using c.setBodyString(p,newText), and\n\n-  implementing undo, typically by calling c.frame.onBodyChanged(p,\"Change\",oldText=oldText).\n\nSome details:\n\n- When executing the search and change scripts when the user selects the Find\n  All or Change All commands, Leo executes the find or change scripts repeatedly\n  only if app.searchDict.get(\"continue\") evaluates to True. Otherwise these\n  scripts are only executed once. Otherwise, scripts can use app.searchDict as\n  they please.\n\n- For simplicity, most find and change scripts will ignore settings in the Find\n  Panel like \"whole word\", \"pattern match\", and \"reverse\": the scripts know what\n  to do! However, these settings are available to the scripts via ivars such as\n  c.whole_word_flag, etc. if desired.\n\n- Either the find and change scripts may use Python's re module. For example,\n  the find script could set app.searchDict[\"m\"] to the match object returned by\n  re's match method. The change script would then compute the result, change the\n  text and set the undo info as usual.\n\nIn effect, Leo's Find/Change panel becomes a new platform for running\nscripts interactively.  Leo now has all the find/change capability of\npattern matching languages like Snobol and Icon, using the capabilities of\nthe plain Python language.  Moreover, Leo can deliver these capabilities\ninteractively or not depending which buttons you push in Leo's Find/Change\npanel.\n\nOne last point.  As I mentioned much earlier, there is no reason to confine\nthe find and change scripts to operate on data only within a Leo outline.\nThese scripts could as easily traverse your file system as the Leo outline.\nBut notice: scripts could pull data from the file system into the outline so\nthat you can see the effects of changes as the scripts operate.  Again, this\ncan all happen interactively if you like.\n\nNo, one more last point.  It's convenient to defined an initScriptFind\nutility very similar to the makeColorSuite utility, used like this::\n\n    # Initialize Leo's find panel using the named children of this node.\n    from leoGlobals import *\n    initScriptFind(\"Find script\",\"Change script\")\n    # Start searching at the top.\n    top().selectVnode(c.rootVnode())\n\nPut the search script in a child node called \"Find script\" (no quotes), put\nthe change script in a child node called \"Change script\", execute this\nscript and the following happens:\n\n- The body text of \"Find script\" node gets put in the find text of Leo's Find/Change dialog.\n\n- The body text of \"Change script\" node gets put in the find text of Leo's Find/Change dialog.\n\n- The Script Find radio buttons gets selected, as does the Script Change checkbox.\n\n- The root of the outline becomes the selected node.\n\nPresto!  Leo is ready for a script search.\n", "children": []}, {"h": "7. Leo outlines are the ultimate filing cabinet", "gnx": "ekr.20060218085144.7", "b": "One more feature greatly expands the generality and power of\nLeo's outlines combined with Python.  Plugins may now attach arbitrary data\nto any node of a Leo outline.  This is done merely by \"injecting\" an ivar\ncalled  unknownAttributes ivar into Leo's fundamental vnode objects\n(or adding items to the unknownAttributes dict if it already exists).  The\nunknownAttributes ivar should be a Python dictionary whose keys are xml\nattribute names and whose values are the values of those attributes.\n\nWhen writing a file, Leo will write \"foreign\" attributes in the <v> or <t>\nxml elements of Leo's .leo file if the corresponding vnode contains\nthis unknownAttributes ivar.  Similarly, Leo will create an\nunknownAttributes ivar for a vnode if the corresponding <v> or <t>\nelement contains an attribute not normally used by Leo.  Leo performs the\nstandard xml escapes when writing unknown attributes, so plugins can put\n*anything* in the unknownAttributes dictionary.  In particular, plugins may\nput xml in v.unknownAttributes or t.unknownAttributes.\n\nThis means, for example, that plugins may add anything that can be\nrepresented by xml (and that is *everything*) in any node of a Leo outline.\nIn effect, Leo's file format is now completely extensible.  BTW, plugins can\noverride any aspect of Leo's behavior, so not only can Leo passively accept\nthe data in \"extended\" .leo files, but plugins can extend Leo to *use* this\ndata!\n", "children": []}, {"h": "8: Script buttons", "gnx": "ekr.20060218095651", "b": "Script buttons are a quick way of automating any task.  Extremely useful.\nSee the `Scripting plugin`_ for details.\n\nLeo's core provides additional support for @test, @suite, @timer nodes.\nFor details, see the documentation for `test buttons`_.\n", "children": []}, {"h": "9: The rst3 plugin", "gnx": "ekr.20060218092725", "b": "See the documentation for the `Rst3 plugin`_ for details.\n", "children": []}, {"h": "Conclusion", "gnx": "ekr.20060218085144.8", "b": "All the power of Leo derives directly from the power, flexibility and\ndynamism of Python.  But making structure explicit as Leo outlines do adds\nan important new dimension, literally and figuratively, to Python.\nMoreover, Leo's Find/Change dialog creates a new environment from which to\nrun Python scripts. At long last the full power of the unification of code\nand data is becoming apparent.\n", "children": []}, {"h": "@rst-ignore Allocating storage using lifetimes", "gnx": "ekr.20061129170454", "b": "This white paper describes the storage allocation used in a commercial\noptimizing C compiler written for Tuple, Inc. ca. 1993. The last section\ndiscusses tantalizing possibilities for the pypy project. These possibilities\nare why I wrote this paper.\n\nStorage allocation is crucial to any compiler because of the number, size and\ncomplexity of data which must be allocated. You might event say that a compiler\nconsists of storage allocation and everything else. I paid a lot of attention to\nstorage allocation in CC2, and that work paid off. The resulting compiler was a\nfew percent faster than the CodeWarrior C compiler, perhaps the fastest C\ncompiler in existence at that time. The original notes were written around 1993,\nso I would do some things differently today. However, the design discussed below\nstill seems relevant today. Indeed, attention to low-level details can make a\nhuge difference.\n", "children": ["ekr.20061129170155.2", "ekr.20061129175952", "ekr.20061129202238"]}, {"h": "Lifetime allocation", "gnx": "ekr.20061129170155.2", "b": "CC2 allocated objects one-at-a-time (simple allocation), in blocks of\nfixed-sized objects (block allocation) or in blocks of variable-sized objects\n(lifetime-based allocation). Simple-allocation was used for short-lived objects\nand will not be discussed further. Block allocation was used in several ways, the\nmost interesting of which was to allocate \"cons cells\" used to represent lists.\nThese cons cells could be reused by placing them on a global avail list. Thus,\nthe blocks holding cons cells could (and did) have permanent lifetime: they were\nnever deallocated.\n\nThe most interesting aspect of CC2's storage allocation scheme was what I\neventually came to call **lifetime-based** storage allocation. This was, for me,\nan new discovery, though clearly I was not the first to discover it. The Aha is\nthat a lifetime is defined by the time (or equivalently by the place in program\ncode) at which objects are **deallocated**. A lifetime may hold many different\nkinds of objects that were allocated at many different times. The essence of\nlifetime-based allocation is that **the proper time to specify when an object\nwill be deallocated is when the object is created**.\n\nLifetime-based allocation is a superb invention:\n\n- It becomes an effective design tool. Thinking of objects in terms of their\n  lifetimes often shows the essence of a design problem.\n\n- It can be used for any kind of object, regardless of its size or type.\n\n- It reduces the number of calls to calloc and free by one or two orders of\n  magnitude over naive schemes. Furthermore, it typically requests\n  standard-sized blocks (say 8K or more) from calloc, further easing the burden\n  on calloc and free.\n\n- CC2 could allocate objects with a particular lifetime using small, extremely fast, macros.\n  The macros expanded to C code something like this::\n\n    if lifetime -> avail >= sizeof(theObjectKind) {\n        // Allocate the storage.\n        theObject = lifetime -> ptr \n        lifetime -> ptr += sizeof(theObjectKind)\n    }\n    else {\n        << allocate theObject in another block >>\n    }\n\nImportantly, the speed of the else clause makes absolutely no difference because\nit is so seldom executed. Thus, it uses a function call. Clearly then, this code\nis optimal: it could not be improved even if coded in assembly language.\n\n", "children": []}, {"h": "Typical lifetimes", "gnx": "ekr.20061129175952", "b": "What makes lifetime-based allocation so powerful is that so few lifetimes are\ntypically required. Indeed, CC2 had only the following lifetimes:\n\n- Permanent: These objects were never deallocated. Examples were list pointers\n  held in cons cells and other kinds of application-wide objects.\n\n- Tokenizer: Tokenizing in C is complex due to C's various preprocessing\n  directives and macro expansion. Objects with tokenizer lifetime are\n  deallocated before the parser starts.\n\n- Function: Objects with function lifetime are deallocated after the compiler\n  generates code for the function.\n\n- File: Objects with file lifetime are deallocated after the compiler completes\n  a source file.\n\nThat's all. Similarly, if Leo were recast as a C program only the following\nlifetimes would be needed:\n\n- Permanent: application-wide objects.\n\n- Window/outline: All data associated with a single Leo outline. This is a\n  'semi-permanent' lifetime. Leo has unlimited undo, so it is essentially\n  impossible to delete any data object (an object that could be written to an\n  output file) until the entire outline closes.\n\n- Dialog: data associated with a temporary dialog.\n\n- Function/method: data not used outside a single function or method.\n\nThe remarkable thing about dynamic languages like Python is how often objects\ncan, in fact, be assigned static lifetimes.\n", "children": []}, {"h": "Implications for pypy", "gnx": "ekr.20061129202238", "b": "Lifetime allocation isn't used in Java, Python, etc. because these languages\nhave no way of knowing (in general) what the lifetime of any object will be.\nFurthermore, translating Python to C would be straightforward were it not for\nstorage allocation issues. For example, most of Leo's code could easily be\ntranslated into C, **provided** that the lifetime of all objects were known.\nAgain, just for example, the prospect of translating the Python version of Leo\nto a fully optimized C version is tantalizing.\n\nThis is where pypy comes in: its extensive flow analysis may be sufficient to\ndiscover lifetimes for a significant percentage of objects. Perhaps user hints\nmay be effective. For example, pypy offers the chance to make something like\n`region inference`_ truly useful. Note that the pypy project might benefit from\ndeducing lifetimes even if not all objects could be assigned a static\nlifetime. Another reason why lifetimes are not a standard technique is that they\nare a potentially dangerous optimization. Errors in specifying lifetimes will\nresult in dangling pointer references. But this danger might disappear if pypy\ncould deduce lifetimes automatically.\n", "children": []}, {"h": "Appendices", "gnx": "EKR.20040524104904.274", "b": "", "children": ["ekr.20100805165051.7174"]}, {"h": "@file appendices.txt", "gnx": "ekr.20100805165051.7174", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20050831231852"]}, {"h": "@rst html\\appendices.html", "gnx": "ekr.20050831231852", "b": "############\nAppendices\n############\n\n.. contents::\n    :depth: 2\n\n", "children": ["ekr.20050831232205", "EKR.20040524104904.357", "ekr.20060921064744.1", "EKR.20040524104904.354"]}, {"h": "@rst-no-head links", "gnx": "ekr.20050831232205", "b": ".. Relative links.\n.. _`Writing plugins`:   writingPlugins.html\n\n.. References to the glossary.\n.. _`sentinel lines`:   glossary.html#sentinel-lines\n", "children": []}, {"h": "Format of .leo files", "gnx": "EKR.20040524104904.357", "b": "This technical information may be of use to those wanting to process Leo files\nwith special-purpose filters. Leo's uses XML for its file format. The following\nsections describe this format in detail. **Important**: The actual read/write\ncode in leoFileCommands.py is the authoritative guide. When in doubt about what\nLeo actually writes, look at an actual .leo file in another editor.\n\nHere are the elements that may appear in Leo files.\nThese elements must appear in this order.\n\n<?xml>\n    Leo files start with the following line::\n\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?xml-stylesheet>\n    An xml-stylesheet line is option.  For example::\n\n        <?xml-stylesheet ekr_stylesheet?>\n\n<leo_file>\n    The <leo_file> element opens an element that contains the entire file.\n    </leo_file> ends the file.\n\n<leo_header> \n    The <leo_header> element specifies version information and other information\n    that affects how Leo parses the file.  For example::\n\n        <leo_header file_format=\"2\" tnodes=\"0\" max_tnode_index=\"5725\" clone_windows=\"0\"/>\n\n    The file_format attribute gives the 'major' format number.\n    It is '2' for all 4.x versions of Leo.\n    The tnodes and clone_windows attributes are no longer used.\n    The max_tnode_index\tattribute is the largest tnode index.\n\n<globals>\n    The globals element specifies information relating to the entire file.\n    For example::\n\n        <globals body_outline_ratio=\"0.50\">\n            <global_window_position top=\"27\" left=\"27\" height=\"472\" width=\"571\"/>\n            <global_log_window_position top=\"183\" left=\"446\" height=\"397\" width=\"534\"/>\n        </globals>\n\n    -   The body_outline_ratio attribute specifies the ratio of the height of the body pane to\n        the total height of the Leo window.\n        It initializes the position of the splitter separating the outline pane from the body pane.\n\n    -   The global_window_position and global_log_window_position elements\n        specify the position of the Leo window and Log window in global coordinates:\n\n<preferences>\n    This element is vestigial.\n    Leo ignores the <preferences> element when reading.\n    Leo writes an empty <preferences> element.\n\n<find_panel_settings>\n    This element is vestigial.\n    Leo ignores the <find_panel_settings> element when reading.\n    Leo writes an empty <find_panel_settings> element.\n\n<clone_windows>\n    This element is vestigial.\n    Leo ignores the <clone_windows> element when reading.\n    Leo no longer writes <clone_windows> elements.\n\n<vnodes>\n    A single <vnodes> element contains nested <v> elements.\n    <v> elements correspond to vnodes.\n    The nesting of <v> elements indicates outline structure in the obvious way.\n\n<v>\n    The <v> element represents a single vnode and has the following form::\n\n        <v...><vh>sss</vh> (zero or more nested v elements) </v>\n\n    The <vh> element specifies the headline text.\n    sss is the headline text encoded with the usual XML escapes.\n    As shown above, a <v> element may contain nested <v> elements.\n    This nesting indicates outline structure in the obvious way.\n    Zero or more of the following attributes may appear in <v> elements::\n\n        t=name.timestamp.n\n        a=\"xxx\"\n\n    The t=\"Tnnn\" attribute specifies the <t> element associated with a <v> element.\n    The a=\"xxx\" attribute specifies vnode attributes.\n    The xxx denotes one or more upper-case letters whose meanings are as follows::\n\n        C\tThe vnode is a clone. (Not used in 4.x)\n        E\tThe vnode is expanded so its children are visible.\n        M\tThe vnode is marked.\n        T\tThe vnode is the top visible node.\n        V\tThe vnode is the current vnode.\n\n    For example, a=\"EM\"  specifies that the vnode is expanded and is marked.\n\n    **New in 4.0**:\n\n    -   <v> elements corresponding to @file nodes now contain tnodeList attributes.\n        The tnodeList attribute allows Leo to recreate the order in which nodes should appear in the outline.\n        The tnodeList attribute is a list of gnx's: global node indices.\n        See Format of external files (4.x) for the format of gnx's.\n\n    -   Plugins and scripts may add attributes to <v> and <t> elements.\n        See `Writing plugins`_ for details.\n\n<tnodes>\n    A single <tnodes> element contains a non-nested list of <t> elements.\n\n<t>\n    The <t> element represents the body text of the corresponding <v> element.\n    It has this form::\n\n        <t tx=\"<gnx>\">sss</t>\n\n    The tx attribute is required.\n    The t attribute of <v> elements refer to this tx attribute.\n    sss is the body text encoded with the usual XML escapes.\n\n    **New in 4.0**: Plugins and scripts may add attributes to <v> and <t>\n    elements. See `Writing plugins`_ for details.\n", "children": []}, {"h": "Format of external files", "gnx": "ekr.20060921064744.1", "b": "This section describe the format of external files. Leo's `sentinel lines`_ are\ncomments, and this section describes those comments.\n\nFiles derived from @file use gnx's in \\@+node sentinels. Such gnx's permanently\nand uniquely identify nodes. Gnx's have the form::\n\n    id.yyyymmddhhmmss\n    id.yyyymmddhhmmss.n\n\nThe second form is used if two gnx's would otherwise be identical.\n\n- id is a string unique to a developer, e.g., a cvs id.\n\n- yyyymmddhhmmss is the node's creation date.\n\n- n is an integer.\n\nHere are the sentinels used by Leo, in alphabetical order.\nUnless otherwise noted, the documentation applies to all versions of Leo.\nIn the following discussion, gnx denotes a gnx as described above.\n\n\\@<<\n    A sentinel of the form @<<section_name>> represents a section reference.\n\n    If the reference does not end the line,\n    the sentinel line ending the expansion is followed by the remainder of the reference line.\n    This allows the Read code to recreate the reference line exactly.\n\n\\@@\n    The \\@@ sentinel represents any line starting with @ in body text\n    except \\@*whitespace*, @doc and @others.\n    Examples::\n\n      @@nocolor\n      @@pagewidth 80\n      @@tabwidth 4\n      @@code\n\n\\@afterref\n    Marks non-whitespace text appearing after a section references.\n\n\\@+all\n    Marks the start of text generated by the \\@all directive.\n\n\\@-all\n    Marks the end of text generated by the \\@all directive.\n\n\\@at and \\@doc\n\n    The \\@+doc \\@+at sentinels indicate the start of a doc parts.\n\n    We use the following **trailing whitespace convention** to\n    determine where putDocPart has inserted line breaks::\n\n        A line in a doc part is followed by an inserted newline\n        if and only if the newline if preceded by whitespace.\n\n    To make this convention work, Leo's write code deletes the trailing\n    whitespace of all lines that are followed by a \"real\" newline.\n\n\\@+body **(Leo 3.x only)**\n    Marks the start of body text.\n\n\\@-body **(Leo 3.x only)**\n    Marks the end of body text.\n\n\\@delims\n    The \\@delims directive inserts \\@@delims sentinels into the external file.\n    The new delimiter strings continue in effect until the next \\@@delims sentinel\n    *in the external file* or until the end of the external file.\n    Adding, deleting or changing \\@@delim *sentinels* will destroy Leo's ability to read the external file.\n    Mistakes in using the \\@delims *directives* have no effect on Leo,\n    though such mistakes will thoroughly mess up a external file as far as compilers,\n    HTML renderers, etc. are concerned. \n\n\\@+leo\n    Marks the start of any external file. This sentinel has the form::\n\n        <opening_delim>@leo<closing_delim>\n\n    The read code uses single-line comments if <closing_delim> is empty.\n    The write code generates single-line comments if possible.\n\n    The \\@+leo sentinel contains other information. For example::\n\n        <opening_delim>@leo-ver=4-thin<closing_delim>\n\n\\@-leo\n    Marks the end of the Leo file.\n    Nothing but whitespace should follow this directive.\n\n\\@+middle **(Leo 4.0 and later)**\n    Marks the start of intermediate nodes between the node that\n    references a section and the node that defines the section.\n    Typically no such sentinels are needed:\n    most sections are defined in a direct child of the referencing node.\n\n\\@-middle **(Leo 4.0 and later)**\n    Marks the end of intermediate nodes between the node that\n    references a section and the node that defines the section.\n\n\\@+node\n    Mark the start and end of a node.\n\n        @+node:gnx:<headline>\n\n\\@others\n    The @+others sentinel indicates the start of the expansion of an \\@+others directive,\n    which continues until the matching \\@-others sentinel.\n\n\\@verbatim\n    @verbatim indicates that the next line of the external file is not a sentinel.\n    This escape convention allows body text to contain lines that would otherwise\n    be considered sentinel lines.\n\n\\@@verbatimAfterRef\n    @verbatimAfterRef is generated when a comment following a section reference would\n    otherwise be treated as a sentinel. In Python code, an example would be::\n\n      << ref >> #+others\n", "children": []}, {"h": "Unicode reference", "gnx": "EKR.20040524104904.354", "b": "Leo uses unicode internally for all strings.\n\n1.  Leo converts headline and body text to unicode when reading .leo files and external files.\n    Both .leo files and external files may specify their encoding.  The default is utf-8.\n    If the encoding used in a external file is not \"utf-8\" it is represented in the @+leo sentinel line.\n    For example::\n\n        #@+leo-encoding=iso-8859-1.\n\n    The utf-8 encoding is a \"lossless\" encoding (it can represent all unicode code points),\n    so converting to and from utf-8 plain strings will never cause a problem.\n    When reading or writing a character not in a \"lossy\" encoding,\n    Leo converts such characters to '?' and issues a warning. \n\n2.  When writing .leo files and external files Leo uses the same encoding used to read the file,\n    again with utf-8 used as a default.\n\n3.  leoSettings.leo contains the following Unicode settings, with the defaults as shown::\n\n        default_derived_file_encoding = UTF-8 \n        new_leo_file_encoding = UTF-8 \n\n    These control the default encodings used when writing external files and .leo files.\n    Changing the new_leo_file_encoding setting is not recommended.\n    See the comments in leoSettings.leo.\n    You may set default_derived_file_encoding to anything that makes sense for you.\n\n4.  The @encoding directive specifies the encoding used in a external file.\n    You can't mix encodings in a single external file.\n", "children": []}, {"h": "Glossary", "gnx": "ekr.20091111112709.6671", "b": "", "children": ["ekr.20100805165051.7147"]}, {"h": "@file glossary.txt", "gnx": "ekr.20100805165051.7147", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=False\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20091111112709.6672"]}, {"h": "@rst html\\glossary.html", "gnx": "ekr.20091111112709.6672", "b": "#########\nGlossary\n#########\n\n.. Links\n.. _`Customizing Leo`:          customizing.html\n.. _`Writing plugins and hooks`:    writingPlugins.html\n.. _`Leo's reference`:          directives.html\n.. _`leo's tutorial`:           intro.html\n\nThis is a short glossary of important terms in Leo's world. For more information\nabout terms, look in the index for links to discussions in other places,\nespecially in `Leo's Tutorial`_ and `Leo's Reference`_.\n\n.. glossary::\n    :sorted:\n", "children": ["ekr.20100804133903.7250", "ekr.20100804133903.7251", "ekr.20100804133903.7252", "ekr.20100804133903.7253", "ekr.20100804133903.7254", "ekr.20100804133903.7255", "ekr.20100804133903.7256"]}, {"h": "\\@", "gnx": "ekr.20100804133903.7250", "b": ".. index::\n    pair: @; Glossary\n\n\\@\n    Starts a doc part. Doc parts continue until an \\@c\n    directive or the end of the body text.\n\n.. index::\n    pair: @@ convention for headlines; Glossary\n\n\\@@ convention for headlines\n    Within \\@asis trees only, if a headline starts with \\@@, Leo\n    writes everything in the headline following the \\@@ just before the\n    corresponding body text.\n\n.. index::\n    pair: @<file> node; Glossary\n\n\\@<file> node\n    A node whose headline starts with\n    @asis, @edit, @file, @nosent, @shadow, @thin, or their longer forms.\n    We often refer to outline nodes by the directives they contain.\n    For example, an @file node is a node whose headline starts with @file, etc.\n\n.. index::\n    pair:  @all; Glossary\n\n\\@all\n    Copies the body text of all nodes in an @file tree to the external file.\n\n.. index::\n    pair: @asis; Glossary\n\n\\@asis <filename>\n    Creates an external file containing no Leo sentinels directly from the @asis tree.\n\n.. index::\n    pair: @auto; Glossary\n\n\\@auto <filename>\n\n    Imports an external file into the Leo outline, splitting the file into\n    pieces if an importer exists for the give filetype. Importers presently\n    exist for the following languages: C, C++, C#, HTML, INI files, Java, PHP,\n    Pascal, Python and XML.\n\n.. index::\n    pair: @c; Glossary\n    pair: @code; Glossary\n\n\\@c and \\@code\n\n    Ends a doc part and starts a code part.\n\n.. index::\n    pair: @chapter; Glossary\n    pair: @chapters; Glossary\n\n\\@chapter and \\@chapters\n\n    An \\@chapter tree represents a chapter. All @chapter nodes should be\n    contained in an \\@chapters node.\n\n.. index::\n    pair: @color; Glossary\n\n\\@color\n\n    Enables syntax coloring in a node and its descendants until the next\n    \\@nocolor directive.\n\n.. index::\n    pair: @comment; Glossary\n\n\\@comment\n\n    Sets the comment delimiters in \\@thin, \\@file and \\@shadow files.\n\n.. index::\n    pair: @delims; Glossary\n\n\\@delims\n\n  Sets the comment delimiters in \\@thin, \\@file and \\@shadow files.\n\n.. index::\n    pair: @edit; Glossary\n\n\\@edit <filename>\n\n    Reads an entire external file into a single node.\n\n.. index::\n    pair: @encoding; Glossary\n\n\\@encoding <encoding>\n\n    Specifies the Unicode encoding for an external file.\n\n.. index::\n    pair: @end_raw; Glossary\n\n\\@end_raw\n\n    Ends a section of 'raw' text.\n\n.. index::\n    pair: @file; Glossary\n\n\\@file <filename>\n\n    Creates an external file containing sentinels. When writing \\@file\n    trees, Leo expands section references and \\@all and \\@others directives.\n\n    **Important**: \\@file is the recommended way to create and edit most files.\n    Using \\@file trees is **highly recommended** when sharing external files in\n    a collaborative environment.\n\n.. index::\n    pair: @first; Glossary\n\n\\@first <text>\n\n    The \\@first directive allows you to place one or more lines at the very start of an\n    external file, before the first sentinel. For example::\n\n\t    @first #! /usr/bin/env python\n\n.. index::\n    pair: @killcolor; Glossary\n\n\\@killcolor\n\n    Completely disables syntax coloring in a node, regardless of other directives.\n\n.. index::\n    pair: @language; Glossary\n\n\\@language <language name>\n\n    Specifies the source language, which affects syntax coloring and the\n    comments delimiters used in external files and syntax coloring.\n\n.. index::\n    pair: @last; Glossary\n\n\\@last <text>\n\n    Allows you to place lines at the very end of external files, after the last\n    sentinel. For example::\n\n        @first <?php\n        ...\n        @last ?>\n\n.. index::\n    pair: @lineending; Glossary\n\n\\@lineending cr/lf/nl/crlf\n\n    Sets the line endings for external files.\n\n.. index::\n    pair: @nocolor; Glossary\n\n\\@nocolor\n\n    Disables syntax coloring in a node and its descendants until the next \\@color\n    directive.\n\n.. index::\n    pair: @nocolor-node; Glossary\n\n\\@nocolor-node\n\n    Completely disables coloring for one node. Descendant nodes are not affected.\n\n.. index::\n    pair: @nosent; Glossary\n\n\\@nosent\n\n    Creates an external file containing no sentinels. Unlike \\@asis, sections\n    references and the @all and @others directives are valid in \\@nosent trees.\n\n.. index::\n    pair: @nowrap; Glossary\n\n\\@nowrap\n\n    Disables line wrapping the Leo's body pane.\n\n.. index::\n    pair: @others; Glossary\n\n\\@others\n\n    Copies the body text of all nodes *except* section definition nodes in an\n    \\@file tree to the corresponding external file.\n\n.. index::\n    pair: @pagewidth; Glossary\n\n\\@pagewidth <n>\n\n   Sets the page width used to break doc parts into lines.\n\n.. index::\n    pair: @path; Glossary\n\n\\@path <path>\n\n  Sets the path prefix for relative filenames for descendant \\@<file> directives.\n\n.. index::\n    pair: @raw; Glossary\n\n\\@raw\n    Starts a section of \"raw\" text that ends *only* with the\n    \\@end_raw directive or the end of the body text.\n\n.. index::\n    pair: @tabwidth; Glossary\n\n\\@tabwidth <n>\n\n    Sets the width of tabs. Negative tab widths cause Leo to convert tabs to\n    spaces.\n\n.. index::\n    pair: @thin; Glossary\n\n\\@thin <filename>\n\n    A synonym for @file.\n\n.. index::\n    pair: @wrap; Glossary\n\n\\@wrap\n\n    Enables line wrapping in Leo's body pane.\n", "children": []}, {"h": "A - C", "gnx": "ekr.20100804133903.7251", "b": ".. index::\n    pair: Body pane; Glossary\n\nBody pane\n\n    The pane containing the body text of the currently selected headline in the\n    outline pane.\n\n.. index::\n    pair: Body text; Glossary\n\nBody text\n\n    The text in the body pane. That is, the contents of a node.\n\n.. index::\n    pair: Body text box; Glossary\n\nBody text box\n\n    A small blue box in the icon box indicating that the node contains body\n    text.\n\n.. index::\n    pair: Child; Glossary\n\nChild\n\n    The direct descendant of a node.\n\n.. index::\n    pair: Clone; Glossary\n\nClone\n    A copy of a tree that changes whenever the original changes.\n    The original and all clones are treated equally:\n    no special status is given to the \"original\" node.\n\n.. index::\n    pair: Clone arrow; Glossary\n\nClone arrow\n\n    A small red arrow in the icon box indicating that the node is a clone.\n\n.. index::\n    pair: Code part; Glossary\n\nCode part\n\n    A part of a section definition that contains code. Code parts start with @c\n    or @code directives and continue until the next doc part.\n\n.. index::\n    pair: Contract; Glossary\n\nContract:\n\n    To hide all descendants of a node.\n", "children": []}, {"h": "D - G", "gnx": "ekr.20100804133903.7252", "b": ".. index::\n    pair: Demote; Glossary\n\nDemote\n    To move all siblings that follow a node so that they become children of the node.\n\n.. index::\n    pair: Descendant; Glossary\n\nDescendant\n    An offspring of a node.  That is, a child, grandchild, etc. of a node.\n\n.. index::\n    pair: Directive; Glossary\n\nDirective\n\n    A keyword, preceded by an '@' sign, in body text that controls Leo's\n    operation. The keyword is empty for the \\@ directive.\n\n.. index::\n    pair: Doc part; Glossary\n\nDoc part\n\n    A part of a section definition that contains comments. Doc parts start with\n    @ and continue until the @c directive or the end of the body text.\n\n.. index::\n    pair: Escape convention; Glossary\n\n.. _`noweb`: http://www.eecs.harvard.edu/~nr/noweb/\n\nEscape convention\n\n    A convention for representing sequences of characters that would otherwise\n    have special meaning. **Important**: Leo does not support escape conventions\n    used by `noweb`_. Any line containing matched <\\< and >\\> is a section\n    reference, regardless of context. To use <\\< and >\\> as ordinary characters,\n    place them on separate lines.\n\n.. index::\n    pair: Expand; Glossary\n\nExpand\n\n    To make the children of a node visible.\n\n.. index::\n    pair: External file; Glossary\n\nExternal file\n\n    A file outside of Leo that is connected to Leo by an \\@<file> node.\n\n.. index::\n    pair: Grandchild; Glossary\n\nGrandchild\n\n    The child of a child of a node.\n", "children": []}, {"h": "H - L", "gnx": "ekr.20100804133903.7253", "b": ".. index::\n    pair: Headline; Glossary\n\nHeadline\n\n    The headline text of a node.  The part of the node visible in the outline pane.\n\n.. index::\n    pair: Hoist; Glossary\n    pair: Dehoist; Glossary\n\nHoist & dehoist\n\n    Hoisting a node redraws the screen that node and its descendants becomes the\n    only visible part of the outline. Leo prevents the you from moving nodes\n    outside the hoisted outline. Dehoisting a node restores the outline.\n    Multiple hoists may be in effect: each dehoist undoes the effect of the\n    immediately preceding hoist.\n\n.. index::\n    pair: Icon box; Glossary\n\nIcon box\n\n    An icon just to the left of headline text of a node indicating whether the\n    node is cloned, marked or dirty, and indicating whether the node contains\n    body text.\n\n.. index::\n    pair: Log pane; Glossary\n\nLog Pane\n\n    The part of Leo's main window that shows informational messages from Leo. It\n    also contains the Find tab, the Spell tab, the autocompletion tab.\n", "children": []}, {"h": "M - O", "gnx": "ekr.20100804133903.7254", "b": ".. index::\n    pair: Mark; Glossary\n\nMark\n\n    A red vertical line in the icon box of a node.\n\n.. index::\n    pair: Node; Glossary\n\nNode\n\n    The organizational unit of an outline. The combination of headline text and\n    body text. Sometimes used as a synonym for tree.\n\n.. index::\n    pair: Offspring; Glossary\n\nOffspring\n\n    A synonym for the descendants of a node.\n    The children, grandchildren, etc. of a node.\n\n.. index::\n    pair: Organizer node; Glossary\n\nOrganizer node\n\n    A node containing no body text. Organizing nodes may appear anywhere in an\n    @file tree; they do not affect the external file in any way. In particular,\n    organizing nodes do not affect indentation in external files.\n\n.. index::\n    pair: Orphan node; Glossary\n\nOrphan node\n\n    A node that would not be copied to a external file. Orphan nodes can arise\n    because an @file tree has no @others or @all directives. Sections that are\n    defined but not used also create orphan nodes.\n\n    Leo issues a warning when attempting to write an @file tree containing\n    orphan nodes, and does not save the external file. No information is lost;\n    Leo saves the information in the @file tree in the .leo file. Leo will load\n    the @file tree from the .leo file the next time Leo opens the .leo file.\n\n.. index::\n    pair: Outline; Glossary\n\nOutline\n\n    A node and its descendants. A tree. All the nodes of a .leo file.\n\n.. index::\n    pair: Outline order; Glossary\n\nOutline order\n\n    The order that nodes appear on the screen when all nodes are expanded.\n\n.. index::\n    pair: Outline pane; Glossary\n\nOutline pane\n\n    The pane containing a visual representation of the entire outline, or a part\n    of the outline if the outline is hoisted.\n", "children": []}, {"h": "P - R", "gnx": "ekr.20100804133903.7255", "b": ".. index::\n    pair: Parent; Glossary\n\nParent\n\n    The node that directly contains a node.\n\n.. index::\n    pair: Plugin; Glossary\n\nPlugin\n\n    A way to modify and extend Leo without changing Leo's core code.\n    See `Writing plugins and hooks`_.\n\n.. index::\n    pair: Promote; Glossary\n\nPromote\n\n    To move all children of a node in an outline so that they become siblings of\n    the node.\n\n.. index::\n    pair: reStructuredText; Glossary\n    pair: rST; Glossary\n\n.. _`rST primer`: http://docutils.sourceforge.net/docs/user/rst/quickstart.html\n\nreStructuredText (rST)\n\n    A simple, yet powerful markup language for creating .html, or LaTeX output\n    files. See the `rST primer`_.\n\n.. index::\n    pair: Root; Glossary\n\nRoot\n\n    The first node of a .leo file, outline, suboutline or @<file> tree.\n", "children": []}, {"h": "S - Z", "gnx": "ekr.20100804133903.7256", "b": ".. index::\n    pair: Section; Glossary\n\nSection\n\n    A fragment of text that can be incorporated into external files.\n\n.. index::\n    pair: Section definition; Glossary\n\nSection definition\n\n    The body text of a section definition node.\n\n.. index::\n    pair: Section definition node; Glossary\n\nSection definition node\n\n    A node whose headline starts with a section name and whose body text defines\n    a section.\n\n.. index::\n    pair: Section name; Glossary\n\nSection name\n\n    A name enclosed in <\\< and >\\>. Section names may contain any characters\n    except newlines and \">>\".\n\n.. index::\n    pair: Section reference; Glossary\n\nSection reference\n\n    A section name appearing in a code part. When writing to an external file,\n    Leo replaces all references by their definitions.\n\n.. index::\n    pair: Sentinel; Glossary\n\nSentinel\n\n    Comment lines in external files used to represent Leo's outline structure.\n    Such lines start with an \\@ following the opening comment delimiter.\n    Sentinels embed outline structure into external files.\n\n    **Do not alter sentinel lines**. Doing so can corrupt the outline structure.\n\n.. index::\n    pair: Setting; Glossary\n\nSettings:\n\n    Plugins and other parts of Leo can get options from @settings trees,\n    outlines whose headline is @settings. When opening a .leo file, Leo looks\n    for @settings trees in the outline being opened and also in various\n    leoSettings.leo files. @settings trees allow plugins to get options without\n    any further support from Leo's core code. For a full discussion of @settings\n    trees, see `Customizing Leo`_.\n\n.. index::\n    pair: Sibling; Glossary\n\nSibling\n\n    Nodes with the same parent. Siblings of the root node have the hidden root\n    node as their parent.\n\n.. index::\n    pair: Target language; Glossary\n\nTarget language\n\n    The language used to syntax color text. This determines the default comment\n    delimiters used when writing external files.\n\n.. index::\n    pair: Tree; Glossary\n\nTree\n\n    An outline. A node and its descendants.\n\n.. index::\n    pair: Underindented Line; Glossary\n\nUnderindent line\n\n    A line of body text that is indented less then the starting line of the\n    class, method or function in which it appears. Leo outlines can not\n    represent such lines exactly: every line in an external file will have at\n    least the indentation of any unindented line of the corresponding node in\n    the outline.\n\n.. index::\n    pair: View node; Glossary\n\nView node\n\n    A node that represents a view of an outline. View nodes are typically\n    ordinary, non-cloned nodes that contain cloned descendant nodes. The cloned\n    descendant nodes comprise most of the data of the view. Other non-cloned\n    nodes may add additional information to the view.\n", "children": []}, {"h": "What's New...", "gnx": "ekr.20060620094033", "b": "", "children": ["ekr.20100805165051.7175"]}, {"h": "@file whatsnew.txt", "gnx": "ekr.20100805165051.7175", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support=False\nshow_organizer_nodes=True\nshow_headlines =True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file=True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20101025080245.5791"]}, {"h": "@rst html/what-is-new.html", "gnx": "ekr.20101025080245.5791", "b": "##################\nWhat's New in Leo\n##################\n\n.. contents::\n    :depth: 3\n", "children": ["ekr.20071116062917.2", "ekr.20120320153011.6055", "ekr.20120320153011.8551"]}, {"h": "@rst-no-head links", "gnx": "ekr.20071116062917.2", "b": ".. Links used in this document.\n.. _`leoBridge`:            leoBridge.html\n.. _`debugging with Leo`:   debuggers.html\n.. _`Using @shadow`:        atShadow.html\n.. _`Python's gettext`:     http://docs.python.org/lib/module-gettext.html\n.. _Emacs:                  http://www.xemacs.org/\n.. _pymacs:                 http://pymacs.progiciels-bpi.ca/index.html\n.. _`Leo and Emacs`:        emacs.html\n\n\n", "children": []}, {"h": "Leo 4.10", "gnx": "ekr.20120320153011.6055", "b": "@language rest\n\n.. What's new.\n", "children": ["ekr.20120320153011.8400", "ekr.20120320153011.6808", "ekr.20120320153011.8537", "ekr.20120320153011.6826", "ekr.20120320153011.6056"]}, {"h": "New features & commands", "gnx": "ekr.20120320153011.8400", "b": "- Weightless unit testing.\n\n- Added the following commands::\n\n    beautify-c\n    c-to-python\n    clone-find-all-flattened\n    clone-marked-nodes\n    delete-marked-nodes\n    move-marked-nodes\n    run-marked-unit-tests-externally\n    run-marked-unit-tests-locally\n    select-to-matching-bracket\n    split-defs\n    \n- Improved the following commands::\n    \n    add-comments\n    delete-comments\n    open\n    page-up\n    page-down\n    print-bindings\n    print-commands\n    rst3\n    shell-command\n    shell-command-on-region\n    \n.. _`The leoInspect Module`: http://webpages.charter.net/edreamleo/leoInspect.html\n    \n- The leoInspect module allows scripts to interrogate static code.\n  For full details, see `The leoInspect Module`_ chapter.\n    \n- Improved existing features:\n\n    - Leo's File:Open With command now works with Qt\n    - The new quick edit/save mode allows Leo to be a drop-in replacement for SciTe.\n    - Detached windows.\n    - A major improvements to Leo's abbreviation code.\n    - Improved presentation of autocompletion list.\n    - Applied patch for bug 800399: smart word jumps/deletes.\n\n- Code improvements:\n\n    - Most of Leo's core files now import just leo.core.leoGlobals.\n    - Global switches are now all in leoGlobals.py.\n    - version.py now uses bzr_version.py. Leo now reports bzr version numbers and dates automatically.\n    - Unified the high-level interface & eliminated the low-level interface.\n    - Create properties for logCtrl & bodyCtrl.\n    - Added event filters to top-level frames.\n    - Added g.app.isExternalUnitTest.\n    - Added c.config.set.\n\n- Created new classes::\n\n    EditCommandsManager\n    KeyStroke & ShortcutInfo\n    LoadManager\n    TestManager\n    \n- Dozens of other new commands and features.\n\nFor details, see the release notes.\n", "children": ["ekr.20120320153011.8201"]}, {"h": "Weightless unit testing", "gnx": "ekr.20120320153011.8201", "b": "Small improvements the unit testing framework created big results. They\ncompletely eliminate the overhead in running unit tests:\n\n    - The run-marked-unit-tests-externally (Alt-4) command runs all marked\n      @test nodes. To choose tests, just mark them.\n    - Alt-4 now saves the .leo file first.\n    - Almost all unit tests may now be run externally:\n        - External unit tests always read config settings.\n        - The nullGui now uses a fully capable string-based body widget.\n        - The nullGui now uses the regular undoer.\n    - Unit tests now always have the sources available.\n    - Disabled messages on external unit tests.\n    - The unit test commands always run a selected @test node.\n\nThese improvements mean that almost all unit tests may be run externally.\nIn turn, this creates a remarkable work flow::\n\n    Edit\n    Alt-4\n    Edit\n    Alt-4\n    ...\n\nThe energy difference between weightless and heavy is astounding. Try the\nnew way: you will surely like it.\n\n**Notes**:\n\nExperience shows that being able to run the desired unit tests *without*\nselecting any particular node makes an amazingly large difference. Being\nable to run all and only marked unit tests is a big step forward.\n\nIf a marked node is neither an @test node nor an @suite node, all nodes in\nthe tree are considered to be marked.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20120320153011.6808", "b": ".. _`quicksearch plugin`:  http://groups.google.com/group/leo-editor/browse_thread/thread/e0ad60ae319359df/e932052a1ef6e9f5\n.. _`bigdash plugin`: http://groups.google.com/group/leo-editor/browse_thread/thread/f7eaf4dd4e84a535\n\n- Improved the `quicksearch plugin`_.\n\n- A new `bigdash plugin`_.\n\n- Removed scrolledmessage plugin.\n\n- The vim and xemacs plugins now work smoothly with contextmenu plugin.\n\n- Supported auto-hide in viewrendered plugin.\n", "children": []}, {"h": "Scripts", "gnx": "ekr.20120320153011.8537", "b": "- Improved the create @auto nodes script.\n\n- Added import-org-mode script.\n\n- Added a script for displaying a function call hierarchy in Leo.\n\n- Improved recursive import script.\n\n- Created a script for replacing Qt stylesheets on the fly.\n\n- Scripts to add bookmarks automatically.\n\n- A new \"magic refactor\" button.\n\n- Changed calling signatures of g.openWithFileName and g.app.newCommander.\n\n- The open-with event now uses a \"d\" arg.\n\nFor full details, see the release notes.\n", "children": []}, {"h": "Settings", "gnx": "ekr.20120320153011.6826", "b": "- New settings:\n\n    - @bool indent_added_comments\n    - @color focus_border_color = red\n    - @int focus_border_width = 1\n    - @bool use_body_focus_border  = True\n    - @bool use_focus_border = True\n    \n- Other changes:\n    \n    - Added show-decoration-selected: 1 to QTreeWidget stylesheet. This causes\n      the entire headline row to be shown when selected.\n    - Added stylesheets for Log & Find tabs.\n    - Eliminated the -c option.\n    - New format for @openwith settings nodes. See leoSettings.leo for details.\n\n- New search order for leoSettings.leo::\n\n    1. leoSettings.leo in the home directories.\n    2. <machine-name>leoSettings.leo in the home directories.\n    3. leoSettings.leo in leo/config directory.\n\n- New search order for myLeoSettings.leo::\n\n    1. myLeoSettings.leo in the local directory.\n    2. myLeoSettings.leo in the home directories.\n    3. <machine-name>myLeoSettings.leo in the home directories.\n    4. myLeoSettings.leo in leo/config directory.\n\n- New default settings for run unit tests commands::\n\n    run-marked-unit-tests-externally    = Alt-4\n    run-selected-unit-tests-externally  = Alt-5\n    \n", "children": []}, {"h": "Bugs fixed", "gnx": "ekr.20120320153011.6056", "b": ".. _`bug 800157`: https://bugs.launchpad.net/leo-editor/+bug/800157\n.. _`bug 823267`: https://bugs.launchpad.net/leo-editor/+bug/823267\n.. _`bug 875327`: https://bugs.launchpad.net/leo-editor/+bug/875327\n.. _`bug 917814`: https://bugs.launchpad.net/leo-editor/+bug/917814\n.. _`bug 875323`: https://bugs.launchpad.net/leo-editor/+bug/875323\n.. _`bug 831658`: https://bugs.launchpad.net/leo-editor/+bug/831658\n\n- Fixed several bugs related to selection following hoists & chapters:\n\n    - `bug 823267`_: When a tab is closed focus may go to a tab other than the visible one.\n    - `bug 875327`_: Positioning outside of hoisted outline\" usually causes problems.\n    - `bug 917814`_: Switching Log Pane tabs is done incompletely.\n    - `bug 875323`_: Hoist an @chapter node leaves a non-visible node selected.\n    - `bug 831658`_: @url doesn't leave Chapter.\n\n.. _`bug 951739`: https://bugs.launchpad.net/leo-editor/+bug/951739\n.. _`bug 951721`: https://bugs.launchpad.net/leo-editor/+bug/951721\n.. _`bug 944555`: https://bugs.launchpad.net/leo-editor/+bug/944555\n.. _`bug 944551`: https://bugs.launchpad.net/leo-editor/+bug/944551\n.. _`bug 893230`: https://bugs.launchpad.net/leo-editor/+bug/893230\n    \n- Fixed several bugs related to URL's:\n\n    - `bug 951739`_: xdg-open of a file-scheme URL containing blanks.\n    - `bug 951721`_: @url with URL in headline.\n    - `bug 944555`_: Ctrl-left-click URL handling not as sophisticated as @url URL handling.\n    - `bug 944551`_: @url URL Open Hangs Leo.\n    - `bug 893230`_: URL coloring does not work for many Internet protocols.\n    - Removed \"significant\" calls to os.system.\n    - Added support for colorizing the following schemes:\n      gopher,mailto,news,nntp,prospero,telnet,wais.\n      \n- Fixed several other serious bugs:\n      \n    - `bug 800157`_, an ancient hanger in paste-retaining-clones.\n    - Fixed at serious read bug. Changed at.readEndOthers and at.readEndRef.\n    - Fixed bug: @button @key=x does not override x.\n    - Fixed the wretched scrolling bug.\n    \n- Fixed almost 70 minor bugs. For details, see the release notes.\n", "children": []}, {"h": "Previous versions", "gnx": "ekr.20120320153011.8551", "b": "", "children": ["ekr.20110601105631.19349", "ekr.20101025080245.5805", "ekr.20100129054823.11924", "ekr.20090324145450.20", "ekr.20080806211440.185", "ekr.20080314081157.127", "ekr.20071217093444", "ekr.20071116062917", "ekr.20070809145744", "ekr.20070513113903", "ekr.20060928172457", "ekr.20060620094033.1", "ekr.20060620094033.2"]}, {"h": "Leo 4.9", "gnx": "ekr.20110601105631.19349", "b": "@language rest\n\n", "children": ["ekr.20110601105631.19360", "ekr.20110601105631.19484", "ekr.20110601105631.19481", "ekr.20110601105631.19434", "ekr.20110604105805.16766", "ekr.20110611085637.5009", "ekr.20110613172008.15106", "ekr.20110616100929.14851"]}, {"h": "Bugs fixed", "gnx": "ekr.20110601105631.19360", "b": "- Fixed an important bug involving orphan nodes. Leo now never saves an external\n  file containing orphan nodes. This ensures that all the information in the\n  external file will, in fact, be saved in the .leo file.\n\n- Almost 40 minor bugs have been fixed. For details, see the release notes.\n\n- Fixed mod_http plugin\n  \n", "children": []}, {"h": "Deprecated/removed features", "gnx": "ekr.20110601105631.19484", "b": "- Leo no longer supports the Tk gui. The Qt gui now does everything\n  the Tk gui did and better.\n\n- Removed show/hide/toggle minibuffer commands. The minibuffer is an essential\n  part of Leo.\n  \n- These settings are no longer used::\n    \n    @string selected-background-color\n    @string selected-command-background-color\n    \n- The import-at-root command is no longer supported.\n", "children": []}, {"h": "Major improvements", "gnx": "ekr.20110601105631.19481", "b": "- Support multiple @language directives in a single node\n  As with @color directives, only unambiguous @language directives affect the\n  default coloring of descendant nodes.\n\n- Colorize url's in the body text. You can open url's by control-clicking on\n  them, or by using the open-url command.\n\n- Use @file extension by default if there is no @language directive in effect.\n  This is oh so useful.\n\n- Unified extract commands.  This command creates a child node from the selected\n  body text as follows:\n    \n    1. If the selection starts with a section reference, the section name become the\n       child's headline. All following lines become the child's body text. The\n       section reference line remains in the original body text.\n       \n    2. If the selection looks like a Python class or definition line, the\n       class/function/method name becomes child's headline and all selected lines\n       become the child's body text.\n       \n    3. Otherwise, the first line becomes the child's headline, and all selected\n       lines become the child's body text.\n\n    Note that the extract-section-names command remains.\n    The extract-section and extract-python-method commands are gone.\n\n- The import-file commands replaces all the following commands::\n    \n    import-at-file                    \n    import-cweb-files         \n    import-derived-file       \n    import-flattened-outline      \n    import-noweb-files\n    \n  Leo chooses one of the above commands as follows.  First, if the file looks\n  like an external file that Leo wrote, the command works like\n  import-derived-file command.  Otherwise, the file's extension determines the\n  importer::\n        \n        .cw, .cweb:     import-cweb-files\n        .nw, .noweb:    import-noweb-files\n        .txt:           import-flattened-outline\n        all others:     import-at-file\n    \n  The import-at-root command is no longer supported.\n", "children": ["ekr.20110602091552.16899", "ekr.20110602091552.16898"]}, {"h": "Completed Leo's autocompleter", "gnx": "ekr.20110602091552.16899", "b": "Terminology: the *legacy* (aka tabbed) autocompleter shows completions in Leo's\ntabbed pane. The *new* (aka qcompleter) autocompleter shows completions in or\nnear the body pane.\n\nAppearance\n==========\n\nThere is little change to the legacy completer, except that no text is\nhighlighted in the body pane during completion. This is calmer than before.\nFurthermore, there is no longer any need for highlighting, because when the user\ntypes a backspace the legacy completer now simply deletes a single character\ninstead of the highlighted text.\n\nOne minor change: the legacy completer now *does* insert characters that do\nnot match the start of any possible completion. This is an experimental feature,\nbut it might play well with using codewise completions as a fallback to\nleo-related completions.\n\nFunction and design\n===================\n\nBoth the legacy and new completer now work *exactly* the same way, because they\nboth use the AutoCompleterClass to compute the list of completions.\n\nThe strict \"stateless\" requirement means that the \"intermediate\" completions\nmust be entered into the body pane while completion is active. It works well as\na visual cue when using the tabbed completer: indeed, the tabbed completer would\nbe difficult to use without this cue.\n\nThe situation is slightly different with the qcompleter. Adding code before the\nuser accepts the completion might be considered an \"advanced\" feature. However,\nit does have two important advantages, especially when \"chaining\" across\nperiods: it indicates the status of the chaining and it limits what must appear\nin the qcompleter window.\n\nCodewise completions\n====================\n\nThe codewise-oriented completions appear to work well. In large part,\nthis is due to adding the global \"self.\" completions to all class-related\ncompletions (kind == 'class' in ac.get_codewise_completions). This looks like a\nreally good hack, and it eliminates the need for the ContextSniffer class.\n\nPerformance\n===========\n\nPerformance of leo-related completions is *much* better than before. The old\ncode used Python's inspect module and was horribly complex. The new code uses\neval and is perfectly straightforward.\n\nThe present codewise-related code caches completions for all previously-seen\nprefixes. This dramatically speeds up backspacing. Global caching is possible\nbecause completions depend *only* one the present prefix, *not* on the presently\nselected node. If ContextSniffer were used, completions would depend on the\nselected node and caching would likely be impractical. Despite these\nimprovements, the performance of codewise-oriented completions is noticeably\nslower than leo-related completions.\n\nPerformance notes\n=================\n\nThe ac.get_cached_options cuts back the prefix until it finds a cached prefix.\nac.compute_completion_list then uses this (perhaps-way-too-long-list) as a\nstarting point, and computes the final completion list by calling\ng.itemsMatchingPrefixInList.\n\nThis may not be absolutely the fastest way, but it is much simpler and more\nrobust than attempting to do \"prefix AI\" based on comparing old and new\nprefixes. Furthermore, this scheme is completely independent of the how\ncompletions are actually computed. The autocompleter now caches options lists,\nregardless of whether using eval or codewise.\n\nIn most cases the scheme is extremely fast: calls to get_completions replace\ncalls to g.itemsMatchingPrefixInList. However, for short prefixes, the list that\ng.g.itemsMatchingPrefixInList scans can have thousands of items. Scanning large\nlists can't be helped in any case for short prefixes.\n\nHappily, the new scheme is still *completely* stateless: the completionDict does\n*not* define state (it is valid everywhere) and no state variables had to be\nadded. In short, the new caching scheme is much better than before, and it\nprobably is close to optimal in most situations.\n", "children": []}, {"h": "Greatly improved the viewrendered plugin", "gnx": "ekr.20110602091552.16898", "b": "The viewrendered plugin creates a window for *live* rendering of images, movies,\nsounds, rst, html, etc. \n\nCommands\n========\n\nviewrendered.py creates the following (``Alt-X``) commands:\n\n``viewrendered (abbreviated vr)``\n    Opens a new rendering window.\n    \n    By default, the rendering pane renders body text as reStructuredText, with\n    all Leo directives removed. However, if the body text starts with ``<``\n    (after removing directives), the body text is rendered as html.\n    \n    **Important**: The default rendering just described does not apply to nodes\n    whose headlines begin with @image, @html, @movie, @networkx, @svg and @url.\n    See the section called **Special Renderings** below.\n\n    Rendering sets the process current directory (os.chdir()) to the path\n    to the node being rendered, to allow relative paths to work in ``.. image::`` directives.\n\n``hide-rendering-pane``\n    Makes the rendering pane invisible, but does not destroy it.\n\n``lock-unlock-rendering-pane``\n    Toggles the locked state of the rendering pane. When unlocked (the initial\n    state), the rendering pane renders the contents of the presently selected\n    node. When locked, the rendering pane does not change when other nodes are\n    selected. This is useful for playing movies in the rendering pane.\n    \n``pause-play-movie``\n    This command has effect only if the rendering pane is presently showing a movie.\n    It pauses the movie if playing, or resumes the movie if paused.\n\n``show-rendering-pane``\n    Makes the rendering pane visible.\n\n``toggle-rendering-pane``\n    Shows the rendering pane if invisible, otherwise hides it.\n    \n``update-rendering-pane``\n    Forces an update of the rendering pane. This is especially useful for\n    @graphics-script nodes: such nodes are update automatically only when\n    selected, not when the body text changes.\n    \nRendering reStructuredText\n==========================\n\nFor example, both::\n\n    Heading\n    -------\n\n    `This` is **really** a line of text.\n\nand::\n\n    <h1>Heading<h1>\n\n    <tt>This</tt> is <b>really</b> a line of text.\n\nwill look something like:\n\n    **Heading**\n\n    `This` is **really** a line of text.\n    \n**Important**: reStructuredText errors and warnings will appear in red in the rendering pane.\n\nSpecial renderings\n===================\n\nThis plugin renders @image, @html, @movie, @networkx, @svg and @url nodes in\nspecial ways.\n\nFor @image, @movie and @svg nodes, either the headline or the first line of body\ntext may contain a filename.  If relative, the filename is resolved relative to\nLeo's load directory. \n\n- ``@graphics-script`` executes the script in the body text in a context containing\n  two predefined variables:\n      \n    - gs is the QGraphicsScene for the rendering pane.\n    - gv is the QGraphicsView for the rendering pane.\n    \n  Using these variables, the script in the body text may create graphics to the\n  rendering pane.\n\n- ``@image`` renders the file as an image.\n\n\n- ``@html`` renders the body text as html.\n\n\n- ``@movie`` plays the file as a movie.  @movie also works for music files.\n\n- ``@networkx`` is non-functional at present.  It is intended to\n  render the body text as a networkx graph.\n  See http://networkx.lanl.gov/\n\n\n- ``@svg`` renders the file as a (possibly animated!) svg (Scalable Vector Image).\n  See http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\n  **Note**: if the first character of the body text is ``<`` after removing Leo directives,\n  the contents of body pane is taken to be an svg image.\n\n- ``@url`` is non-functional at present.\n\nSettings\n========\n\n- ``@color rendering-pane-background-color = white``\n  The background color the rendering pane when rendering text.\n\n- ``@bool view-rendered-auto-create = False``\n  When True, show the rendering pane when Leo opens an outline.\n  \n- ``@bool view-rendered-auto-hide = False``\n  When True, hide the rendering pane for text-only renderings.\n\n- ``@string view-rendered-default-kind = rst``\n  The default kind of rendering.  One of (big,rst,html)\n\n- ``@bool scrolledmessage_use_viewrendered = True``\n  When True the scrolledmessage dialog will use the rendering pane,\n  creating it as needed.  In particular, the plugins_menu plugin\n  will show plugin docstrings in the rendering pane.\n  \nAcknowledgment\n==============\n\nTerry Brown created this initial version of this plugin,\nand the free_layout and NestedSplitter plugins used by viewrendered.\n", "children": []}, {"h": "New and improved features", "gnx": "ekr.20110601105631.19434", "b": "", "children": ["ekr.20110601105631.19435", "ekr.20110601105631.19480", "ekr.20110601105631.19464", "ekr.20110601105631.19441", "ekr.20110601105631.19482", "ekr.20110601105631.19463", "ekr.20110601105631.19473"]}, {"h": "Colorizing", "gnx": "ekr.20110601105631.19435", "b": "- Support multiple @language directives in a single node\n  As with @color directives, only unambiguous @language directives affect the\n  default coloring of descendant nodes.\n\n- Colorize url's in the body text. You can open url's by control-clicking on\n  them, or by using the open-url command.\n\n- Added support for cython colorizing\n\n- Leo ignores (and does not color) @language directive for unknown languages.\n\n- Leo completely recolors nodes when you change @language directives by typing.\n", "children": []}, {"h": "Command-line arguments & settings", "gnx": "ekr.20110601105631.19480", "b": "- The --no-splash command-line option suppresses the splash screen.\n  Leo puts up no splash screen when the --silent\n  or --script command-line options are given.\n\n- Added @bool view-rendered-auto-create setting.\n    \n- Added @bool use_qcompleter setting.\n\n- Added auto_tab_complete setting.\n\n- Removed @bool use_codewise setting.\n\n- You now may set icon button colors in the Qt stylesheet.\n\n", "children": []}, {"h": "File handling", "gnx": "ekr.20110601105631.19464", "b": "- Added namespace and Leo comment lines to .leo files\n\n- Leo opens leoSettings.leo only once\n\n- Fixed Bug 745824: @doc duplicates comment delims in html files\n  https://bugs.launchpad.net/leo-editor/+bug/745824e\n  \n- Leo no longer wraps @doc lines. This ensures that Leo does not change files\n  unnecessarily.\n", "children": []}, {"h": "Gui", "gnx": "ekr.20110601105631.19441", "b": "- If you type a *plain* up/down arrow key while editing a headline, Leo will act\n  as if you had typed the corresponding *alt*- arrow key. That is, Leo will end\n  editing of the headline and go to the next previous node. Leo will end editing\n  even if there is no next/ previous node, which is convenient.\n\n- A single click on an already-selected tree node edits the headline\n\n  Enabled only if @bool single_click_auto_edits_headline = True.\n\n- Added a splash screen\n\n  The --no-splash command-line option suppresses the splash screen. In addition,\n  Leo puts up no splash screen when the --silent or --script command-line\n  options are given. To change the splash screen, replace\n  leo\\Icons\\SplashScreen.jpg with another image.\n\n- The apropos commands now print in a separate area if possible. The commands use\n  the scrolledmessage plugin if possible, which in turn uses the viewrendered\n  plugin by default. This makes the apropos messages much more visible.\n\n- Handle click events like alt-x or ctrl-g Clicking in the minibuffer now is\n  equivalent to alt-x, provided that the minibuffer is not in use. Clicking most\n  places outside the minibuffer is equivalent to ctrl-g. Catching clicks is much\n  safer than catching focus events.\n\n- The first loaded file sets tabbed gui size\n\n- Enter insert mode after ctrl-h.  This is a vim-related improvement.\n\n- Disabled find/change text areas in find panel.  This reduces confusion.\n", "children": []}, {"h": "Improved commands", "gnx": "ekr.20110601105631.19482", "b": "- Improved the clone-find-all command. The descendants of previously found\n  (cloned) nodes don't get added again. The clone-find-all pattern now defaults\n  to find text.\n\n- Improved the forward and backward by sentences commands Leo's sentence related\n  functions now stop at empty lines, skip periods within words, stop at\n  sentences ending in non-periods and stop at the end or beginning of the\n  buffer.\n\n- Improved the print-bindings command; it now shows were bindings came from.\n\n- Improved the reformat-paragraph command. The command detects paragraphs more\n  reliably. The next line is now visible, which is a big improvement.\n\n- Added patch to g.wrap_lines from Jos\u00e9 Rojas Echenique\n  It regularizes the number of spaces after periods.\n\n- Improved expansion of abbreviations. Abbreviations are checked any time a\n  non-word character is typed. In particular, newlines trigger abbreviations,\n  which I find very helpful, although I did then have to remove newlines from my\n  abbreviations. Control sequences do not trigger expansions.\n\n- Improved handling of @url nodes. The new rule is simple: if the body text\n  contains any text the first line of the body text is taken to be the url.\n  There is no longer any need to put '--' in the headline. More importantly, you\n  can put anything you like in the body text following the first line. Other\n  url's, notes, even .. graphics:: directives for the viewrendered plugin.\n\n- Improved the clean-all-lines command. It is now much faster and has better\n  feedback.\n", "children": []}, {"h": "New commands", "gnx": "ekr.20110601105631.19463", "b": "- Added the replace-current-character command. It replaces the character to the\n  left of the cursor, or replaces the selection range if there is one.\n\n- Added toggle-case-region command.\n\n- Added save-all command. It saves all changed windows.\n\n- Added insert-hard/soft-tab commands.\n\n- Added commands to manage uA's::\n\n    clear-all-uas\n    clear-node-uas\n    print-all-uas\n    print-node-uas\n    set-ua\n    \n- Renamed the 'abbrev-mode' to 'toggle-abbrev-mode'.\n", "children": []}, {"h": "Scripting", "gnx": "ekr.20110601105631.19473", "b": ".. _`Runwith class`: http://groups.google.com/group/leo-editor/browse_thread/thread/b8e8fbf6d97fa9f2/a4537fafaf2442ba\n\n- Added namespace arg in c.executeScript\n\n- Put Kent Tenney's `Runwith class`_ in scripts.leo and contrib.\n\n  Kent writes, \"I've had endless problems with interpreter versioning, leading\n  me create the Runwith class. It writes a file to disk, makes it executable,\n  runs it, captures exitcode, err and output, removes the files, provides\n  reports. This provides complete decoupling from Leo.\"\n\n- Call os.chdir when executing scripts.\n", "children": []}, {"h": "New in 4.9 b2", "gnx": "ekr.20110604105805.16766", "b": "- Double-clicking a headline now colorizers the headline exactly the same way as\n  when editing the headline with ctrl-H. This was a serious problem for those\n  with dark window-color schemes.\n  \n- The distribution script now ensures that leo\\plugins\\spellpyx.txt contains\n  Linux-style newlines. This prevents crashes in the PyEnchant spell checker.\n  \n- Leo imports .cfg files just like .ini files.\n\n- Fixed crasher in graphcanvas plugin caused by a bug in CommandChainDispatcher.add.\n", "children": []}, {"h": "New in 4.9 b3", "gnx": "ekr.20110611085637.5009", "b": "", "children": ["ekr.20110611085637.5010", "ekr.20110611085637.5012"]}, {"h": "4.9 b3: Bugs fixed", "gnx": "ekr.20110611085637.5010", "b": "- Fixed ancient, major bug: F3 now makes sure to save headline changes\n\n- Fixed old bug: set-find-x commands no longer abort find commands\n\n  The commands that switch find scope, set-find-xxx, no longer terminate the\n  find command, if one is active.  This is an old bug, and it's good to fix it. \n\n- Fixed recent bugs in the viewrendered and scrolledmessage plugins\n\n  An earlier rev fixed a bug that effectively destroyed the viewrendered plugin.\n  It was caused by the new convention that alleviates the need for many\n  \\@language directives. The fix was simply to enable the update_rst method if\n  the massaged p.b is not empty.\n\n  ScrolledMessageDialog.convertMessage now renders rst by default, unless\n  *either* the html or text button is pressed.  There really should be three\n  radio buttons: text, html or rST, but that's a tiny interface glitch.  The\n  actual bug however, was much more serious: rst was never being rendered. \n\n- Fixed chapters problems\n\n    http://groups.google.com/group/leo-editor/browse_thread/thread/3f15a855ca38b26e\n    \n    The new code is more relaxed about where @chapter nodes may reside.  They\n    are always *created* as the last child of the first @chapters node in the\n    outline (the @chapters, plural, node is created as needed).  However, you may\n    move them while in the \"main\" chapter, with no ill effects.  In fact, you could\n    swap @chapter nodes with the same name: when you select a chapter, Leo will use\n    (show) the first node it finds. \n    \n    The new code is now both more careful and more tolerant of @chapter nodes\n    deleted by hand.  The chapter will still appear in the dropdown list: if you\n    select it you will give a polite warning.  That's all.  In particular, the\n    deleted chapter will *remain* in the dropdown list until you use the proper\n    chapter-remove command.  That's about the only sane alternative: it allows you\n    to resurrect the chapter, by hand or with an undo. \n    \n    This is all made possible because the new code is almost completely stateless.\n    The only exception is the saved position used to select a node when selecting a\n    chapter. The old position-based findPositionInChapter method has been simplified\n    to make it work more reliably. It first looks for a \"perfect\" match using\n    positions, and then degrades to looking for a vnode match. In practice, most\n    matches are, in fact, perfect. The \"imperfect\" case typically happens when the\n    user alters nodes in @chapter trees by hand in the \"main\" chapters.\n    \n    Technical highlights:\n        \n    - The check for c.positionExists(p) in c.setCurrentPosition continues to fail\n      when deleting @chapter nodes. However, the code now simply falls back to\n      c.rootPosition, without any apparent harm.\n      \n    - The chapterController and chapter classes are now completely stateless, except\n      for chapter.p.\n      \n        A. chapter.findPositionInChapter has been simplified and generalized. It now\n           falls back to a reasonable value, based on p.v, if chapter.p does not\n           exist.\n           \n        B. All chapterController code now recomputes the location of @chapters and\n           @chapter nodes whenever those locations are needed.\n           \n        C. All chapter commands are unchanged in their actual workings, but all contain\n           a care \"preamble\" of checking code.\n           \n- Added unit test for all chapter commands.  All interactive commands now have\n  an xByName helper for use by unit tests.\n  \n- Added lockout to leoQtTreeTab.  This prevents flash during the rename chapter command.\n\n- Rewrote chapter.chapterSelectHelper.  This reduces, but does not eliminate, the\n  number of warnings given by c.setCurrentPosition.\n\n\n- Fixed recent bug: handle 'Escape' character properly\n\n  The fix was a last-minute adjustment in leoQtEventFilter.create_key_event.\n\n\n- Fixed caps-lock problem\n\n  The fix was yet another last-minute fix leoQtEventFiler.create_key_event.\n\n- Made sure all keys contribute to lossage\n", "children": []}, {"h": "4.9 b3: New features", "gnx": "ekr.20110611085637.5012", "b": "- Simplified Leo's key handling, an important improvement to Leo's core.\n\n- Changed names of commands so they have common prefixes\n\n    Any custom key bindings (none are bound by default) will have to change.\n    \n    The new prefixes are::\n    \n        abbrev-     abbreviation commands\n        buffer-     buffer command\n        directory-  director commands\n        file-       file commands\n        gc-         garbage collection\n        macro-      macro expansion\n        rectangle-  rectangle commands\n        register    register commands\n        \n    The already existing prefixes are::\n    \n        apropos-    help\n        ddabrev-    dynamic abbreviations\n        find-       find commands\n        isearch-    incremental search\n        print-      print information\n        run-        run unit tests\n        toggle-     toggle settings\n        yank-       yank\n        \n\n- Finished macros\n\n    The macro-load and macro-save are as simple as possible.\n\n    No further work will be done on macros unless somebody really wants these commands.\n\n\n- Added support for word-only option for regular expressions\n\nWhen the word-only option is in effect, Leo ensures that the search pattern\nbegins and ends with the '\\b' anchor.\n\n- Leo's startup code now forces the qt gui: it changes qttabs to qt.\n\n- Added support for expanded sections in plugin.  Added three new options:\n\n    expand_noweb_references\n    \n       True: Replace references by definitions.\n       Definitions must be descendants of the referencing node.\n    \n    ignore_noweb_definitions\n    \n        True: ignore section definition nodes.\n    \n    expand_noweb_recursively\n    \n        True: recursively expand definitions by expanding any\n        references found in definitions.\n", "children": []}, {"h": "New in 4.9 b4", "gnx": "ekr.20110613172008.15106", "b": "- Running all unit tests leaves all files unchanged. This was a major annoyance.\n\n- Leo now does a keyboard-quit when deactivating a window.\n\n- Fixed an ancient bug: everything after @all was put in the wrong node!\n\n- Fixed an ancient bug: wrap-around search now restarts when find pattern changes.\n\n- Fixed an ancient bug: F-keys end incremental searches.\n\n- Fixed a serious recent problem with commands dispatched from menus The Shift\n  modifier was deleted from all commands executed by selecting an item in menus!\n  A new unit test checks that menus behave as expected.\n\n- Dismiss splash screen before putting up the dialog that asks for an ID.\n", "children": []}, {"h": "New in 4.9 rc1", "gnx": "ekr.20110616100929.14851", "b": "- When running on MacOS, Leo uses the qt gui when the qttabs gui is requested.\n\n- Leo now looks in home/.leo/Icons directory for icons before looking in the\n  leo/Icons directory.\n  http://groups.google.com/group/leo-editor/browse_thread/thread/80163aec96b8ea45/4f58418924172252\n\n- Fixed bug 797470: File data sometimes silently erased when the tangler fails.\n  https://bugs.launchpad.net/leo-editor/+bug/797470 This was a serious bug, but\n  it could happen only when saving an erroneous file twice.\n\n- Fixed bug 798194: --maximized has no effect\n  https://bugs.launchpad.net/leo-editor/+bug/798194\n\n- Added the @bool forbid_invalid_completions setting.\n\n- Non-plain keys, such as Ctrl-s, abort auto-completion and are interpreted as\n  usual.\n\n- Don't mark the .leo file as changed when setting orphan bit. There is no need:\n  the orphan bits will ensure errors get reported if the file is saved.\n\n- Disabled the open-compare-window command. It is/was a Tk only command.\n\n- The open-python-window command fails more gracefully It issues a message\n  instead of crashing if idlelib does not exist.\n", "children": []}, {"h": "Leo 4.8", "gnx": "ekr.20101025080245.5805", "b": "", "children": ["ekr.20101025080245.6077", "ekr.20101025080245.6078", "ekr.20101025080245.5980", "ekr.20101025080245.6080", "ekr.20101104173324.5141", "ekr.20101025080245.6081", "ekr.20101025080245.6006", "ekr.20101025080245.5985"]}, {"h": "New sentinels", "gnx": "ekr.20101025080245.6077", "b": ".. _`simplest possible`: http://groups.google.com/group/leo-editor/browse_thread/thread/8b659c96720afd53/628a09779ca9e8c6\n.. _`org-mode`: http://orgmode.org/\n\nLeo now writes \\@file files with the `simplest possible`_ sentinel lines.\n\n    - Eliminated \\@-node sentinels.\n    - Eliminated \\@nl and \\@nonl sentinels.\n    - Simpler representation of \\@doc and \\@ in sentinels.\n    - Simplified representation of \\@others and section references.\n    - Use a scheme much like Emacs `org-mode`_ to represent headline level.\n\nThe result is, provably, the simplest possible representation of Leo's outline\nstructure in external files.\n", "children": []}, {"h": "Drag and drop files into Leo", "gnx": "ekr.20101025080245.6078", "b": "The Qt Gui now supports drag and drop in Leo outlines.\n\nYou can drag files into Leo.  Leo will create \\@file or \\@auto nodes if appropriate.\n", "children": []}, {"h": "Scripting improvements", "gnx": "ekr.20101025080245.5980", "b": ".. _`p.deletePositionsInList`: http://groups.google.com/group/leo-editor/browse_thread/thread/0aa8d9d17f6300b8#\n.. _`g.findTestScript`: http://groups.google.com/group/leo-editor/browse_thread/thread/a108d70400b28dc9#\n\n- The execute-script now calls execfile (or its equivalent when using Python 3k)\n  when @bool write_script_file = True. This allows pdb (or pudb) to show the\n  text of Leo scripts!\n\n- Added `p.deletePositionsInList`_, an important new helper.\n\n- Added `g.findTestScript`_, an important new pattern for sharing code in Leo\n  scripts, including scripts in @test nodes.\n\n    Suppose there is common code that I want to include in several unit tests::\n\n        class Hello():\n            def __init__(self,name='john'):\n                self.name=name\n                print('hello %s' % name)\n\n    I put this in a node called 'Common test code'. Now the unit tests can \"import\"\n    the code as follows::\n\n        exec(g.findTestScript('Common test code'))\n\n    After this exec statement completes the class Hello is available to the test\n    code! This is something that I've wanted to do forever.\n", "children": []}, {"h": "Improved @url nodes", "gnx": "ekr.20101025080245.6080", "b": "If the body text is non-empty, it is assumed to contain the URL.\nThis is a remarkably important improvement--it allows the\nheadline to contain a description of the url.\n", "children": []}, {"h": "New & improved commands", "gnx": "ekr.20101104173324.5141", "b": "- Added code-to-rst command.\n\n- Completed cascade-windows and minimize-all-windows commands.\n\n- Created head-to-prev-node and tail-to-next-node commands.\n\n- Removed mark-clones command.  It is useless in the one-node world.\n\n- Added extract-python-method command.\n", "children": ["ekr.20101025080245.6079"]}, {"h": "Improved abbreviations commands", "gnx": "ekr.20101025080245.6079", "b": "When abbreviation mode is on (abbrev-mode toggles this mode) Leo will expand\nabbreviations as you type. Type the name of an abbreviation, followed by a\nspace. As soon as you type the space, Leo will replace the name by the\nabbreviations value. You can undo the replacement as usual.\n\nNote that defining any abbreviation automatically turns on abbreviation\nmode.\n\nThe add-global-abbreviation command (<alt-x>add-gl<tab><return>) takes the\nselected text as the replacement value of the abbreviation. The minibuffer\nprompts you for the name of the abbreviation.\n\nThree new settings apply to the abbreviation commands:\n\n- @bool enable-abbreviations (default: False)\n\n    When true, enables substitution of abbreviations.\n\n- @data global-abbreviations\n\n- @data abbreviations\n\n      In both cases, body text contains lines of the form::\n\n        name=value\n\n      name is the abbreviation name, value is the substituted text. Whitespace\n      is ignore around the name, but is significant in the value. Abbreviation\n      names may contain only alphabetic characters, but may start with the '@'\n      sign.\n\n      By *convention* @data global-abbreviations setting should be defined in\n      myLeoSettings.leo, while @data abbreviations should be defined in other\n      .leo files. Regardless of where they are defined, abbreviations in @data\n      abbreviation nodes will override settings (with the same name) in @data\n      global-abbreviations nodes.\n", "children": []}, {"h": "New plugins", "gnx": "ekr.20101025080245.6081", "b": "- The screenshots.py plugin helps make slide shows containing many screen shots.\n", "children": []}, {"h": "New settings & command-line args", "gnx": "ekr.20101025080245.6006", "b": "- Leo can now open multiple files from the command line.\n\n- You can now set a proportional font to use in all \"@language plain\" nodes.\n   Specify fonts in @font nodes::\n\n        @font plain null font\n\n            plain_null_font_family = Times New Roman\n            plain_null_font_size = 16\n            plain_null_font_slant = roman\n            plain_null_font_weight = bold\n\n  That is, the actual font specs are in the body text.  Everything\n  except \\@font is ignored in the headline.\n\n  Specify font colors with \\@color nodes::\n\n        @color plain null color = black\n\n- Added support for minibuffer colors. Added the following options with the\n  indicated defaults::\n\n    @color minibuffer_background_color = lightblue\n    @color minibuffer_warning_color = lightgrey\n\n- Added support for \\@string qt-toolbar-location = <spot>\n\n    Valid values for <spot> are top,bottom,left,right\n\n- Added support for \\@bool write_expansion_bits_in_leo_files.\n\n- The ``-screen-shot`` command-line argument tells Leo to take a screenshot and exit.\n\n- The ``--window-size`` command-line argument specifies the initial size of the Leo\n  window.  This is especially useful with the ``screen-shot`` command-line argument::\n\n    --window-size=600x900  # <height> x <width>, in pixels.\n\n- Added support for @bool at_auto_separate_non_def_nodes option.\n\n    When true, the @auto file importers put inter-def code in their own node.\n    The default (legacy mode) is False.\n", "children": []}, {"h": "Other improvements", "gnx": "ekr.20101025080245.5985", "b": ".. _`Reorganized`: http://groups.google.com/group/leo-editor/browse_thread/thread/d02df89c0b831a7c\n\n- Several important improvements to Leo's installer for Windows.\n\n- Leo doesn't create @chapter nodes for new files.\n\n- Leo now uses PyEnchant to check spelling.\n\n    This is much safer than the old Aspell wrapper.\n\n- All \\@auto nodes end with a newline.\n\n- Leo now writes @edit nodes like @nosent nodes.\n\n- Added legend for print-settings command.\n\n- Improved the importer for elisp.\n\n- Added an .ini importer.\n\n- Created introductory slide shows.\n\n- `Reorganized`_ the users guide.\n\n- Improved the installation instructions.\n\n- Added support for .nsi files.\n", "children": []}, {"h": "Leo 4.7", "gnx": "ekr.20100129054823.11924", "b": "", "children": ["ekr.20101025080245.6088", "ekr.20100129054823.17680", "ekr.20100129054823.11928", "ekr.20100129054823.11931", "ekr.20100211221936.7098", "ekr.20100129054823.11934", "ekr.20100129054823.11935"]}, {"h": "The one-node world", "gnx": "ekr.20101025080245.6088", "b": "Leo 4.7 accomplishes something I long thought to be impossible: the unification\nof vnodes and tnodes. tnodes now longer exist: vnodes contain all data. The Aha\nthat made this possible is that iterators and positions allow a single node to\nappear in more than one place in a tree traversal.\n", "children": []}, {"h": "Leo supports Python 3.x", "gnx": "ekr.20100129054823.17680", "b": "Leo requires Python 2.6 or above, including Python 3.0 and above.\n", "children": []}, {"h": "Improved file handling", "gnx": "ekr.20100129054823.11928", "b": "- Leo now treats @file nodes just like it treats @thin nodes. This makes Leo\n  much safer to use in cooperative environments that use source code control\n  systems. As part of this change, Leo no longer supports @noref nodes.\n\n- @auto-rst now works much more reliably.\n\n- Leo now has a simple, robust, and extremely useful scheme to recover from\n  clone conflicts, no matter how they may arise. This removes all the dread from\n  \"node changed\" messages. It is easy to see what the changes were, and it is\n  easy to choose what, if anything to do.\n\n  When a clone conflict occurs, you will see a red message in the log pane and a\n  \"Recovered Nodes\" node as the last top-level node. This node has one child per\n  red message. Each of these children contains two nodes: an \"old\" node and a\n  \"new\" node. Unless there are multiple conflicts for a single node, the \"new\"\n  node will have \"won\": every clone contains the new node's headline and body\n  text. All these nodes are plain nodes, *not* clones. It is up to you to change\n  the corresponding clone nodes if you choose to do so.\n\n- Leo minimizes unnecessary changes to .leo files. Leo writes outline-size and\n  orientation to the cache in your .leo directory. This eliminates unnecessary\n  changes to .leo files.\n\n- Leo now creates temporary files in the systems standard temporary directory.\n  This prevents Leo from over-writing user-generated .bak files.\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20100129054823.11931", "b": "- The ``--debug`` command-line option sets g.debug.\n\n- The ``--version`` command-line option causes Leo\n  to print it's version and exit.\n\n", "children": []}, {"h": "New commands", "gnx": "ekr.20100211221936.7098", "b": "- The clear-cache and clear-all-caches commands.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20100129054823.11934", "b": "The qt colorizer now supports font specifications in @font nodes.\n", "children": []}, {"h": "Improved plugins", "gnx": "ekr.20100129054823.11935", "b": "Added options for vim plugin. The setting::\n\n    @string vim_trigger_event = icondclick2\n\nis the default. It opens vim when the user double-clicks the icon box.\nAlternatives are::\n\n    @string vim_trigger_event = iconclick2\n    @string vim_trigger_event = select2\n\nThe former opens vim on single clicks in the icon bar.\nThe latter opens vim whenever a new node is selected in Leo.\n\n", "children": []}, {"h": "Leo 4.6", "gnx": "ekr.20090324145450.20", "b": "", "children": ["ekr.20090620073906.12095", "ekr.20090324145450.23", "ekr.20090620082840.5608", "ekr.20090324145450.27", "ekr.20090324145450.36", "ekr.20090324145450.40", "ekr.20090324145450.46", "ekr.20090324145450.49", "ekr.20090324145450.54"]}, {"h": "Improved unit testing", "gnx": "ekr.20090620073906.12095", "b": "- leoDynamicTest.py now supports a ``--path`` argument giving the .leo file.\n  This is so useful!\n\n- leoDynamicTest.py now honors the ``--silent`` argument.\n\n- leoTest.runUnitTestLeoFile runs all unit tests in a given .leo file\n  in a separate process.\n\n- leoTest.runTestsExternally calls runUnitTestLeoFile after creating\n  dynamicUnitTest.leo.\n\n- When reporting that no unit tests were found, all unit tests commands tell\n  whether the entire outline or just the selected outline was searched.\n  This fixes sometimes-misleading error messages.\n\n- test.leo contains a 'run-test.leo-tests' button.\n\n- leoPy.leo contains a 'run-all-core-tests' button.\n", "children": []}, {"h": "Improved file handling", "gnx": "ekr.20090324145450.23", "b": "- Leo opens a default .leo file if no other is specified, using the @string\n  default_leo_file setting. The default for this setting is::\n\n    ~/.leo/workbook.leo\n\n- Added escapes for underindented lines. The escape is specified by the @string\n  underindent-escape-string setting. By default, this escape is \\- If a line\n  starts with \\-N, Leo will write the line with N fewer spaces than expected.\n\n- Leo now warns when attempting to write a file that has been changed outside of\n  Leo. This prevents bzr reversions.\n\n- Leo tests syntax of .py files when saving them.\n\n- Leo can now open any file into an @edit node. This allows Leo to be associated\n  with the edit action of .py files. Like this::\n\n    C:\\Python26\\python.exe \"c:\\leo.repo\\trunk\\launchLeo.py\" --gui=qt %1 %2\n\n- Leo now warns if when writing an @auto node if the the file exists and the\n  node has not been read previously.  This prevents a newly-created\n  @auto node from overwriting an existing file.\n", "children": []}, {"h": "Improved handling of rST files", "gnx": "ekr.20090620082840.5608", "b": "Added support for @auto-rst nodes. These import reStructuredText (rST) files\nso that the files can be \"round-tripped\" without introducing extraneous changes.\nThis makes Leo a superb environment for using rST.\n", "children": []}, {"h": "New code features", "gnx": "ekr.20090324145450.27", "b": ".. _`autoCompleter.getExternalCompletions`: http://groups.google.com/group/leo-editor/browse_thread/thread/4ad91984a6d0acac\n.. _`c.getNodePath and c.getNodeFileName`: http://groups.google.com/group/leo-editor/browse_thread/thread/3b5f1232ecc6bba7\n\n- Added `autoCompleter.getExternalCompletions`_.\n\n- Added g.posList.\n\n- c.config.doEnabledPlugins sets g.app.config.enabledPluginsFileName\n\n- Added the following properties:\n    - p.b, t.b and v.b return the body string of the position or node.\n    - p.h, t.h and v.h return the head string of the position or node.\n    - t.u and v.u return the uA of the node.\n    - p.gnx, t.gnx and v.gnx return the gnx of the position or node.\n\n- Added script to leoSettings.leo to ensure all menu items are valid.\n\n- c.config.getSettingSource(setting_name)\n  returns the name of the file which Leo used to determine the setting:\n\n    - D indicates default settings.\n    - F indicates the file being loaded\n    - L indicates leoSettings.leo\n    - M indicates myLeoSettings.leo\n\n- Predefined 'self' in @test/@suite nodes.\n\n- Added `c.getNodePath and c.getNodeFileName`_.\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20090324145450.36", "b": "- The ``--config`` command-line option specifies a single config (.leo) file\n  to use for configuration.\n  See http://groups.google.com/group/leo-editor/browse_thread/thread/f3f95d93bcd93b94\n\n- The ``--file=fileName`` command-line option loads a file.\n  Only .zip and .leo extensions are allowed at present.\n\n- The ``--gui=name`` command-line option specifies the gui to use.\n  The valid values are ``--gui=qt`` and ``--gui=tk``.\n", "children": []}, {"h": "New commands", "gnx": "ekr.20090324145450.40", "b": "- Added smart home (back-to-home) command.\n\n- Added support for standard behavior of Tab and Shift-Tab keys.\n  The tab key indents the text selection, if there is one;\n  otherwise, the tab key insert a tab or blanks, depending on the @tabwidth setting.\n  Shift-Tab always unindents one or more lines.\n\n- The open command creates @edit nodes when opening non-.leo files\n  The open file dialog now shows all files by default.\n  Selecting a non-.leo file will load that file into a new node in the present outline.\n\n- Added added pdb minibuffer command.\n  This works, but stops Leo in the middle of the command-handling logic.\n  You may get the commander c by stepping out into\n  k.masterKeyHandler or k.masterCommandHandler.\n  Using c, you can then get all other info.\n\n- Improved the isearch commands.\n\n- find-clone-all is a synonym for clone-find-all.\n\n- open-quickstart-leo command opens leo/doc/quickstart.leo.\n\n- The Alt-Right and Alt-Left keys (expand-and-go-right and contract-or-go-left\n  commands) now move to the previous or next node if now left/right movement is\n  possible.\n", "children": []}, {"h": "New and improved directives", "gnx": "ekr.20090324145450.46", "b": "- Added @nocolor-node directive.\n\n- Improved \\@path handling.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20090324145450.49", "b": ".. _`meta keys`: http://groups.google.com/group/leo-editor/browse_thread/thread/b6a39ed672a28c65?pli=1\n\n- @string default_leo_file = ~/.leo/workbook.leo\n\n- @string underindent-escape-string = \\-\n\n- @int icon_bar_widgets_per_row\n\n- Added support for `meta keys`_.\n\n- The qt gui is now the default.\n\n- The old bindings bound the PageUp/Down keys to back/forward page commands, and\n  these commands work only for text.\n\n  The new default bindings in leoSettings.leo: @keys EKR bindings are::\n\n    back-page                       ! text = PageUp\n    back-page-extend-selection      ! text = Shift-PageUp\n    forward-page                    ! text = PageDn\n    forward-page-extend-selection   ! text = Shift-PageDn\n\n    scroll-down-half-page   ! tree = Shift-PageDn\n    scroll-down-page        ! tree = PageDn\n    scroll-up-half-page     ! tree = Shift-PageUp\n    scroll-up-page          ! tree = PageUp    \n\n- @bool enable_alt_ctrl_bindings.\n  The default is False, needed for AltGr functionality on Windows.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20090324145450.54", "b": "- Improved nav_buttons plugin and corresponding nodeHistory class.\n\n- Created qtGui and tkGui plugins.\n\n- Created leoGuiPluginsRef.leo.\n\n- Leo issues an error message if a non-existent plugin appears\n  in an @enabled-plugin node.\n\n- New plugins: spydershell.py, qtframecommands.py, and mod_framesize.py.\n", "children": []}, {"h": "Leo 4.5", "gnx": "ekr.20080806211440.185", "b": "", "children": ["ekr.20080806211440.188", "ekr.20080806211440.253", "ekr.20080806211440.256", "ekr.20080806211440.189"]}, {"h": "Major new features", "gnx": "ekr.20080806211440.188", "b": ".. _`v.uA's`: http://groups.google.com/group/leo-editor/browse_thread/thread/750bb3099090f5b\n\n- Added support for @shadow files.\n  This is a major breakthrough.\n  See the `Using @shadow`_ chapter for full details.\n\n- Added much improved support for vim bindings.\n\n- Allow `v.uA's`_ in @file and @shadow nodes.\n", "children": []}, {"h": "Major code reorganizations", "gnx": "ekr.20080806211440.253", "b": "- Leo now uses a sax-based parser to read .leo files.\n  This makes it possible to extend Leo's file format without invalidating previous versions of Leo.\n\n- Leo now supports the so-called 'Graph World'.\n  When g.unified_nodes is True, Leo moves all information from tnodes into vnodes.\n\n- Leo now uses a new key binding scheme.\n  This allows substantially simpler key bindings. Indeed, most per-pane bindings\n  have been eliminated.\n  Added support for kill bindings.\n\n- Leo is now an installable package.\n  To make this work, Leo adds os.curdir to sys.path if needed on startup.\n\n- Reorganized Leo's drawing and focus code.\n  As a result, calls to c.beginUpdate and c.endUpdate are no longer needed.\n\n- Leo is now ready for Python 3.x:\n  Change most print statements to calls to g.pr.\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20080806211440.256", "b": "- Added g.Tracer class.  This is a Python 'debugger' that computes a call graph.\n  To trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n\n- The find-character command now finds characters across line boundaries.\n\n- Set cwd in read/write commands. This affect the following commands:\n  open, save, save-as, save-to, read-outline-only, read-file-into-node,\n  write-file-from-node and all the import/export commands.\n\n- Leo creates the .leo folder in the user's HOME directory, and puts several configuration files there.\n  Leo looks for myLeoSettings.leo in HOME/.leo.\n  Leo uses os.path.expanduser(\"~\") if there is no home setting.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080806211440.189", "b": "- The default settings for @shadow files are now located in leoSettings.leo in the node::\n\n        @settings-->File options-->Shadow files\n\n    The defaults for these settings are::\n\n        @string shadow_prefix = x\n        @string shadow_subdir = .leo_shadow\n\n- Added support for @bool fixedWindow option.\n\n    Leo suppresses marks, expansion state, orphan bits and current position bits\n    when writing fixed .leo files. As a result, all nodes will be collapsed and\n    the root node will always be selected when Leo opens a fixed .leo file.\n\n    You can optionally specify the size and position on the screen of fixed .leo\n    files by putting an '@data fixedWindowPosition' node in the\n    \\@settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n    **not** put such a node in the fixed .leo file itself--everyone who\n    opens the file would get that fixed position.\n\n    The body of the '@data fixedWindowPosition' node should contain\n    something like this::\n\n        # Must be four entries: width,height,left,top.\n        # Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n        1200\n        800\n        50\n        50\n\n- Added @bool cleo_color_ignore = True\n\n    This determines whether cleo colors @ignore headlines. The default is True.\n", "children": []}, {"h": "Leo 4.4.8", "gnx": "ekr.20080314081157.127", "b": "", "children": ["ekr.20080314081157.124", "ekr.20080314081157.128", "ekr.20080314081157.125"]}, {"h": "New features", "gnx": "ekr.20080314081157.124", "b": "- Better support for unicode in \\@auto trees.\n\n- All import commands now honor \\@path\n\n- Leo now supports arguments to minibuffer commands.\n\n- Leo can now translate messages sent to Leo's log. Rather than using an '_'\n  function to denote strings to be translated, Leo's g.es and g.es_print\n  functions translate \"odd\" (first, third, fifth) arguments, leaving \"even\"\n  arguments untranslated. Keyword arguments, color, newline, etc. are never\n  translated. g.translateString does the actual translation using\n  `Python's gettext`_ module.\n\n- \\@menu items may not refer to commands created by @button and @command nodes.\n", "children": []}, {"h": "New and improved plugins", "gnx": "ekr.20080314081157.128", "b": "- The ipython plugin creates a simple, powerful, effective bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\n- Improved marks/recent buttons plugin.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080314081157.125", "b": "- Added support for @commands trees in leoSettings files.\n\n- Added support for @bool open_with_save_on_update setting. If True, Leo will\n  automatically save the outline whenever an external editor changes the\n  outline.\n", "children": []}, {"h": "Leo 4.4.6", "gnx": "ekr.20071217093444", "b": "", "children": ["ekr.20071217093444.5", "ekr.20080116071239", "ekr.20071217093444.6"]}, {"h": "New commands", "gnx": "ekr.20071217093444.5", "b": "::\n\n    find-next-clone\n    toggle-sparse-move\n\nReplaced the delete-all-icons command with a script in scripts.leo.  This command was too dangerous.\n", "children": []}, {"h": "New features", "gnx": "ekr.20080116071239", "b": "- Added support for @auto xml and @auto javascript.\n  Use @data import_xml_tags setting to specify the xml tags that act as organizers.\n  Javascript regexps that look like section references cause problems, but that can not be helped.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20071217093444.6", "b": "- Added support for @data nodes in settings files.\n\n- The @data import_xml_tags setting specifies the xml tags that act as organizers.\n  This settings is used by @auto when importing xml files.\n", "children": []}, {"h": "Leo 4.4.5", "gnx": "ekr.20071116062917", "b": "", "children": ["ekr.20071116063202", "ekr.20071116062917.3", "ekr.20071116062917.18", "ekr.20071116063649"]}, {"h": "Bug fixed", "gnx": "ekr.20071116063202", "b": ".. _`zombie`: http://sourceforge.net/forum/message.php?msg_id=3768494\n\n.. _`vampire`: http://sourceforge.net/forum/message.php?msg_id=3525277\n\n- Fixed hung (`zombie`_) windows.\n\n- Fixed resurrected (`vampire`_) nodes.\n", "children": []}, {"h": "New features", "gnx": "ekr.20071116062917.3", "b": "- Leo now supports all directives in headlines.\n\n- Moved all unit tests to unitTest.leo and reorganized the unit tests by Leo source file.\n\n- Installed small icon set from Tango library.\n\n- The rst3 plugin now supports @rst-preformat nodes.\n", "children": []}, {"h": "New commands", "gnx": "ekr.20071116062917.18", "b": "::\n\n    delete-all-icons\n    delete-first-icon\n    delete-last-icon\n    delete-node-icons\n    insert-icon\n    reverse-sort-lines\n    reverse-sort-lines-ignoring-case.\n    sort-lines-ignoring-case\n    toggle-collapse_nodes_during_finds\n", "children": []}, {"h": "New settings", "gnx": "ekr.20071116063649", "b": "- @bool at_auto_warns_about_leading_whitespace\n\n  This option has effect only when importing so-called non-strict languages, for\n  which leading whitespace is not terribly significant.\n\n- @bool warn_when_plugins_fail_to_load\n\n  There is also an @bool trace_plugins setting.\n\n- @bool vim_plugin_opens_url_nodes\n\n  vim.py does not open url nodes if this setting is False.\n", "children": []}, {"h": "Leo 4.4.4", "gnx": "ekr.20070809145744", "b": "Leo 4.4.4 contains many important features originally planned for later releases.\nThe highlights of Leo 4.4.4:\n\n- **The Great Graph Aha**:\n  A Leo outline doesn't have to *be* an arbitrary graph in order to *represent* an arbitrary graph.\n\n  That is, simple scripts allow Leo outlines to represent arbitrary\n  directed graphs. There is no need for a separate 'graph world'. The graphed.py\n  plugin is a direct result of this Aha. It allows you to create general graphs\n  from Leo outlines.\n\n- Support for **@auto nodes**.  Such nodes allow people to collaborate using Leo\n  without inserting Leo sentinels in the files Leo generates.\n\n- **@menus trees** in settings files create all of Leo's menus.  It is now dead\n  easy to make Leo's menus look the way you want.\n\n- **@buttons trees** in settings files create common @button nodes created in all\n  Leo outlines.\n\n- A new, faster, **colorizer plugin** replaces the __jEdit_colorizer__ plugin.\n\n- New commands for **resolving cvs conflicts**.\n\n- Leo's core is now compatible with jython.\n", "children": ["ekr.20071004103659", "ekr.20070806090226.15", "ekr.20070920092716", "ekr.20070809145744.5", "ekr.20070809145744.6", "ekr.20071005100213", "ekr.20071026180804", "ekr.20070809145744.7", "ekr.20070809145744.4"]}, {"h": "The Great Graph Aha", "gnx": "ekr.20071004103659", "b": "The Great Graph Aha is:\n\nA Leo outline doesn't have to *be* an arbitrary graph in order to *represent* an arbitrary graph.\n\nSo the graph world is unnecessary because we can use Leo nodes and trees as data\nto other graphing packages.** That is, Python scripts can build arbitrary graphs\nusing Leo's existing nodes and trees. And Python scripts can manipulate those\ngraphs. And Python scripts could do the reverse: manipulate the Leo outline by\ntraversing general graphs. So there is no need to complicate Leo's fundamental\ndata structures. Hurray! Instead, we build on the strengths of already existing\ngraphing packages.\n\nThe Great Graph Aha created the opportunity for immediate action:\n\n1. test.leo contains the essential scripts to implement graphs in Leo files.\n   These short, simple, self-contained, easily modifiable scripts make possible\n   everything ever envisaged by the (now-defunct) graph world project::\n\n    leo2graph: convert a normal Leo tree to a NetworkX graph. \n    at-graph2graph: convert an @graph tree to a NetworkX graph. \n    at-networkx2graph: convert an @networkx tree to a NetworkX graph \n    at-networkx2at-graph: create an @graph tree from an @networkx tree.\n\n2. The graphed plugin allows users to manipulate parts of Leo outlines as if\nthey were general graphs. It is still early days for this exciting plugin.\n", "children": []}, {"h": "Added support for @auto files", "gnx": "ekr.20070806090226.15", "b": "", "children": ["ekr.20070806095535.1", "ekr.20070809141529", "ekr.20070806101412", "ekr.20070806100055"]}, {"h": "What @auto does", "gnx": "ekr.20070806095535.1", "b": "@auto trees allows people to use Leo in collaborative environments without using\nsentinels in the files Leo generates. In contrast to @nosent, @auto trees can\nchange when the corresponding file changes outside of Leo.\n\nLeo will automatically recreate (import) all @auto trees when reading a .leo\nfile, and will write all dirty @auto trees when saving a .leo file. There are\ntwo exceptions to this statement:\n\n1. Leo will never read (import) or write an @auto tree if\nthe root @auto tree is under the influence of an @ignore directive.\n\n2. Saving a .leo file does not save @auto nodes if a) they haven't been changed\nor b) they do not contain a **significant** amount of information. An @auto tree\ncontains a significant amount of information if it has  children or if the\nroot node contains more than 10 characters.\n\nLeo creates @auto trees by parsing the corresponding external file. Parsers\ncreate descendant nodes of the @auto tree: one node for each class, method and\nfunction in the external file.\n\nParsers presently exist for C, elisp, Java, Pascal, PHP and Python. Leo\ndetermines the language using the file's extension. If no parser exists for a\nlanguage, the entire body of an @auto tree contains a significant amount of\ninformation if it has any children or if the root node contains more than 10\nnon-blank lines. the external file is copied to the body of the @auto node.\n\nLeo does not write the contents of @auto trees to .leo files. In this respect,\n@auto trees work much like @file trees. @auto trees whose root node is under the\nscope of an @ignore directive *will* be written to the .leo, just like @file\ntrees.\n", "children": []}, {"h": "Perfect import checks", "gnx": "ekr.20070809141529", "b": "Leo performs several checks to ensure that the result of importing an external\nfile will be equivalent to the file that writing the @auto tree would produce.\n\nThese checks can produces **errors** or **warnings**. Errors indicate a\npotentially serious problem. Leo inserts an @ignore directive in the @auto tree\nif any error is found. This @ignore directive prevents the @auto tree from\nmodifying the external file. If you @ignore directive, a later write of the\n@auto tree will attempt to fix the problems that gave rise to the errors. There\nare no guarantees however.\n\n**Strict languages** are languages like Python for which leading whitespace is\nespecially significant. Before importing a file for a strict language, Leo\n**regularizes** the leading whitespace of all lines of the original source file.\nThat is, Leo converts blanks to tabs or tabs to blanks depending on the value of\nthe @tabwidth directive in effect for the @auto node. Leo cannot guarantee to\nreproduce the original source file exactly if problems are discovered while\nregularizing leading whitespace.\n\nAfter importing a file, Leo verifies that writing the @auto node would create\nthe same file as the original file. For strict languages, the comparison must be\nexact, or nearly so. For non-strict languages, differences in leading whitespace\ngenerate warnings, not errors.\n\nFile comparison mismatches can arise for several reasons:\n\n1. Bugs in the import parsers. Please report any suspected bugs immediately.\n\n2. Underindented lines in classes, methods or functions in strict languages. An\n   **underindented line** is a line that is indented less then the starting line\n   of the class, method or function in which it appears. Leo outlines can not\n   represent such lines exactly: every line of node implicitly has at least the\n   indentation of any unindented line of the node.\n\nLeo will issue a warning (not an error) for underindented Python comment lines.\nSuch lines can not change the meaning of Python programs.\n", "children": []}, {"h": "Commands related to @auto", "gnx": "ekr.20070806101412", "b": "Three new commands in the File:Read/Write menu allow you to manually read and\nwrite @auto nodes from the presently selected outline. As always, an @ignore\ndirective in the @auto node or its ancestors will suppress any of these\ncommands:\n\n- The Read @auto Nodes (read-at-auto-nodes) command reads all @auto nodes in the\n  presently selected outline. An @ignore directive will suppress this import.\n\n- The Write @auto Nodes (write-at-auto-nodes) command writes all @auto nodes. An\n  @ignore directive will suppress this import. Caution: the write will occur even\n  if Leo has not previously read the @auto node.\n\n- The Write Dirty @auto Nodes (write-dirty-at-auto-nodes) is the same as the\n  write-at-auto-nodes command, except that only changed @auto trees are written.\n\nMost users will rarely use these explicit commands, because reading and writing\n.leo files handles @auto nodes well enough. However, you can use the\nread-at-auto-nodes command to update @auto nodes without having to reload the\n.leo file.\n", "children": []}, {"h": "Extending the code: adding new parsers", "gnx": "ekr.20070806100055", "b": "All present parsers are short overrides of a powerful base parser class. Thus,\nit would be simple to add support for other languages. See the node::\n\n    @file leoImport.py-->Import-->Scanners for createOutline\n\nin leoPy.leo to see how easy it is to create new parsers.\n\n", "children": []}, {"h": "New commands for resolving cvs conflicts", "gnx": "ekr.20070920092716", "b": "The so-called resolve-cvs-conflict project has resolved itself into small,\neasily understood commands.\n\nThe **read-file-into-node** command prompts for a filename, and creates an node\nwhose headline is @read-file-into-node <filename> and whose body text is the\nentire contents of the file.\n\nThe **write-file-from-node** command writes the body text of the selected not to a file.\nIf the headline of the presently selected node starts with @read-file-into-node\nthe command use the filename that follows in the headline. Otherwise, the\ncommand prompts for a filename.\n\nWhen a cvs conflict occurs, the user will:\n\n- read the file into a node using the read-file-into-node command,\n\n- fix the conflict, as with any other editor, and\n\n- write the file with the write-file-from-node command.\n\nAny file can be fixed in this way, including external files and .leo files. The\nonly complication is that the user must not change sentinel lines. Two new\ncommands check the contents of a node: The **check-derived-file** and\n**check-leo-file** commands tell whether a trial read of the presently selected\nnode can be done successfully. The check-derived-file command assumes the body\ntext is a external file; the check-leo-file command assumes the body text is an\nentire .leo file.\n\nThe **compare-leo-outlines** command prompts for another (presumably similar)\n.leo file that will be compared with the presently selected outline file (main\nwindow). It then creates clones of all inserted, deleted and changed nodes.\n", "children": []}, {"h": "New kinds of settings trees", "gnx": "ekr.20070809145744.5", "b": "", "children": ["ekr.20071001122703", "ekr.20071004110818"]}, {"h": "@buttons trees", "gnx": "ekr.20071001122703", "b": "All @buttons tree in a settings file defines global buttons that are created in\nthe icon area of all .leo files. You define @button nodes in the @buttons tree\nas usual.\n", "children": []}, {"h": "@menus trees", "gnx": "ekr.20071004110818", "b": "Leo creates its menus from the @menu and @item nodes in the @menus tree. Within\n@menus trees, @menu nodes create menus and @item nodes create menu items.\n\nThe menu name always follows @menu. If the menu name is 'Plugins', Leo will\ncreate the Plugins menu and populate the menu by calling the\n'create-optional-menus' hook. This creates the Plugins menu as usual. Nested\n@menu nodes define submenus.\n\nThe command name follows @item. If the body text of an @item node exists, this\nbody text is the menu name. Otherwise, the menu name is the command name.\nHowever, if the command name starts with a '*', hyphens are removed from the\nmenu name. Menu names and command names may contain a single ampersand (&). If\npresent, the following character is underlined in the name. If the command name\nin an @item node is just a hyphen (-), the item represents a menu separator.\n", "children": []}, {"h": "New plugins", "gnx": "ekr.20070809145744.6", "b": "- The graphed plugin allows users to manipulate parts of Leo outlines as if they\n  were general graphs. It is still early days for this exciting plugin.\n\n- The threading_colorizer plugin replaces the __jEdit_colorizer__ plugin. This\n  plugin features an elegant new algorithm that has much better performance and\n  eliminates almost all flash.\n", "children": []}, {"h": "Leo's core is now compatible with jython", "gnx": "ekr.20071005100213", "b": "Essentially all of Leo's startup code now runs with jython 2.2 and the (unfinished!) swing gui.\n", "children": []}, {"h": "Improved prototype for icons in headlines", "gnx": "ekr.20071026180804", "b": "The prototype in test.leo now will use PIL (Python Imaging Library) if\navailable, so many more kinds of icons can be used. Buttons now exist to add\nicons to do the following:\n\n- Add any icon to any node.\n- Delete all icons from a single node or the entire tree.\n- Print the icon files associated with a node.\n- Print the sizes of icons in a directory.\n\nFixed a bug in the icon handling in the outline widget that caused\nduplicate icons not to be drawn properly.\n", "children": []}, {"h": "Minor improvements", "gnx": "ekr.20070809145744.7", "b": "- See the release notes for a list of bugs fixed in Leo 4.4.4.\n\n- Added the 'clear-all-marks' hook.\n\n- Added button font setting. See the node::\n\n    \"@settings-->Fonts-->@font button font\" in leoSettings.leo.\n\n- Plugins and scripts may call the c.frame.canvas.createCanvas method to create a\n  log tab containing a Tk.Canvas widget. Here is an example script::\n\n    log = c.frame.log ; tag = 'my-canvas'\n    w = log.canvasDict.get(tag)\n    if not w:\n        w = log.createCanvas(tag)\n        w.configure(bg='yellow')\n    log.selectTab(tag)\n\n- Improved the yank and yank-pop commands and added @bool add_ws_to_kill_ring setting.\n\n- Improved the debug command: it now adds the following code to the beginning of debug scripts::\n\n    class G:\n        def es(s,c=None):\n          pass\n    g = G()\n\n- Added the @bool rst3 strip_at_file_prefixes setting.\n\n- Added the g.app.inBridge ivar.\n\n- Added @bool big_outline_pane setting. False (legacy): Top pane contains outline and log panes.\n  True: Top pane contains only the outline pane.  Bottom pane contains body and log panes.\n", "children": []}, {"h": "Summary of new commands", "gnx": "ekr.20070809145744.4", "b": "::\n\n    check-derived-file\n    check-leo-file\n    compare-leo-outlines\n    insert-child\n    read-at-auto-nodes\n    read-file-into-node\n    write-at-auto-nodes\n    write-dirty-at-auto-nodes\n    write-file-from-node\n", "children": []}, {"h": "Leo 4.4.3", "gnx": "ekr.20070513113903", "b": "The highlights of Leo 4.4.3:\n\n- @test and @suite nodes may now be embedded directly in external files.\n- Added support for chapters in Leo's core.\n- Added support for zipped .leo files.\n- The new leoBridge module allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Better support for the winpdb debugger.\n- Added support for @enabled-plugins and @open-with nodes in settings files.\n- Removed all gui-dependent code from Leo's core.\n- The__wx_gui plugin is now functional.\n", "children": []}, {"h": "Leo 4.4.2", "gnx": "ekr.20060928172457", "b": "", "children": ["ekr.20060929043325", "ekr.20061009111417.18", "ekr.20060928172457.4", "ekr.20060928172457.5", "ekr.20061009111417.11", "ekr.20060929043325.1"]}, {"h": "A major code reorg", "gnx": "ekr.20060929043325", "b": "Leo's vnode and tnode classes are now completely independent of the rest of Leo.\nSome api's have been changed.  This 'big reorg' and may affect scripts and plugins.\n", "children": []}, {"h": "New commands", "gnx": "ekr.20061009111417.18", "b": "::\n\n    extend-to-line\n    extend-to-paragraph\n    extend-to-sentence\n    forward-end-word\n    forward-end-word-extend-selection\n", "children": []}, {"h": "New features", "gnx": "ekr.20060928172457.4", "b": "- Added support for controlling Leo from Emacs_ with pymacs_.\n  See the `Leo and Emacs`_ chapter for full details.\n- Added Minibuffer and Settings submenus of the Cmds menu.\n- At long last Leo creates a proper help menu on the Mac.\n- Added a new convention for menu tables. If the first item (a string\n  representing the menu label) starts with '*' Leo will convert hyphens to\n  spaces and upcase the label. This convention allows a single string to\n  represent both the menu label and its associated minibuffer command. As part\n  of this reorganization, all menu tables in Leo's core now use only strings.\n  This is an essential precondition to supporting @menu nodes in\n  leoSettings.leo.\n- Leo's Help menu now contains the Open scripts.leo command.\n- Leo uses ctypes to import Aspell when run from Python 2.5 or later.\n  Leo no longer needs Python-specific versions of aspell.dll.\n- Added support for x-windows middle-button paste.\n  This only works when the paste is made in the pane containing the selected text.\n- Leo looks for myLeoSettings.leo files in the same place Leo looks for leoSettings.leo files.\n- Created three scripts (in test.leo) that help create unit tests for Leo's edit commands.\n  Create Created runEditCommandTest for use by these scripts.\n- Improved print-bindings command.\n  The bindings are sorted by prefix: this is a big help in understanding bindings.\n  For each prefix, first print items with only a single character after the prefix.\n- Made writing .leo files faster.\n  The new code almost exactly twice as fast as the old.\n- Added p.archivedPosition.\n  This is a key first step towards Leap 204.\n- Integrated sax with read logic.\n- You can now store settings in myLeoSettings.leo without fear of those settings\n  being changed by cvs updates or in future versions of Leo.\n- Eliminated unnecessary redraws when moving the cursor in the outline pane.\n- Much faster navigation through the outline using Alt-arrow keys.\n- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.\n- The find command now closes nodes not needed to show the node containing the present match.\n- Numerous changes that make Leo easier to use without using a mouse.\n- Many new minibuffer commands now appear in the Cmds menu.\n\nFurther improved outline navigation:\n\n- Generalized navigation in outline pane to ignore @file, @thin, etc prefixes.\n- Made outline navigation cumulative.\n  When keystrokes in the outline pane are typed 'close' together Leo first tries to look\n  for prefix + ch, where ch is the character just typed and prefix is the previous match.\n  The term 'close together' is specified by the setting @float outline_nav_extend_delay.\n  The outline search revers to a single-character if the extended search\n  fails, so in fact the delay is not too significant. In practice everything works\n  well without me thinking at all about what is happening.\n", "children": []}, {"h": "New and improved plugins", "gnx": "ekr.20060928172457.5", "b": "- Improved the mod_scripting plugin. Every button created by the plugin creates\n  a corresponding command. The command name is the 'cleaned' version of the\n  button name. Likewise, the plugin also creates a delete-x-button command,\n  where x is the command name as just discussed. So now you can delete script\n  buttons without right-clicking.\n- Made 'About Plugin' dialog scrollable.\n- Fixed bugs in groupoperations, multifile, nodenavigator and shortcut_button plugins.\n- The rst3 plugin now registers the rst3-process-tree command.\n- The leoOPML.py plugin defines commands to read and write OPML files.\n- The slideshow.py plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.\n- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.\n- The paste_as_headlines.py plugins creates multiple headlines at once.\n- The word_count.py plugin.\n\nImproved the mod_scripting plugin:\n\n- Made showing the Run Script button optional.\n- The Script Button button now creates the press-script-button-button command.\n- A new utility method does a much better job of massaging button and command names.\n", "children": []}, {"h": "Settings", "gnx": "ekr.20061009111417.11", "b": "- Removed .leoRecentFiles.txt from the distribution and cvs and added @bool\n  write_recent_files_as_needed. The presence or absence of .leoRecentFiles.txt\n  no longer controls whether Leo creates and updates .leoRecentFiles.txt.\n- Added @bool insert_new_nodes_at_end.\n- Added @bool select_all_text_when_editing_headlines.\n  Creating a new node always selects the entire text, regardless of this option.\n- Leo looks for myLeoSettings.leo files in the same place Leo looks for leoSettings.leo files.\n- Added settings for all mod_scripting switches.\n- Added @bool collapse_nodes_during_finds.\n  This greatly speeds searches that used to open many nodes.\n  See: http://sourceforge.net/forum/message.php?msg_id=3935780\n- Added @bool outline_pane_has_initial_focus.\n- Added @bool sparse_move_outline_left.\n- Added bindings for Alt-Shift-Arrow keys to force an outline move.\n- Added @bool use_sax_based_read = False.\n  True:  Use a sax-based parser to read .leo files.\n  This is slower than using Leo's legacy xml parser, but may solve some unicode problems.\n\nChanged default settings::\n\n    focus-to-body = Alt-D\n    focus-to-tree = Alt-T\n    toggle-extend-mode = Alt-3\n", "children": []}, {"h": "ZODB scripting", "gnx": "ekr.20060929043325.1", "b": "Leo's vnode and tnode classes can optionally be compatible with ZODB databases,\ni.e., they can optionally derive from ZODB.Persistence.Persistent.\nSee Chapter 17: Using ZODB with Leo for details.\n", "children": []}, {"h": "Leo 4.4.1", "gnx": "ekr.20060620094033.1", "b": "The main features of Leo 4.4.1 are:\n\n- Multiple editors in Leo's body pane and\n- A new colorizer plugin controlled by jEdit language description files.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help and toggle-invisibles.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n", "children": ["ekr.20060620130636", "ekr.20060620095949.15", "ekr.20060620130943", "ekr.20060620095949.25", "ekr.20070622212732", "ekr.20060620095655"]}, {"h": "New commands", "gnx": "ekr.20060620130636", "b": "::\n\n    cycle-focus\n    debug\n    find-character\n    find-word\n    hide-invisibles \n    isearch-with-present-options\n    open-users-guide\n    python-help\n    run-unit-test\n    toggle-autocompleter\n    toggle-calltips\n    toggle-invisibles\n", "children": []}, {"h": "New features", "gnx": "ekr.20060620095949.15", "b": "- Removed warning about changed node.\n- Added scroll-outline-left/right commands.\n- Leo outputs decorators correctly, assuming the decorator does not conflict with a Leo directive.\n- Wrote script to convert g.es to g.et where appropriate.\n  The first step in translating all Leo messages.\n- Leo highlights (flashes) matching brackets when typing typing (, ), [, ], { or }.\n- Fixed long-standing problem reporting indentation errors.\n- Fixed long-standing bug in Remove Sentinels command.\n- Fixed long-standing bugs in import commands.\n- The scroll-up/down commands now scroll the outline if focus is in outline pane.\n  However, his can be done better using per-pane bindings as in the default leoSettings.leo.\n- Incremental searches are (properly) confined to a single body text.\n- Backspace now handled properly in incremental searches.\n- The add-editor command adds a new editor in the body pane.\n  The delete-editor command deletes the presently selected editor,\n  and the cycle-editor-focus command cycles focus between editors in the body text.\n- The standard \\1, \\2, etc. replacements can now be performed in regular expression searches.\n- The standard escapes \\n and \\t are now valid in plain searches.\n- The shortcut for the replace-string command now changes from the find command\n  to the replace command.\n", "children": []}, {"h": "New and improved plugins", "gnx": "ekr.20060620130943", "b": "- The slideshow plugin\n- The mod_scripting plugin now creates a press-x-button command for every button 'x'.\n  You can specify settings for such commands using @shortcuts nodes.\n- The shortcut_button plugin plugin creates a 'Shortcut' button in the icon area.\n  Pressing the Shortcut button creates *another* button which when pressed\n  will select the presently selected node at the time the button was created.\n- Added Debug button to scripting plugin.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20060620095949.25", "b": "::\n\n    @bool autoindent_in_nocolor_mode\n    @bool flash_matching_brackets\n    @bool idle_redraw\n    @bool trace_bind_key_exceptions\n    @bool warn_about_redefined_shortcuts\n    @color flash_brackets_background_color\n    @color flash_brackets_foreground_color\n    @int flash-brackets-delay\n    @int flash_brackets_count\n    @string close_flash_brackets\n    @string open_flash_brackets\n    @string editor_orientation\n", "children": []}, {"h": "Improved settings", "gnx": "ekr.20070622212732", "b": "- Added @font menu font setting.\n- Added support for commands to be executed on entry to a mode.\n- Added support for bindings that are active only in command, enter and insert key states.\n- Added support for @abbrev nodes in leoSettings.leo.\n- Improved check bindings script in leoSettings.leo.\n- Allow @mode outside of leoSettings.leo.\n- Added warnings about the @bool expanded_click_area setting.\n", "children": []}, {"h": "Minor improvements", "gnx": "ekr.20060620095655", "b": "- The print-bindings command now properly sorts bindings.\n- The help-for-command command now works for almost all commands.\n- Improved filename completion.\n- Better listings for print-commands and print-bindings &amp; mode-help commands.\n- Allow shortcuts to be overridden outside of leoSettings.leo.\n- Finished Cmds menu.\n- Improved show-fonts command.\n- Strip quotes from color, font settings.\n- Warn about invalid Enter and Leave key bindings.\n", "children": []}, {"h": "Leo 4.4", "gnx": "ekr.20060620094033.2", "b": "The main features of Leo 4.4 are:\n\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\n  name, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\n  and paragraph manipulation, and commands to manipulate buffers, the kill ring,\n  regions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\n  Vim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\n  dialogs, making those commands much easier to use. Plugins or scripts can easily\n  create new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n  To enable autocompletion, bind a key to the auto-complete command.\n\n.. .. contents::\n", "children": ["ekr.20070622212132", "ekr.20060620133820.16", "ekr.20060620140130", "ekr.20060620140228"]}, {"h": "New commands", "gnx": "ekr.20070622212132", "b": "::\n\n    activate-cmds-menu\n    activate-edit-menu\n    activate-file-menu\n    activate-help-menu\n    activate-outline-menu\n    activate-plugins-menu\n    activate-window-menu\n    add-space-to-lines\n    add-tab-to-lines\n    clean-lines\n    clear-selected-text\n    click-click-box\n    click-headline\n    click-icon-box\n    clone-find-all\n    contract-and-go-right\n    contract-body-pane\n    contract-log-pane\n    contract-outline-pane\n    contract-pane\n    double-click-headline\n    double-click-icon-box\n    dump-all-objects\n    dump-new-objects\n    expand-body-pane\n    expand-log-pane\n    expand-outline-pane\n    expand-pane\n    find-again\n    find-all\n    find-tab-change\n    find-tab-change-all\n    find-tab-change-then-find\n    find-tab-find command\n    find-tab-find-previous\n    free-text-widgets\n    fully-expand-body-pane\n    fully-expand-log-pane\n    fully-expand-outline-pane\n    fully-expand-pane\n    goto-first-sibling\n    goto-global-line\n    goto-last-sibling\n    help\n    help-for-command\n    hide-body-pane\n    hide-find-tab\n    hide-log-pane\n    hide-minibuffer\n    hide-outline-pane\n    hide-pane,\n    open-find-tab\n    open-find-tab\n    open-outline-by-name (uses filename completion)\n    open-spell-tab\n    print-bindings\n    print-commands    re-search-backward\n    re-search-forward\n    remove-space-from-lines\n    remove-tab-from-lines\n    replace-string\n    scroll-down\n    scroll-down-extend-selection\n    scroll-outline-down-line\n    scroll-outline-down-page \n    scroll-outline-up-line\n    scroll-outline-up-page\n    scroll-up\n    scroll-up-extend-selection\n    search-backward\n    search-forward\n    search-with-present-options\n    set-find-everywhere\n    set-find-node-only\n    set-find-suboutline-only\n    show-colors\n    show-fonts\n    show-minibuffer\n    show-search-options\n    simulate-begin-drag\n    simulate-end-drag\n    toggle-find-ignore-case-option\n    toggle-find-in-body-option,\n    toggle-find-in-headline-option\n    toggle-find-mark-changes-option\n    toggle-find-mark-finds-option\n    toggle-find-regex-option\n    toggle-find-reverse-option\n    toggle-find-word-option and\n    toggle-find-wrap-around-option\n    toggle-mini-buffer\n    verbose-dump-objects\n    word-search-backward\n    word-search-forward\n", "children": []}, {"h": "New features", "gnx": "ekr.20060620133820.16", "b": "- Added script to update new copies of leoSetttings.leo from previous copies.\n- Made all edit command undoable.\n- Improved registerCommand.\n- Suppressed autocompletion after numbers.\n- Added colorizing support for Lua language.\n- Added run-unit-test command.\n- Autocompletion and calltips.\n- Leo remembers the previous open directory.\n- Fixed problem with view plugin.\n- Installed cleo patch.\n- User input modes.\n- Installed many standard bindings to leoSettings.leo.\n- Added Check Bindings script in leoSettings.leo.\n- Scripts now maintain original focus.\n- Improved cursor move/extend commands.\n- Added support for @mode nodes.\n- keyboard-quit restores default input mode.\n- Created ut.leo, ut.py and ut.bat.\n- Added modes/\\*.xml to distribution.\n- Revised cursor movement commands and added selection-extension commands.\n- Added classic key bindings in leoSettings.leo.\n- Allow multiple key bindings to the same command.\n- Settings command now opens leoSettings.leo.\n- Moved all scripts into scripts.leo.\n- Improved how the New Tab and Rename Tab commands work in the log pane.\n- Improved the appearance of the Spell tab.\n- Added Clone-find checkbox to the Find tab.\n- Improved find tab.\n- Improved formatting of shortcuts in print-commands and print-bindings.\n- Added settings for vim plugin.\n- Put up a dialog if can't import Pmw.\n- Bound <Return> to end-edit-headline.\n- Leo now ignores key bindings in menu tables.\n- Created scripts.leo and unitTest.leo.\n- c.executeMinibufferCommand executes a minibuffer command by name.\n- Improved perl entries in language dicts. \n- The tabbed log.\n- The Find tab replaces the old Find panel; the old Find panel is deprecated.\n", "children": []}, {"h": "New and improved plugins", "gnx": "ekr.20060620140130", "b": "- Changed path to stylesheet in the rst3 plugin.\n- Fixed crasher in Word (and other) plugins.\n- Fixed problem with labels plugin.\n- Added the following commands for the groupoperations plugin::\n\n    group-operations-clear-marked\n    group-operations-mark-for-copy\n    group-operations-mark-for-move\n    group-operations-mark-for-clone\n    group-operations-mark-target\n    group-operations-operate-on-marked\n    group-operations-transfer\n\n- Installed cleo patch.\n- The scripting plugin now supports shortcuts in @button nodes::\n\n    @button name @key=shortcut\n\n- The scripting plugin now supports @command nodes::\n\n    @command name @key=shortcut\n", "children": []}, {"h": "New and improved settings", "gnx": "ekr.20060620140228", "b": "Added new settings::\n\n    @bool allow_idle_time_hook\n    @bool autocomplete-brackets.\n    @bool gc_before_redraw\n    @bool minibufferSearchesShowFindTab\n    @bool show_only_find_tab_options\n    @bool show_tree_stats\n    @bool trace_autocompleter\n    @bool trace_bindings\n    @bool trace_doCommand\n    @bool trace_f.set_focus\n    @bool trace_focus\n    @bool trace_g.app.gui.set_focus\n    @bool trace_gc\n    @bool trace_gc_calls\n    @bool trace_gc_verbose\n    @bool trace_key_event\n    @bool trace_masterClickHandler\n    @bool trace_masterCommand\n    @bool trace_masterFocusHandler\n    @bool trace_masterKeyHandler\n    @bool trace_minibuffer\n    @bool trace_modes\n    @bool trace_redraw_now\n    @bool trace_select\n    @bool trace_status_line\n    @bool trace_tree\n    @bool trace_tree_alloc\n    @bool trace_tree_edit\n    @bool useCmdMenu\n    @bool useMinibuffer\n    @bool use_syntax_coloring\n    @color body_text_selection_background_color\n    @color body_text_selection_foreground_color.\n    @color log_pane_Find_tab_background_color\n    @color log_pane_Spell_tab_background_color, etc.\n    @int max_undo_stack_size,\n    @string trace_bindings_filter\n    @string trace_bindings_pane_filter\n\n- Added @shortcuts nodes.\n- Leo now supports per-pane bindings of the form::\n\n    command-name ! pane = shortcut\n\n- The spelling settings replace the settings in spellpyx.ini.\n", "children": []}, {"h": "Other pages", "gnx": "ekr.20111127144911.5545", "b": "", "children": ["ekr.20111127144911.5546"]}, {"h": "@file download.txt", "gnx": "ekr.20111127144911.5546", "b": "@language rest\n@tabwidth -4\n\n@ @rst-options\ncall_docutils=False\ncode_mode=False\ngenerate_rst=True\nhttp_server_support=False\nshow_organizer_nodes=True\nshow_headlines =True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file=True\nverbose=True\n@c\n\n@all\n", "children": ["ekr.20111127144911.5544", "ekr.20111214105555.14112"]}, {"h": "@rst html/download.html", "gnx": "ekr.20111127144911.5544", "b": "@language rest\n@pagewidth 75\n\n@ @rst-options\ncall_docutils=False\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\n@c\n\n################\nDownloading Leo\n################\n\n.. links\n\n.. _`latest stable release`: https://sourceforge.net/projects/leo/files/Leo/4.10%20final/\n.. _`SourceForge`: https://sourceforge.net\n.. _`Leo's snapshots page`:     http://www.greygreen.org/leo/\n.. _`nightly snapshot`:             http://www.greygreen.org/leo/\n.. _`Leo's latest sources`: https://code.launchpad.net/leo-editor/\n.. _`Launchpad`: https://code.launchpad.net/\n.. _`bzr`: http://bazaar.canonical.com/\n\nLeo's core code is always being improved and developed. Unit-testing\nensures that the daily commits are as bug-free as possible. Almost all of\nthe time, downloading the most recent `nightly snapshot`_ of the\ndevelopment code is going to give you code that is just as stable and much\nmore up-to-date than the most recent `latest stable release`_ which most\nLeonistas would consider already outdated.\n\nIf you are just checking Leo out, feel free to use the `latest stable release`_\ndownload if it makes you feel more secure, but once you've\ndecided to work with Leo on a regular basis, we highly recommend regularly\nkeeping your installation up to date with the most recent `nightly snapshot`_.\n\nTo summarize, you may get Leo in three ways:\n\n1. Download the `latest stable release`_ from `SourceForge`_. This release\n   contains an executable installer. This release will usually be a bit out of date.\n\n2. Download a `nightly snapshot`_ from `Leo's snapshots page`_. This page\n   contains .zip archives of Leo's code from 1, 2, 5, 10, 30 and 90 days\n   ago.\n   \n3. Download `Leo's latest sources`_ from `Launchpad`_ using `bzr`_.\n   Installing bzr is non-trivial, but once set up this is the easiest way\n   to get the latest version of Leo's code.\n", "children": []}, {"h": "@@@rst html/download.html", "gnx": "ekr.20111214105555.14112", "b": "@ @rst-options\ncall_docutils=False\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\n@c\n\n################\nDownloading Leo\n################\n\n.. links\n\n.. _`latest stable release (Leo 4.9)`: http://sourceforge.net/projects/leo/files/Leo/4.9-final/\n.. _`SourceForge`: https://sourceforge.net\n.. _`Leo's snapshots page`: http://www.greygreen.org/leo/\n.. _`Leo's latest sources`: https://code.launchpad.net/leo-editor/\n.. _`Launchpad`: https://code.launchpad.net/\n.. _`bzr`: http://bazaar.canonical.com/\n\n\nYou may get Leo in three ways:\n\n1. Download the `latest stable release (Leo 4.9)`_ from `SourceForge`_. This release\n   contains an executable installer.\n\n2. Download a daily snapshot from `Leo's snapshots page`_. This page contains\n   .zip archives of Leo's code from 1, 2, 5, 10, 30 and 90 days ago.\n   \n3. Download `Leo's latest sources`_ from `Launchpad`_ using `bzr`_. Installing bzr is\n   non-trivial, but once set up this is by far the easiest way to get the latest\n   version of Leo's code.\n", "children": []}, {"h": "Other docs", "gnx": "ekr.20090717084250.10702", "b": "", "children": ["ekr.20100805165051.7176"]}, {"h": "@file other_docs.txt", "gnx": "ekr.20100805165051.7176", "b": "@language rest\n@tabwidth -4\n@all\n", "children": ["ekr.20090711120622.10446", "ekr.20090526102407.10028", "ekr.20090401113141.1", "ekr.20091107093823.6790", "ekr.20101025080245.5542", "ekr.20101115152915.4937"]}, {"h": "Screen shots page", "gnx": "ekr.20090711120622.10446", "b": "@language rest\n", "children": ["ekr.20090711120622.10447"]}, {"h": "@rst html/screen-shots.html", "gnx": "ekr.20090711120622.10447", "b": "################\nLeo screen shots\n################\n\n", "children": ["ekr.20090811090022.14452", "ekr.20090811090022.14453"]}, {"h": "Windows screen shots", "gnx": "ekr.20090811090022.14452", "b": ".. |leoQtMainWindow|    image:: screen-shots/leo-main-window.png\n\nHere is Leo's main window on Windows 7 showing\nthe outline pane (1),\nthe body pane (2),\nthe minibuffer (3),\nthe log pane, showing the find tab (4).\n\nThe body pane shows the contents of the presently selected node in the outline pane.\n\n|leoQtMainWindow|\n\n.. _`reStructuredText`: http://docutils.sourceforge.net/rst.html\n\n.. |renderRST|      image:: screen-shots/render-rst.png\n.. |renderSVGref|   image:: screen-shots/render-svg-movie.png\n.. |renderSVGsrc|   image:: screen-shots/render-svg-sources.png\n.. |renderSplash|   image:: screen-shots/render-splash-screen.png\n\nThe following screenshots show Leo's rendering pane.  It can render `reStructuredText`_:\n\n|renderRST|\n\nThe rendering pane can render svg pictures, including animated pictures.  Here we see\nan .svg file included by reference:\n\n|renderSVGref|\n\nThe rendering pane can also render svg sources contained in the body pane:\n\n|renderSVGsrc|\n\nThe rendering pane can show pictures, music and movies.  Here we see Leo's splash screen:\n\n|renderSplash|\n", "children": []}, {"h": "Linux screen shots", "gnx": "ekr.20090811090022.14453", "b": ".. |LinuxMainWindow| image:: screen-shots/leo-qt-main-window-linux.png\n\nHere is Leo's main window as it appears on Linux:\n\n|LinuxMainWindow|\n", "children": []}, {"h": "Important notes about Leo's code", "gnx": "ekr.20090526102407.10028", "b": "", "children": ["ekr.20090526102407.10029", "ekr.20090526102407.10030"]}, {"h": "How to profile Leo", "gnx": "ekr.20090526102407.10029", "b": "To gather statistics, do the following in a console window, not idle::\n\n    > python\n    >>> import leo\n    >>> import leo.core.runLeo as r\n    >>> r.prof()  (this runs leo)\n    load any .leo file from Leo\n    quit Leo\n\nIntermediate data is written to cwd.leoProfile.txt.\nThe statistics are written to stdout.\n", "children": []}, {"h": "High-level code notes", "gnx": "ekr.20090526102407.10030", "b": "I've often said that I don't remember many details about Leo. This documentation\ndescribes what I *do* remember about Leo's various modules. I hope this will be\nuseful to potential readers, users and modifiers of Leo's code.\n\nIn general, if you want to understand the code, read through it quickly, looking\nfor pieces of code that are unexpected complex, or unexpectedly simple. Forget\nthe details; remember the shape. Once you have the general shape in mind, you\nare ready to modify the code. No kidding. Besides, more reading won't help :-)\n", "children": ["ekr.20090526102407.10031", "ekr.20090526102407.10032"]}, {"h": "leoFileCommands.py and leoAtFile.py", "gnx": "ekr.20090526102407.10031", "b": "In general, write code is much simpler than read code,\nbecause reading requires parsing. There are a few exceptions below.\n\nleoFileCommands.py contains the code that reads and writes .leo files.\n\n- This file uses the sax parser to parse the xml in .leo files.\n- Complex code, driven by sax, turns sax nodes into Leo nodes.\n- The putVnode method is \"interesting\".  Take a look.\n  In the past, there have been significant, surprising bottlenecks in\n  putVnode and maybe putTnode as well.  No longer.\n\nleoAtFileCommands.py contains the code that reads and writes external files.\n\n- There are options to read and write strings.\n  These are useful for performance and for unit testing.\n- atFile.replaceTargetFileIfDifferent is an important optimization.\n- There are a lot of read/write commands for external files,\n  and this results in lots of options being passed around.\n\nIniting is tricky for both leoFileCommands.py and leoAtFileCommands.py.\n\n- The bizarre call to initReadIvars() at the end of getLeoFile is one\n  symptom of the difficulties.\n- Never change init code without careful thought and unit testing.\n", "children": []}, {"h": "Leo's MVC architecture", "gnx": "ekr.20090526102407.10032", "b": "I. Background\n\nLeo has had a robust MVC (Model,View,Controller) architecture from day one.\n\nLeo's model are the classes in leoNodes.py. They are completely independent from\nthe rest of Leo. Many parts of Leo *use* these classes, but not vice versa!\n\nLeo's controller is everything else in 'Code-->Core classes'. This code has *no*\ndirect dependencies on Leo's gui code, as will be explained next.\n\nLeo's view has two parts:\n\n1. The classes in the tree 'Code-->Gui Base classes'.\n   These are part of Leo's core.\n\n2. The classes in Leo's Qt gui, in qtGui.py.\n\nLeo's core consists of the Model, Controller and the gui base classes.\n\nII. Why Leo's core is gui-independent\n\nLeo uses a completely standard way of separating gui-dependent code from\ngui-independent code. Base gui classes (part 1 of the view) define an interface\nused by Leo's core. Subclasses (part 2 of the view) implement the interface for\na particular gui.\n\n** Subclasses can change without affecting Leo's code in any way.**\n\nThe essential design rule is: if gui-related code can be made gui- independent,\nit should be part of a base class. Otherwise it must be part of a subclass of a\nbase gui class.\n\nThe gui base classes are far more than do-nothing interfaces. Examples of\ncomplex code that reside in base classes:\n\nA. tree.select. I am proud that this method is gui-independent. Switching nodes\nis a very tricky business. Making it gui-independent is a big win.\n\nB. leoFind.py. Finds the next/previous matches, and dealing with an \"idealized\"\nfind tab. Adapter classes exist in leoEditCommands.py.\n\nC. Autocompletion and minibuffer code in leoKeys.py.\n\nD. A generalized, gui-independent interface to Leo's body pane. The commands in\nleoEditCommands.py (part of the controller) use this interface (baseTextWidget)\nrather than using gui widgets directly.\n\n**If you want to understand Leo's design, study Leo's base gui classes.**\n", "children": []}, {"h": "How to generate odt/rtf/pdf files", "gnx": "ekr.20090401113141.1", "b": "To generate .odt or .rtf or .pdf files, you create an intermediate file and\nignore the the \"official\" output file, in this case test.html. The intermediate\nfile contains the rST text corresponding to the @rst tree.\n\nTo tell the rst3 plugin to generate an intermediate file, do::\n\n    write_intermediate_file = True\n\nAfter you create the intermediate file, in this case, test.html.txt,\nYou can create an odt file as follows::\n\n    python <path-to-python>/scripts/rst2odt.py test.html.txt test.odt\n\nI a batch file, rst2odt.bat, like this:\n\n    rst2odt test\n\nNote that rst3odt.py is in the tools directory of the DocUtils distribution.\n\nTo generate .rtf, you can use PanDoc to convert test.html.txt to RTF.\n\nTo generate .pdf files, you would first convert test.html.txt to LaTeX::\n\n    python rst2newlatex.py test.html.txt test.tex\n\n    -- OR --\n\n    cd leo\\docs\\html\n    make latex\n\nYou can then use one of the LaTeX to .pdf converters to create the final .pdf\nfile. See http://docutils.sourceforge.net/docs/user/latex.html#pdf-generation\nfor details.\n", "children": ["ekr.20090620131445.5595", "ekr.20090401113141.2"]}, {"h": "Post from ville", "gnx": "ekr.20090620131445.5595", "b": "I just tweaked conf.py a bit to enable pdf generation.\n\nHowto:\n\nQQQ\n\n4. To create pdf (probably easiest on Linux, with necessary latex\npackages installed):\n\n- make latex\n- cd _build/latex\n- make all-pdf\n\nQQQ\n\nThere were several errors in the pdf generation process. Notably,\nthere are probably lots of unicode errors (and toc doesn't appear).\nNevertheless, you can steal a peek at the doc here:\n\nhttp://vvtools.googlecode.com/files/Leodocumentation.pdf \n", "children": []}, {"h": "@rst c:\\prog\\test\\test.html", "gnx": "ekr.20090401113141.2", "b": "@ @rst-options\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = True\nverbose=True\n@c\n\n====\nTest\n====\n\nThis is a test.\n", "children": ["ekr.20090401113141.4"]}, {"h": "section 1", "gnx": "ekr.20090401113141.4", "b": "This is section 1\n", "children": []}, {"h": "Leo Tech report", "gnx": "ekr.20091107093823.6790", "b": "This is the rST version of the Tech Report handed out at EuroPython in 2005.\n\n**Important**: Leo's tutorial is now a clearer explanation of the basics.\nThis tech report should be rewritten.\n\n@nocolor\n@tabwidth -4\n", "children": ["ekr.20091107093823.6791"]}, {"h": "@rst html\\techReport.html", "gnx": "ekr.20091107093823.6791", "b": "@ @rst-options\ncode_mode=False\ngenerate_rst=True\nhttp_server_support = False\nshow_organizer_nodes=True\nshow_headlines=True\nshow_leo_directives=True\nstylesheet_path=..\\doc\nwrite_intermediate_file = False\nverbose=True\n@c\n\n##########################################\nThe Essentials of Leo\n##########################################\n\n.. contents::\n", "children": ["ekr.20091107093823.6792"]}, {"h": "Old", "gnx": "ekr.20091107093823.6792", "b": "", "children": ["ekr.20091107093823.6793", "ekr.20091107093823.6794", "ekr.20091107093823.6795", "ekr.20091107093823.6796", "ekr.20091107093823.6797", "ekr.20091107093823.6798", "ekr.20091107093823.6799", "ekr.20091107093823.6800", "ekr.20091107093823.6801", "ekr.20091107093823.6802", "ekr.20091107093823.6803", "ekr.20091107093823.6804", "ekr.20091107093823.6805", "ekr.20091107093823.6806", "ekr.20091107093823.6807"]}, {"h": "Leo\u2019s window, outlines & clones", "gnx": "ekr.20091107093823.6793", "b": "Leo organizes all data into nodes containing a **headline**, an expandable page of\n**body text** and a (possibly empty) subtree of **descendant nodes**. The **contents** of a\nnode are its headline and body text. Leo\u2019s main window contains an **outline** pane\nat the top left, a **log pane** at the top right, and a **body pane** at the bottom. The\noutline pane shows headlines; the body pane shows the body text of the selected\nheadline. The log pane displays messages from Leo.\n\nSmall red arrows mark **cloned nodes** (clones). Clones share the same content and\ndescendants. All clones of the same node are equivalent, so changing the\ncontents of one node (call it node N) changes the contents of all clones of N.\nFurthermore, inserting, deleting or changing any descendant of node N causes the\ncorresponding insertion, deletion or change in all other clones of N.\n", "children": []}, {"h": "Relations: organizer nodes, views, tasks and metadata", "gnx": "ekr.20091107093823.6794", "b": "Clones allow you to organize data in multiple ways within the same outline. You\ndo not have to choose a single \u2018correct\u2019 organization: you can organize your\ndata in as many ways as you like.\n\nYou can use **organizer nodes** to create explicit relations (relationships) among\nthe data in your outline. The headline of the organizer node is the\nrelationship\u2019s name. Now make clones of nodes from other parts of the outline\nthat participate in the relation. Drag the newly created clones so they become\nchildren of the organizer node. You may want to create other (non-cloned)\nchildren of the organizer node that contain data found nowhere else in the\noutline. Voil\u00e0: you have just created the set of all nodes that pertain to the\nrelationship. The organizer node is the relation; the terms relation,\nrelationship and organizer node are interchangeable.\n\nThree kinds of relations deserve special mention. A **view** is a relation (an\norganizer node) containing all nodes related to a desired view (or slice) of the\ndata in the outline. Similarly, a **task** is an organizer node containing all nodes\nrelated to a task. Relations are not limited to tasks or views: the notion of\nrelationship is completely general. Headlines naturally describe the data in\nbody text. That is, nodes relate **metadata** (descriptions of data) to data.\nSeparating data from metadata is useful for humans. It is even more valuable for\nscripts: scripts can access data and metadata without complex parsing.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20091107093823.6795", "b": "Plugins are Python (.py) files contained in Leo\u2019s plugins folder. Users can\nwrite plugins to change how Leo works and to add new features without changing\nLeo\u2019s core code. We\u2019ll discuss plugins in more detail later.\n", "children": []}, {"h": "Derived files and special nodes", "gnx": "ekr.20091107093823.6796", "b": "Leo can generate many external files called **derived files** from an outline. Leo\noutlines can organize files throughout your computer\u2019s file system. Nodes whose\nheadlines start with \u2018@\u2019 are special nodes. Several **special nodes** indicate the\nroot of a tree that generates a derived file::\n\n    @asis filename    Creates a derived file. Ignores all markup in body text.\n    @file filename    Creates a derived file. External files contain all outline structure.\n    @nosent filename  Creates a derived file without sentinels.\n\nLeo recognizes several other special nodes::\n\n    @settings   Defines settings local to the .leo file.\n    @url url    Double-clicking the node\u2019s icon opens the url in Leo or in a browser.\n\nThe scripting plugin scans for the following nodes when opening an outline::\n\n    @button         Creates a button in the **icon area** at the top of the Leo window.\n    @plugin plugin  Enables a plugin if the plugin has not already been enabled.\n    @script         Executes a script when opening the outline. This is a security risk: it is disabled by default.\n\nPlugins, @button nodes and @script nodes can create other kinds of special nodes::\n\n    @suite       Creates a suite of unit tests from script in body. Requires scripting plugin.\n    @test        Creates a unit text from script in body. Requires scripting plugin.\n    @rst         Outputs a tree containing markup for reStructuredText. Requires rst2 plugin.\n    @run command Double clicking the node\u2019s icon executes the command.  Requires run_nodes plugin.\n", "children": []}, {"h": "Markup for scripts", "gnx": "ekr.20091107093823.6797", "b": "Leo\u2019s Execute Script command **preprocesses** the script to be executed by scanning\na node N and its descendants looking for markup. **Markup** is special syntax that\ncontrols this preprocessing. If node N contains no markup, the resulting script\nis just N\u2019s body text. Otherwise, the preprocessed script will include text from\ndescendant nodes as described below. The main kinds of markup are **section\nreferences**, **directives** and **doc parts**.\n\n1.  **Section references** have the form::\n\n        <<section name>>\n\n    The << and >> must appear on the same line. Conversely, any line\n    containing << and >> is a section reference, regardless of context. However,\n    section references are not recognized in doc parts. Any characters may appear\n    between << and >>.\n\n    Section references are functional pseudo-code: while preprocessing a script, Leo\n    replaces section references by the actual text of the section\u2019s definition.\n    Sections are defined in **section definition nodes**, whose headlines start with a\n    section reference and whose body text defines the section. Each section\n    definition node must descend from the node containing the section reference.\n\n2.  **Directives** start with \u2018@\u2019 in the leftmost column of body text. Directives\n    specify options and control Leo\u2019s operation. The @others directive is the\n    minimal markup needed to organize scripts. @others tells Leo to insert the\n    preprocessed text of all descendant nodes (except section definition nodes) at\n    the spot at which the @others directive occurs. Nodes are inserted in **outline\n    order**, the order in which nodes appear in the outline. **Important**: Leo adds the\n    whitespace preceding the @others directive to the indentation of all\n    preprocessed text.\n\n    Using @others is more convenient than using section references. Use @others when\n    the order of included text does not matter::\n\n        class myClass:\n\t        @others # Include the methods of the class. Order doesn\u2019t matter.\n\n    Use section references when the order of included text does matter. In the following script, for example,\n    << imports >> ensures that imports come first. The @others directive then includes the body text of all other\n    descendant nodes::\n\n        @language python\n        << imports>>\n        @others # Define classes & functions in child nodes.\n        main()\n\n    Here is a list of all of Leo\u2019s standard directives::\n\n        @whitespace (or @doc)   Starts a doc part & ends code part.\n        @all                    Like @others, but includes all descendant nodes.\n        @c, @code               Starts a code part and ends a doc part.\n        @color                  Enables syntax coloring.\n        @delims                 Temporarily changes comment delims.\n        @nocolor, @killcolor    Disables syntax coloring.\n        @comment                Sets comment delimiters in external (derived) files.\n        @language languagename  Sets language for syntax coloring and comments.\n        @lineending lineending  Sets ending of lines in derived files.\n        @others                 Inserts body text of all descendants except definition nodes. \n        @pagewidth n            Sets page width for justifying comments in doc parts.\n        @path path              Sets prefix to use in relative file names in @file nodes, etc.\n        @raw, @end_raw          Inhibits sections references in a range of text. (@file only.)\n        @tabwidth n             Sets width of tabs (negative widths convert tabs to spaces.)\n        @wrap, @nowrap          Controls wrapping of text in body pane.\n\n3.  Doc parts start with the \u2018@\u2019 directive and continue until the end of the body text or until the \u2018@c\u2019 directive.\n    Body text not in a doc part is in a code part. Here is an example of a doc part::\n\n        @ This is a doc part. Doc parts may span many lines. Leo converts doc parts to comments.\n        Leo reformats the doc part by justifying lines so they are no longer than the page width.\n        @c\n\n    Leo reformats doc parts by justifying the text into comment lines.\n    The @pagewidth directive controls the length of these comment lines.\n    The @language and @comment directives specify the comment delimiters used in doc parts.\n", "children": []}, {"h": "Scripting Leo", "gnx": "ekr.20091107093823.6798", "b": "The Execute Script command preprocesses the selected text of the presently\nselected outline node, or the entire text of the node if there is no selected\ntext. See the section called Markup for Scripts for a discussion of how Leo\npreprocesses scripts. That section also discusses how Leo organizes scripts\nusing outlines. Conversely, scripts can use outlines to organize their data. To\nwrite such scripts you must understand at least the basics of Leo\u2019s modules and\nclasses...\n", "children": []}, {"h": "Leo\u2019s modules and classes", "gnx": "ekr.20091107093823.6799", "b": "Leo\u2019s source code is organized as a collection of modules. The following\nparagraphs describe five of the most important modules. See LeoPy.leo (Leo\u2019s\nfull source code) for more details: scripts have full access to all of Leo\u2019s\nclasses and data.\n\n1.  The **leoGlobals** module contains utility functions.\n    By convention, in Leo\u2019s code g is always the leoGlobals module.\n\n2.  The **leoApp** module defines a class representing the entire Leo application.\n    **g.app** is the singleton object of this class: the application object.\n    The instance variables (ivars) of the application object are Leo\u2019s global variables.\n\n3.  The leoCommands module defines the Commands class.\n    A commander is an instance of this class.\n    Commanders contain the operations that can be performed on a particular outline.\n    Each open Leo outline has its own commander.\n    By convention, in Leo\u2019s code **c** is always a commander.\n\n4.  The leoFrame module defines the base leoFrame class for objects that create and manage\n    the visual appearance of Leo\u2019s windows and panes.\n    qtGui.py contains subclasses of the base classes in the leoFrame module.\n    A frame (an instance of the leoFrame class, or a subclass)\n    contains all the internal data needed to manage a Leo window.\n    **c.frame** is the frame associated with commander c.\n    If **f** is a frame, **f.c** is the frame\u2019s commander, **f.body** is the frame\u2019s body pane,\n    **f.tree** is the frame\u2019s outline pane, and **f.log** is the frame\u2019s log pane.\n\n5.  The leoNodes module defines several classes that implement Leo\u2019s fundamental data structures.\n    These classes are complex.\n    Happily, scripts can and should ignore these complications by accessing nodes using\n    high-level methods of the position class.\n\nA **position** (an instance of the position class) is the state of some traversal of an outline. Equivalently, a position is a particular visual place in an outline. Cloned nodes may appear many times in an outline. Non-cloned nodes may also appear in many places: consider a non-cloned descendant of a cloned node. By convention, in Leo\u2019s source code p is a position.\n", "children": []}, {"h": "Predefined symbols in scripts", "gnx": "ekr.20091107093823.6800", "b": "When executing scripts Leo predefines the following three symbols:\n**c** is the commander of the outline in which the script is defined,\n**g** is the leoGlobals module and\n**p** is the position of the selected node in c\u2019s outline, i.e., c.currentPosition().\n", "children": []}, {"h": "Accessing data", "gnx": "ekr.20091107093823.6801", "b": "Scripts should get and set data using high-level access methods. Here are some important getters::\n\n    g.app                The application object. Its ivars are Leo\u2019s global variables.\n    g.app.windowList     The list of all open frames.\n    c.currentPosition()  The position of the selected node.\n    c.rootPosition()     The position of the first node in the outline.\n    p.headString()       The headline of position p.\n    p.bodyString()       The body text of position p.\n    p.childIndex()       The number of siblings that precede p.\n    p.numberOfChildren() The number of p\u2019s children.\n    p.level()            The number of p\u2019s ancestors.\n    p.hasChildren()      True if p has children.\n    p.isAncestorOf(p2)   True if p2 is a child, grandchild, etc. of p.\n    p.isCloned()         True if p is a clone.\n    p.isDirty()          True if p\u2019s contents have been changed.\n    p.isExpanded()       True if p has children and p\u2019s outline is expanded.\n    p.isMarked()         True if p\u2019s headline is marked.\n    p.isVisible()        True if all of p\u2019s ancestors are expanded.\n\nAnd here are some important setters::\n\n    p.setBodyStringOrPane(s) Set body text of p to s.\n    p.setHeadString(s)       Set headline of p to s.\n", "children": []}, {"h": "Traversing outlines", "gnx": "ekr.20091107093823.6802", "b": "Scripts can visit some or all of the nodes of a Leo outline using the following iterators::\n\n    c.allNodes_iter             # All positions in the outline, in outline order.\n    p.children_iter()           # All children of p.\n    p.parents_iter()            # All parents of p.\n    p.siblings_iter()           # All siblings of p, including p.\n    p.following_siblings_iter() # All siblings following p, not including p.\n\nFor example, the following prints all the nodes of an outline, properly indented::\n\n    for p in c.allNodes_iter():\n        print ' '*p.level(), p.headString()\n", "children": []}, {"h": "Executing commands from scripts", "gnx": "ekr.20091107093823.6803", "b": "Scripts may open other Leo outlines, or execute any of Leo\u2019s commands.  Here are some examples::\n\n    ok,frame = g.openWithFileName(path,c)\t# Opens the .leo file found at path.\n    c.deleteOutline()   # Deletes the selected node.\n    c.insertHeadline()  # Inserts a new node after present position.\n\nFor more examples, see Scripting Leo with Python, in Leo\u2019s Users Guide.\n", "children": []}, {"h": "Bringing scripts to data", "gnx": "ekr.20091107093823.6804", "b": "The scripting plugin creates two buttons in the icon area at the top of the Leo\nwindow. The Run Script button executes the script in the selected node just\nlike the Execute Script command. The Script Button button creates a new\nbutton whose headline is the headline of the presently selected node, call it\nnode N. Pressing this button executes the script in node N with p predefined as\nc.currentPosition() at the time the script is executed. This clever trick\nbrings the script to the data in the selected outline.\n", "children": []}, {"h": "Unit Testing with @test and @suite nodes", "gnx": "ekr.20091107093823.6805", "b": "test.leo contains all of Leo\u2019s unit tests. An @button node in test.leo\ncreates a blue Unit Test button in the icon area. This button is an\nexcellent example of bringing scripts to data. The Unit Test button executes\nall the unit tests specified by @test and @suite nodes in the selected\noutline. **Important**: @button, @test and @suite nodes require the\nscripting plugin to be enabled.\n\n@test nodes greatly simplify unit testing. The Unit Test button creates\na unit test from the body text of each @test node. In effect, the Unit\nTest button automatically creates an instance of unittest.TestCase whose\nrun method is the body text of the @test node. There is no need to create\nTestCase objects explicitly!\n\n@suite nodes support legacy unit tests. When the Unit Test script button\nfinds an @suite node it executes the script in its body text. This script\nshould create a suite of unit tests and set::\n\n    g.app.scriptDict['suite'] = suite\n\nwhere suite is the created suite. The Unit Test button then runs that\ncreated suite of unit tests.\n", "children": []}, {"h": "Plugins and hooks", "gnx": "ekr.20091107093823.6806", "b": "Plugins are Python (.py) files in Leo\u2019s plugin subdirectory. It is easy to\ncreate new plugins: Leo\u2019s users have contributed dozens of plugins that extend\nLeo\u2019s capabilities in new ways. Leo imports all enabled plugins during startup.\nThe file pluginsManager.txt lists all enabled plugins. You can use the plugin\nmanager plugin to control plugins without updating pluginsManager.txt by hand.\n\nPlugins can override any class, method or function in Leo\u2019s core, the files in\nLeo\u2019s src subdirectory (the files derived from LeoPy.leo). Besides altering\nLeo\u2019s core, plugins can register functions called hooks that Leo calls at\nvarious times during Leo\u2019s execution. Events that trigger hooks include key\npressed events, screen drawing events, node selection events and many others.\nWhen importing a plugin, Leo will call the top-level init() function if it\nexists. This function should register the plugin\u2019s hooks by calling\nleoPlugins.registerHandler.\n\nFor full details about hooks and events see Customizing Leo, in\nLeo\u2019s Users Guide. The file leoPlugins.leo contains all plugins that are\npresently distributed with Leo; studying these plugins is a good way of learning\nto write your own plugins.\n", "children": []}, {"h": "Contacts", "gnx": "ekr.20091107093823.6807", "b": "- Leo\u2019s home page:  google edreamleo or http://webpages.charter.net/edreamleo/front.html\n\n- Edward K. Ream:  edreamleo@charter.net, 166 N. Prospect Ave., Madison WI 53726, (608) 231-0766\n", "children": []}, {"h": "Review of leo-editor", "gnx": "ekr.20101025080245.5542", "b": "The following nodes contain links to important discussions on the leo-editor web\nsite.\n", "children": ["ekr.20101025080245.5735", "ekr.20101025080245.5740", "ekr.20101025080245.5753", "ekr.20101025080245.5770", "ekr.20101025080245.5778", "ekr.20101025080245.5780", "ekr.20101025080245.5786", "ekr.20101025080245.5785"]}, {"h": "10/2010", "gnx": "ekr.20101025080245.5735", "b": "", "children": ["ekr.20101025080245.5736", "ekr.20101025080245.5737", "ekr.20101025080245.5738"]}, {"h": "FAQ: how to syntax color sql", "gnx": "ekr.20101025080245.5736", "b": "use @language plsql \n", "children": []}, {"h": "@url Prezi: a good model for intros", "gnx": "ekr.20101025080245.5737", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a1734a5f7ae25444#\n", "children": ["ekr.20101025080245.5787"]}, {"h": "@url Prezi home page", "gnx": "ekr.20101025080245.5787", "b": "http://prezi.com/your/\n", "children": []}, {"h": "@url FAQ: how to use macros", "gnx": "ekr.20101025080245.5738", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/866245f923f382a7#\n", "children": []}, {"h": "9/2010", "gnx": "ekr.20101025080245.5740", "b": "", "children": ["ekr.20101025080245.5739", "ekr.20101025080245.5741", "ekr.20101025080245.5742", "ekr.20101025080245.5743", "ekr.20101025080245.5744", "ekr.20101025080245.5745", "ekr.20101025080245.5748", "ekr.20101025080245.5750"]}, {"h": "@url Ville's server code", "gnx": "ekr.20101025080245.5739", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/278aa85d7298a319#\n", "children": []}, {"h": "@url FAQ: creating windows file associations", "gnx": "ekr.20101025080245.5741", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/fec80438b9619c1c#\n", "children": []}, {"h": "@url Google: window 7 file icons", "gnx": "ekr.20101025080245.5742", "b": "http://www.winhelponline.com/blog/change-file-type-icon-windows-7-and-vista/\n", "children": []}, {"h": "@url Google: window 7 file associations", "gnx": "ekr.20101025080245.5743", "b": "http://vista.blorge.com/2009/10/26/how-to-change-file-type-associations-in-windows-7/\n", "children": []}, {"h": "@url qt-tabs", "gnx": "ekr.20101025080245.5744", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/2efdbc3b47846a15#\n", "children": []}, {"h": "Slideshow stuff", "gnx": "ekr.20101025080245.5745", "b": "", "children": ["ekr.20101025080245.5746", "ekr.20101025080245.5747", "ekr.20101025080245.5752", "ekr.20101025080245.5758", "ekr.20101025080245.5759", "ekr.20101025080245.5760"]}, {"h": "@url slideshow will be a plugin", "gnx": "ekr.20101025080245.5746", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/4da36f0d897a25e8#\n", "children": []}, {"h": "@url callouts with inkscape", "gnx": "ekr.20101025080245.5747", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/be5401b424a022a7#\n", "children": []}, {"h": "@url more thougths about slides", "gnx": "ekr.20101025080245.5752", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c66f30b5d09d3411#\n", "children": []}, {"h": "@url (Aug) Leo vrs Screenbook Maker and storyboarding", "gnx": "ekr.20101025080245.5758", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/fd52e4187eec7bd0#\n", "children": []}, {"h": "@url (Aug) S5 is not good enough", "gnx": "ekr.20101025080245.5759", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/44eb904d6b32cdd8#\n", "children": []}, {"h": "@url (Aug) Deconstructing screenbook maker", "gnx": "ekr.20101025080245.5760", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3da73f0c2da2c416#\n", "children": []}, {"h": "@url DnD howto", "gnx": "ekr.20101025080245.5748", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/7752d3e14b49ef35#\n", "children": []}, {"h": "@url interact plugin (ileo)", "gnx": "ekr.20101025080245.5750", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d58333f2ebae2675#\n", "children": []}, {"h": "8/2010", "gnx": "ekr.20101025080245.5753", "b": "", "children": ["ekr.20101025080245.5751", "ekr.20101025080245.5755", "ekr.20101025080245.5756", "ekr.20101025080245.5757", "ekr.20101025080245.5761", "ekr.20101025080245.5762", "ekr.20101025080245.5763", "ekr.20101025080245.5764", "ekr.20101025080245.5765", "ekr.20101025080245.5766", "ekr.20101025080245.5768", "ekr.20101025080245.5769"]}, {"h": "@url leoscreen plugin", "gnx": "ekr.20101025080245.5751", "b": "http://www.mail-archive.com/leo-editor@googlegroups.com/msg11439.html\n", "children": []}, {"h": "@url simulating <<nodes>> in rst branches (design)", "gnx": "ekr.20101025080245.5755", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/8842b4878975e3f1#\n", "children": []}, {"h": "@url @auto import problems", "gnx": "ekr.20101025080245.5756", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/cde63221041d9afc#\n", "children": []}, {"h": "@url leo in a nutshell", "gnx": "ekr.20101025080245.5757", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e9c5f73d048597ae#\n", "children": []}, {"h": "@url The curse of knowledge", "gnx": "ekr.20101025080245.5761", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3da73f0c2da2c416#\n", "children": []}, {"h": "@url second draft of rst3 tutorial", "gnx": "ekr.20101025080245.5762", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c02a442bea48f233#\n", "children": []}, {"h": "@url quickmove tutorial", "gnx": "ekr.20101025080245.5763", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/8eaf13b6ebda0fcd#\n", "children": []}, {"h": "@url ** sharing code in scripts", "gnx": "ekr.20101025080245.5764", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a108d70400b28dc9#\n", "children": []}, {"h": "@url simplifying docs for rst3", "gnx": "ekr.20101025080245.5765", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/5c1ef1abcc01ef50#\n", "children": []}, {"h": "@url Leo screencast on utube", "gnx": "ekr.20101025080245.5766", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/ce7353ce5614efca#\n", "children": []}, {"h": "@url revising chapter 6 (design chapter)", "gnx": "ekr.20101025080245.5768", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e3c736bc9f545b7e#\n", "children": []}, {"h": "@url ** p.deletePositionsInList", "gnx": "ekr.20101025080245.5769", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/0aa8d9d17f6300b8#\n", "children": []}, {"h": "7/2010", "gnx": "ekr.20101025080245.5770", "b": "", "children": ["ekr.20101025080245.5771", "ekr.20101025080245.5772", "ekr.20101025080245.5774", "ekr.20101025080245.5775", "ekr.20101025080245.5776", "ekr.20101025080245.5777"]}, {"h": "@url Leo3k works with docutils", "gnx": "ekr.20101025080245.5771", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/64dfc56394abcee8#\n", "children": []}, {"h": "@url ** At last: deleting \"resurrected nodes\"", "gnx": "ekr.20101025080245.5772", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/64dfc56394abcee8#\n", "children": ["ekr.20101025080245.5773"]}, {"h": "Note: Leo creates both resurrected nodes and recovered nodes", "gnx": "ekr.20101025080245.5773", "b": "", "children": []}, {"h": "@url @auto now regularizes newlines", "gnx": "ekr.20101025080245.5774", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c351a5e3399fcf09#\n", "children": []}, {"h": "@url new sentinels", "gnx": "ekr.20101025080245.5775", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/ace3046ffb94805b#\n", "children": []}, {"h": "@url complications re new sentinels (design)", "gnx": "ekr.20101025080245.5776", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/76d12c9abd586b16#\n", "children": []}, {"h": "@url how to avoid usernames in outlines", "gnx": "ekr.20101025080245.5777", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e21f8efa58c204e7#\n", "children": []}, {"h": "6/2010", "gnx": "ekr.20101025080245.5778", "b": "", "children": ["ekr.20101025080245.5779"]}, {"h": "@url @auto-rst issue", "gnx": "ekr.20101025080245.5779", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f1deadac39f8f8c5#\n", "children": []}, {"h": "5/2010", "gnx": "ekr.20101025080245.5780", "b": "", "children": ["ekr.20101025080245.5781"]}, {"h": "@url much simpler sentinels", "gnx": "ekr.20101025080245.5781", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/8b659c96720afd53#\n", "children": []}, {"h": "4/2010", "gnx": "ekr.20101025080245.5786", "b": "", "children": ["ekr.20101025080245.5782", "ekr.20101025080245.5783"]}, {"h": "@url new-pylint is too slow", "gnx": "ekr.20101025080245.5782", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/de7fc699752f7a39#\n", "children": []}, {"h": "@url thoughts about autocompletion", "gnx": "ekr.20101025080245.5783", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3dd91b318f17a359#\n", "children": []}, {"h": "3/2010", "gnx": "ekr.20101025080245.5785", "b": "", "children": ["ekr.20101025080245.5784"]}, {"h": "@url @language pseudoplain?", "gnx": "ekr.20101025080245.5784", "b": "http://groups.google.com/group/leo-editor/topics?start=360&sa=N\n", "children": []}, {"h": "wikipedia entry", "gnx": "ekr.20101115152915.4937", "b": "@nocolor-node\n\n{{Infobox software\n| name = Leo: Leonine Editor with Outlines\n| screenshot = [http://sourceforge.net/project/screenshots.php?group_id=3458&ssid=22298 Screenshots]\n| caption =\n| developer = Edward K. Ream\n| latest_release_version = 4.8 release candidate 1\n| latest_release_date = {{release date and age|2010|11|15}}\n| operating_system = [[Cross-platform]]\n| genre = [[Text editor]], [[Outliner]], [[Integrated development environment|IDE]]\n| license = [[Python (programming language)|Python]] License\n| website = http://webpages.charter.net/edreamleo/front.html\n}}\n\n'''Leo''' ('''L'''eonine '''E'''ditor with '''O'''utlines) is a [[text editor]]\nthat features [[outliner|outlines]] with clones as its central tool of\norganization, navigation, customization and scripting.\n\n==Language==\n\nLeo is written in [[Python (programming language)|Python]] and uses the [[Qt\n(toolkit)|Qt]]. It is fully scriptable using Python and can be extended with\nplugins. In Leo, outlines are hierarchical data structures that people use to\nwork with and manage text files\u2014including code.\n\n==Trees, clones and views==\n\nLeo is an [[outliner]]. Leo's outline pane shows a [[tree (data structure)]] of data nodes.\nNodes contain headlines, body text, and other information.\nHeadlines naturally serve as descriptions of the body text.\nFor example, @file nodes are nodes whose headline starts with @file.\n\nLeo trees are in fact [[directed acyclic graph|directed acyclic graphs]];\nnodes may have more than one parent.\nLeo calls such nodes clones.\nClones appear in several places in the outline pane.\n\nViews are simply nodes whose children contain clones. A single outline may contain\narbitrarily many views of the nodes contained therein.\nViews and clones turn Leo into a supremely flexible filing cabinet: any node may be filed\nin arbitrarily many places.\n<ref>[http://webpages.charter.net/edreamleo/nutshell.html Leo documentation: Leo in a Nutshell]</ref>\n\n==External files==\n\n@file nodes represent external files, files on the computer's file system.\nWhen saving an outline Leo automatically writes all changed @file\ntrees back to the external files.\nComments, called sentinel lines, in external files represent the outline structure.\nWhen reading an outline, these comments allows Leo to recreate\n@file trees using only the data in the external file.\n\n@auto nodes represent external files without using sentinel comments.\nWhen reading @auto nodes, Leo uses the program structure of the external file\nto create the @auto tree.\n\n==Scripting==\n\nLeo's scripting environment takes full advantage of outline structure:\n\n* The body text of any node may contain a Leo script, a Python script executed in the context of a Leo outline.\n\n* A simple [[API]] <ref>[http://webpages.charter.net/edreamleo/scripting.html Leo documentation: Scripting Leo with Python]</ref> gives Leo scripts full access to all data in loaded outlines, as well as full access to Leo's own source code. The API includes Python [[iterators]] that allow scripts to traverse outlines easily.\n\n* Scripts may be composed of any tree of nodes. A [[markup language]] similar to [[noweb]] <ref>[http://webpages.charter.net/edreamleo/intro.html#section-references Leo documentation: Tutorial]</ref> tells Leo how to create scripts from (parts of) an outline.\n\n* Headlines naturally control and guide scripts.\n\n** @test nodes represent unit tests. Leo can execute the body of an @test node as unit test, without the body having to create an explicit subclass of Python's UnitTest.TestCase class. <ref>[\n\n** @button nodes contain scripts that can be applied to other nodes.  In effect, @button nodes create user-defined commands. <ref>\n\n==External links==\n{{Portal|Free software}}\n*[http://webpages.charter.net/edreamleo/front.html Leo's homepage]\n*[http://sourceforge.net/projects/leo/ Leo at SourceForge],[http://sourceforge.net/project/screenshots.php?group_id=3458&ssid=22298 screenshots]\n*[http://groups.google.com/group/leo-editor leo-editor Google Group]\n*{{cite web | title=Literate Programming and Leo | publisher = [[Slashdot]] | date=2002-08-28 | url=http://developers.slashdot.org/article.pl?sid=02/08/28/1655207 }}\n*{{cite web |author=[[James Tauber]] |title=Using the Leo Outliner as a PIM | date=2004-05-15 |url=http://jtauber.com/blog/2004/05/15/using_the_leo_outliner_as_a_pim/ }}\n*{{cite book | author = Vreda Pieterse, Derrick G. Kourie, Andrew Boake | title=ACM International Conference Proceeding Series; Vol. 75. Proceedings of the 2004 annual research conference of the South African institute of computer scientists and information technologists on IT research in developing countries | chapter=A case for contemporary literate programming | editor=[[Association for Computing Machinery|ACM]] | pages=2\u20139 | url=http://portal.acm.org/citation.cfm?id=1035054}} (cited in references)\n\n==References==\n<references/>\n\n{{DEFAULTSORT:Leo (Text Editor)}}\n[[Category:Free text editors]]\n[[Category:Free software programmed in Python]]\n[[Category:Outliners]]\n", "children": []}, {"h": "Slideshows", "gnx": "ekr.20100821182153.4341", "b": "", "children": ["ekr.20101028110015.8271"]}, {"h": "@file slideshows.txt", "gnx": "ekr.20101028110015.8271", "b": "@pagewidth 70\n@language rest\n\n@all\n", "children": ["ekr.20101122071746.5046", "ekr.20101025080245.5540", "ekr.20100821182153.4345", "ekr.20101013072903.5224", "ekr.20101011165412.4968", "ekr.20101014034526.5296", "ekr.20101014110348.5293", "ekr.20101014034526.5280"]}, {"h": "How to create slideshows", "gnx": "ekr.20101122071746.5046", "b": "To create a slideshow with sphinx:\n\ncd leo\\doc\\html\\slides\\slideshow-name\nmake html\n\nTo generate screenshots from Wink & meld-slides & make-slide:\n\n1. Plan slides carefully.  Insert @no-screenshot nodes for @slide\n   nodes that will not have screenshots.\n\n   Know the numbering of slides. I use the following kinds of comments\n   to keep track of expected screenshots:\n\n        .. no screenshot\n        .. sc 5: description\n\n2. Using the script in @slide nodes, take the screenshots in Wink.\n\n   I use a **screenshots.bat** script that starts screenshots.leo with\n   a standard size (900x700) window.\n\n3. Create the screenshots using Wink's Export As Html command.\n   The exact file names don't matter, but they should be .png files.\n\n4. Create an @wink_path node in the @slideshow tree pointing\n   to the screenshot folder.\n\n5. Run the meld-slides command to create @url final output file nodes.\n\n6. Double-click @url final output nodes to edit them in InkScape.\n\n7. Run the make-slide command on the individual @slide nodes.\n   The creates the @url built slide node and runs the actual make,\n   which creates the _build directory in the slideshow directory.\n\n8. The make-slide-show command is useful for quickly generating\n   @url built slide nodes in batches.\n\n9. Copy the *contents* of the *slideshow's* _build/html directory to\n   the proper slideshow directory of the server. Do *not* just copy\n   the entire _build directory to the server.\n", "children": []}, {"h": "To do: slideshows", "gnx": "ekr.20101025080245.5540", "b": "", "children": ["ekr.20101115152915.4933", "ekr.20101121032151.5375"]}, {"h": "Next", "gnx": "ekr.20101115152915.4933", "b": "", "children": ["ekr.20101113110328.4947", "ekr.20101115152915.4932", "ekr.20101115152915.4934"]}, {"h": "Using @button nodes", "gnx": "ekr.20101113110328.4947", "b": "", "children": []}, {"h": "Using @test nodes", "gnx": "ekr.20101115152915.4932", "b": "", "children": []}, {"h": "Using @url nodes", "gnx": "ekr.20101115152915.4934", "b": "", "children": []}, {"h": "Maybe", "gnx": "ekr.20101121032151.5375", "b": "", "children": ["ekr.20101113110328.4945", "ekr.20101113110328.4946", "ekr.20101014034526.5294", "ekr.20101014034526.5295", "ekr.20101025080245.5529", "ekr.20101025080245.5546", "ekr.20101010141953.5028", "ekr.20101011071655.4919", "ekr.20101007082321.4357"]}, {"h": "Top 10 coolest features", "gnx": "ekr.20101113110328.4945", "b": "", "children": []}, {"h": "How to make slide shows", "gnx": "ekr.20101113110328.4946", "b": "", "children": []}, {"h": "IPython", "gnx": "ekr.20101014034526.5294", "b": "- Execute IPython scripts from Leo.\n- Execute Leo scripts from IPython.\n", "children": []}, {"h": "Vim & Emacs", "gnx": "ekr.20101014034526.5295", "b": "", "children": []}, {"h": "leoremote plugin", "gnx": "ekr.20101025080245.5529", "b": "@nocolor-node\n\nVille's server code to interact with a running Leo\nhttp://mail.google.com/mail/#inbox/12adebe2ffe80572\n\nReusing Emacs instances with gnuserv\nhttp://www.debian-administration.org/articles/257\n\n", "children": []}, {"h": "@url Document Ville's server", "gnx": "ekr.20101025080245.5546", "b": "http://mail.google.com/mail/#inbox/12adebe2ffe80572\n", "children": []}, {"h": "@slideshow Leo's NSIS Installer", "gnx": "ekr.20101010141953.5028", "b": "@language rest\n", "children": ["ekr.20101010141953.5029", "ekr.20101010141953.5030", "ekr.20101010141953.5031", "ekr.20101011092154.4923", "ekr.20101011092154.4924", "ekr.20101011092154.4925"]}, {"h": "@title_pattern = Leo's NSIS Installer: Slide %(slide_number)s", "gnx": "ekr.20101010141953.5029", "b": "", "children": []}, {"h": "@slide 001", "gnx": "ekr.20101010141953.5030", "b": ".. _`here`:     http://www.nullsoft.com/free/nsis/\n.. _`Winamp`:   http://www.winamp.com/\n\nNullsoft, the makers of the `Winamp`_ MP3 software, have released a powerful free\ninstaller called NSIS, available `here`_. This application allows you to make\ninstallation packages for Windows applications.\n\nYou create NSIS packages by writing a NSIS script and then compiling it.\nDepending on the application, NSIS can often be a better choice than more\nexpensive installation generators, since NSIS installations are easy to create,\nare small and fast, and yet can be configured with many features.\n\n", "children": []}, {"h": "@slide 002", "gnx": "ekr.20101010141953.5031", "b": "When you install Leo, you'll find that it comes with a script for generating an\ninstaller for Leo. This script is called leo-<version>.nsi, and is distributed\nin the Leo file leo/dist/leoDist.leo.\n\nIf you have NSIS installed, right-clicking on a .nsi file will give you the\noption of compiling the script to create a package.\n\n.. image:: slide-002.png\n\n", "children": ["ekr.20101010141953.5032", "ekr.20101010141953.5034", "ekr.20101010141953.5038", "ekr.20101010141953.5039", "ekr.20101010141953.5040", "ekr.20101011071655.4918"]}, {"h": "@screenshot", "gnx": "ekr.20101010141953.5032", "b": "", "children": ["ekr.20101010141953.5033"]}, {"h": "Take screenshot of the compile .nsi dialog in a Windows folder", "gnx": "ekr.20101010141953.5033", "b": "", "children": []}, {"h": "@pause", "gnx": "ekr.20101010141953.5034", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010141953.5038", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/screenshot-002.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010141953.5039", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/screenshot-002.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010141953.5040", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/slide-002.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101011071655.4918", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leos-nsis-installer\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide 003", "gnx": "ekr.20101011092154.4923", "b": "Since the NSIS script for the Leo installation is included in the Leo\ndistribution in the nsis.leo file, it is easy to understand the how the script\nworks. This .nsi file creates an installer that packages all of the Leo program\nfiles, and creates a desktop shortcut, a Program Menu item, and the file\nassociation for .leo files.\n", "children": []}, {"h": "@slide 004", "gnx": "ekr.20101011092154.4924", "b": "In this screenshot we're looking at the code that checks to see whether Python\nhas been installed.\n\nSince Leo is a Python application, modifying this installation script to create\na script to build a Windows installer for your own Python application is\nrelatively simple. You would leave this section alone, and check other sections\nfor the program name \"Leo\", and change these to your program name.\n", "children": []}, {"h": "@slide 005", "gnx": "ekr.20101011092154.4925", "b": "", "children": []}, {"h": "@slideshow Whetting Your Appetite", "gnx": "ekr.20101011071655.4919", "b": "@language rest\n@pagewidth 50\n", "children": ["ekr.20101013072903.5219", "ekr.20101013072903.5221", "ekr.20101011071655.4920", "ekr.20101011103613.4930", "ekr.20101012083118.5245", "ekr.20101011103613.4933", "ekr.20101011103613.4934", "ekr.20101011103613.4938", "ekr.20101011103613.4935", "ekr.20101011103613.4936", "ekr.20101011103613.4937", "ekr.20101011103613.4939"]}, {"h": "@slide What you can do with Leo", "gnx": "ekr.20101013072903.5219", "b": "This slideshow shows some of the things you can do\nwith Leo\n", "children": ["ekr.20101013072903.5220"]}, {"h": "@no-screenshot", "gnx": "ekr.20101013072903.5220", "b": "", "children": []}, {"h": "@slide Leo's main window", "gnx": "ekr.20101013072903.5221", "b": "Leo's main window consists of an **outline pane**\n(1), a **body pane** (2) and a **log pane** (3).\nAll data in Leo resides in **nodes**. A node\nconsists of **headline text** and **body text**.\nThe outline pane shows headlines. The body pane\npane shows the body text of the presently selected\nnode. Messages from Leo appear in the log pane.\n\n", "children": []}, {"h": "@slide A Personal Information Manager", "gnx": "ekr.20101011071655.4920", "b": "You can use Leo as a PIM.\n\nAs with other outliners, Leo outlines show \n", "children": []}, {"h": "@slide A Better PIM", "gnx": "ekr.20101011103613.4930", "b": "Leo is a better pim.\n", "children": ["ekr.20101011103613.4942"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4942", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide External Files", "gnx": "ekr.20101012083118.5245", "b": "", "children": []}, {"h": "@slide A Scripting Environment", "gnx": "ekr.20101011103613.4933", "b": "The body text of any node can contain a Python script.\n\nYou execute the script with (Ctrl-B) Leo's execute-script command.\n", "children": ["ekr.20101011103613.4943"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4943", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Better Scripting", "gnx": "ekr.20101011103613.4934", "b": "All Leo scripts have access to three predefined constants: c, g and p.\n", "children": ["ekr.20101011103613.4944"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4944", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide Better Scripting, Part Deux", "gnx": "ekr.20101011103613.4938", "b": "All Leo scripts have full access to the outline in which the scripts reside. The\nfollowing scripts, executed from Leo's body pane, will print the headlines of\nall the nodes of the outline, properly indented::\n\n    for p in c.all_positions():\n        print '%s%s' % (' '*p.level(),p.h)\n", "children": ["ekr.20101011103613.4945"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4945", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide Outlines Create New Leo Commands", "gnx": "ekr.20101011103613.4935", "b": "Discuss @button nodes\n", "children": ["ekr.20101011103613.4946"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4946", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide Outlines Create Unit tests", "gnx": "ekr.20101011103613.4936", "b": "Discuss @test nodes\n", "children": ["ekr.20101011103613.4947"]}, {"h": "@url built slide", "gnx": "ekr.20101011103613.4947", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide Outlines Create Restructured Text", "gnx": "ekr.20101011103613.4937", "b": "Leo outlines make it easy to create Restructured Text (rST) documents.\n\nWithin @rst trees, nodes correspond to rST sections. Naturally, the outline\nlevel of a node in the Leo outline determines the section's level in the\nresulting document.\n", "children": ["ekr.20101011111455.4965"]}, {"h": "@url built slide", "gnx": "ekr.20101011111455.4965", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\whetting-your-appetite\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide Outlines Create HTML", "gnx": "ekr.20101011103613.4939", "b": "", "children": []}, {"h": "@slideshow What is Leo? (Joe Orr)", "gnx": "ekr.20101007082321.4357", "b": "@language rest\n", "children": ["ekr.20101009171445.4637", "ekr.20101008061729.4372", "ekr.20101008061729.4373", "ekr.20101008061729.4398", "ekr.20101008061729.4522", "ekr.20101008061729.4518", "ekr.20101008061729.4521", "ekr.20101008061729.4523", "ekr.20101008061729.4524", "ekr.20101008061729.4525", "ekr.20101008061729.4526", "ekr.20101008061729.4527", "ekr.20101008061729.4528", "ekr.20101008061729.4529", "ekr.20101008061729.4530", "ekr.20101008061729.4531", "ekr.20101008061729.4532", "ekr.20101008061729.4533", "ekr.20101008061729.4534", "ekr.20101008061729.4535", "ekr.20101008061729.4536", "ekr.20101008061729.4537", "ekr.20101008061729.4539", "ekr.20101008061729.4540"]}, {"h": "@title_pattern = What is Leo? Slide %(slide_number)s", "gnx": "ekr.20101009171445.4637", "b": "", "children": []}, {"h": "@slide 001", "gnx": "ekr.20101008061729.4372", "b": "Leo is a unique, powerful computer program that you can use to **organize**,\n**analyze** and **describe** text and text files. Leo is a free and open\nsoftware written by Edward K. Ream. For information about downloading Leo, see\nthe **installation** tutorial in this series. Leo runs on Windows, Mac, or\nLinux.\n\nUse Leo:\n\n- To brainstorm a new project.\n- As a Personal Information Manager.\n- To add multiple outlines and commentary to any text file.\n- To create and organize computer programs.\n- To apply computer scripts to any kind of data.\n\nBecause Leo is unlike other tools you may have used, a series of examples may be\nthe best way to demonstrate what can be done with Leo.\n", "children": ["ekr.20101010121134.4703"]}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4703", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide 002", "gnx": "ekr.20101008061729.4373", "b": "From one perspective, Leo is an **outlining editor**. This is a screenshot of\nLeo. The arrow shows the outline pane. (A later tutorial explains how to create\nan outline like the one in the screenshot).\n\n.. image:: slide-002.png\n\n", "children": ["ekr.20101008061729.4384", "ekr.20101008061729.4396", "ekr.20101010121134.4704", "ekr.20101010121134.4716", "ekr.20101010121134.4717", "ekr.20101010121134.4718", "ekr.20101010121134.4719"]}, {"h": "@screenshot", "gnx": "ekr.20101008061729.4384", "b": "", "children": ["ekr.20101008061729.4385", "ekr.20101008061729.4390"]}, {"h": "To Do List", "gnx": "ekr.20101008061729.4385", "b": "", "children": ["ekr.20101008061729.4386", "ekr.20101008061729.4387", "ekr.20101008061729.4388", "ekr.20101008061729.4389"]}, {"h": "Urgent", "gnx": "ekr.20101008061729.4386", "b": "", "children": []}, {"h": "Important", "gnx": "ekr.20101008061729.4387", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101008061729.4388", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101008061729.4389", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101008061729.4390", "b": "", "children": ["ekr.20101008061729.4391", "ekr.20101008061729.4393"]}, {"h": "2009", "gnx": "ekr.20101008061729.4391", "b": "", "children": ["ekr.20101008061729.4392"]}, {"h": "Jan 1", "gnx": "ekr.20101008061729.4392", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101008061729.4393", "b": "", "children": []}, {"h": "@select To Do List", "gnx": "ekr.20101008061729.4396", "b": "", "children": []}, {"h": "@edit", "gnx": "ekr.20101010121134.4704", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010121134.4716", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-002.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010121134.4717", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-002.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010121134.4718", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-002.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4719", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide 003", "gnx": "ekr.20101008061729.4398", "b": "Clicking on the open triangle will open the indicated node.\n\n.. image:: slide-003.png\n\n", "children": ["ekr.20101009115705.4583", "ekr.20101008061729.4420", "ekr.20101010121134.4731", "ekr.20101010121134.4732", "ekr.20101010121134.4746", "ekr.20101010121134.4747"]}, {"h": "@screenshot", "gnx": "ekr.20101009115705.4583", "b": "", "children": ["ekr.20101009115705.4584", "ekr.20101009115705.4589"]}, {"h": "To Do List", "gnx": "ekr.20101009115705.4584", "b": "My to-do list.\n", "children": ["ekr.20101009115705.4585", "ekr.20101009115705.4586", "ekr.20101009115705.4587", "ekr.20101009115705.4588"]}, {"h": "Urgent", "gnx": "ekr.20101009115705.4585", "b": "", "children": []}, {"h": "Important", "gnx": "ekr.20101009115705.4586", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101009115705.4587", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101009115705.4588", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101009115705.4589", "b": "", "children": ["ekr.20101009115705.4590", "ekr.20101009115705.4592"]}, {"h": "2009", "gnx": "ekr.20101009115705.4590", "b": "", "children": ["ekr.20101009115705.4591"]}, {"h": "Jan 1", "gnx": "ekr.20101009115705.4591", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101009115705.4592", "b": "", "children": []}, {"h": "@select 2009", "gnx": "ekr.20101008061729.4420", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010121134.4731", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-003.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010121134.4732", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-003.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010121134.4746", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-003.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4747", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide 004", "gnx": "ekr.20101008061729.4522", "b": "Here the node has been opened. Clicking on the box again will close the node.\n\n.. image:: slide-004.png\n\n", "children": ["ekr.20101009124842.4595", "ekr.20101009124842.4606", "ekr.20101009124842.4607", "ekr.20101010121134.4766", "ekr.20101010121134.4767", "ekr.20101010121134.4768", "ekr.20101010121134.4769"]}, {"h": "@screenshot", "gnx": "ekr.20101009124842.4595", "b": "", "children": ["ekr.20101009124842.4596", "ekr.20101009124842.4601"]}, {"h": "To Do List", "gnx": "ekr.20101009124842.4596", "b": "@nocolor-node\n\nMy to-do list.\n", "children": ["ekr.20101009124842.4597", "ekr.20101009124842.4598", "ekr.20101009124842.4599", "ekr.20101009124842.4600"]}, {"h": "Urgent", "gnx": "ekr.20101009124842.4597", "b": "", "children": []}, {"h": "Important", "gnx": "ekr.20101009124842.4598", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101009124842.4599", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101009124842.4600", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101009124842.4601", "b": "@nocolor-node\n\n", "children": ["ekr.20101009124842.4602", "ekr.20101009124842.4604"]}, {"h": "2009", "gnx": "ekr.20101009124842.4602", "b": "", "children": ["ekr.20101009124842.4603", "ekr.20101009211009.4624", "ekr.20101009211009.4623", "ekr.20101009211009.4625", "ekr.20101009211009.4626", "ekr.20101009211009.4627", "ekr.20101009211009.4628", "ekr.20101009211009.4629"]}, {"h": "Aug", "gnx": "ekr.20101009124842.4603", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101009211009.4624", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101009211009.4623", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101009211009.4625", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101009211009.4626", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101009211009.4627", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101009211009.4628", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101009211009.4629", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101009124842.4604", "b": "", "children": []}, {"h": "@select 2009", "gnx": "ekr.20101009124842.4606", "b": "", "children": []}, {"h": "@edit", "gnx": "ekr.20101009124842.4607", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010121134.4766", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-004.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010121134.4767", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-004.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010121134.4768", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-004.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4769", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide 005", "gnx": "ekr.20101008061729.4518", "b": "Here the indicated node has been closed.\n\n.. image:: slide-005.png\n\n", "children": ["ekr.20101009212539.4682", "ekr.20101009212539.4746", "ekr.20101009212539.4699", "ekr.20101009213545.4670", "ekr.20101009213545.4671", "ekr.20101009213545.4672", "ekr.20101010121134.4814"]}, {"h": "@screenshot", "gnx": "ekr.20101009212539.4682", "b": "", "children": ["ekr.20101009212539.4683", "ekr.20101009212539.4688"]}, {"h": "To Do List", "gnx": "ekr.20101009212539.4683", "b": "My to-do list.\n", "children": ["ekr.20101009212539.4684", "ekr.20101009212539.4685", "ekr.20101009212539.4686", "ekr.20101009212539.4687"]}, {"h": "Urgent", "gnx": "ekr.20101009212539.4684", "b": "", "children": []}, {"h": "Important", "gnx": "ekr.20101009212539.4685", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101009212539.4686", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101009212539.4687", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101009212539.4688", "b": "", "children": ["ekr.20101009212539.4689", "ekr.20101009212539.4698"]}, {"h": "2009", "gnx": "ekr.20101009212539.4689", "b": "", "children": ["ekr.20101009212539.4690", "ekr.20101009212539.4691", "ekr.20101009212539.4692", "ekr.20101009212539.4693", "ekr.20101009212539.4694", "ekr.20101009212539.4695", "ekr.20101009212539.4696", "ekr.20101009212539.4697"]}, {"h": "Aug", "gnx": "ekr.20101009212539.4690", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101009212539.4691", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101009212539.4692", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101009212539.4693", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101009212539.4694", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101009212539.4695", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101009212539.4696", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101009212539.4697", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101009212539.4698", "b": "", "children": []}, {"h": "@select 2009", "gnx": "ekr.20101009212539.4746", "b": "", "children": []}, {"h": "@edit", "gnx": "ekr.20101009212539.4699", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101009213545.4670", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-005.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101009213545.4671", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-005.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101009213545.4672", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-005.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4814", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide 006", "gnx": "ekr.20101008061729.4521", "b": "Clicking on a node headline (1) will show the text for that node in the body\npane (2) below. The body pane is a text editor--you can enter, delete or change\ntext here by typing it in.\n\n.. image:: slide-006.png\n\n", "children": ["ekr.20101009213545.4692", "ekr.20101009213545.4709", "ekr.20101009213545.4710", "ekr.20101010121134.4810", "ekr.20101010121134.4811", "ekr.20101010121134.4812", "ekr.20101010121134.4813"]}, {"h": "@screenshot", "gnx": "ekr.20101009213545.4692", "b": "", "children": ["ekr.20101009213545.4693", "ekr.20101009213545.4698"]}, {"h": "To Do List", "gnx": "ekr.20101009213545.4693", "b": "@nocolor\n\nMy to-do list.\n", "children": ["ekr.20101009213545.4694", "ekr.20101009213545.4695", "ekr.20101009213545.4696", "ekr.20101009213545.4697"]}, {"h": "Urgent", "gnx": "ekr.20101009213545.4694", "b": "1. Make Leo tutorials.  The world is waiting.\n\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20101009213545.4695", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101009213545.4696", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101009213545.4697", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101009213545.4698", "b": "@nocolor\n", "children": ["ekr.20101009213545.4699", "ekr.20101009213545.4708"]}, {"h": "2009", "gnx": "ekr.20101009213545.4699", "b": "", "children": ["ekr.20101009213545.4700", "ekr.20101009213545.4701", "ekr.20101009213545.4702", "ekr.20101009213545.4703", "ekr.20101009213545.4704", "ekr.20101009213545.4705", "ekr.20101009213545.4706", "ekr.20101009213545.4707"]}, {"h": "Aug", "gnx": "ekr.20101009213545.4700", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101009213545.4701", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101009213545.4702", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101009213545.4703", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101009213545.4704", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101009213545.4705", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101009213545.4706", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101009213545.4707", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101009213545.4708", "b": "", "children": []}, {"h": "@edit", "gnx": "ekr.20101009213545.4709", "b": "", "children": []}, {"h": "@select Urgent", "gnx": "ekr.20101009213545.4710", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010121134.4810", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-006.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010121134.4811", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-006.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010121134.4812", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-006.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010121134.4813", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide 007", "gnx": "ekr.20101008061729.4523", "b": "You can save the outline in a .leo file.  Click File:Save (or Ctrl-S).\n\n.. image:: slide-007.png\n\n", "children": ["ekr.20101010121134.4832", "ekr.20101010141334.4791", "ekr.20101010121134.4849", "ekr.20101010121134.4868", "ekr.20101010121134.4869", "ekr.20101010140842.4755", "ekr.20101010140842.4756"]}, {"h": "@screenshot", "gnx": "ekr.20101010121134.4832", "b": "", "children": ["ekr.20101010121134.4833", "ekr.20101010121134.4838"]}, {"h": "To Do List", "gnx": "ekr.20101010121134.4833", "b": "@nocolor\n\nMy to-do list.\n", "children": ["ekr.20101010121134.4834", "ekr.20101010121134.4835", "ekr.20101010121134.4836", "ekr.20101010121134.4837"]}, {"h": "Urgent", "gnx": "ekr.20101010121134.4834", "b": "1. Make Leo tutorials.  The world is waiting.\n\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20101010121134.4835", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101010121134.4836", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101010121134.4837", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101010121134.4838", "b": "@nocolor\n", "children": ["ekr.20101010121134.4839", "ekr.20101010121134.4848"]}, {"h": "2009", "gnx": "ekr.20101010121134.4839", "b": "", "children": ["ekr.20101010121134.4840", "ekr.20101010121134.4841", "ekr.20101010121134.4842", "ekr.20101010121134.4843", "ekr.20101010121134.4844", "ekr.20101010121134.4845", "ekr.20101010121134.4846", "ekr.20101010121134.4847"]}, {"h": "Aug", "gnx": "ekr.20101010121134.4840", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101010121134.4841", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101010121134.4842", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101010121134.4843", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101010121134.4844", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101010121134.4845", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101010121134.4846", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101010121134.4847", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101010121134.4848", "b": "", "children": []}, {"h": "@select Urgent", "gnx": "ekr.20101010141334.4791", "b": "", "children": []}, {"h": "@pause", "gnx": "ekr.20101010121134.4849", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010121134.4868", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-007.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010121134.4869", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-007.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010140842.4755", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-007.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010140842.4756", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide 008", "gnx": "ekr.20101008061729.4524", "b": "Here we will save our outline in a file named \"pim.leo\"\n\n.. image:: slide-008.png\n\n", "children": ["ekr.20101010141334.4772", "ekr.20101010141334.4793", "ekr.20101010141334.4789", "ekr.20101010141953.4835", "ekr.20101010141953.4836", "ekr.20101010141953.4837", "ekr.20101010141953.4838"]}, {"h": "@screenshot", "gnx": "ekr.20101010141334.4772", "b": "", "children": ["ekr.20101010141334.4773", "ekr.20101010141334.4778"]}, {"h": "To Do List", "gnx": "ekr.20101010141334.4773", "b": "@nocolor\n\nMy to-do list.\n", "children": ["ekr.20101010141334.4774", "ekr.20101010141334.4775", "ekr.20101010141334.4776", "ekr.20101010141334.4777"]}, {"h": "Urgent", "gnx": "ekr.20101010141334.4774", "b": "1. Make Leo tutorials.  The world is waiting.\n\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20101010141334.4775", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101010141334.4776", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101010141334.4777", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101010141334.4778", "b": "@nocolor\n", "children": ["ekr.20101010141334.4779", "ekr.20101010141334.4788"]}, {"h": "2009", "gnx": "ekr.20101010141334.4779", "b": "", "children": ["ekr.20101010141334.4780", "ekr.20101010141334.4781", "ekr.20101010141334.4782", "ekr.20101010141334.4783", "ekr.20101010141334.4784", "ekr.20101010141334.4785", "ekr.20101010141334.4786", "ekr.20101010141334.4787"]}, {"h": "Aug", "gnx": "ekr.20101010141334.4780", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101010141334.4781", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101010141334.4782", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101010141334.4783", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101010141334.4784", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101010141334.4785", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101010141334.4786", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101010141334.4787", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101010141334.4788", "b": "", "children": []}, {"h": "@select Urgent", "gnx": "ekr.20101010141334.4793", "b": "", "children": []}, {"h": "@pause", "gnx": "ekr.20101010141334.4789", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010141953.4835", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-008.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010141953.4836", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-008.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010141953.4837", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-008.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010141953.4838", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide 009", "gnx": "ekr.20101008061729.4525", "b": "The file is now saved, and the file appears in the title bar.\n\n.. image:: slide-009.png\n\n", "children": ["ekr.20101010141953.4856", "ekr.20101010141953.4873", "ekr.20101010141953.4896", "ekr.20101010141953.4897", "ekr.20101010141953.4916", "ekr.20101010141953.4917", "ekr.20101010141953.4918", "ekr.20101010141953.4919"]}, {"h": "@screenshot", "gnx": "ekr.20101010141953.4856", "b": "", "children": ["ekr.20101010141953.4857", "ekr.20101010141953.4862"]}, {"h": "To Do List", "gnx": "ekr.20101010141953.4857", "b": "@nocolor\n\nMy to-do list.\n", "children": ["ekr.20101010141953.4858", "ekr.20101010141953.4859", "ekr.20101010141953.4860", "ekr.20101010141953.4861"]}, {"h": "Urgent", "gnx": "ekr.20101010141953.4858", "b": "1. Make Leo tutorials.  The world is waiting.\n\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20101010141953.4859", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101010141953.4860", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101010141953.4861", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101010141953.4862", "b": "@nocolor\n", "children": ["ekr.20101010141953.4863", "ekr.20101010141953.4872"]}, {"h": "2009", "gnx": "ekr.20101010141953.4863", "b": "", "children": ["ekr.20101010141953.4864", "ekr.20101010141953.4865", "ekr.20101010141953.4866", "ekr.20101010141953.4867", "ekr.20101010141953.4868", "ekr.20101010141953.4869", "ekr.20101010141953.4870", "ekr.20101010141953.4871"]}, {"h": "Aug", "gnx": "ekr.20101010141953.4864", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101010141953.4865", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101010141953.4866", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101010141953.4867", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101010141953.4868", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101010141953.4869", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101010141953.4870", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101010141953.4871", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101010141953.4872", "b": "", "children": []}, {"h": "@select Urgent", "gnx": "ekr.20101010141953.4873", "b": "", "children": []}, {"h": "@pause", "gnx": "ekr.20101010141953.4896", "b": "", "children": []}, {"h": "@edit", "gnx": "ekr.20101010141953.4897", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010141953.4916", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-009.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010141953.4917", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-009.svg\n", "children": []}, {"h": "@url final output file", "gnx": "ekr.20101010141953.4918", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-009.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101010141953.4919", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide 010", "gnx": "ekr.20101008061729.4526", "b": "You've just seen an introduction to Leo as an outlining editor. You can use Leo\nto make an outline, with optional text for each outline element. You can save\nthe outline to a file. Outlines are explained more in a later tutorial in this\nseries.\n\n  *The outlining capability of Leo goes far beyond what has just been demonstrated,\n  including multipath outlines, and multiple outlines in one file.*\n\nWhat we've shown so far is no different from other outlining editors. What makes\nLeo unique is the addition of a new feature. **Using simple directives, you can\ninstruct Leo to extract text from any number of nodes, in any order, and write\nthe text to a new file**. We call files created or managed from within a Leo\noutline **external file**. You can also embed outline information in the\nexternal file, giving Leo the ability to read the text pieces back into the Leo\noutline, even if they have been changed.\n\nIn effect, Leo is a **meta-text** editor. It gives you the ability to create a\nstructural document for a non structured document, or a document that is\nstructured in some other way.\n\nWhat does this mean in practice? Some examples should help clarify things...\n", "children": ["ekr.20101010141953.4922"]}, {"h": "@url built slide", "gnx": "ekr.20101010141953.4922", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\what-is-leo\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide 011", "gnx": "ekr.20101008061729.4527", "b": "Here is the \"pim.leo\" file again. We have:\n\n1. Selected the \"Diary\" node.\n2. Typed Ctrl-H to start editing the headline.\n   (You can also edit headlines with the Edit:Edit Headline...:Edit Headline command.\n\n.. image:: slide-011.png\n\n", "children": ["ekr.20101010141953.4940", "ekr.20101010141953.4958", "ekr.20101010141953.4957", "ekr.20101010141953.5023", "ekr.20101010141953.5024"]}, {"h": "@screenshot", "gnx": "ekr.20101010141953.4940", "b": "", "children": ["ekr.20101010141953.4941", "ekr.20101010141953.4946"]}, {"h": "To Do List", "gnx": "ekr.20101010141953.4941", "b": "@nocolor\n\nMy to-do list.\n", "children": ["ekr.20101010141953.4942", "ekr.20101010141953.4943", "ekr.20101010141953.4944", "ekr.20101010141953.4945"]}, {"h": "Urgent", "gnx": "ekr.20101010141953.4942", "b": "1. Make Leo tutorials.  The world is waiting.\n\n2. Pay phone bill or the world will never know.\n", "children": []}, {"h": "Important", "gnx": "ekr.20101010141953.4943", "b": "", "children": []}, {"h": "Soon", "gnx": "ekr.20101010141953.4944", "b": "", "children": []}, {"h": "Whenever", "gnx": "ekr.20101010141953.4945", "b": "", "children": []}, {"h": "Diary", "gnx": "ekr.20101010141953.4946", "b": "@nocolor\n\nThis is my diary.\n", "children": ["ekr.20101010141953.4947", "ekr.20101010141953.4956"]}, {"h": "2009", "gnx": "ekr.20101010141953.4947", "b": "", "children": ["ekr.20101010141953.4948", "ekr.20101010141953.4949", "ekr.20101010141953.4950", "ekr.20101010141953.4951", "ekr.20101010141953.4952", "ekr.20101010141953.4953", "ekr.20101010141953.4954", "ekr.20101010141953.4955"]}, {"h": "Aug", "gnx": "ekr.20101010141953.4948", "b": "", "children": []}, {"h": "Jul", "gnx": "ekr.20101010141953.4949", "b": "", "children": []}, {"h": "Jun", "gnx": "ekr.20101010141953.4950", "b": "", "children": []}, {"h": "May", "gnx": "ekr.20101010141953.4951", "b": "", "children": []}, {"h": "Apr", "gnx": "ekr.20101010141953.4952", "b": "", "children": []}, {"h": "Mar", "gnx": "ekr.20101010141953.4953", "b": "", "children": []}, {"h": "Feb", "gnx": "ekr.20101010141953.4954", "b": "", "children": []}, {"h": "Jan", "gnx": "ekr.20101010141953.4955", "b": "", "children": []}, {"h": "2010", "gnx": "ekr.20101010141953.4956", "b": "", "children": []}, {"h": "@pause", "gnx": "ekr.20101010141953.4958", "b": "", "children": []}, {"h": "@select Diary", "gnx": "ekr.20101010141953.4957", "b": "", "children": []}, {"h": "@url screenshot", "gnx": "ekr.20101010141953.5023", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-011.png\n", "children": []}, {"h": "@url working file", "gnx": "ekr.20101010141953.5024", "b": "c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-011.svg\n", "children": []}, {"h": "@slide 012", "gnx": "ekr.20101008061729.4528", "b": "", "children": []}, {"h": "@slide 013", "gnx": "ekr.20101008061729.4529", "b": "", "children": []}, {"h": "@slide 014", "gnx": "ekr.20101008061729.4530", "b": "", "children": []}, {"h": "@slide 015", "gnx": "ekr.20101008061729.4531", "b": "", "children": []}, {"h": "@slide 016", "gnx": "ekr.20101008061729.4532", "b": "", "children": []}, {"h": "@slide 017", "gnx": "ekr.20101008061729.4533", "b": "", "children": []}, {"h": "@slide 018", "gnx": "ekr.20101008061729.4534", "b": "", "children": []}, {"h": "@slide 019", "gnx": "ekr.20101008061729.4535", "b": "", "children": []}, {"h": "@slide 020", "gnx": "ekr.20101008061729.4536", "b": "", "children": []}, {"h": "@slide 021", "gnx": "ekr.20101008061729.4537", "b": "", "children": []}, {"h": "@slide 022", "gnx": "ekr.20101008061729.4539", "b": "", "children": []}, {"h": "@slide 023", "gnx": "ekr.20101008061729.4540", "b": "", "children": []}, {"h": "@slideshow Installation", "gnx": "ekr.20100821182153.4345", "b": "@language rest\n", "children": ["ekr.20101014034526.5299", "ekr.20100821182153.4348", "ekr.20101014034526.5302", "ekr.20101014034526.5303", "ekr.20101014034526.5304", "ekr.20100821182153.4350"]}, {"h": "@slide Overview", "gnx": "ekr.20101014034526.5299", "b": ".. _`Download Python`: http://www.python.org/download/\n.. _`packaged version`: https://sourceforge.net/projects/leo/files/Leo/\n.. _`Leo's download page`: https://sourceforge.net/projects/leo/files/Leo/\n.. _`next slide`: slide-002.html\n\n**Installing on Windows: using Leo's single-click installer** \n\n1. Install Python: `Download Python`_, save to your desktop, then\n   double-click on the saved file.\n\n   Python is software for creating and running computer programs.\n   Leo requires Python 2.6 or later, or Python 3.0 or later.\n\n2. Install Qt. Get the binary package of PyQt from: \n   http://www.riverbankcomputing.co.uk/software/pyqt/download\n\n   The version of PyQt that you download must match the version of your Python.\n\n3. Download the latest Leo installer from `Leo's download page`_.\n   It will be called something like LeoSetup-<version>.exe\n\n4. Run the installer.\n\n**Installing Leo from Linux packages**\n\nLinux users are best served by the `packaged version`_ available at\nSourceForge. You can also install Leo manually, as discussed in the\n`next slide`_.\n\n**Installing Leo from sources**\n\nSee the `next slide`_.\n", "children": ["ekr.20101128120258.5087"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5087", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide Installing Leo from sources", "gnx": "ekr.20100821182153.4348", "b": ".. _`Download Python`: http://www.python.org/download/\n.. _`Leo's download page`: https://sourceforge.net/projects/leo/files/Leo/\n\n**Installing Leo from sources**\n\n1. Install Python: `Download Python`_, save to your desktop, then\n   double-click on the saved file.\n\n   Leo requires Python 2.6 or later, or Python 3.0 or later.\n\n2. Install Qt. Get PyQt from: \n   http://www.riverbankcomputing.co.uk/software/pyqt/download\n\n   The version of PyQt that you download must match the version of your Python.\n\n3. Install Leo: Download the most recent .zip file from `Leo's\n   download page`_ to your desktop or other location. Unzip the .zip\n   file to the folder of your choice.\n", "children": ["ekr.20101128120258.5094"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5094", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide Running Leo from a console", "gnx": "ekr.20101014034526.5302", "b": "**Running Leo from a console**\n\nTo run Leo directly from a console, do the following:\n\n1. Go to the Leo directory::\n\n    cd <path-to-leo-directory>\n\n2. Start launchLeo.py using Python::\n\n    python launchLeo.py %*\n\n", "children": ["ekr.20101128120258.5089"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5089", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide Scripts & .bat files", "gnx": "ekr.20101014034526.5303", "b": "Using shell scripts (Linux) or .bat files (Windows)\ncan make it easier to open Leo files.\n\n**Linux**\n\nPut this in a shell script called leo::\n\n    #!/bin/sh \n    python <path-to-leo-directory>launchLeo.py $1\n\n**Windows**\n\nPut this in leo.bat::\n\n    cd <path-to-leo-folder>\n    python <path-to-leo-folder>launchLeo.py %*\n\nOn either platform, the following will open x.leo::\n\n    leo x.leo\n", "children": ["ekr.20101128120258.5090"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5090", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide Setting .leoID.txt", "gnx": "ekr.20101014034526.5304", "b": "The first time you start Leo, a dialog will ask you for a unique\nidentifier. This string helps ensure that each Leo node has a\nunique identity.\n\nThis identifier can be any string 3 characters or more in length.\nIn a shared environment, a cvs or bzr login name works well.\n\nPick a string you don't mind making public: it will appear in\nfiles that Leo creates.\n\nLeo stores this identifier in the file ~/.leo/.leoID.txt.\nYou can change this identifier at any time by editing .leoID.txt.\n", "children": ["ekr.20101128120258.5091"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5091", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Free software", "gnx": "ekr.20100821182153.4350", "b": ".. _`Edward K. Ream`:   http://webpages.charter.net/edreamleo/ekr.html\n.. _`leo-editor`:       http://groups.google.com/group/leo-editor\n.. _`Python Tutorial`:  http://docs.python.org/tutorial/\n\nLeo is a free program distributed under the MIT license. This means that not\nonly can you use the program freely including commercially, the full\ninstallation comes with source code that you can modify as you wish, as long as\nyou give credit to the author of the program, `Edward K. Ream`_.\n\nLeo is written in Python--a full featured, powerful programming language that\nis comparatively easy to learn and use. For an excellent introduction to Python\nfor non-programmers, see the `Python Tutorial`_. Not only is Leo written in Python, it is\nscriptable via Python, meaning that you can embed Python commands in your\noutlines and execute them.\n\nLeo is under active development and all are welcome to contribute. For more\ninformation, see the `leo-editor`_ Google Group.\n\nNot only is Leo free software, it is supported software. Post questions and bug\nreports to the `leo-editor`_ Google Group.\n", "children": ["ekr.20101128120258.5096"]}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5096", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\installation\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slideshow Leo basics step by step", "gnx": "ekr.20101013072903.5224", "b": "@language rest\n@pagewidth 50\n", "children": ["ekr.20101113202201.4920", "ekr.20101013072903.5225", "ekr.20101013072903.5226", "ekr.20101014110348.5286", "ekr.20101013072903.5234", "ekr.20101018061243.5392", "ekr.20101018061243.5393", "ekr.20101014110348.5325", "ekr.20101013072903.5236", "ekr.20101013072903.5237", "ekr.20101014110348.5305", "ekr.20101013072903.5244", "ekr.20101014110348.5290", "ekr.20101013072903.5245", "ekr.20101014110348.5294", "ekr.20101014110348.5295", "ekr.20101014110348.5296", "ekr.20101014110348.5297", "ekr.20101014110348.5298", "ekr.20101014110348.5299", "ekr.20101014110348.5300", "ekr.20101014110348.5309", "ekr.20101014110348.5326", "ekr.20101018061243.5397", "ekr.20101018061243.5394", "ekr.20101014110348.5336"]}, {"h": "@wink_path = ../doc/html/slides/leo-basics-step-by-step/_files", "gnx": "ekr.20101113202201.4920", "b": "@nocolor-node\n\nThe directory containing the wink screenshots.\nThis will usually be <slideshow_dir>/_files.\n\n**Important** You generate these screenshots using Wink's \nExport As Html command (!)\n", "children": []}, {"h": "@slide ((no-slide", "gnx": "ekr.20101013072903.5225", "b": "This is a step-by-step introduction to show you\nhow to use Leo outlines.\n\n", "children": ["ekr.20101018190057.5370", "ekr.20101113211531.4918"]}, {"h": "@no-screenshot", "gnx": "ekr.20101018190057.5370", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4918", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide ((Open notebook file", "gnx": "ekr.20101013072903.5226", "b": ".. The workbook.leo window.\n\nLeo opens the **workbook file** when you start\nLeo without a filename.\n\nThe body has focus--it is colored a pale pink, and\ncontains a blinking cursor.\n\n**Note**: on some monitors the colors will be almost\ninvisible.  You can choose pane colors to suit your\ntaste.\n\n.. image:: slide-002.png\n\n", "children": ["ekr.20101018190057.5441", "ekr.20101113211531.4919"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5441", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-002.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4919", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide ((Ctrl-H edits headline", "gnx": "ekr.20101014110348.5286", "b": "Ctrl-H edits the presently selected headline.\n\nYou can type Ctrl-H at any time, regardless of\nwhere the focus is.\n\nThe body pane is now blue, indicating that it no\nlonger has focus.\n\n.. image:: slide-003.png\n\n", "children": ["ekr.20101018190057.5442", "ekr.20101113211531.4920"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5442", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-003.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4920", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide ((\"to do\" node", "gnx": "ekr.20101013072903.5234", "b": "I typed \"to do\" in the headline.\n\n.. image:: slide-004.png\n\n", "children": ["ekr.20101018190057.5443", "ekr.20101113211531.4921"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5443", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-004.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4921", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide ((Return ends editing", "gnx": "ekr.20101018061243.5392", "b": "Typing the <return> key ends editing of the headline\nand puts focus back in the body pane.\n\nNotice that the **icon box** to the left of the\nheadline now has a darker outline that it had\nbefore. This indicates that the contents of the\nnode has been changed. We say the node is\n**dirty**.\n\n.. image:: slide-005.png\n\n", "children": ["ekr.20101018190057.5444", "ekr.20101113211531.4922"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5444", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-005.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4922", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide ((no-slide focus keys", "gnx": "ekr.20101018061243.5393", "b": "You can use Leo without ever using the mouse. For\ninstance, you can select any Leo pane by using\nkeystrokes instead of clicking the pane:\n\n- Regardless of where the focus is, Alt-D puts\n  focus in the body pane and Alt-T puts focus in\n  the outline pane.\n\n- With the focus in the tree pane, hitting the\n  <return> key puts the focus in the body pane.\n\n", "children": ["ekr.20101018190057.5373", "ekr.20101128120258.5093"]}, {"h": "@no-screenshot", "gnx": "ekr.20101018190057.5373", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5093", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide ((Ctrl-S saves outline", "gnx": "ekr.20101014110348.5325", "b": "Ctrl-S saves the outline.\n\nNotice that the icon box once again has a gray outline,\nindicating that the node has not been changed since\nthe file was last saved.\n\n.. Arrow to icon box.\n\n.. image:: slide-007.png\n\n", "children": ["ekr.20101018190057.5445", "ekr.20101113211531.4924"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5445", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-007.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4924", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide ((Ctrl-I inserts a new node", "gnx": "ekr.20101013072903.5236", "b": "Ctrl-I inserts a new node.\n\n.. image:: slide-008.png\n\n", "children": ["ekr.20101018190057.5446", "ekr.20101113211531.4925"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5446", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-008.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4925", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide ((\"go shopping\"", "gnx": "ekr.20101013072903.5237", "b": "I typed \"go shopping\" followed by a return.\n\nThe focus is now in the body pane.\n\n.. image:: slide-009.png\n\n", "children": ["ekr.20101018190057.5447", "ekr.20101113211531.4926"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5447", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-009.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4926", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide ((typing text (icon box has blue square)", "gnx": "ekr.20101014110348.5305", "b": "Whatever I type will appear in the body pane.\n\nI added a shopping list.\n\nThe blue square in the icon area indicates that the body pane contains text.\n\n.. Arrow at icon box.\n\n.. buy milk\n.. buy eggs.\n\n.. image:: slide-010.png\n\n", "children": ["ekr.20101018190057.5448", "ekr.20101113211531.4927"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5448", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-010.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4927", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide ((Ctrl-R", "gnx": "ekr.20101013072903.5244", "b": "Ctrl-R moves a node right.\n\nThe \"go shopping\" node becomes a **child**\nof the \"to do\" node.\n\nThe \"to do\" node is the **parent** node.\n\n.. image:: slide-011.png\n\n", "children": ["ekr.20101018190057.5449", "ekr.20101113211531.4928"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5449", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-011.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4928", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-011.html\n", "children": []}, {"h": "@slide ((Ctrl-L", "gnx": "ekr.20101014110348.5290", "b": "Ctrl-L moves the \"go shopping\" node left.\n\nThe \"go shopping\" node becomes a **sibling**\nof the \"to do\" node.\n\n.. image:: slide-012.png\n\n", "children": ["ekr.20101018190057.5450", "ekr.20101113211531.4929"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5450", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-012.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4929", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-012.html\n", "children": []}, {"h": "@slide ((undo/redo", "gnx": "ekr.20101013072903.5245", "b": "Leo has unlimited undo/redo capabilities.\n\nHere, I typed Ctrl-Z to undo the previous move.\nThe \"go shopping\" node is once again a child of\nthe \"to do\" node.\n\n**Note**: Ctrl-Shift-Z redoes a previous undo.\n\n.. image:: slide-013.png\n\n", "children": ["ekr.20101018190057.5451", "ekr.20101113211531.4930"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5451", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-013.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4930", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-013.html\n", "children": []}, {"h": "@slide ((new node", "gnx": "ekr.20101014110348.5294", "b": "Let's add a new node.  I hit Ctrl-I.\n\n.. image:: slide-014.png\n\n", "children": ["ekr.20101018190057.5452", "ekr.20101113211531.4931"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5452", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-014.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4931", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-014.html\n", "children": []}, {"h": "@slide ((\"fix car\"", "gnx": "ekr.20101014110348.5295", "b": "I type \"fix car\" followed by the <return> key.\n\n.. image:: slide-015.png\n\n", "children": ["ekr.20101018190057.5453", "ekr.20101113211531.4932"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5453", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-015.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4932", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-015.html\n", "children": []}, {"h": "@slide ((Ctrl-U", "gnx": "ekr.20101014110348.5296", "b": "I decide that fixing the car should have first priority.\n\nI type Ctrl-U to move the \"fix car\" node up.\nIt becomes the first child of the \"to do\" node.\n\n.. image:: slide-016.png\n\n", "children": ["ekr.20101018190057.5454", "ekr.20101113211531.4933"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5454", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-016.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4933", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-016.html\n", "children": []}, {"h": "@slide ((contracting nodes", "gnx": "ekr.20101014110348.5297", "b": "After creating the to-do list, I want to hide it\nby **collapsing** the \"to do\" node.\n\nI could do that by clicking the black triangle\nto the left of the \"to do\" node.\n\nHowever, using the mouse is not recommended--\nthere are much easier ways.\n\n.. arrow points to black triangle.\n\n.. image:: slide-017.png\n\n", "children": ["ekr.20101018190057.5455", "ekr.20101113211531.4934"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5455", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-017.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4934", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-017.html\n", "children": []}, {"h": "@slide ((Up-Arrow", "gnx": "ekr.20101014110348.5298", "b": "The focus is in the tree pane, so I can select the \"to do\"\nnode merely by using the Up-Arrow key.\n\nIf, for some reason, the focus is in the body pane,\nI can select the previous node in either of two ways:\n\n1. Type Alt-T to put focus in the tree pane\n   followed by the Up-Arrow key.\n\n2. Type Alt-Up-Arrow.  This selects the previous\n   node and also puts focus in the tree pane.\n\nNow the \"to do\" node is selected.\n\n.. image:: slide-018.png\n\n", "children": ["ekr.20101018190057.5456", "ekr.20101113211531.4935"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5456", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-018.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4935", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-018.html\n", "children": []}, {"h": "@slide ((Left-Arrow", "gnx": "ekr.20101014110348.5299", "b": "With the \"to-do\" node selected,\nhitting the Left-Arrow key will contract the node.\n\n.. \"to do\" contracted.\n\n.. image:: slide-019.png\n\n", "children": ["ekr.20101018190057.5457", "ekr.20101113211531.4936"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5457", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-019.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4936", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-019.html\n", "children": []}, {"h": "@slide ((20 Right-Arrow", "gnx": "ekr.20101014110348.5300", "b": "To expand the \"to do\" node,\nI merely hit the Right-Arrow key.\n\nWe can now see the entire to-do list.\n\n.. image:: slide-020.png\n\n", "children": ["ekr.20101018190057.5458", "ekr.20101113211531.4937"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5458", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-020.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4937", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-020.html\n", "children": []}, {"h": "@slide ((no-slide Arrow keys: summary", "gnx": "ekr.20101014110348.5309", "b": "The arrow keys do different things depending on\nwhich pane has focus. Using arrow keys is **much**\neasier than using the mouse.\n\n**Focus in outline pane**\n\n    The **plain** arrow keys **select** nodes,\n    expanding or contracting nodes as needed.\n\n    The **shift** arrow keys **move** nodes. The\n    Shift-Left-Arrow and Shift-Up-Arrow contract\n    nodes as needed. **Note**: the\n    Shift-Down-Arrow and Shift-Right-Arrow keys\n    never expand nodes.\n\n**Focus in body pane**\n\n    As usual, the **plain** arrow keys move the\n    cursor and the **shift** arrow keys move the\n    cursor and extend the solution.\n\n    The **alt** arrow keys move the focus to the\n    outline pane and then select nodes. The\n    **alt-shift** arrow keys move the focus to the\n    outline pane and then move nodes.\n\n..  - The Up-Arrow and Down-Arrow keys select\n..  the previous or next visible nodes.\n\n..  - The Right-Arrow key contracts a node if the node\n..  is expanded. Otherwise the Right-Arrow key\n..  selects the node's parent.\n\n..  - The Left-Arrow key does nothing if the selected\n..  node has no children.  If the node does have\n..  children, the Left-Arrow key expands the node\n..  (if the children or invisible) or selects the\n..  first child (if the children are visible).\n\n..  This is exactly how Windows explorer works, and\n..  it quickly becomes second nature.\n\n", "children": ["ekr.20101014110348.5323", "ekr.20101113211531.4938"]}, {"h": "@no-screenshot", "gnx": "ekr.20101014110348.5323", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4938", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-021.html\n", "children": []}, {"h": "@slide ((Shift-Ctrl-C copies", "gnx": "ekr.20101014110348.5326", "b": "We can copy and paste nodes and all their descendants.\n\nUsing the arrow keys as necessary, I select the\n\"to do\" node.\n\nThe Shift-Ctrl-C key copies the selected outline.\n\nI want to do the paste *after* the to-do list, so I collapse\nthe original node before doing the paste:\n\n.. image:: slide-022.png\n\n", "children": ["ekr.20101018190057.5459", "ekr.20101113211531.4939"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5459", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-022.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4939", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-022.html\n", "children": []}, {"h": "@slide ((The pasted node", "gnx": "ekr.20101018061243.5397", "b": "And here is the pasted node.\n\n.. image:: slide-023.png\n\n", "children": ["ekr.20101018190057.5460", "ekr.20101113211531.4940"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5460", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-023.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4940", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-023.html\n", "children": []}, {"h": "@slide ((expanding the pasted node", "gnx": "ekr.20101018061243.5394", "b": "Expanding the node shows that the copy operation\ncopied the node and all its descendants.\n\n.. image:: slide-024.png\n\n", "children": ["ekr.20101018190057.5461", "ekr.20101113211531.4941"]}, {"h": "@url final output file", "gnx": "ekr.20101018190057.5461", "b": "c:/leo.repo/trunk/leo/doc/html/slides/leo-basics-step-by-step/slide-024.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4941", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-024.html\n", "children": []}, {"h": "@slide ((no-slide end slide", "gnx": "ekr.20101014110348.5336", "b": "This concludes the step-by-step introduction to\nLeo's outlines.\n\nYou now know how to do the following:\n\n- Create new nodes.\n- Edit the headline and body text of any node.\n- Reorganize nodes. \n- Expand and contract nodes.\n- Copy and paste nodes and their descendants.\n\nMastering these skills is essential to using Leo\neffectively and enjoyably.\n\n", "children": ["ekr.20101018061243.5395", "ekr.20101113211531.4942"]}, {"h": "@no-screenshot", "gnx": "ekr.20101018061243.5395", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101113211531.4942", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\leo-basics-step-by-step\\_build\\html\\slide-025.html\n", "children": []}, {"h": "@slideshow Scripting Leo", "gnx": "ekr.20101011165412.4968", "b": "@language rest\n@pagewidth 50\n\n.. This slideshow will have no screenshots.\n\n", "children": ["ekr.20101119112650.5363", "ekr.20101119112650.5368", "ekr.20101119112650.5369", "ekr.20101119112650.5374", "ekr.20101119112650.5371", "ekr.20101119112650.5375", "ekr.20101121021109.5351", "ekr.20101119112650.5370", "ekr.20101119112650.5376", "ekr.20101119112650.5377", "ekr.20101121021109.5352"]}, {"h": "@slide Introduction", "gnx": "ekr.20101119112650.5363", "b": "For me, scripting is the most fun part of Leo.\n\nLeo can execute any body text as a **Leo script**,\nPython scripts that have full access to all data\nin any open Leo outline, as well as full access to\nall parts of Leo's source code.\n\nLeo's Ctrl-B (execute-script) command runs the\nbody text of a node as a Leo script.\n", "children": ["ekr.20101121125326.4962"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4962", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide c, g and p", "gnx": "ekr.20101119112650.5368", "b": ".. _`Scripting Chapter`: http://webpages.charter.net/edreamleo/scripting.html\n.. _`Leo's Users Guide`: http://webpages.charter.net/edreamleo/leo_toc.html\n\nLeo scripts execute in an environment containing\nthree predefined objects: c, g and p.\n\n**g** is Leo's leoGlobals module. This module\ncontains several dozen utility functions and\nclasses.\n\n**c** is the **commander** of the outline\ncontaining the script. Commanders defined\nall of Leo's commands, as well as other data.\n\n**p** is the **position** of the presently\nselected node. Positions represent positions\nin the traversal of Leo outlines.\n\nThis slide give a few examples of how to use\nc, g and p in Leo scripts. For full details\nabout scripting in Leo, see the `Scripting Chapter`_\nin `Leo's Users Guide`_.\n", "children": ["ekr.20101121125326.4963"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4963", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide Official ivars", "gnx": "ekr.20101119112650.5369", "b": "The c, g and p objects give Leo scripts access to\nall parts of Leo and Leo outlines. There are many\n**official ivars** (instance variables) that\nscripts may use. Here are a few:\n\n**c.frame** is the frame representing the actual\nparts of Leo screen. For any frame, **frame.c** is\nthe frame's commander, so c.frame.c is always c.\n\n**g.app** is the **application object**\nrepresenting the entire Leo application. The ivars\nof g.app represent Leo's global variables.\n\n**p.v** is the **vnode** at position p. A vnode\nrepresents an outline node. Vnodes hold most of\nthe data in Leo outlines. For any vnode v, v.h is\nthe node's headline, and v.b is the node's body\ntext. As a convenience, for any position p, p.h\nand p.b are synonyms for p.v.h and p.v.b.\n**Important**: because of clones, a vnode may\nappear in several positions in a traversal.\n", "children": ["ekr.20101121125326.4964"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4964", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide Hello world", "gnx": "ekr.20101119112650.5374", "b": "g.es is a function that prints its arguments to Leo's log pane.\n\nHere is the hello world program as a Leo script::\n\n    g.es('Hello world!')\n\nLeo scripts may also use Python's print command\nprovided that Leo is running in a console.\n", "children": ["ekr.20101121125326.4965"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4965", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide p.h and p.b", "gnx": "ekr.20101119112650.5371", "b": ".. _`Python properties`: http://docs.python.org/library/functions.html\n\nGiven any position p, **p.h** is the headline text\nof p.v, and **p.b** is the body text of p.v.\n\np.h and p.b are `Python properties`_, which means\nyou can set the headline and body text by\nassigning to them::\n\n    p.h = p.h + ' more'\n\nIn order to see the result of changing a headline,\nLeo scripts must redraw the outline pane, like this::\n\n    c.redraw()\n", "children": ["ekr.20101121125326.4966"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4966", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Iterators", "gnx": "ekr.20101119112650.5375", "b": ".. _`Python iterator`: http://docs.python.org/library/stdtypes.html#iterator-types\n\nCommanders and positions define `Python\niterators`_ that return lists of positions in Leo\noutlines. These iterators are the easiest way of\ngaining access to the nodes of Leo outlines. Here\nare few examples (there are many more):\n\n- **c.all_positions()** returns all the positions\n  of the outline in order. Cloned nodes will\n  appear several times in this list.\n\n- **c.all_unique_nodes()** returns all the vnodes\n  of the outline.\n\n- **p.self_and_subtree()** returns p and all its\n  descendant positions.\n\n- **p.children()** returns all the positions of\n  all p's direct children.\n", "children": ["ekr.20101121125326.4967"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4967", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide Using iterators", "gnx": "ekr.20101121021109.5351", "b": "Using iterators, it is easy to gain access to all\nthe data in a Leo outline. For example, the\nfollowing script prints all headlines in an\noutline, indented to show outline level::\n\n    for p in c.all_positions():\n        g.es(' '*p.level(),p.h)\n\nThe output of this script, when run from LeoDocs.leo,\nwill look something like this::\n\n    Startup\n     @file doc-startup.txt\n      @chapters\n      Buttons\n       Disabled buttons\n       ... and hundreds of other nodes.\n\n**Note**: p.level() is a method of the position\nclass that returns the outline level of the node\nat position p: 0 for top-level nodes, 1 for their\nchildren, and so on.\n", "children": ["ekr.20101121125326.4968"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4968", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide Building scripts from outlines", "gnx": "ekr.20101119112650.5370", "b": "Leo scripts can be composed of more than one node,\njust as external files are organized. The Execute\nScript command **preprocesses** the script before\nexecuting it, by expanding section references and\n\\@others directives\n\nFor example, I organize my complex script as follows.\nI create a top-level node containing just::\n\n    '''docstring'''\n    @others\n    controller(c).run()\n\nA child node will contain the following::\n\n    class controller:\n        def __init__(self,c):\n            self.c = c\n        @others\n\nAnd the children of the top-level class node will\ncontain all the methods of the controller class.\nThis organization is simple, flexible and powerful.\n", "children": ["ekr.20101121125326.4969"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4969", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide g.openWithFileName", "gnx": "ekr.20101119112650.5376", "b": "The c and g constants give you access to all of\nLeo's source code. Here, we'll discuss just two of\nthem. There are hundreds more you can use.\n\n**g.openWithFileName** opens a .leo file.  For example::\n\n    ok, frame = g.openWithFileName(fileName,c)\n    new_c = frame.c\n\nThe return frame value represents the frame of the visual\noutline.  frame.c is the frame's commander, so new_c is\nthe commander of the newly-created outline.\n\n", "children": ["ekr.20101119112650.5381", "ekr.20101121125326.4970"]}, {"h": "@no-screenshot", "gnx": "ekr.20101119112650.5381", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4970", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide g.pdb", "gnx": "ekr.20101119112650.5377", "b": ".. _`Python debugger`: http://docs.python.org/library/pdb.html\n.. _`Pudb debugger`: http://pypi.python.org/pypi/pudb\n\n**g.pdb** opens pdb, the `Python debugger`_.  To use this,\nyou must be running Leo from a console.\n\nThe pudb plugin changes g.pdb so that it uses the\nfull-screen `Pudb debugger`_ instead of pdb.\n", "children": ["ekr.20101119112650.5379", "ekr.20101121130516.4962"]}, {"h": "@no-screenshot", "gnx": "ekr.20101119112650.5379", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101121130516.4962", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide Further reading", "gnx": "ekr.20101121021109.5352", "b": ".. _`Scripting Chapter`: http://webpages.charter.net/edreamleo/scripting.html\n.. _`Leo's Users Guide`: http://webpages.charter.net/edreamleo/leo_toc.html\n\nThis concludes our brief introduction to scripting in Leo.\n\nFor full details about scripting in Leo, see the\n`Scripting Chapter`_ in `Leo's Users Guide`_.\n", "children": ["ekr.20101121125326.4972"]}, {"h": "@url built slide", "gnx": "ekr.20101121125326.4972", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\scripting-leo\\_build\\html\\slide-011.html\n", "children": []}, {"h": "@slideshow Using Leo's minibuffer", "gnx": "ekr.20101014034526.5296", "b": "@language rest\n@pagewidth 60\n", "children": ["ekr.20101122071746.5047", "ekr.20101122071746.4988", "ekr.20101122071746.4990", "ekr.20101122071746.4992", "ekr.20101122071746.5005", "ekr.20101122071746.5006", "ekr.20101122071746.4994", "ekr.20101122071746.5007", "ekr.20101122071746.5021", "ekr.20101122071746.5008", "ekr.20101122071746.5009", "ekr.20101122071746.5010"]}, {"h": "@wink_path = ../doc/html/slides/using-leos-minibuffer/_files", "gnx": "ekr.20101122071746.5047", "b": "", "children": []}, {"h": "@slide Introduction", "gnx": "ekr.20101122071746.4988", "b": "Leo's **minibuffer** appears at the bottom of Leo's main window.\n\nYou use the minibuffer to execute commands by name, and also\nto accumulate arguments to commands.\n\nType <Alt-x> to put the cursor in the minibuffer.\n\n.. sc 1: cursor in the minibuffer\n\n.. image:: slide-001.png\n\n", "children": ["ekr.20101123095350.5005", "ekr.20101123095813.5004"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5005", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-001.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5004", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide Tab completion", "gnx": "ekr.20101122071746.4990", "b": "You could type the full command name in the minibuffer,\nfollowed by the <return> key to invoke the command,\nbut that would be **way** too much work.\n\nInstead, you can use **tab completion** to avoid having to\ndo much typing. With tab completion, there is no need to\nremember the exact names of Leo's commands.\n\n.. no screenshot\n", "children": ["ekr.20101122071746.5004"]}, {"h": "@no-screenshot", "gnx": "ekr.20101122071746.5004", "b": "", "children": []}, {"h": "@slide Example", "gnx": "ekr.20101122071746.4992", "b": "For example, suppose you want to print out the list of Leo's\ncommands. You might remember only that there are several\nrelated commands and that they all start with \"print\".\nJust type::\n\n    <alt-x>pri<tab>\n\nYou will see \"print-\" in the minibuffer.\nThe **Completion tab** in the log pane shows\nall the commands that start with \"print-\".\n\n.. sc 2: The Completion tab contains print- items\n\n.. image:: slide-003.png\n\n", "children": ["ekr.20101123095350.5006", "ekr.20101123095813.5006"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5006", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-003.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5006", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide Example, continued", "gnx": "ekr.20101122071746.5005", "b": "Now just type \"c<tab>\" and you will see one the single\nprint-commands command in the minibuffer. Finally, type\n<return> to execute the command.\n\n.. sc 3:  Only the print-commands command in the Completion tab.\n\n.. image:: slide-004.png\n\n", "children": ["ekr.20101123095350.5007", "ekr.20101123095813.5007"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5007", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-004.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5007", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide Example, concluded", "gnx": "ekr.20101122071746.5006", "b": "You will see the output of the print-commands command\nin the commands tab, and focus returns to the body pane.\n\n.. sc 4: show the Commands tab.\n\n.. image:: slide-005.png\n\n", "children": ["ekr.20101123095350.5008", "ekr.20101123095813.5008"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5008", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-005.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5008", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Details", "gnx": "ekr.20101122071746.4994", "b": "Using the minibuffer quickly becomes second nature. When in\ndoubt about what the valid completions are, you simply hit\nthe <tab> key.\n\nHere are a few more details you should know about:\n\n- You can use <BackSpace> in the minibuffer to show more\n  alternatives.\n\n- You can hit <Ctrl-G> at any time in Leo to put focus in\n  the body pane.  This is the way to exit the minibuffer\n  without executing any command.\n\n.. no screenshot\n", "children": ["ekr.20101122071746.5045"]}, {"h": "@no-screenshot", "gnx": "ekr.20101122071746.5045", "b": "", "children": []}, {"h": "@slide Arguments", "gnx": "ekr.20101122071746.5007", "b": "Several of Leo's commands use the minibuffer to get arguments.\n\nFor example, Leo's find command accumulates the search and\nreplace strings in the minibuffer.\n\nTo invoke the find command, type <Ctrl-F>. This puts the\nfocus in the minibuffer and shows the Find tab.\n**Important**: the Find tab just shows you the status of\nsearch and replace operations. You control those operations\nfrom the minibuffer.\n\n.. sc 5  (missing the cursor)\n\n.. image:: slide-007.png\n\n", "children": ["ekr.20101123095350.5009", "ekr.20101123095813.5012"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5009", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-007.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5012", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide Search string", "gnx": "ekr.20101122071746.5021", "b": "Now type the search string, say \"def\".\n\n.. sc 6: searching for \"def\".\n\n.. image:: slide-008.png\n\n", "children": ["ekr.20101123095350.5010", "ekr.20101123095813.5013"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5010", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-008.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5013", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide Replace string", "gnx": "ekr.20101122071746.5008", "b": "You can invoke the find by typing <return>.\n\nHowever, suppose you want to replace \"def\" with \"foo\".\n\nType <Shift-Ctrl-R>. The minibuffer prompts for the replacement string.\nNotice that the status area now shows \"def\" as the Find string.\n\n.. sc 7: Replace String: def With:\n\n.. image:: slide-009.png\n\n", "children": ["ekr.20101123095350.5011", "ekr.20101123095813.5016"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5011", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-009.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5016", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide Doing the find", "gnx": "ekr.20101122071746.5009", "b": "Type \"foo\" and hit return to start the find-next command.\n\n.. sc 8 show \"def\" selected.\n\n.. image:: slide-010.png\n\n", "children": ["ekr.20101123095350.5012", "ekr.20101123095813.5019"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5012", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-010.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5019", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide Doing the replace", "gnx": "ekr.20101122071746.5010", "b": "Here, Leo has found the next instance of \"def\" in the body pane.\n\n- To make the replacement, hit <Ctrl-minus>.\n\n- To continue searching without making a replacement, hit <F3>.\n\n- To end the search, hit <Ctrl-G>.\n\nThis concludes the discussion of the minibuffer.\n\n.. image:: slide-011.png\n", "children": ["ekr.20101123095350.5013", "ekr.20101123095813.5018"]}, {"h": "@url final output file", "gnx": "ekr.20101123095350.5013", "b": "c:/leo.repo/trunk/leo/doc/html/slides/using-leos-minibuffer/slide-011.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5018", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\using-leos-minibuffer\\_build\\html\\slide-011.html\n", "children": []}, {"h": "@slideshow Clones and views", "gnx": "ekr.20101014110348.5293", "b": "@language rest\n@pagewidth 60\n", "children": ["ekr.20101123095813.5044", "ekr.20101122052247.4962", "ekr.20101122052247.4964", "ekr.20101122052247.4966", "ekr.20101122052247.4968", "ekr.20101122052247.4970", "ekr.20101122052247.4972", "ekr.20101122052247.4974", "ekr.20101123095813.5042", "ekr.20101122052247.4976", "ekr.20101123095813.5039", "ekr.20101122052247.4978", "ekr.20101123095813.5040"]}, {"h": "@wink_path ../doc/html/slides/clones-and-views/sc_files", "gnx": "ekr.20101123095813.5044", "b": "", "children": []}, {"h": "@slide Clones and views", "gnx": "ekr.20101122052247.4962", "b": "Clones are one of Leo's most unusual and most useful features.\n\nA **clone** is a node that appears in more than one place in a Leo outline.\n\nHere, we have cloned node A by selecting A and doing Ctrl=` (clone-node)\n\nClones are marked with a small red *clone arrow** in the icon box.\nDeleting the penultimate clone removes the red arrow from the node.\n\n.. sc 1: Clone of A.\n\n.. image:: slide-001.png\n\n", "children": ["ekr.20101123095813.5046", "ekr.20101123095813.5056"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5046", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-001.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5056", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide Clones are the same node", "gnx": "ekr.20101122052247.4964", "b": "Changing the headline or body text of a clone changes the headline or body\ntext of all other clones of that node. Furthermore, changing any descendants\nof a clone, including inserting, deleting or moving nodes, results in the\nsame changes being made to all other clones.\n\nIn fact, all clones of a node are actually *the exactly the same node*, so\nany change to one clone inevitably affects all other clones.\n\n.. no sc\n", "children": ["ekr.20101122052247.4979", "ekr.20101123095813.5062"]}, {"h": "@no-screenshot", "gnx": "ekr.20101122052247.4979", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5062", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide Changing headlines", "gnx": "ekr.20101122052247.4966", "b": "Changing the headline of node A changes the headlines of all cloned nodes.\n\n.. sc 2: Rename the node to B.\n\n.. image:: slide-003.png\n\n", "children": ["ekr.20101123095813.5047", "ekr.20101123095813.5057"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5047", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-003.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5057", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide A new node", "gnx": "ekr.20101122052247.4968", "b": "Here we have created a node C following the first clone of B.\n\n.. sc 3: Create node C\n\n.. image:: slide-004.png\n\n", "children": ["ekr.20101123095813.5048", "ekr.20101123095813.5058"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5048", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-004.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5058", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide Adding a child node", "gnx": "ekr.20101122052247.4970", "b": "Moving C to the right makes C a child of node B.\nAs you can see, C appears as a child of both cloned nodes.\n\nEven the expansion state of cloned nodes are identical:\nboth clones are now expanded.\n\n.. sc 4: move C right.\n\n.. image:: slide-005.png\n\n", "children": ["ekr.20101123095813.5049", "ekr.20101123095813.5059"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5049", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-005.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5059", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Creating a new child", "gnx": "ekr.20101122052247.4972", "b": "Here, I have created a new node D with Ctrl-I (insert-node).\n\nThe node appears as a child of both cloned nodes.\n\nIn general, **any** change to one clone produces the\ncorresponding change in all other clones.\n\n.. sc 5: Insert node\n\n.. image:: slide-006.png\n\n", "children": ["ekr.20101123095813.5050", "ekr.20101123095813.5060"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5050", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-006.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5060", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide Keeping track of changes", "gnx": "ekr.20101122052247.4974", "b": "Changing a node marks all clones of that node as changed.\nWhen I save the Leo outline, Leo automatically writes all\nthe external files that contain dirty nodes.\n\nFor example, the cloned spam node appears in two places.\n\n.. sc 6: @file node is dirty\n\n.. image:: slide-007.png\n\n", "children": ["ekr.20101123095813.5051", "ekr.20101123095813.5061"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5051", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-007.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5061", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide Keeping track of changes: 2", "gnx": "ekr.20101123095813.5042", "b": "Changing either clone marks both as changed and marks any\nancestor @file nodes as changed as well.\n\nThis ensures that saving the .leo file will also save all\nchanged external files.\n\n.. sc 7: @file node is dirty\n\n.. image:: slide-008.png\n\n", "children": ["ekr.20101123095813.5052", "ekr.20101123095813.5063"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5052", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-008.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5063", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide Views", "gnx": "ekr.20101122052247.4976", "b": "Clones are important because they allow you to create as\nmany views of the data in the outline as you like. In\neffect, Leo becomes a supremely flexible filing cabinet. Any\nordinary node can act like a folder in the filing cabinet.\nUsing clones, you can \"file\" a node in as many folders as\nyou like.\n\n.. no sc\n", "children": ["ekr.20101123095813.5045", "ekr.20101123095813.5064"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5045", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5064", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide Views: 2", "gnx": "ekr.20101123095813.5039", "b": "In Leo, a **view** is simply a subset of the nodes of the\noutline. We represent a view as **ordinary** node, called a\n**view node** (1). The children of the view node are the subset of\nnodes that define the view. It's that simple.\n\nWith Leo, you can have as many view nodes as you like. There\nis no such thing as a single, \"correct\" view of data.\n\n.. sc 8: Ordinary node with clones.\n\n.. image:: slide-010.png\n\n", "children": ["ekr.20101123095813.5053", "ekr.20101123095813.5065"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5053", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-010.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5065", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide Bug nodes", "gnx": "ekr.20101122052247.4978", "b": "I use view nodes to focus attention on a set of disparate\nnodes. For example, when I fix a bug in Leo, I create a **bug\nnode** containing all the data in Leo's source code that\nrelates to the bug. As I discover code related to the bug, I\nclone nodes and move them under the bug node. I'll also add\nordinary nodes as children of the bug node. These nodes\ncontain the original bug report, descriptions of how I fixed\nthe bug, test data, or any other notes I might want to keep.\n\n.. sc 9: bug node\n\n.. image:: slide-011.png\n\n", "children": ["ekr.20101123095813.5054", "ekr.20101123095813.5066"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5054", "b": "c:/leo.repo/trunk/leo/doc/html/slides/clones-and-views/slide-011.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5066", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-011.html\n", "children": []}, {"h": "@slide Bug nodes: 2", "gnx": "ekr.20101123095813.5040", "b": "Once I have created the bug node, I concentrate *only* on\nthat node and its children. I can examine the bug node and\nits children without having to jump around the outline.\nEverything I need is in one place. This extremely narrow\nfocus makes it *much* easier to fix bugs. to jump around the\noutline. It doesn't matter how big or complex the outline\nis: I am only dealing with the bug node and its children.\n\n**Important**: I can fix the bug by changing the clones in\nthe view node. When I save the Leo file, Leo will save all\nthe @<file> nodes that contain any changed clone. Everything\n\"just works\".\n\n.. no screenshot\n", "children": ["ekr.20101123095813.5043", "ekr.20101123095813.5067"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5043", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5067", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\clones-and-views\\_build\\html\\slide-012.html\n", "children": []}, {"h": "@slideshow External files", "gnx": "ekr.20101014034526.5280", "b": "@language rest\n@pagewidth 60\n", "children": ["ekr.20101123095813.5072", "ekr.20101122052247.4980", "ekr.20101122052247.4982", "ekr.20101122052247.4984", "ekr.20101123095813.5068", "ekr.20101122052247.4986", "ekr.20101122052247.4988", "ekr.20101122052247.4990", "ekr.20101122052247.4992", "ekr.20101122052247.4994", "ekr.20101123095813.5025", "ekr.20101122052247.4998", "ekr.20101123095813.5024", "ekr.20101122052247.5000", "ekr.20101122052247.5013", "ekr.20101122052247.5002", "ekr.20101122052247.5004", "ekr.20101122052247.5006", "ekr.20101122052247.5008", "ekr.20101123095813.5036", "ekr.20101122052247.5010", "ekr.20101123095813.5038", "ekr.20101122052247.5012"]}, {"h": "@wink_path = ../doc/html/slides/external-files/_files", "gnx": "ekr.20101123095813.5072", "b": "", "children": []}, {"h": "@slide External files", "gnx": "ekr.20101122052247.4980", "b": "Trees whose root headline starts with \\@file, \\@auto or\n\\@edit create **external files** on your file system. Here\nare some example headlines::\n\n  @file myClass.py\n  @auto ../graphics/circles.cpp\n  @edit ~/.leo/.leoID.txt\n\nAs you can see, these nodes specify file names, which can be\nan absolute path or a path relative to the directory\ncontaining the Leo outline.\n\nCollectively, nodes that create external files are known as\n**@<file> nodes.** Leo defines several other kinds of\n@<file> nodes, but this slideshow will not discuss them.\n\n.. no sc\n\n\n", "children": ["ekr.20101123095813.5020", "ekr.20101123095813.5104"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5020", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5104", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-001.html\n", "children": []}, {"h": "@slide Loading and saving files", "gnx": "ekr.20101122052247.4982", "b": "Leo automatically loads all @<file> trees when you open a\nLeo outline, and Leo writes any modified @<file> tree when\nyou save an outline. Reading external files is very fast\nbecause of an efficient file-caching scheme.\n\nA single Leo outline may be connected to dozens of external\nfiles: this makes Leo work like an Integrated Development\nEnvironment (IDE). Leo outlines act like project files. For\nexample, one Leo outline, leoPyRef.leo, contains \\@file\ntrees for all of Leo's core source files. Another Leo\noutline, leoPluginsRef.leo, creates the external files for\nall of Leo's plugins, and LeoDocs.leo contains all of Leo's\ndocumentation.\n\n.. no sc\n", "children": ["ekr.20101123095813.5021", "ekr.20101123095813.5105"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5021", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5105", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-002.html\n", "children": []}, {"h": "@slide Sentinel lines", "gnx": "ekr.20101122052247.4984", "b": "Leo stores the structure of \\@file trees in external files\nthemselves using comment lines called **sentinel lines**.\nSentinel lines allow Leo to keep track of outlines\nstructure, including clone relationships. Using \\@file is\n**highly recommended** whenever possible. In particular,\nusing \\@file allows you to **share outline structure** with\nothers merely by sharing external files. External files\ncreated from \\@file nodes contain **all** essential data:\nThe .leo file contains only the headline of the \\@file node.\nAll the data resides in the external files.\n\n.. no sc\n", "children": ["ekr.20101123095813.5023", "ekr.20101123095813.5106"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5023", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5106", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-003.html\n", "children": []}, {"h": "@slide Avoiding sentinels", "gnx": "ekr.20101123095813.5068", "b": "In some situations it is not appropriate to use sentinel\ncomments in external files. In that case you use \\@auto and\n\\@edit trees to connect Leo outlines to existing external\nfiles without creating sentinel files. Not all of Leo's\nfeatures can be used with \\@auto and \\@edit trees, but that\ncan't be helped. In particular, Leo can not preserve outline\nstructure exactly. Leo's \"degraded\" operation for such trees\nis similar to that found in all other editors and IDE's.\n\nThe rest of this slide show will discuss \\@file trees and\ntheir capabilities. We will then discuss \\@auto and \\@edit.\n\n.. no sc\n", "children": ["ekr.20101123095813.5070", "ekr.20101123095813.5107"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5070", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5107", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-004.html\n", "children": []}, {"h": "@slide Using @file trees", "gnx": "ekr.20101122052247.4986", "b": "To repeat, it's best to use \\@file to create external files\nif at all possible. The next series of slides will show you\nhow to create external files with \\@file trees.\n\nTo create a new external file, create an \\@file node giving\nthe path to the external file. This path can be a full,\nabsolute path, but usually it is more convenient to use a\nrelative path. All relative paths in @<file> nodes are\nrelative to Leo's **load directory**, the directory\ncontaining the .leo file for the present outline. In most\ncases, we can ignore the path prefix entirely.\n\n.. sc 1: @file myFile.py\n\n.. image:: slide-005.png\n\n", "children": ["ekr.20101123095813.5074", "ekr.20101123095813.5087"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5074", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-005.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5087", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-005.html\n", "children": []}, {"h": "@slide Top-level design pattern", "gnx": "ekr.20101122052247.4988", "b": "The body text of the @file node contains typical code for a\nfile that defines a single Python class. Informally, it says\nthat external file consists of import statements, followed\nby the class MyDemoClass.\n\nThe next few slides will discuss this pattern line-by-line.\n\n.. sc 2: top-level node\n..  << imports >>\n..  class MyDemoClass:\n..      @others\n\n.. image:: slide-006.png\n\n", "children": ["ekr.20101123095813.5075", "ekr.20101123095813.5089"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5075", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-006.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5089", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-006.html\n", "children": []}, {"h": "@slide Section references", "gnx": "ekr.20101122052247.4990", "b": "The << imports >> line is a **section reference**. \"Imports\"\nis the **section name**. This line tells Leo to insert the\n**section definition** into the output file at the place\nwhere section reference occurs.\n\n.. sc 3: top-level node (with imports line highlighted)\n\n.. image:: slide-007.png\n\n", "children": ["ekr.20101123095813.5076", "ekr.20101123095813.5090"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5076", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-007.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5090", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-007.html\n", "children": []}, {"h": "@slide Section definitions", "gnx": "ekr.20101122052247.4992", "b": "**Section definition nodes** create section definitions.\nSection definition nodes contain a section name in the\nheadline. The body text contains the section definition.\n\nTherefore, the definition of << imports >> are the lines::\n\n    import os\n    import sys\n\nEach section definition node must be a descendant of the\nnode containing the section reference.\n\n.. sc 4: << imports node >>\n\n.. image:: slide-008.png\n\n", "children": ["ekr.20101123095813.5077", "ekr.20101123095813.5091"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5077", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-008.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5091", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-008.html\n", "children": []}, {"h": "@slide The @others directive", "gnx": "ekr.20101122052247.4994", "b": "The **@others directive** is similar to a section reference;\n\\@others tells Leo to insert text into the output file.\nInstead of inserting the body text of one particular node,\nas in a section reference, \\@others tells Leo to insert the\nbody text of all nodes that **aren't** section definition\nnodes. That's where the name comes from: it inserts all the\n**other** nodes.\n\n.. sc 5: top-level node (with @others line highlighted)\n\n.. image:: slide-009.png\n\n", "children": ["ekr.20101123095813.5078", "ekr.20101128120258.5095"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5078", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-009.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5095", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-009.html\n", "children": []}, {"h": "@slide References & expansions", "gnx": "ekr.20101123095813.5025", "b": "Let us use the term **reference** to mean either a section\nreference or an \\@others directive. The **expansion** of a\nreference is the set of all lines that Leo writes to the\noutput file as the result of that reference.\n\n.. no sc\n", "children": ["ekr.20101123095813.5026", "ekr.20101123095813.5108"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5026", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5108", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-010.html\n", "children": []}, {"h": "@slide Indentation", "gnx": "ekr.20101122052247.4998", "b": "The indentation of references is significant. Leo indents\neach line of the expansion of a reference by the total\namount of leading whitespace that is in effect at the point\nof the reference. This allows Leo to handle languages like\nPython in which indentation is especially important.\n\nIn our example, there is no leading whitespace before the\nreference to << imports >>, but there are four spaces before\nthe \\@others directives. This means that Leo writes the\nimport statements without additional indentation, but Leo\nadds 4 spaces before all nodes written as the result of the\n\\@others directive.\n\n.. sc 7: highlight indentation of @others\n\n.. image:: slide-012.png\n\n", "children": ["ekr.20101123095813.5080", "ekr.20101128120258.5097"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5080", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-012.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101128120258.5097", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-011.html\n", "children": []}, {"h": "@slide Indentation, 2", "gnx": "ekr.20101123095813.5024", "b": "Indentation is controlled **only** by the\nindentation of references. The outline level of nodes in\nexpansions does not affect indentation in any way.\n\nThis **decoupling** of outline structure from indentation is\nvery important: it allows you to create **organizer nodes**\nwithout affecting the external file in any significant way\n(other than sentinel comments).\n\n.. no sc\n", "children": ["ekr.20101123095813.5029", "ekr.20101123095813.5109"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5029", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5109", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-012.html\n", "children": []}, {"h": "@slide Expansions: 2", "gnx": "ekr.20101122052247.5000", "b": "Any node may contain one or more section references, and any\nnode may also contain a single \\@others directive.\n\nA. The expansion of a section reference is just exactly the\n   expansion of the body of the section definition node.\n   That expansion may include expansions of *other*\n   references appearing in that node.\n\nB. The expansion of an @others directive is the expansion of\n   all descendant nodes that aren't section definition nodes\n   and are not included in the expansion of \\@others nodes\n   deeper in the tree. This means that no node is ever\n   included in the expansion of more than one \\@other\n   directive. Non-section-definition nodes are included in\n   the expansion of the nearest \\@others directive.\n\n.. no sc\n", "children": ["ekr.20101123095813.5033", "ekr.20101123095813.5110"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5033", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5110", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-013.html\n", "children": []}, {"h": "@slide Orphan nodes", "gnx": "ekr.20101122052247.5013", "b": "Each node in an \\@file tree, except the \\@file node itself,\nmust be part of the expansion of exactly one reference. When\nwriting an external file, Leo makes the following checks:\n\n1. Each section must be defined. There must be a section\n   reference in an ancestor of each section definition node.\n\n2. There must be no **orphan nodes**.  A section definition node is an\n   orphan if no ancestor node contains a reference to that node.\n   A non-definition node is an orphan if no ancestor node contains an\n   \\@others directive.\n\nLeo will issue an error if these checks are not satisfied.\n\n.. no sc\n", "children": ["ekr.20101123095813.5035", "ekr.20101123095813.5111"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5035", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5111", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-014.html\n", "children": []}, {"h": "@slide Using multiple @others nodes", "gnx": "ekr.20101122052247.5002", "b": "Here is a common pattern for a file that defines two\nclasses, SpamClass and EggsClass. The top-level node\nincludes imports, and then uses \\@others to include the\nexpansion of the rest of the outline.\n\n.. sc 8: only @others at the top level.\n..  << imports >>\n..  @others\n..  ======== children\n..    SpamClass\n..      @others\n..    EggsClass\n..      @others\n\n.. image:: slide-016.png\n\n", "children": ["ekr.20101123095813.5081", "ekr.20101123095813.5098"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5081", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-016.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5098", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-015.html\n", "children": []}, {"h": "@slide SpamClass", "gnx": "ekr.20101122052247.5004", "b": "The first child node creates the expansion of SpamClass. The\nlines::\n\n    class SpamClass:\n        '''A class representing spam.'''\n\nhave no extra indentation, because the \\@others in the\ntop-level node has no leading whitespace.\n\nHowever, the two methods of the class will have 4 spaces of\nindentation because the \\@others directive in *this* node is\nindented by 4 spaces.\n\n.. sc 9: SpamClass\n\n.. image:: slide-017.png\n\n", "children": ["ekr.20101123095813.5082", "ekr.20101123095813.5099"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5082", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-017.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5099", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-016.html\n", "children": []}, {"h": "@slide EggsClass", "gnx": "ekr.20101122052247.5006", "b": "The second child node creates the expansion of EggsClass in\na similar manner. It's always perfectly clear what nodes are\nincluded in \\@others directives. \\@others refers to all\ndescendant nodes of *this* node.\n\n.. sc 10: EggsClass\n\n.. image:: slide-018.png\n\n", "children": ["ekr.20101123095813.5083", "ekr.20101123095813.5100"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5083", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-018.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5100", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-017.html\n", "children": []}, {"h": "@slide Using @others to group code", "gnx": "ekr.20101122052247.5008", "b": "You can use \\@others to \"comment out\" all descendant nodes as\nshown. This works in Python because the indentation of the\n\\@others directive causes the expansion of all descendant\nnodes to have 4 extra spaces.\n\n.. sc 11:\n..  if 0:\n..      @others\n\n.. image:: slide-019.png\n\n", "children": ["ekr.20101123095813.5084", "ekr.20101123095813.5101"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5084", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-019.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5101", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-018.html\n", "children": []}, {"h": "@slide Summary of @file", "gnx": "ekr.20101123095813.5036", "b": "This concludes our brief discussion of \\@file nodes. The next\nfew slides discuss two alternatives to \\@file, \\@auto and\n\\@edit.\n\n\\@auto and \\@edit create external files without sentinel\nlines. The cost of avoiding sentinel lines is that Leo can\nnot preserve outline structure exactly.\n\n.. no sc\n", "children": ["ekr.20101123095813.5037", "ekr.20101123095813.5112"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5037", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5112", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-019.html\n", "children": []}, {"h": "@slide Using @auto nodes", "gnx": "ekr.20101122052247.5010", "b": "When Leo reads an **@auto node**, Leo will automatically\ncreate an outline that shows the class, functions or other\nunits of the external file.\n\nLeo can only do this if Leo has an **importer** for the\nexternal file. At present, Leo has importers for C, elisp,\nHTML, .ini files, Java, Javascript, Pascal, PHP, Python and\nxml. Leo determines the language using the file's extension.\nIf no parser exists for a language, Leo copies the entire\nbody of the external file into the \\@auto node.\n\n.. no sc\n", "children": ["ekr.20101123095813.5073", "ekr.20101123095813.5113"]}, {"h": "@no-screenshot", "gnx": "ekr.20101123095813.5073", "b": "", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5113", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-020.html\n", "children": []}, {"h": "@slide @auto example", "gnx": "ekr.20101123095813.5038", "b": "Here is an example of an actual Python file imported into Leo.\n\nThe importer has created the entire outline, including\nthe body text of the root \\@auto node.\n\nThe importer created an \\@others directive (1) to place the\nexpansion of the descendant nodes properly, before the\nfinal top-level lines of the file (2).\n\n.. sc 12: Showing tree of nodes imported by @auto\n\n.. image:: slide-022.png\n\n", "children": ["ekr.20101123095813.5085", "ekr.20101123095813.5102"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5085", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-022.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5102", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-021.html\n", "children": []}, {"h": "@slide Using @edit nodes", "gnx": "ekr.20101122052247.5012", "b": "When Leo reads and **@edit node**, Leo reads the entire\ncontents of the external file into the body text of the\n\\@edit node. Any changes to the external file will appear in\nthe \\@edit node the next time Leo loads the external file.\nRather than creating new files with @edit, it is more common\nto use @edit to connect Leo with files that already exist on\nyour file system.\n\n.. sc 13: Showing @edit node.\n\n.. image:: slide-023.png\n\n", "children": ["ekr.20101123095813.5086", "ekr.20101123095813.5103"]}, {"h": "@url final output file", "gnx": "ekr.20101123095813.5086", "b": "c:/leo.repo/trunk/leo/doc/html/slides/external-files/slide-023.png\n", "children": []}, {"h": "@url built slide", "gnx": "ekr.20101123095813.5103", "b": "c:\\leo.repo\\trunk\\leo\\doc\\html\\slides\\external-files\\_build\\html\\slide-022.html\n", "children": []}, {"h": "Release notes", "gnx": "ekr.20101026082911.5536", "b": "", "children": ["ekr.20100805165051.7177"]}, {"h": "@file release_notes.txt", "gnx": "ekr.20100805165051.7177", "b": "@language plain\n@tabwidth -4\n@all\n", "children": ["edream.110203163054.117", "edream.110203163054.63"]}, {"h": "Previous versions...", "gnx": "edream.110203163054.117", "b": "", "children": ["ekr.20050210102358", "ekr.20050210102150.1", "ekr.20050210102150", "ekr.20060206111600", "ekr.20060206111717.1", "ekr.20080311060457.214", "ekr.20080730095710.1", "ekr.20090717084250.10704", "ekr.20100118181428.8827", "ekr.20101104091058.5045"]}, {"h": "4.0... New read logic eliminates read errors, eliminated child indices", "gnx": "ekr.20050210102358", "b": "", "children": ["edream.110203163054.66", "edream.110203163054.67"]}, {"h": "4.0.1 through 4.0.4", "gnx": "edream.110203163054.66", "b": "Leo 4.0.4                         October 29, 2003\n\n- Fixed a problem with the titles in Font and Color panels.\n- Worked around a Unicode assert failure in the colorizer.\n- Fixed crasher in OnEndEditHeadline.\n- Fixed import problems in leoPlugins.leo.\n- @first and @last sentinels no longer contain corresponding text.\n  This fixes a problem that affected PHP comment delimiters.\n\nLeo 4.0.3                         October 25, 2003\n\n- Fixes several problems with the auto_save and plugin menu plugins.\n- Fixes a problem with the Go To Line Number command.\n\nNote: This version does _not_ support Unicode file names or directory names.\n\nLeo 4.0.2                         October 23, 2003\n\n- Fixes a crasher in reportBadChars when a .leo file contains a character that\n  can not be represented in the encoding specified in the first line of the\n  .leo file.\n- Leo now sends full tracebacks to the log window when Leo takes an unexpected\n exception.\n\nLeo 4.0.1                         October 22, 2003\n\n- Fixes several crashers, one of which may prevent Leo from starting.\n- Fixes indentation for section references that are preceded by something\n  other than whitespace.\n- Removes debugging traces when reading and writing unknown attributes.\n- Removes some improperly cloned nodes from LeoDocs.leo.\n- Adds the checkTopologyOfAllClones script.\n- Fixes some problems with plugins.\n", "children": []}, {"h": "4.0 final", "gnx": "edream.110203163054.67", "b": "Leo 4.0 final                     October 17, 2003\n\nMore than a year in the making, Leo 4.0 is finally here.\n\nHighlights of 4.0 final:\n-----------------------\n\n** Improved and simplified format of external files.\n\t- Eliminated child indices, extraneous blank lines and @body sentinels.\n\t- Eliminated @node sentinels that indicate outline structure.\n\t- New @nl and @nonl sentinels indicate where newlines are and aren't.\n\t- These changes will largely eliminate unwanted cvs conflicts.\n\n** Greatly improved error handling.\n\t- Reading external files _never_ alter outline structure or links.\n\t- Read errors leave the outline completely unchanged.\n\t- Broken clone links are gone forever.\n\t- As a result, 4.0 is much safer than all previous versions.\n\n** Full compatibility will previous versions of Leo.\n\t- Leo 4.0 reads all external files properly, regardless of version.\n\t- Leo writes new-format external files by default, and this default may be changed.\n\t- New commands in the read/write menu allow you to explicitly specify the format of external files.\n\n* New commands:\n\t- Write 3.x external file and Write 4.x external file.\n\t- Import External File.\n\t- Clear Recent Files.\n\n* Dozens of other improvements, including:\n\t- Better Unicode support.\n\t- New configuration settings.\n\t- Several new plugins.\n\nSee the notes for the various beta releases for full details.\n", "children": ["edream.110203163054.68", "edream.110203163054.69", "edream.110203163054.79", "edream.110203163054.99"]}, {"h": "4.0 beta 4", "gnx": "edream.110203163054.68", "b": "Leo 4.0 beta 4                      October 13, 2003\n\nThis is the third public release of Leo 4.0. There are no known serious bugs in\nthis version of Leo.  This will be the last beta release before 4.0 final.\n\nChanges made in 4.0 beta 4\n--------------------------\n\n- Changed all instances of string.letters to string.ascii_letters.\n  string.letters can cause crashes in some locales (Unicode environments).\n- Fixed several bugs that caused clone marks not to be set properly.\n", "children": []}, {"h": "4.0 beta 3", "gnx": "edream.110203163054.69", "b": "Leo 4.0 beta 3                      October 9, 2003\n\nThis is the third public release of Leo 4.0. There are no known serious bugs in\nthis version of Leo.\n\nHighlights of 4.0 beta 3\n------------------------\n\n- Fixed problems with setting Leo's window icons.\n- Plugins may now save their own information in <v> and <t> elements in .leo files.\n- The usual assortment of bug fixes and minor improvements.\n\nSee the children of this node for full details.\n", "children": ["edream.110203163054.70", "edream.110203163054.75"]}, {"h": "Fixed bugs", "gnx": "edream.110203163054.70", "b": "", "children": ["edream.110203163054.71", "edream.110203163054.72", "edream.110203163054.73", "edream.110203163054.74"]}, {"h": "Fixed bug that caused some clones not to be marked as clones", "gnx": "edream.110203163054.71", "b": "This was a long-standing bug.  It's effect was cosmetic, and it was important to fix.\n", "children": []}, {"h": "Corrected problems with setting icons on Linux", "gnx": "edream.110203163054.72", "b": "", "children": []}, {"h": "Fixed crasher in sentinelName", "gnx": "edream.110203163054.73", "b": "This could happen when the external file was corrupted.\n", "children": []}, {"h": "Reenabled orphans & ignored test in new write logic", "gnx": "edream.110203163054.74", "b": "", "children": []}, {"h": "New features", "gnx": "edream.110203163054.75", "b": "", "children": ["edream.110203163054.76", "edream.110203163054.77", "edream.110203163054.78"]}, {"h": "Added support for unknown tnode and vnode attributes", "gnx": "edream.110203163054.76", "b": "Leo can now read and write \"foreign\" attributes in <v> and <t> elements in .leo\nfiles:\n\n- When reading a .leo file, Leo will create t.unknownAttributes or\nv.unknownAttributes ivars for any tnode and vnode object whose corresponding <v>\nor <t> element in the .leo file contains a foreign attribute.\n\n- The unknownAttributes ivars are a dictionary whose keys are the attribute\nnames and whose values are strings.\n\n- When writing a file, Leo will write \"foreign\" attributes if a vnode or tnode\ncontains an unknownAttributes ivar.\n\n- The only \"native\" attributes that Leo expects to find are the \"tx\" attribute\nin <t> elements and the \"a\", \"t\", \"vtag\" and \"tnodeList\" attributes of <v>\nelements. Everything else is a foreign attribute.\n\n- Leo performs the usual xml escapes on these strings when reading or writing\nthe unknownAttributes ivars.\n\nPlugins may cause Leo to write such foreign attributes simply by attaching\nunknownAttributes ivars to a vnode or tnode. For example:\n\n\tv.unknownAttributes = {\"vnodeIcon\" : pathToIcon}\n\nIt would be best not to delete other foreign attributes, so the following would\nbe preferred:\n\n\tif hasattr(v,\"unknownAttributes\"):\n\t\tv.unknownAttributes[\"vnodeIcon\"] = pathToIcon\n\telse:\n\t\tv.unknownAttributes = {\"vnodeIcon\" : pathToIcon}\n\nAnother way:\n\n\ttry:\n\t\tv.unknownAttributes[\"vnodeIcon\"] = pathToIcon\n\texcept AttributeError:\n\t\tv.unknownAttributes = {\"vnodeIcon\" : pathToIcon}\n", "children": []}, {"h": "Added build number to signon", "gnx": "edream.110203163054.77", "b": "", "children": []}, {"h": "Added better error message in setDefaultIcon", "gnx": "edream.110203163054.78", "b": "Leo now warns if it can't find either the Icons directory or the LeoApp16.ico icon in that directory.\n", "children": []}, {"h": "4.0 beta 2", "gnx": "edream.110203163054.79", "b": "Leo 4.0 beta 2                      October 3, 2003\n\nThis is the second public release of Leo 4.0. There are no known serious bugs\nin this version of Leo. Version 4.0 is the culmination of over a year of\ncollaborative design work and several months of actual implementation.\n\nHighlights of 4.0 beta 2\n------------------------\n* Fixed several bugs:\n  - Fixed several problems with reading and writing 4.0 external files.\n  - Fixed several Unicode-related bugs.\n  - Fixed a crasher in the Go To Line Number command.\n  - Fixed a problem with Importing Python files.\n* Important improvements:\n  - Added allow_clone_drags setting.  N.B. Allows Leo to be used with Aqua.\n  - When running Python 2.3 Leo can now create window icons without third-party packages.\n- The usual minor improvements and bug fixes.\n\nSee the children of this node for full details.\n\nHighlights of 4.0 beta 1\n------------------------\n* Improved and simplified format of external files.\n* Greatly improved error handling.\n* Full compatibility will previous versions of Leo.\n", "children": ["edream.110203163054.80", "edream.110203163054.81", "edream.110203163054.89", "edream.110203163054.96"]}, {"h": "To-do for 4.0 final", "gnx": "edream.110203163054.80", "b": "- Fix undo/redo bug for all commands that change body text in multiple nodes without changing outline structure.\n\t- This is a long-standing bug that came to light when trying to make Read @file Nodes undoable.\n\n- Make Read @file Nodes command undoable.\n\n- Fix small bugs in the Go To Line Number command.\n", "children": []}, {"h": "Fixed Bugs", "gnx": "edream.110203163054.81", "b": "", "children": ["edream.110203163054.82", "edream.110203163054.83", "edream.110203163054.84", "edream.110203163054.85", "edream.110203163054.86", "edream.110203163054.87", "edream.110203163054.88"]}, {"h": "Added crucial defensive checks in v.headString() and v.bodySting()", "gnx": "edream.110203163054.82", "b": "The new code prints a warning if Leo's key internal strings are not Unicode.\n", "children": []}, {"h": "Ensured newlines before all sentinels in @rawfile", "gnx": "edream.110203163054.83", "b": "", "children": []}, {"h": "Fixed bugs involving find params", "gnx": "edream.110203163054.84", "b": "There were bugs involving saving the \"Pattern Match\" and \"Subroutine Only\" find settings.\n", "children": []}, {"h": "Fixed Python Import bug", "gnx": "edream.110203163054.85", "b": "@nocolor\n\nClass level-code after the method definitions was dropped.\n", "children": []}, {"h": "Fixed several more unicode bugs", "gnx": "edream.110203163054.86", "b": "The new code ensures that Leo creates and uses only Unicode strings internally.\n", "children": []}, {"h": "Fixed crasher in Go To Outline command.", "gnx": "edream.110203163054.87", "b": "Fixed Go To Outline command so it doesn't crash on 4.0 files.  More work is needed.\n", "children": []}, {"h": "Fixed @rawfile write problem", "gnx": "edream.110203163054.88", "b": "Under certain conditions the no sentinels at all were written when writing @rawfile trees.\n", "children": []}, {"h": "Improved commands", "gnx": "edream.110203163054.89", "b": "", "children": ["edream.110203163054.90", "edream.110203163054.91", "edream.110203163054.92", "edream.110203163054.93", "edream.110203163054.94", "edream.110203163054.95"]}, {"h": "Finished Import External File command and made it undoable", "gnx": "edream.110203163054.90", "b": "", "children": []}, {"h": "Moved Clear Recent Files menu item into Recent Files menu", "gnx": "edream.110203163054.91", "b": "This is much more natural and less cluttered.\n", "children": []}, {"h": "Added better log message for Convert All Tabs/Blanks commands", "gnx": "edream.110203163054.92", "b": "", "children": []}, {"h": "Marked changed nodes & make the @file node and the outline dirty.", "gnx": "edream.110203163054.93", "b": "", "children": []}, {"h": "Rewrote icon code so it doesn't use PIL or tkIcon in Python 2.3", "gnx": "edream.110203163054.94", "b": "Leo will create the Leo icon in Leo windows automatically when using Python 2.3.\nThe Python Imaging Library and the tkIcon package are only used when using\nprevious versions of Python.\n", "children": []}, {"h": "Created leoGui base class for tkinterGui class", "gnx": "edream.110203163054.95", "b": "This is the foundation for \"foreign\" guis.\n", "children": []}, {"h": "New and improved settings", "gnx": "edream.110203163054.96", "b": "", "children": ["edream.110203163054.97", "edream.110203163054.98"]}, {"h": "Added support for two new settings affecting drags", "gnx": "edream.110203163054.97", "b": "allow_clone_drags\n\nThis is a workaround so that Leo may be used on Aqua. When this setting is zero\nLeo always moves nodes when dragging. The default is to enable clone-drags.\n\nenable_drag_messages\n\nAllows the user to suppress the message telling whether dragging nodes will move\nthem or clone them. The default is to enable those messages.\n", "children": []}, {"h": "changed default for config.write_old_format_derived_files", "gnx": "edream.110203163054.98", "b": "After the 4.0 beta 1 release I changed the default so that _new_ format derived\nfiles are written if leoConfig.txt does not exist.\n", "children": []}, {"h": "4.0 beta 1", "gnx": "edream.110203163054.99", "b": "leo.py 4.0 beta 1                      September 26, 2003\n\nThis is the first public release of Leo 4.0.  Version 4.0 is the culmination of over a year of collaborative design work and several months of actual implementation.\n\nPlease use caution when using this beta version of Leo.  It appears very solid and it has been tested by only a few people.\n\nHighlights of 4.0:\n\n** Improved and simplified format of external files.\n\t- Eliminated child indices, extraneous blank lines and @body sentinels.\n\t- Eliminated @node sentinels that indicate outline structure.\n\t- New @nl and @nonl sentinels indicate where newlines are and aren't.\n\t- These changes will largely eliminate unwanted cvs conflicts.\n\n** Greatly improved error handling.\n\t- Reading external files _never_ alter outline structure or links.\n\t- Read errors leave the outline completely unchanged.\n\t- Broken clone links are gone forever.\n\t- As a result, using 4.0 is much safer than all previous versions.\n\n** Full compatibility will previous versions of Leo.\n\t- Leo reads all external files properly, regardless of version.\n\t- Leo writes new-format external files by default, and this default may be changed.\n\t- New commands in the read/write menu allow you to explicitly specify the format of external files.\n\n* New commands:\n\t- Write 3.x external file.\n\t- Write 4.x external file.\n\t- Import external file.\n\t- Clear Recent Files.\n\n- Several new plugins.\n- Several minor bug fixes.\n\nSee the children of this node for full details.\n", "children": ["edream.110203163054.100", "edream.110203163054.101", "edream.110203163054.106", "edream.110203163054.107", "edream.110203163054.110"]}, {"h": "4.0 Theory of operation", "gnx": "edream.110203163054.100", "b": "The Synchronization Principle simplifies everything and at long last puts Leo on\na firm theoretical foundation. This principle states that the \"smallest unit of\nmeaning\" of any Leo outline is the entire outline itself. In particular,\nindividual external files have meaning only in the context of a particular\noutline.\n\nThe Synchronization Principle has the following happy consequences:\n\n1. We may assume that all external files are in synch with the outline that wrote\nthem. This assumption allows Leo to use \"hidden machinery\" in the outline to\nassociate nodes in the external file with nodes in the outline. This \"hidden\"\nmachinery consists of a list of tnodes associated with @file vnodes in the\noutline. When writing a external file Leo creates a list of tnodes in the order\nthey were written to the external file. When reading the external file, Leo uses\nthis list to associate nodes in the external file with nodes in the outline.\n\n2. external files must get their structure from the .leo file that wrote them. As\nwe have seen, this is done using the hidden machinery in the .leo file.\nConsequently, there is no further need to represent outline structure in derived\nfiles. There is no need any longer either for child indices or for sentinels to\nrepresent outline structure. As a result, we can eliminate @+body and @-body\nnodes entirely because all @+node sentinels are followed by body text.\n\n3. All .leo files must contain full outline structure. Even \"thin\" outline will\ncontain the full representation of the outline as vnodes.\n\n4. Reading _never_ alters outline structure in the outline. No vnodes are ever\ncreated or destroyed and reading never alters clone links. This is true whether\nor not read errors occur. The read code sets a temporary attribute of tnodes\nwhile reading. These attributes are copied to the permanent t.bodyString\nattribute only if no read errors were encountered.\n\n4. Error recovery is now trivial: Read errors indicate that the .leo files and\none or more external files are out-of-synch. No error recovery is attempted: the\n@file tree in which the error occurred reverts back to its original state.\n\n5. The new Import External File command is the _only_ way to recover data from\nmismatched external file.\n", "children": []}, {"h": "New commands & options", "gnx": "edream.110203163054.101", "b": "", "children": ["edream.110203163054.102", "edream.110203163054.103", "edream.110203163054.104", "edream.110203163054.105"]}, {"h": "New write_old_format_derived_files option", "gnx": "edream.110203163054.102", "b": "The write_old_format_derived_files option in leoConfig.leo and leoConfig.txt\ndetermines which format of external file Leo's Write and Save commands write by\ndefault. If this option is 0 (recommended) Leo writes 4.x format external files.\nOtherwise Leo writes 3.x external files.\n\nNote that you can use the Write 3.x/4.x external files commands in the\nFile:Read/Write menu to write external files in an explicitly specified format.\n", "children": []}, {"h": "New Clear Recent Files command", "gnx": "edream.110203163054.103", "b": "This command deletes all entries in the Recent Files submenu except the most\nrecent file. The files themselves are not affected, just the menu entries.\n", "children": []}, {"h": "New Import External File command", "gnx": "edream.110203163054.104", "b": "The Import External File command imports all the nodes in a external file into the\noutline. Unlike the read commands, no outline structure is preserved. This\ncommand can import either 3.x or 4.x external files.\n\nThis command is necessary in version 4.0 because there is no other way to read\nexternal files that are out-of-synch with a .leo file.\n", "children": []}, {"h": "New Write 3.x/4.x External Files & autosave", "gnx": "edream.110203163054.105", "b": "The Write 4.x External Files command and Write 3.x External Files command work\njust like the Write @file Nodes command, except that they write the indicated\nformat off external file. In contrast, the Write @file Nodes command writes 3.x\nformat external files if and only if the write_old_format_derived_files = 1 in\nleoConfig.txt.\n\nAll three of these commands automatically save the outline (the .leo file) if\nany external file was actually written. This is necessary so that information in\nthe .leo file always remains in synch with all external files.\n", "children": []}, {"h": "New plugins", "gnx": "edream.110203163054.106", "b": "Paul Paterson contributed the following new plugins:\n\nmod_autosave.py\n\nAutosaves the Leo document every so often.\n\nmod_timestamp.py\n\nTimestamps all save operations to show when they occur.\n\nword_export.py\n\nExports an outline to a word document. Clicking \"plugins ... word export ...\nexport\" exports the selected outline to Word. Word should be running with an\nopen (empty) document before executing this command.\n", "children": []}, {"h": "New read logic and greatly inproved error recovery", "gnx": "edream.110203163054.107", "b": "", "children": ["edream.110203163054.108", "edream.110203163054.109"]}, {"h": "Added test for unvisited nodes in read logic", "gnx": "edream.110203163054.108", "b": "Leo's read code now warns if any non-empty node is unvisited. This check, and\nthe check that headlines match pretty much guarantees that out-of-synch outlines\nwill generate errors. Thus, there is no need a gnx timestamp in @+leo sentinels!\n", "children": []}, {"h": "Error recovery is _much_ better than before", "gnx": "edream.110203163054.109", "b": "Version 4.0 is a major advance in Leo's error handling. Using 4.0 is much safer\nthan all previous versions. This new error handling applies to all derived\nfiles, both 3.x and 4.x format.\n\nLeo's read code never alters the structure of an outline, regardless of whether\nread errors are encountered. This means that clone links, marks, and all other\ninformation in the outline except body text remains completely unchanged during\nreads. Broken clone links (the dreaded read errors) are gone forever. Also, the\nnew read code makes no changes to any body text until it is known that no read\nerrors have occurred. This ensures that absolutely no changes at all are made to\nthe outline if there are read errors.\n\nLeo's read code now writes a message to the log pane whenever it sees that the\nbody text in the external file does not match the body text in the outline. These\nmessages do not indicate errors, only that the body text has been changed\noutside of Leo, say in an external editor or by cvs.\n", "children": []}, {"h": "Improvements & bug fixes", "gnx": "edream.110203163054.110", "b": "", "children": ["edream.110203163054.111", "edream.110203163054.112", "edream.110203163054.113", "edream.110203163054.114", "edream.110203163054.115", "edream.110203163054.116"]}, {"h": "Added horizontal scrollbar in body pane when @nowrap in effect", "gnx": "edream.110203163054.111", "b": "", "children": []}, {"h": "Added support for Python 2.3", "gnx": "edream.110203163054.112", "b": "Added encoding comments to leoGlobals.py and French plugins\n\nThis removes a warning new in Python 2.3.\n", "children": []}, {"h": "Leo recycles window objects only if more than one window open", "gnx": "edream.110203163054.113", "b": "There is no need to recycle Python objects when the last outline window is being closed.\n", "children": []}, {"h": "Removed \"not undoable\" message from Read @file Nodes command", "gnx": "edream.110203163054.114", "b": "This is too annoying during testing.  The Read @file Nodes command will in fact be made undoable for the 4.0 final release.\n", "children": []}, {"h": "Removed Open Python Window command", "gnx": "edream.110203163054.115", "b": "This has been changed in Python 2.3 and it probably wasn't ever a good idea...\n", "children": []}, {"h": "Simplified read and write code", "gnx": "edream.110203163054.116", "b": "The read code has much simplified using look-behind rather than look-ahead.  Both the read and write code write the file line-by-line without recursion.\n", "children": []}, {"h": "4.1... gnx's", "gnx": "ekr.20050210102150.1", "b": "", "children": ["ekr.20040216151748", "ekr.20040131040356", "edream.121403160546", "edream.110603185805", "edream.110203163054.64"]}, {"h": "4.1 final", "gnx": "ekr.20040216151748", "b": "Leo 4.1 Final              February 20, 2004\n\nLeo 4.1 Final is the culmination of four months of work. No significant bugs\nhave been reported since 4.1 rc4. Several people have contributed nifty plugins\nrecently. See leoPlugins.leo for full details.\n\nThe highlights of Leo 4.1:\n\n- Leo runs in batch mode when invoked with --script aScriptFile.py\n- Leo supports Unicode characters (e.g. Chinese) in path and file names.\n- @directives and section references are now valid when executing scripts.\n- @ignored and orphan nodes now valid in @file-nosent trees.\n- Script-based find/change commands.\n- Check Outline command.\n- Hoist & DeHoist commands.\n- A new gui-agnostic architecture: useful for batch mode and unit tests.\n- Several new configuration settings.\n- Many new unit tests.\n- Excellent new plugins.\n- A host of bug fixes.\n", "children": ["ekr.20040217085036", "ekr.20040216152948", "ekr.20040216153725", "ekr.20040217075627", "ekr.20040217085036.1"]}, {"h": "Added several new plugins", "gnx": "ekr.20040217085036", "b": "See leoPlugins.leo for full details.\n", "children": []}, {"h": "Added Toggle Angle Brackets command", "gnx": "ekr.20040216152948", "b": "", "children": []}, {"h": "Changed Undo/Redo messages", "gnx": "ekr.20040216153725", "b": "Changed Undo/Redo messages:\n\n- Insert Outline to Insert Node.\n- Delete Outline to Delete Node.\n- Clone to Clone Node.\n\nThis is a real code change: it affects the undo/redo logic.\n", "children": []}, {"h": "Fixed clone bug when pasting nodes", "gnx": "ekr.20040217075627", "b": "Clone bits could be improperly set in some cases.  This bug would not have caused serious long-term problems.\n\nSteps to reproduce:\n\n1. Create a parent node (named 'cloned').\n2. Create two children nodes (one named 'dummy' and another named 'bottom') under the parent node 'cloned'.\n3. Move the 'bottom' node below the 'dummy' node.\n4. Clone node 'cloned'.\n5. Copy node 'dummy'.\n6. Paste node 'dummy' in between 'dummy' and 'bottom'.\n7. After pasting you'll see that 'bottom' is now marked as a cloned node.\n", "children": []}, {"h": "Investigated encoding problem: it's a Python 2.3 bug", "gnx": "ekr.20040217085036.1", "b": "Here is the bug report I submitted to Python:\n\nThe documentation for encoding lines at\n\nC:\\Python23\\Doc\\Python-Docs-2.3.1\\whatsnew\\section-encodings.html\n\nstates:\n\n\"Encodings are declared by including a specially formatted comment in the\nfirst or second line of the source file.\"\n\nIn fact, contrary to the implication, the Python 2.3 parser does not look\nfor lines of the form:\n\n# -*- coding: <encoding> -*-\n\nFor example, Python improperly scans the following line for an encoding\n\n#@+leo-ver=4-encoding=iso-8859-1.\n\nand reports that iso-8859-1. (note trailing dot) is an invalid encoding!\n\nThe workaround for my app is to precede this line with the following line:\n\n# -*- coding: iso-8859-1 -*-\n\nThis makes Python 2.3 happy.\n\nTo make myself perfectly clear: Python has absolutely no right to complain\nabout comment lines that do not have the form:\n\n# -*- coding: <encoding> -*-\n", "children": []}, {"h": "4.1 rc4", "gnx": "ekr.20040131040356", "b": "Leo 4.1 Release Candidate 4              February 3, 2004\n\nThis release fixes numerous bugs reported since 4.1 rc3 and makes several other\nminor improvements, including several nifty new plugins.\n\nThe highlights of Leo 4.1:\n\n- Leo runs in batch mode when invoked with --script aScriptFile.py\n- Leo supports Unicode characters (e.g. Chinese) in path and file names.\n- @directives and section references are now valid when executing scripts.\n- @ignored and orphan nodes now valid in @file-nosent trees.\n- Script-based find/change commands.\n- Check Outline command.\n- Hoist & DeHoist commands.\n- A new gui-agnostic architecture: useful for batch mode and unit tests.\n- Several new configuration settings.\n- Many new unit tests.\n- Excellent new plugins.\n- A host of bug fixes.\n", "children": ["ekr.20040201114855", "ekr.20040131041015", "ekr.20040131040356.1", "ekr.20040131040356.2", "ekr.20040131040356.3", "ekr.20040131040356.4", "ekr.20040131040356.5"]}, {"h": "New plugins in 4.1 rc4", "gnx": "ekr.20040201114855", "b": "", "children": ["ekr.20040201114855.42", "ekr.20040201114855.91", "ekr.20040201114855.29", "ekr.20040201114855.36", "ekr.20040201114855.3", "ekr.20040201114855.13", "ekr.20040201120903"]}, {"h": "mod_http.py plugin: Bernhard Mulder", "gnx": "ekr.20040201114855.42", "b": "A minimal http plugin for LEO, based on AsyncHttpServer.py.\n\nUse this plugin is as follows:\n\n1. Start Leo with the plugin enabled. You will see a purple message that says\nsomething like: \"http serving enabled on port 8080, version 0.9\"\n\n2. Start a web browser, and enter the following url: http://localhost:8080/\nYou will see a a \"top\" level page containing one link for every open .leo file.\nStart clicking :-)\n\nYou can use the browser's refresh button to update the top-level view in the\nbrowser after you have opened or closed files.\n", "children": []}, {"h": "newButtons.py plugin: Paul Paterson", "gnx": "ekr.20040201114855.91", "b": "Automatically add nodes for common tasks. This can be used to generate boiler\nplate code to quickly build an outline.\n", "children": []}, {"h": "nodenavigator.py plugin: Paul Paterson", "gnx": "ekr.20040201114855.29", "b": "Adds a node navigator to the toolbar. The navigator allows quick access to\nmarked nodes. You can either go to the marked node or hoist the marked node.\n", "children": []}, {"h": "rowcol.py: EKR", "gnx": "ekr.20040201114855.36", "b": "Adds row/column indicators to the toolbar at the top of Leo Windows.\n", "children": []}, {"h": "rst2.py plugin: Steve Zatz", "gnx": "ekr.20040201114855.3", "b": "This plugin uses Leo and docutils to mix program code and reST documentation.\n\nThe Python docutils package must be installed.http://docutils.sourceforge.net\n\nIf SilverCity is installed (http://silvercity.sourceforge.net) the plugin\nproduces HTML output that is syntax colored.\n\nThe basic approach is that any Leo node that contains program code that needs\ndocumentation (in an ideal world it would be every node) has an associated child\nnode whose headline is simply '@rst', that contains reST-style documentation.\nWhile this means that a typical program may have dozens (if not hundreds) of\nthese @rst nodes, it produces documentation that I think is as close as I have\never seen to useful, easy-to-read documentation that is easy to create at the\nsame time as an application is being coded.\n\nThere are several interrelated aspects to this work:\n\n- The reST plugin (renamed rst2) was hacked to manage Leo outlines that were a\ncombination of normal code nodes and reSt nodes.\n\n- The plugin now recognizes a @rst directive (that has no associated file name)\nin the headline of a node.\n\n- When it encounters such a @rst Headline node, it writes the contents of the\nbody of the @rst node's *parent* (which generally contains program code) to the\nreST output file (HTML) and then adds the reST content that is contained in the\nbody of the @rst documentation node to the output HTML file,\n\n- These @rst nodes are used in @file-nosent trees and the @rst nodes have an \n@ignore directive (plus @nocolor directive and @wrap directives) so that \nwhen the @file is updated the application code does not contain the reST-style\ndocumentation contained in the body of the @rst nodes. (This was the reason I\nhad asked you in the Leo Forum to allow @file-nosent trees to work appropriately\nwith @ignore nodes - Thank you for doing this right away.) There is no reason\nthat the reST content couldn't be written to the \n@file as documentation other than I personally believe in a volume of \ndocumentation (including musings, failed ideas, questions, etc.) that is \nprobably best kept separate from the actual *.py files.\n\n- When you double-click on a plain rst node (no associated filename) Leo opens\nboth the @rst documentation node and the parent node containing code in an\nexternal editor *simultaneously*. I happen to use Textpad and so the code is\nopened with python syntax coloring in one Textpad window and right next to it is\nthe reST documentation. This makes it much much easier to code and do\ndocumentation at the same time. (Note that the plugin assumes that the python\nextension is '.tp' since that is what I use with TextPad.)\n\nSo why is this a big deal?\n\nFor the first time in my experience the documentation process:\n\n1) is completely in sync with the process of code development.\n\n2) allows the programmer to write as much documentation as he/she wants without\nthe programming code becoming unreadable because of what would be considered\nexcessive or intrusive documentation. (This applies whether documentation is\nintended for external consumption or just so a solo programmer can remember what\nhe/she was thinking...)\n\nMy conclusion is that Leo + reST/docutils provides the perfect platform for\noptimal documentation.\n\nFrankly, I think this is all a minor miracle but maybe I've lost perspective.\n\nSteve Zatz\n", "children": []}, {"h": "searchbox.py plugin: Paul Paterson", "gnx": "ekr.20040201114855.13", "b": "Adds a quick search to the toolbar in Leo.\n\nA search box which behaves like a web site search is added, along with a \"GO\"\nbutton to do quick searches right from the main Leo window. All the current\nsearch options are retained except that \"search body text\" is explicitly set -\nmainly because this is by far the most common use case.\n\nPressing <CR> while editing the text automatically does a search. Repeated\nsearches can be done by clicking the \"GO\" button.\n\nThe combo box also stores a list of previous searches, which can be selected to\nquickly repeat a search. When activating a previous search the original search\nmode is used.\n\nStill to do:\n\n- incremental search\n- reverse search\n- persist recent searches across Leo sessions\n- use INI file to set options for list size, etc.\n", "children": []}, {"h": "status_line.py plugin: EKR", "gnx": "ekr.20040201120903", "b": "Adds a status line to the bottom of Leo windows.\n", "children": []}, {"h": "New features in 4.1 rc4", "gnx": "ekr.20040131041015", "b": "", "children": ["ekr.20040131040544.10", "ekr.20040131040544.21", "ekr.20040131040544.55", "ekr.20040131040544.178", "ekr.20040131040544.222", "ekr.20040131040544.2", "ekr.20040201061329", "ekr.20040201114855.105", "ekr.20040201114855.106"]}, {"h": "Leo no longer automatically draws the status area", "gnx": "ekr.20040131040544.10", "b": "This allows plugins to draw the status area in the icon area.\n", "children": []}, {"h": "Esc and enter key now work in the find panel", "gnx": "ekr.20040131040544.21", "b": "- ESC closes the Find panel.\n\n- Hitting the Return key is now equivalent to hitting the Find button.\n", "children": []}, {"h": "Improved message for orphan nodes", "gnx": "ekr.20040131040544.55", "b": "Leo now reports the parent of the orphan node.\n", "children": []}, {"h": "Eliminated marking nodes dirty unnecessarily", "gnx": "ekr.20040131040544.178", "b": "Leo sets only ancestor @file nodes dirty (not nodes themselves) when altering\noutline structure, i.e., when moving, inserting, deleting, cloning and sorting\nnodes.\n", "children": []}, {"h": "Execute Script command now ends all nodes with a newline", "gnx": "ekr.20040131040544.222", "b": "That is, when preprocessing the script (expanding section references, etc.) Leo\nnow ensures that child nodes effectively end in a newline. This prevents\nunintended concatenation of lines.\n", "children": []}, {"h": "Added message when plugins are disabled", "gnx": "ekr.20040131040544.2", "b": "", "children": []}, {"h": "Created status_line.py plugin", "gnx": "ekr.20040201061329", "b": "This creates a status area at the bottom of the Leo Window. Plugins may write to\nthis area using the status area convenience routines in leoTkinterFrame.py.\n", "children": []}, {"h": "Simplified operation of script-find/change & improved documentation", "gnx": "ekr.20040201114855.105", "b": "", "children": ["edream.110603190322.6"]}, {"h": " Script Find and Script Change", "gnx": "edream.110603190322.6", "b": "@nocolor\n\nNew in 4.1: Leo now supports scripts in Leo's Find/Change dialog.\n\nLeo's find panel now contains the Script Search radio button and the Script\nChange checkbox. When the Script Search radio button is selected Leo treats the\ncontents of the Search Text as a script to execute whenever any kind of Find\ncommand is executed. Similarly, when the Script Change checkbox is selected Leo\ntreats the context of the Change Text as a script to execute whenever any kind\nof Change command is executed. See below for just how this works.\n\nScript-based find-change is extremely powerful. In effect, Leo's Find/Change\npanel becomes a new platform for running scripts interactively. Leo now has all\nthe find/change capability of pattern matching languages like Snobol and Icon,\njust by using the capabilities of the plain Python language. Moreover, Leo can\ndeliver these capabilities interactively or not depending which buttons you push\nin Leo's Find/Change panel.\n\nScript-based find/change frees the user from having to control script-based\nsearches interactively. Rather than forcing find/change scripts to implement\ntheir own interactive controls, it is much easier to use what Leo already has.\n", "children": ["edream.111803060152.1", "ekr.20040201113232", "edream.111803060152.2"]}, {"h": "How it works", "gnx": "edream.111803060152.1", "b": "Leo dedicates a Python dictionary called app.searchDict for communication\nbetween Leo and the search and change scripts. The search and change scripts may\nalso use app.searchDict for communication between themselves. Leo sets\napp.searchDict[\"type\"] to \"find\", \"change\", \"findAll\" or \"changeAll\" to indicate\nthe kind of command being executed. Scripts may use all other entries in\napp.searchDict as they please.\n\nLeo executes the find script once when you press the Find button (or the Change\nthen Find button) in Leo's Find/Change dialog. Typically, the find script would\ntraversing the tree and highlight the found text or otherwise indicate to the\nuser that the find operation has succeeded. However, the script can do anything\nit pleases.\n\nLeo executes the the find script repeatedly when you press the Find All button.\nLeo keeps executing the find script until app.searchDict[\"continue\"] evaluates\nto false. Initially there is no entry for app.searchDict[\"continue\"], so the\nfind script must set app.searchDict[\"continue\"] = true if it wants Leo to keep\nexecuting it.\n\nLeo executes the change script once when you press the Change button. Typically,\nthe change script would change the selected text. Usually the change script will\ncompute the new value of body text and call c.setBodyString(p,newText) to\nmake that change permanent. \n\nThe change script also may handle undo, typically by calling\nc.frame.onBodyChanged(v,\"Change\",oldText=oldText). Leo does not handle undo\nautomatically. Indeed, Leo makes no assumptions whatever about what the change\nscript really does.\n\nLeo executes the the change script repeatedly when you press the Change All\nbutton. Just as with the Find All command, Leo keeps executing the change script\nuntil app.searchDict[\"continue\"] evaluates to false.\n\nMost find and change scripts will ignore settings in the Find Panel like \"whole\nword\", \"pattern match\", and \"reverse\". However, these settings are available to\nthe scripts via ivars such as c.whole_word_flag, etc. if desired.\n", "children": []}, {"h": "Using the initScriptFind script", "gnx": "ekr.20040201113232", "b": "@nocolor\n\nThe Scripts node in LeoPy.leo contains a script called initScriptFind.  This script makes it easy to set up script based searches as follows:\n\n1. Put the following code in the root of a tree that will contain your script search:\n\n@color\n# Initialize Leo's find panel using the named children of this node.\nfrom leoGlobals import *\ninitScriptFind(\"Find script\",\"Change script\") # Second argument is optional.\n# Start searching at the top.\ntop().selectVnode(c.rootVnode())\n@nocolor\n\n2. Put the search script in a child node called \"Find script\" (no quotes).\n\n3. (Optional) Put the change script in a child node called \"Change script\"\n\n4.  Execute the code above.  Leo does the following:\n\n- Puts the body of the \"Find script\" into the find text of Leo's Find/Change dialog.\n- Puts the body of the \"Change script\" into the change text of Leo's Find/Change dialog.\n- Selects the Script Find radio button.\n- Selects the Script Change checkbox if the change script exists.\n- Selects the root of the entire outline.\n\nPresto!  Leo is ready for a script search.\n", "children": []}, {"h": "Ideas for using scripts", "gnx": "edream.111803060152.2", "b": "@nocolor\n\nSome ideas for using scripts:\n\nEither the find and change scripts may use Python's re module.  For\nexample, the find script could set app.searchDict[\"m\"] to the match object\nreturned by re's match method.  The change script would then compute the\nresult, change the text and set the undo info as usual.\n\nThere is no reason to confine find/change scripts to operate on data only\nwithin a Leo outline. These scripts could as easily traverse your file system\nas the Leo outline. But notice: scripts could pull data from the file system\ninto the outline so that you can see the effects of changes as the scripts\noperate. Again, this can all happen interactively if you like.\n", "children": []}, {"h": "Added done message to Mark Changed commands", "gnx": "ekr.20040201114855.106", "b": "", "children": []}, {"h": "Bugs fixed in 4.1 rc4", "gnx": "ekr.20040131040356.1", "b": "", "children": ["ekr.20040131044727", "ekr.20040131040754", "ekr.20040131040544.5", "ekr.20040131040544.18", "ekr.20040131040544.32", "ekr.20040201114855.107", "ekr.20040131040544.73", "ekr.20040131040544.81", "ekr.20040131040544.146", "ekr.20040131040544.169", "ekr.20040131040544.228", "ekr.20040131040544.258", "ekr.20040131044136", "ekr.20040131040544.227", "ekr.20040131100557", "ekr.20040203084228"]}, {"h": "Fixed several bugs when writing external files", "gnx": "ekr.20040131044727", "b": "1. Fixed a bug that caused improper indentation of sections.\n\nThe bug happened in some cases when a section reference occurred following non-whitespace.\n\n2. Leo ensures that leading whitespace is not added when writing empty lines.\n\nThis might fix the \"Zope Sprint\" bug: \"blank\" lines in the expansion of @others got leading whitespace.\n", "children": []}, {"h": "Fixed several crashers", "gnx": "ekr.20040131040754", "b": "Fixed crashers in:\n\n- Insert Headline Time/Date commands.\n- Change headline command.\n- Write Dirty/Missing @file Nodes commands.\n- Batch mode.\n", "children": []}, {"h": "Fixed \"bad leo file\" when reading some 3.x .leo files", "gnx": "ekr.20040131040544.5", "b": "", "children": []}, {"h": "Fixed huge performance bug in cut/copy node commands", "gnx": "ekr.20040131040544.18", "b": "The old code was concatenating strings; the new code uses list.append.\n", "children": []}, {"h": "Leo now properly re-enables drawing after exceptions", "gnx": "ekr.20040131040544.32", "b": "", "children": []}, {"h": "Fixed major bug in tkFind.init", "gnx": "ekr.20040201114855.107", "b": "This bug happened when executing the initScriptFind script.  This bug could cause Leo not to be able to save files.\n", "children": []}, {"h": "Fixed bug in Move Up command", "gnx": "ekr.20040131040544.73", "b": "This bug happened when a move up command would cause a node to become the\nsibling of (a clone of) itself. In such cases, Leo simply selects the other\ncloned copy of the moved node.\n", "children": []}, {"h": "Fixed bug in Import External File", "gnx": "ekr.20040131040544.81", "b": "The bug was causing Leo not to remember the comment delimiters in the @+leo\nsentinel. As a result, Leo was recognizing no sentinels and the command\ncomplained about missing @-leo sentinels.\n", "children": []}, {"h": "Fixed bugs related to saving read-only files", "gnx": "ekr.20040131040544.146", "b": "- Leo now does a better job of checking and reporting read-only violations.\n\n- Leo now clears the file-dirty mark only if the file was successfully saved.\n\n", "children": []}, {"h": "Fixed bug in Import Python Window command when using Python 2.2", "gnx": "ekr.20040131040544.169", "b": "", "children": []}, {"h": "Fixed bugs in Convert All BlanksTabs commands", "gnx": "ekr.20040131040544.228", "b": "- These commands did not properly count the number of changed nodes.\n- These commands now mark only changed nodes as dirty.\n", "children": []}, {"h": "Fixed crashes in open_shell.py plugin", "gnx": "ekr.20040131040544.258", "b": "", "children": []}, {"h": "Fixed several bugs involving cut & paste", "gnx": "ekr.20040131044136", "b": "- Fixed a bug that caused cut and paste operations in headlines to revert when those commands were chosen from the Edit menu.\n\n- Extended control-v bug fix to \"darwin\",\"freebsd4\",\"freebsd5\"\n\n- Cut and paste are now always enabled when not editing the body pane.  This isn't perfect, and is an improvement.\n", "children": []}, {"h": "Fixed whitespace problem in leoTkinterGui.py", "gnx": "ekr.20040131040544.227", "b": "A contained a space before a tab in the leading whitespace of the line.\n", "children": []}, {"h": "Fixed glitches when inserting node in hoisted outline", "gnx": "ekr.20040131100557", "b": "Previously, if you hoist a node with no children and then insert a node (CTRL-I)\nthen the child is created as a sibling of the hoisted node and consequently is\nnot displayed.\n\nLeo now creates the new node as the first child of the hoisted node. \n\nAlso, Leo disables the Clone command when the presently selected node is the root of a hoist.\n", "children": []}, {"h": "Fixed bugs in search command", "gnx": "ekr.20040203084228", "b": "The Change All command was looping when the find pattern was '\\n'.\n", "children": []}, {"h": "Bug fixed in previous 4.1 releases", "gnx": "ekr.20040131040356.2", "b": "See previous release notes for more details:\n\n4.1 rc3:\n\n- Corrected counts when replacing tabs/blanks.\n- Don't write tnodeList when executing scripts.\n- Fixed long-standing clone-drag bug.\n- Fixed inconsistency between how 4.x and 3.x handle @others.\n  The code now works as it did in all 3.x versions, namely\n  @others does not terminate doc parts.\n- Leo now properly sets clone marks when when cutting and pasting nodes.\n- Only double-quotes delimit strings in html files.\n  This bug prevented Leo from untangling some valid html/xml files.\n- Leo now puts class docstrings in class nodes when importing .py files.\n- Fixed several reorg bugs.\n\n4.1 rc2, rc1, betas, alphas:\n\n- Fixed several minor problems with the Extract Section and Import commands.\n- Fixed problem that prevent the Find panel from working on the Mac.\n- Improved @url handling so that @url file:\\\\path\\x.leo works properly.\n- Improved support for @lineending platform.\n- Leo honors outline/body pane ratio when opening .leo files.\n- Leo now ensures that newly-opened windows fit entirely on the screen.\n- Fixed a crasher when Undoing a Change All command when searching headlines.\n- Fixed other bugs resulting from the 4.1 reorg:\n- Fixed problem loading plugins on Linux.\n- Fixed crashers in the Extract Section and Extract commands.\n- Fixed a crasher when writing a file containing an undefined section.\n- Removed duplicate bindings in popup menus.\n- Made sure to show Leo's windows in wx gui plugin.\n- More than one section reference may now appear on the same line.\n- Use \"utf-8\" encoding for filenames under MacOS (Darwin)\n- Allow command or cmnd prefix for menu shortcuts under Darwin.\n- Fixed a LaTeX coloring bug\n", "children": []}, {"h": "New code-level features", "gnx": "ekr.20040131040356.3", "b": "- The 4.1 code base has been reorganized to support gui plugins.\n- Created a flexible framework for creating & running regression tests.\n- app.forceShutdown now works when called from plugins.\n- Created app.unitTestDict for communication between tests and between tests and code.\n\n- An example wx_gui plugin is partly functional.\n\n\tWarning: Use the __wx_gui.py plugin with extreme caution until further notice:\n\tbugs in this plugin could cause body text to be cleared improperly when changing nodes.\n", "children": []}, {"h": "New configuration settings", "gnx": "ekr.20040131040356.4", "b": "- use_gnx specifies whether .leo files use integers as indices:\n\n\tuse_gnx = 0 makes .leo files compatible with previous versions of Leo.\n\tuse_gnx = 1 makes .leo files cvs-friendly\n\n- config_encoding specifies the encoding of leoConfig.txt.\n", "children": []}, {"h": "New features", "gnx": "ekr.20040131040356.5", "b": "- Import External File command now uses a file dialog.\n\n\tThis is much more natural than using @file nodes.\n", "children": []}, {"h": "4.1 rc3", "gnx": "edream.121403160546", "b": "Leo 4.1 Release Candidate 3              December 19, 2003\n\nThis release fixes a serious bug in the logic that reads old-style external files.\n\nThere are no known bugs in this version of Leo.\n\nThe highlights of this release:\n\n- Leo runs in batch mode when invoked with --script aScriptFile.py\n- Leo supports Unicode characters (e.g. Chinese) in path and file names.\n- @directives and section references are now valid when executing scripts.\n- @ignored and orphan nodes now valid in @file-nosent trees.\n- Script-based find/change commands.\n- Check Outline command.\n- Hoist & DeHoist commands.\n- A new gui-agnostic architecture: useful for batch mode and unit tests.\n- Several new configuration settings.\n- Many new unit tests.\n- A host of bug fixes.\n", "children": ["edream.121403165221", "edream.121403161017", "edream.121403161017.1", "edream.121403161017.2", "edream.121403161340"]}, {"h": "Bugs fixed in this release", "gnx": "edream.121403165221", "b": "- Corrected counts when replacing tabs/blanks.\n- Don't write tnodeList when executing scripts.\n- Fixed long-standing clone-drag bug.\n- Fixed inconsistency between how 4.x and 3.x handle @others.\n  The code now works as it did in all 3.x versions, namely\n  @others does not terminate doc parts.\n- Leo now properly sets clone marks when when cutting and pasting nodes.\n- Only double-quotes delimit strings in html files.\n  This bug prevented Leo from untangling some valid html/xml files.\n- Leo now puts class docstrings in class nodes when importing .py files.\n- Fixed several reorg bugs.\n", "children": []}, {"h": "Bug fixed in previous 4.1 releases", "gnx": "edream.121403161017", "b": "See previous release notes for more details:\n\n- Fixed several minor problems with the Extract Section and Import commands.\n- Fixed problem that prevent the Find panel from working on the Mac.\n- Improved @url handling so that @url file:\\\\path\\x.leo works properly.\n- Improved support for @lineending platform.\n- Leo honors outline/body pane ratio when opening .leo files.\n- Leo now ensures that newly-opened windows fit entirely on the screen.\n- Fixed a crasher when Undoing a Change All command when searching headlines.\n- Fixed other bugs resulting from the 4.1 reorg:\n- Fixed problem loading plugins on Linux.\n- Fixed crashers in the Extract Section and Extract commands.\n- Fixed a crasher when writing a file containing an undefined section.\n- Removed duplicate bindings in popup menus.\n- Made sure to show Leo's windows in wx gui plugin.\n- More than one section reference may now appear on the same line.\n- Use \"utf-8\" encoding for filenames under MacOS (Darwin)\n- Allow command or cmnd prefix for menu shortcuts under Darwin.\n- Fixed a LaTeX coloring bug\n", "children": []}, {"h": "New code-level features", "gnx": "edream.121403161017.1", "b": "- The 4.1 code base has been reorganized to support gui plugins.\n- Created a flexible framework for creating & running regression tests.\n- app.forceShutdown now works when called from plugins.\n- Created app.unitTestDict for communication between tests and between tests and code.\n\n- An example wx_gui plugin is partly functional.\n\n\tWarning: Use the __wx_gui.py plugin with extreme caution until further notice:\n\tbugs in this plugin could cause body text to be cleared improperly when changing nodes.\n", "children": []}, {"h": "New configuration settings", "gnx": "edream.121403161017.2", "b": "- use_gnx specifies whether .leo files use integers as indices:\n\n\tuse_gnx = 0 makes .leo files compatible with previous versions of Leo.\n\tuse_gnx = 1 makes .leo files cvs-friendly\n\n- config_encoding specifies the encoding of leoConfig.txt.\n", "children": []}, {"h": "New features", "gnx": "edream.121403161340", "b": "- Import External File command now uses a file dialog.\n\n\tThis is much more natural than using @file nodes.\n", "children": []}, {"h": "4.1 beta 5", "gnx": "edream.110603185805", "b": "Leo 4.1 beta 5                   December 5, 2003\n\nThis is the fifth release of the reorganized 4.1 code base.\n\nFor the first time in months there are no serious bugs outstanding.\n\nWarning: By default Leo 4.1 creates .leo files that can not be read by older versions of Leo.\n\nWarning: Use the __wx_gui.py plugin with extreme caution until further notice:\nbugs in this plugin could cause body text to be cleared improperly when changing nodes.\n\nBeta 5:\n  * Leo runs in batch mode when invoked with --script aScriptFile.py\n    - Created \"null gui\" classes that do not use any gui code.\n  * Leo supports Unicode characters (e.g. Chinese) in path and file names.\n  * Fixed several long-standing bugs:\n    - Fixed several minor problems with the Extract Section and Import commands.\n    - Fixed problem that prevent the Find panel from working on the Mac.\n    - Improved @url handling so that @url file:\\\\path\\x.leo works properly.\n    - Improved support for @lineending platform.\n    - Leo honors outline/body pane ratio when opening .leo files.\n    - Leo now ensures that newly-opened windows fit entirely on the screen.\n    - Fixed a crasher when Undoing a Change All command when searching headlines.\n  - Fixed other bugs resulting from the 4.1 reorg:\n    - Fixed problem loading plugins on Linux.\n    - Fixed crashers in the Extract Section and Extract commands.\n    - Fixed a crasher when writing a file containing an undefined section.\n    - Removed duplicate bindings in popup menus.\n    - Made sure to show Leo's windows in wx gui plugin.\n\nBeta 4:\n  - Fixed several \"reorg\" bugs, some of which affected plugins.\n  - Allow @directives and section references when executing scripts!\n  - More than one section reference may now appear on the same line.\n  - Use \"utf-8\" encoding for filenames under MacOS (Darwin)\n  - Allow command or cmnd prefix for menu shortcuts under Darwin.\n\nBeta 3:\n  - Completed the reorg, making many changes to the code base.\n  - Fixed a LaTeX coloring bug\n\nBeta 2:\n  - Fixed a startup problem on Linux: the \"mbcs\" text encoding is not valid on Linux.\n\nBeta 1:\n  * Script-based find/change commands.\n  - Hoist & DeHoist commands for viewing parts of an outline.\n  - Check Outline command finds user clone mistakes.\n  * New configuration settings:\n    - use_gnx specifies whether .leo files use integers as indices:\n      use_gnx = 0 makes .leo files compatible with previous versions of Leo.\n      use_gnx = 1 makes .leo files cvs-friendly\n    - config_encoding specifies the encoding of leoConfig.txt.\n  * Several significant code-level changes:\n    - The 4.1 code base has been reorganized to support gui plugins.\n    - An example wx_gui plugin is partly functional.\n    - Created a flexible framework for creating & running regression tests.\n    - app.forceShutdown now works when called from plugins.\n", "children": ["edream.120403174147", "edream.120403180443.1"]}, {"h": "Changes made in 4.1 beta 5", "gnx": "edream.120403174147", "b": "", "children": ["edream.120403180443", "edream.120403174241"]}, {"h": "New and improved features", "gnx": "edream.120403180443", "b": "", "children": ["edream.120403174147.105", "edream.120403174147.112", "edream.120403174147.119", "edream.120403174147.128", "edream.120403174147.56"]}, {"h": "Honor outline/body pane ratio when opening files", "gnx": "edream.120403174147.105", "b": "This bug has been around for a long time.\n", "children": []}, {"h": "Leo now adjusts newly opened windows so they fit on the screen", "gnx": "edream.120403174147.112", "b": "Leo makes sure that opened files or newly-created outlines fit entirely on the screen.  The Cascade commands leaves the sizes of windows unchanged: it merely ensures that the top left corner of a window is visible on the screen.\n", "children": []}, {"h": "Tested support for Unicode file & directory names", "gnx": "edream.120403174147.119", "b": "", "children": []}, {"h": "Added code so @url nodes may open .leo files", "gnx": "edream.120403174147.128", "b": "@\n\nA problem: the new window gets put behind the old.  This is probably because Tk\nthinks that the mouse-down event should select then new window... \n", "children": []}, {"h": "Fixed problems with @lineending platform", "gnx": "edream.120403174147.56", "b": "", "children": []}, {"h": "Bugs fixed", "gnx": "edream.120403174241", "b": "", "children": ["edream.120403174147.30", "edream.120403174147.102", "edream.120403174147.109", "edream.120403174147.33", "edream.120403174147.36", "edream.120403174147.61", "edream.120403174147.63", "edream.120403174147.65", "edream.110603190322.8", "edream.120403174147.94"]}, {"h": "Fixed crasher in Apply Settings command", "gnx": "edream.120403174147.30", "b": "Another 4.1 reorg bug.\n", "children": []}, {"h": "Fixed crasher in Toggle Angle Brackets command", "gnx": "edream.120403174147.102", "b": "Another 4.1 reorg bug.\n", "children": []}, {"h": "Fixed crasher when setting Icon in Linux)", "gnx": "edream.120403174147.109", "b": "The new code attempts to use bitmap files only on Windows.\n", "children": []}, {"h": "Fixed Find panel bug on the Mac", "gnx": "edream.120403174147.33", "b": "This was due to a missing activate event.\n", "children": []}, {"h": "Fixed Import backslash-newline bug", "gnx": "edream.120403174147.36", "b": "Continuation lines caused the import command to terminate functions, methods and classes prematurely.\n", "children": []}, {"h": "Fixed Linux import problem", "gnx": "edream.120403174147.61", "b": "This was causing Leo not to load plugins properly on Linux.  The problem was that the imp module does not handle Unicode file names properly.\n", "children": []}, {"h": "Fixed Recent files crasher", "gnx": "edream.120403174147.63", "b": "This was a reorg bug.\n", "children": []}, {"h": "Fixed Replace Blanks command", "gnx": "edream.120403174147.65", "b": "Another bug caused by the 4.1 reorg.\n", "children": []}, {"h": "Fixed Serious Undo Change All bugs", "gnx": "edream.110603190322.8", "b": "Undoing Change All cleared the body pane or the headline pane.\n\nThe fix was simple: call setUndoParams instead of setUndoTypingParams in batchChange.\n", "children": []}, {"h": "Fixed several long-standing bugs related to Extract commands", "gnx": "edream.120403174147.94", "b": "- Leo now properly enables and disables the Extract Section menu item.\n- Leo no longer removes leading forward slashes in section names in headlines.\n- Corrected the documentation for the Extract Section command.\n", "children": []}, {"h": "Changes made in earlier 4.1 betas", "gnx": "edream.120403180443.1", "b": "", "children": ["edream.110603190234.1", "edream.110603190404", "edream.110603192009", "edream.110603192009.1", "edream.110303182719"]}, {"h": "Code-level features", "gnx": "edream.110603190234.1", "b": "", "children": ["edream.110603190125.3", "edream.110603190125.4", "edream.110303182253.39"]}, {"h": "Regression tests started", "gnx": "edream.110603190125.3", "b": "The file test.leo in the test directory contains real regression tests for\nsyntax coloring.  Regression testing scripts create regression tests dynamically\nfrom data in Leo's outline.  Very cool, very easy, very general.  In particular,\nregression tests may use temporary nodes in test.leo rather than creating\nseparate Tk windows for testing. \n", "children": []}, {"h": "Code reorganized to support other guis", "gnx": "edream.110603190125.4", "b": "The 4.1 code base has been reorganized to support gui's other than tkinter.\nLeo's src directory contains several new source files.\n\nThis reorg affects almost all plugins. Considerably more work and testing will\nbe done before 4.1 final.\n\nThe __wx_gui.py plugin is uses the newly reorganized code.  It is functional\nexcept for gui-dependent commands like Toggle-Split Direction.  WARNING: treat\nthe this plugin with extreme caution until further notice.  The possibility\nexists that bugs in the code could cause body text to be cleared improperly when\nchanging nodes. \n", "children": []}, {"h": "Made app.forceShutdown work in \"idle\" hook", "gnx": "edream.110303182253.39", "b": "", "children": []}, {"h": "Fixed bugs", "gnx": "edream.110603190404", "b": "", "children": ["edream.110603190322.13", "edream.110603190322.11", "edream.110603190322.3", "edream.111803060643"]}, {"h": "Fixed bug involving 0x1a characters in body text.", "gnx": "edream.110603190322.13", "b": "The fix was to open files with 'rb' instead of 'r'.  This probably should be done in more places.\n", "children": []}, {"h": "Fixed first node-only find bug", "gnx": "edream.110603190322.11", "b": "The node-only option wasn't working due to a bug in createFrame.\n\nThere still may be a problem with the interaction between Node-only,Change All and Undo.\n", "children": []}, {"h": "Fixed bug in idle_body_key", "gnx": "edream.110603190322.3", "b": "This involved fixing a bug in idle_body_key so that the oldText param is honored if present.\n", "children": []}, {"h": "Fixed LaTeX syntax coloring bug", "gnx": "edream.111803060643", "b": "", "children": []}, {"h": "Improved format of .leo files", "gnx": "edream.110603192009", "b": "", "children": ["edream.110603190322.9", "edream.110603190322.10", "edream.110603190125.1"]}, {"h": "Leo now ignores unknown prefs and find prefs", "gnx": "edream.110603190322.9", "b": "", "children": []}, {"h": "Leo now writes node_only find prefs", "gnx": "edream.110603190322.10", "b": "", "children": []}, {"h": ".leo files are now cvs-friendly", "gnx": "edream.110603190125.1", "b": "Leo 4.1 uses immutable gnx's (id:timestamp:n) by default to associate tnodes with vnodes in .leo files.  This makes Leo as cvs friendly as possible.  From now on .leo files will be checked in to cvs with the -ko (text/keywords off) option.\n", "children": []}, {"h": "New & improved commands", "gnx": "edream.110603192009.1", "b": "", "children": ["edream.112303173638", "edream.110203163054.833", "edream.110603190322.14", "edream.110603190322.15", "edream.111803060152", "edream.110303182253.3", "edream.111803062437"]}, {"h": "Running Leo in batch mode", "gnx": "edream.112303173638", "b": "@color\n@  New in version 4.1: On startup, Leo looks for two arguments of the form --script scriptFile.  If found, Leo enters batch mode.\n\nIn batch mode Leo does not show any windows.  Leo assumes the scriptFile contains a Python script and executes the contents of that file using Leo's Execute Script command.  By default, Leo sends all output to Leo's log pane to the console window.  Scripts in the scriptFile may disable or enable this output by calling app.log.disable() or app.log.enable()\n\nScripts in the scriptFile may execute any of Leo's commands except the Edit Body and Edit Headline commands.  Those commands require interaction with the user.\n\nFor example, the following batch script reads a Leo file and prints all the headlines in that file.\n@c\n\nimport leoGlobals as g\n\npath = r\"c:\\prog\\leoCVS\\leo\\test\\test.leo\"\n\ng.app.log.disable() # disable reading messages while opening the file\nflag,newFrame = g.openWithFileName(path,None)\ng.app.log.enable() # re-enable the log.\n\nfor p in newFrame.c.all_positions():\n\tg.es(g.toEncodedString(p.headString(),\"utf-8\"))\n", "children": []}, {"h": "Executing Python scripts in body text", "gnx": "edream.110203163054.833", "b": "The Execute Script command executes body text as a Python script. Leo execute\nthe selected text, or the entire body text if no text is selected.\n\nScripts are executed in a \"pristine\" environment, that is, with __builtins__ as\nboth the local and global environments.\n\nNew in version 4.1: Body text may now contain @directives and section\nreferences. This is a major step forward: you can now use all of Leo's features\nto organize scripts that you execute interactively.\n\nSection definitions must appear in the node containing the script or in\ndescendant nodes. Leo \"preprocesses\" all scripts by simulating the writing of a\nexternal file to a string.\n\nThe Execute Script command sets app.scriptDict[\"script1\"] to the value of the\nscript before preprocessing, and sets app.scriptDict[\"script2\"] to the value of\nthe script after preprocessing. Scripts may examine and change app.scriptDict as\nthey please.\n", "children": []}, {"h": "Added Check Outline command", "gnx": "edream.110603190322.14", "b": "This command checks for unused tnodeLists and checks the topology of all clones.\n", "children": []}, {"h": "Added Hoist/De-Hoist commands", "gnx": "edream.110603190322.15", "b": "The Hoist command redraws the screen so presently selected tree becomes the only visible part of the outline.  Leo prevents the you from moving nodes outside the hoisted outline.  The De-hoist command restores the outline.  Hoist commands may be nested.\n", "children": []}, {"h": "Added script-based find/change commands", "gnx": "edream.111803060152", "b": "", "children": ["edream.110603190322.6"]}, {"h": "Leo now does an auto-save only if files have actually been changed.", "gnx": "edream.110303182253.3", "b": "Leo does an auto-save only if something has actually been changed.\n", "children": []}, {"h": "Shift commands now shift single line if no selection", "gnx": "edream.111803062437", "b": "", "children": []}, {"h": "New config settings", "gnx": "edream.110303182719", "b": "The config_encoding setting controls the encoding of non-ascii characters in leoConfig.txt.\n\nThe use_gnx setting in leoConfig.txt determines whether uses gnx's (cvs friendly) or ints.  No version of Leo before 4.1 can read .leo files containing gnx.   Only gnx's are immutable.  Leo recomputes all non-gnx indices from scratch whenever writing a .leo file. It is possible to convert between 3.x and 4.1 file formats by changing the use_gnx setting.\n", "children": []}, {"h": "4.1 alpha 1", "gnx": "edream.110203163054.64", "b": "Leo 4.1 alpha 1                   November 3, 2003\n\n*** Alpha quality code:  Please make full backups before playing with this code!\n\nThis release marks another significant milestone in Leo's history:\n\n- Leo's 4.x file code is complete. At present I have no plans to change the\nformat of .leo files or external files. I am eating my own dog food: I do all my\nediting with the 4.1 code base.\n\n- Leo uses immutable gnx's (id:timestamp:n) by default to associate tnodes with\nvnodes in .leo files. This makes Leo as cvs friendly as possible. From now on\n.leo files will be checked in to cvs with the -ko (text/keywords off) option.\n\n- The use_gnx setting in leoConfig.txt determines whether uses gnx's (cvs\nfriendly) or ints. No version of Leo before 4.1 can read .leo files containing\ngnx. Only gnx's are immutable. Leo recomputes all non-gnx indices from scratch\nwhenever writing a .leo file. It is possible to convert between 3.x and 4.1 file\nformats by changing the use_gnx setting.\n\n- The 4.1 code base has been reorganized to support gui's other than tkinter.\nLeo's src directory contains several new source files.\n\n- The file test.leo in the test directory contains real regression tests for\nsyntax coloring. Regression testing scripts create regression tests dynamically\nfrom data in Leo's outline. Very cool, very easy, very general. In particular,\nregression tests may use temporary nodes in test.leo rather than creating\nseparate Tk windows for testing.\n\nKnown bugs:\n\n- The Extract commands eat one character too much.\n\n- The __wx_gui.py plugin is only partly functional.\n", "children": []}, {"h": "4.2... @file-thin, shared tnodes", "gnx": "ekr.20050210102150", "b": "", "children": ["ekr.20040922074200", "ekr.20040914103359", "ekr.20040713110718", "EKR.20040628095213", "EKR.20040601084317", "EKR.20040518070558"]}, {"h": "4.2 final", "gnx": "ekr.20040922074200", "b": "Leo 4.2 Final       September 20, 2004\n\nThe highlights of Leo 4.2:\n\n- @thin trees make Leo much more friendly to cvs. Files derived from @thin can\nbe committed to cvs and updated from cvs without having to commit or update the\ncorresponding .leo file. There is no longer any need to keep .leo files and\nexternal files in synch.\n\n- Leo's data structures have been reorganized. As a result, all outline\noperations are much faster. To support this organization, scripts that traverse\nLeo's data structures must now use a positions rather than vnodes. Old scripts\nthat appear to use vnodes will still work because methods like c.currentVnode\nthat appear to return vnodes actually return positions.\n\n- A new mod_scripting plugin is a big advance in scripting and testing.\ntest.leo now uses @test and @script nodes to define unit tests without\nexplicitly creating subclasses of unittest.TestCase. Converting scripts to unit\ntests now takes a few seconds!\n\n- A much faster and more robust spell checker plugin. (requires Python 2.3)\n\n- Leo is now much more friendly to using spaces instead of tabs.\n\n- The Execute Script command reports erroneous lines more clearly.\n", "children": []}, {"h": "4.2 rc1", "gnx": "ekr.20040914103359", "b": "Leo 4.2 release candidate 1        September 14, 2004\n\nThis version fixes a number of minor bugs reported since the last release. See\nthe children of this node for details.\n\nThe highlights of Leo 4.2:\n\n- @thin trees make Leo much more friendly to cvs. Files derived from @thin can\nbe committed to cvs and updated from cvs without having to commit or update the\ncorresponding .leo file. There is no longer any need to keep .leo files and\nexternal files in synch.\n\n- Leo's data structures have been reorganized. As a result, all outline\noperations are much faster. To support this organization, scripts that traverse\nLeo's data structures must now use a positions rather than vnodes. Old scripts\nthat appear to use vnodes will still work because methods like c.currentVnode\nthat appear to return vnodes actually return positions.\n\n- A new mod_scripting plugin is a big advance in scripting and testing.\ntest.leo now uses @test and @script nodes to define unit tests without\nexplicitly creating subclasses of unittest.TestCase. Converting scripts to unit\ntests now takes a few seconds!\n\n- A much faster and more robust spell checker plugin. (requires Python 2.3)\n\n- Leo is now much more friendly to using spaces instead of tabs.\n\n- The Execute Script command reports erroneous lines more clearly.\n\n- The Perfect Import feature guarantee that Leo imports file exactly.\n", "children": ["ekr.20040914103743.1", "ekr.20040914103743"]}, {"h": "Added new features", "gnx": "ekr.20040914103743.1", "b": "", "children": ["ekr.20040914103359.137", "ekr.20040914103359.37", "ekr.20040914103359.2", "ekr.20040914103359.19"]}, {"h": "Added c.frame.openDirectory to sys.path when executing scripts", "gnx": "ekr.20040914103359.137", "b": "", "children": []}, {"h": "Added expanded_click_area option to disable left click logic in outline pane", "gnx": "ekr.20040914103359.37", "b": "", "children": []}, {"h": "Restored the \"iconclick1/2\" hooks", "gnx": "ekr.20040914103359.2", "b": "", "children": []}, {"h": "(Allow longer headlines for to support long url's)", "gnx": "ekr.20040914103359.19", "b": "", "children": ["ekr.20040914103359.20"]}, {"h": "Report", "gnx": "ekr.20040914103359.20", "b": "@killcolor\n\nFrom Dan Winkler:\n\nOn a couple of occasions, I tried to paste in a long @url node and got \nthis message:\n\n\tTruncating headline to 250 characters\n\nI wonder if the 250 character limit on headline length should be \nrethought in light of the @url directive and long web addresses.\n", "children": []}, {"h": "Fixed bugs", "gnx": "ekr.20040914103743", "b": "", "children": ["ekr.20040914103359.47", "ekr.20040914103359.12", "ekr.20040914103359.15", "ekr.20040914103359.7", "ekr.20040914103359.28", "ekr.20040914103359.4", "ekr.20040914103359.110", "ekr.20040914103359.31", "ekr.20040914103359.129"]}, {"h": "Disabled perfect import", "gnx": "ekr.20040914103359.47", "b": "There were too many problems with this feature. In the future Leo will have a\nCheck Import command.\n", "children": []}, {"h": "Fixed Import External Files command", "gnx": "ekr.20040914103359.12", "b": "If only one file was specified Leo gave an error for every character of the file name!\n", "children": []}, {"h": "Fixed parsing of minimal <preferences> tag", "gnx": "ekr.20040914103359.15", "b": "", "children": []}, {"h": "Fixed problem with tabs on MacOs", "gnx": "ekr.20040914103359.7", "b": "With TclTkAqua on the Mac (but *not* with tcltk installed via Fink), the tab\nproblem doesn't exist there), the tab, return, and backspace keys did not generate\nASCII codes, i.e. event.char is an empty string. So when I press the tab key,\nTk inserts a tab character and Leo isn't even aware of it.\n", "children": []}, {"h": "Fixed read errors with @language html", "gnx": "ekr.20040914103359.28", "b": "", "children": []}, {"h": "Made sure a proper message is given with invalid versions of Python", "gnx": "ekr.20040914103359.4", "b": "", "children": []}, {"h": "Removed failed assert from colorizer", "gnx": "ekr.20040914103359.110", "b": "", "children": []}, {"h": "Removed spurious \"Warning: updating changed text\" messages", "gnx": "ekr.20040914103359.31", "b": "", "children": []}, {"h": "Shifted all Alt-shortcuts to Ctrl shortcuts on the Mac", "gnx": "ekr.20040914103359.129", "b": "http://sourceforge.net/forum/message.php?msg_id=2742238\nBy: hinsen\n\nThe shortcut definitions in Leo are quite inconvenient on the Mac, as those\nusing the Alt key don't work. Alt is used for entry of additional characters.\nOn the other hand, ctrl is available for shortcuts but not used in Leo, since\nthe ctrl-based shortcuts are shifted to the command key (following standard\nMac practice).\n\nThe patch at the end of this message simply shifts all Alt-shortcuts to Ctrl\non the Mac.\n\nThat leaves one minor clash: Command-` is used for CloneNode in Leo, although\nit canonical MacOS function (switching between the windows of an application)\nwould be very useful in Leo as well. Removing the CloneNode binding is easy\nenough, but it seems that I must implement a window switching function myself.\nNot today :-)\n\nKonrad.\n", "children": []}, {"h": "4.2 beta 3", "gnx": "ekr.20040713110718", "b": "Leo 4.2 beta 3           August 10, 2004\n\nThis version of Leo is feature complete.  Leo's core code has been stable for several months.\n\nTo do: most plugins work with the new code base, but other plugins need some more work.\n\nThe highlights of Leo 4.2:\n\n- @thin trees make Leo much more friendly to cvs. Files derived from @thin can\nbe committed to cvs and updated from cvs without having to commit or update the\ncorresponding .leo file. There is no longer any need to keep .leo files and\nexternal files in synch.\n\n- Leo's data structures have been reorganized. As a result, all outline\noperations are much faster. To support this organization, scripts that traverse\nLeo's data structures must now use a positions rather than vnodes. Old scripts\nthat appear to use vnodes will still work because methods like c.currentVnode\nthat appear to return vnodes actually return positions.\n\n- A new mod_scripting plugin is a big advance in scripting and testing.\ntest.leo now uses @test and @script nodes to define unit tests without\nexplicitly creating subclasses of unittest.TestCase. Converting scripts to unit\ntests now takes a few seconds!\n\n- A much faster and more robust spell checker plugin. (requires Python 2.3)\n\n- Leo is now much more friendly to using spaces instead of tabs.\n\n- The Execute Script command reports erroneous lines more clearly.\n\n- The Perfect Import feature guarantee that Leo imports file exactly.\n", "children": ["ekr.20040804165258.1", "ekr.20040804165258.2"]}, {"h": "Bug fixes", "gnx": "ekr.20040804165258.1", "b": "", "children": ["ekr.20040804164600.16", "ekr.20040804164600.36", "ekr.20040804164600.56", "ekr.20040804164600.98", "ekr.20040804164600.102", "ekr.20040804164600.265", "ekr.20040804164600.275", "ekr.20040804164600.377", "ekr.20040804170846", "ekr.20040804164600.394", "ekr.20040804164600.406", "ekr.20040804164600.419", "ekr.20040804164600.421", "ekr.20040804164600.470", "ekr.20040804164600.471", "ekr.20040804164600.515", "ekr.20040804171818"]}, {"h": "Leo gives the user a chance to save read-only files", "gnx": "ekr.20040804164600.16", "b": "Leo now vetoes the shutdown logic if saving a dirty file fails.\n\nLeo prints in red the warning about not being able save the read-only file. The\nuser can use the Save To command to save the file. The Save To command does not\nclear the file's dirty bit, so Leo will prompt again to save the file. The user\nwill have to ignore this prompt in order to exit. This is correct: the\n_original_ file has not been saved.\n", "children": []}, {"h": "Fixed some unit-test bugs", "gnx": "ekr.20040804164600.36", "b": "- g.getScript implicitly assumed that p == c.currentPosition.\n  I removed that assumption.\n\n- The scriptButton callback in the scripting.py plugin no longer calls c.executeScript.\n  It's simpler and easier to call exec directly.\n\n- Improved c.checkOutline:\n    - Added full keyword arg.\n    - Print more if verbose is on.\n", "children": []}, {"h": "Added 3 .cascading style sheets to the distribution list", "gnx": "ekr.20040804164600.56", "b": "", "children": []}, {"h": "Fixed some bugs in g.importFromPath", "gnx": "ekr.20040804164600.98", "b": "", "children": []}, {"h": "Fixed major bug in write logic", "gnx": "ekr.20040804164600.102", "b": "Spurious entries in a tnodeList for @thin trees wiped out all the headlines in\nthe @thin tree.\n", "children": []}, {"h": "Fixed bug in p.isAncestorOf", "gnx": "ekr.20040804164600.265", "b": "", "children": []}, {"h": "Leo now writes only the currently selected tree when pasting to the clipboard", "gnx": "ekr.20040804164600.275", "b": "# The new code only writes tnodes for the current tree when pasting to the clipboard.\n", "children": []}, {"h": "Fixed performance bug when reading .leo files", "gnx": "ekr.20040804164600.377", "b": "There was a big performance bug in the nodenavigator plugin.\n", "children": []}, {"h": "Leo now reports problems with bad directories more clearly", "gnx": "ekr.20040804170846", "b": "@thin bad-directory caused excessive and confusing tracebacks.\n", "children": []}, {"h": "Leo reads collapsed xml tags properly in .leo files", "gnx": "ekr.20040804164600.394", "b": "@nocolor\n\nAs a result, the minimal .leo file is:\n\n@color\n@language html\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<leo_file>\n<leo_header/>\n<globals/>\n<preferences/>\n<find_panel_settings/>\n<vnodes/>\n<tnodes/>\n</leo_file>\n\n@nocolor\n\nThe empty_leo_file plugin now uses this code. The minimal .leo file that Leo\nmight actually write is more like this:\n\n@color\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<leo_file>\n<leo_header/>\n<globals/>\n<preferences/>\n<find_panel_settings>\n    <find_string/>\n    <change_string/>\n</find_panel_settings>\n<vnodes/>\n<tnodes/>\n</leo_file>\n", "children": []}, {"h": "Leo makes brings the confirm save box to the front", "gnx": "ekr.20040804164600.406", "b": "", "children": []}, {"h": "Improved how es_exception gets line number of errors", "gnx": "ekr.20040804164600.419", "b": "", "children": []}, {"h": "Fixed major bug: changing headline now marks subnodes dirty", "gnx": "ekr.20040804164600.421", "b": "This is required to make @thin work properly.\n", "children": []}, {"h": "Leo now gives update warning only once per external file", "gnx": "ekr.20040804164600.470", "b": "", "children": []}, {"h": "Leo updates tnodeLists properly in all situations", "gnx": "ekr.20040804164600.471", "b": "A major change: putVnode doesn't put tnodeLists for @thin nodes.\n\nInstead it issues an informational message and deletes the tnodeList.\n", "children": []}, {"h": "Fixed several leaks of positions", "gnx": "ekr.20040804164600.515", "b": "Leo used to allocate more positions than necessary.  This unnecessarily stressed the garbage collector.\n", "children": []}, {"h": "Fixed all unit tests so they work with both Python 2.2 and Python 2.3", "gnx": "ekr.20040804171818", "b": "", "children": []}, {"h": "Features", "gnx": "ekr.20040804165258.2", "b": "", "children": ["ekr.20040804172113", "ekr.20040804172113.1", "ekr.20040804165258.3", "ekr.20040804165258.4", "ekr.20040804170531", "ekr.20040804170657", "ekr.20040804164600.424"]}, {"h": "@test and @suite greatly aid unit testing", "gnx": "ekr.20040804172113", "b": "", "children": []}, {"h": "New scripts in test.leo make it very easy to use the gc, profile and timeit modules", "gnx": "ekr.20040804172113.1", "b": "", "children": []}, {"h": "Import dialogs allow multiple selections", "gnx": "ekr.20040804165258.3", "b": "Leo now allows you to select multiple files in the dialogs for all Import\ncommands. This fixes a major annoyance. However, you must be running Python 2.3\nor above to get this feature.\n", "children": []}, {"h": "New Check menu and commands", "gnx": "ekr.20040804165258.4", "b": "Added the Check submenu of the Outline menu. This contains the Check Outline and\nDump Outline commands, as well as four new commands:\n\nThe Check All Python Code and Check Python Code commands report any syntax\nerrors or tabnanny errors. These commands mark erroneous nodes. These commands\nwork on the selected Node and its descendants. These commands ignore any nodes\nfor which a) @ignore is in effect or b) @language python is in not effect.\n\nThe Check Python Code and Pretty Print Python Code commands replace nodes with\ntheir pretty-printed alternative. No doubt everyone will have their own favorite\nstyle. You could implement alternate pretty printers in a plugin merely by\noverriding the following methods of class prettyPrinter in leoCommands.py:\n\n---- putOperator:      puts whitespace around operators.\n---- putNormalToken:   puts whitespace around everything else.\n", "children": []}, {"h": "Perfect Import feature automatically corrects imported files", "gnx": "ekr.20040804170531", "b": "", "children": []}, {"h": "Improved performance of outline pane", "gnx": "ekr.20040804170657", "b": "Leo now reuses all widgets used to draw the outline pane. This improves\nperformance and ends leaks of bindings and widgets.\n", "children": []}, {"h": "The Go To Line Number command ignores all @all nodes", "gnx": "ekr.20040804164600.424", "b": "This makes the command more useful.\n", "children": []}, {"h": "4.2 beta 1 & beta 2", "gnx": "EKR.20040628095213", "b": "Leo 4.2 beta 2           July 5, 2004\nLeo 4.2 beta 1           June 30, 2004\n\nThe highlights of 4.2 beta 2:\n\n- Leo now writes the entire contents of @ignore'd @thin trees to the .leo file.\nThis change ensures that users can create and remove @ignore directives without\nany chance of losing data inadvertently.\n\n- Leo now saves and restores marks and the expansion state of nodes in @thin trees.\n\n- Leo marks @thin nodes as dirty whenever they become \"newly unignored\", i.e.,\nwhen an @thin node no longer falls in the range of an @ignore directive.\n\nBeta 1 completes all fundamental work in the 4.2 code base. All essential code\nis complete. Dozens of bugs have been fixed since the Alpha 3 release about a\nmonth ago.\n\nKnown bugs in 4.2 beta 2:\n\n- Not all plugins work correctly.\n- Some plugins leak memory very slightly.\n\nThe highlights of Leo 4.2:\n\n- @thin trees make Leo much more friendly to cvs. Files derived from @thin can\nbe committed to cvs and updated from cvs without having to commit or update the\ncorresponding .leo file. There is no longer any need to keep .leo files and\nexternal files in synch.\n\n- Leo's data structures have been reorganized. As a result, all outline\noperations are much faster. To support this organization, scripts that traverse\nLeo's data structures must now use a positions rather than vnodes. Old scripts\nthat appear to use vnodes will still work because methods like c.currentVnode\nthat appear to return vnodes actually return positions.\n\nOther features of 4.2:\n\n- Leo is now much more friendly to using spaces instead of tabs.\n- The Execute Script command reports erroneous lines more clearly.\n- The usual assortment of bug features and minor features.\n\nComing soon in 4.2:\n\n- Perfect Import will guarantee that Leo imports file perfectly.\n- @import will allow you to study files using Leo without changing those files.\n", "children": ["EKR.20040628095213.311", "EKR.20040524104904.242", "ekr.20040705111716", "ekr.20040705112148"]}, {"h": "New coding conventions", "gnx": "EKR.20040628095213.311", "b": "@nocolor\n\n- Leo now uses True and False everywhere instead of true and false.\n\n- All of Leo's code uses spaces instead of tabs for indentation.\n", "children": []}, {"h": "Extending the format of .leo files", "gnx": "EKR.20040524104904.242", "b": "Leo reads and writes \"foreign\" attributes in <v> and <t> elements in .leo files as follows:\n\n- When reading a .leo file, Leo will create t.unknownAttributes or v.unknownAttributes ivars for\n  any tnode or vnode whose corresponding <v> or <t> element in the .leo file contains a foreign attribute.\n\n- The unknownAttributes ivars are dictionaries whose keys are the attribute names and whose values are strings.\n\n- When writing a file, Leo will write \"foreign\" attributes if a vnode or tnode contains an unknownAttributes ivar.\n\n- The only native attribute of <t> elements is tx.\n\n- The native attributes of <v> elements are a, t, vtag and tnodeList.\n\n- The native attributes of <v> elements are marks, expanded and descendentTnodeUnknownAttributes.\n\n- Non-native attributes are called **foreign** attributes.\n\n- Leo performs the usual xml escapes on these strings when reading or writing the unknownAttributes ivars.\n\nPlugins may cause Leo to write such foreign attributes simply by attaching unknownAttributes ivars to a vnode or tnode.\nLike this::\n\n\tif hasattr(v,\"unknownAttributes\"):\n\t\tv.unknownAttributes [\"vnodeIcon\"] = pathToIcon\n\telse:\n\t\tv.unknownAttributes = {\"vnodeIcon\" : pathToIcon}\n\nSee the section called \"Recommended conventions for plugins\" for advice about\nhow to avoid potential conflicts in naming new attributes.\n\nAll members of these dictionaries should be \"pickleable\". That is, Leo uses\nPython's Pickle module to encode all values in these dictionaries. Leo will\ndiscard any attributes that can not be pickled. This should not be a major\nproblem to plugins. For example, instead of putting a tnode into these\ndictionaries, a plugin could put the tnode's gnx (a string) in the dictionary.\n\nLeo writes only t.unknownAttributes when writing @thin trees to the .leo\nfile. Leo puts (the encoding of) these elements into an attribute called\ndescendentTnodeUnknownAttributes. This attribute is part of the <v>\nelement representing the @thin node. Leo does _not_ write\nv.unknownAttributes in @thin trees because *only tnodes have gnx's in\nthin external files*. In effect, vnodes are anonymous. We could attempt to get\naround this by identifying vnodes by their corresponding tnodes, but that's not\na general solution and it is, in effect, equivalent to writing only\nt.unknownAttributes. So it seems pointless to \"pretend\" to be writing\nv.unknownAttributes.\n\nThe effect of this is to make all vnodes identical, as far as using\nunknownAttributes is concerned. This won't work in all cases. For example, a\nplugin that creates an arbitrary directed graph between vnodes must distinguish\nbetween joined vnodes. In that case, the plugin should confine itself to @file\ntrees, or just vnodes in .leo files, for that matter.\n", "children": []}, {"h": "in 4.2 b2", "gnx": "ekr.20040705111716", "b": "", "children": ["ekr.20040705111716.1", "ekr.20040705111716.45", "ekr.20040705111716.126", "ekr.20040705150130"]}, {"h": "Savedmarks and expantion state in <v> elements for @thin nodes", "gnx": "ekr.20040705111716.1", "b": "Leo will write only t.unknownAttributes to the .leo file when writing the <v>\nelement corresponding to the root of an @thin tree. Leo will do this by writing\na new xml attribute, say descendentTnodeUnknownAttributes, in <v> element.\n\nThe reason that Leo will only write t.unknownAttributes and not\nv.unknownAttributes is that only tnodes have gnx's in thin external files. In\neffect, vnodes are anonymous. We could attempt to get around this by identifying\nvnodes by their corresponding tnodes, but that's not a general solution and it\nis, in effect, equivalent to writing only t.unknownAttributes. This being so, it\nseems pointless to \"pretend\" to be writing v.unknownAttributes.\n\nThe effect of this is to make all vnodes identical, as far as using\nunknownAttributes is concerned. As I've stated in the past, this won't do if,\nfor example, a plugin is trying create an arbitrary directed graph between\nvnodes. In that case, the plugin should confine itself to @file trees, or just\nvnodes in .leo files, for that matter.\n\n7/1/04:\n\n- Leo now writes \"marks\" and \"expanded\" attributes in the root <v> element for @thin trees.\n\n- VERY IMPORTANT.  Leo now writes entire tree of @ignored @thin nodes.  This fixes a major bug.\n", "children": []}, {"h": "Marked all related @thin nodes dirty when a node changesd", "gnx": "ekr.20040705111716.45", "b": "Leo marks as dirty all @file nodes when they become \"newly unignored\".\n", "children": []}, {"h": "Fixed bug when reading  4.1 files with topology errors", "gnx": "ekr.20040705111716.126", "b": "", "children": []}, {"h": "Leo passes all important pychecker tests", "gnx": "ekr.20040705150130", "b": "Leo now generates no warnings with all significant tests enabled.  Some tests have been disabled in bases classes, and in a few cases pychecker gives erroneous warnings that have been suppressed directly in the source code using the __pychecker__ = arg syntax.\n", "children": []}, {"h": "in 4.2 b1", "gnx": "ekr.20040705112148", "b": "", "children": ["EKR.20040628095213.513", "EKR.20040628100535", "EKR.20040628100535.1"]}, {"h": "Changed *nix install script", "gnx": "EKR.20040628095213.513", "b": "", "children": []}, {"h": "Fixed bugs", "gnx": "EKR.20040628100535", "b": "@killcolor\n", "children": ["EKR.20040628095213.3", "EKR.20040628095213.23", "EKR.20040628095213.56", "EKR.20040628095213.60", "EKR.20040628095213.113", "EKR.20040628095213.121", "EKR.20040628095213.143", "EKR.20040628095213.160", "EKR.20040628095213.192", "EKR.20040628095213.202", "EKR.20040628095213.213", "EKR.20040628095213.225", "EKR.20040628095213.246", "EKR.20040628095213.279", "EKR.20040628095213.297", "EKR.20040628095213.308", "EKR.20040628095213.312", "EKR.20040628095213.324", "EKR.20040628095213.346", "EKR.20040628095213.348", "EKR.20040628095213.354", "EKR.20040628095213.366", "EKR.20040628095213.368", "EKR.20040628095213.404", "EKR.20040628095213.407", "EKR.20040628095213.412", "EKR.20040628095213.442", "EKR.20040628095213.444", "EKR.20040628095213.499", "EKR.20040628095213.512"]}, {"h": "Made \"end1\" and \"ilde\"events work again", "gnx": "EKR.20040628095213.3", "b": "- Leo calls g.enableIdleTimeHook at end of startup code.\n\t- This means that g.idleTimeHookHandler gets called periodically, even if no hooks have been defined.\n\t- g.enableIdleTime hook now calls g.app.gui.setIdleTimeHook at most once.\n\n- app.forceShutdown now calls \"end1\" hook before calling app.finishQuit.\n\t- This ensures that the \"end1\" hook always gets called once.\n\t- app.finishQuit calls doHook(\"end1\",...) only if it hasn't been called before.\n\t\t- This isn't necessary, but it makes traces in doHook less confusing.\n\n- idleTimeHookHandler now calls the idle-time hook for all open windows.\n\t- So having multiple windows open should not affect idle-time hooks.\n\n** Warning: new convention required to workaround apparent Tk problems.\n\t- \"idle\" hooks should return if g.app.killed is True.\n", "children": []}, {"h": "Put drawing hooks back in", "gnx": "EKR.20040628095213.23", "b": "@color\n\nAdded the following hooks:\n\ntag argument                                               keys in keywords\n(hook name)           overrides    when called           dictionary argument\n---------             ---------    -----------           -------------------\n\n\"draw-outline-box\"       yes   start of drawBox          tree,p,v,x,y (note 6)\n\"draw-outline-icon\"      yes   start of tree.drawIcon    tree,p,v,x,y (note 6)\n\"draw-outline-node\"      yes   start of tree.drawNode    tree,p,v,x,y (note 6)\n\"draw-outline-text-box\"  yes   start of tree.drawText    tree,p,v,x,y (note 6)\n\"draw-sub-outline\"       yes   start of tree.drawTree    tree,p,v,x,y,h,level,hoistFlag (note 6)\n", "children": []}, {"h": "Fixed syntax colouring Bug in html mode", "gnx": "EKR.20040628095213.56", "b": "", "children": []}, {"h": "Colorizing fixes", "gnx": "EKR.20040628095213.60", "b": "Added support for RapidQ, css, shell scripts and PHP.\n", "children": []}, {"h": "Fixed Select All bug", "gnx": "EKR.20040628095213.113", "b": "When in headline, the Select All command selected the body text.\n", "children": []}, {"h": "Fixed bugs in @tab_width: support backspace with negative tab width", "gnx": "EKR.20040628095213.121", "b": "- idle_body_key must call g.scanDirectives in order to support @tab_width.\n\t- This must be done for tabs and newlines.\n\n- Fixed bug in g.scanDirectives that was rejecting negative tabwidth values.\n\t- This bug did not exist in the other versions of scanDirectives.\n\n- With a negative tabwidth, a backspace now computes what spaces are equivalent\nto a tab and delete all of those. This is easy to do!\n", "children": []}, {"h": "Fixed bugs in Remove Sentinel command", "gnx": "EKR.20040628095213.143", "b": "", "children": []}, {"h": "Eliminated spurious error messages in Import External File command", "gnx": "EKR.20040628095213.160", "b": "", "children": []}, {"h": "Removed gnx in headlines when importing thin external files", "gnx": "EKR.20040628095213.192", "b": "", "children": []}, {"h": "Fixed bugs reading 4.1 files", "gnx": "EKR.20040628095213.202", "b": "atFile.scanHeader was not handling -encoding fields properly.\n", "children": []}, {"h": "Fixed Open With bug", "gnx": "EKR.20040628095213.213", "b": "", "children": []}, {"h": "Fixed Go To Line Number command", "gnx": "EKR.20040628095213.225", "b": "", "children": []}, {"h": "Fixed crash when importing Borland wstring.cpp", "gnx": "EKR.20040628095213.246", "b": "Namespace not handled very well.\n", "children": []}, {"h": "Fixed bug in insertBodyTime", "gnx": "EKR.20040628095213.279", "b": "I inserted \"import time\", and while I was at it I improved the error checking.\n", "children": []}, {"h": "Fixed bug when pasting large text into headlines", "gnx": "EKR.20040628095213.297", "b": "The code now limits what can be pasted to a maximum of one line or a about 250 characters.\n", "children": []}, {"h": "Fixed bug in delete command", "gnx": "EKR.20040628095213.308", "b": "", "children": []}, {"h": "Fixed oops: nullGui setIdleTimeHook", "gnx": "EKR.20040628095213.312", "b": "", "children": []}, {"h": "Fixed problems with trailing newlines and spurious changed bit", "gnx": "EKR.20040628095213.324", "b": "- Set removeTrailing to True unless ch is a newline.\n\nThis allows Alt-f to work properly.\n\n- Return \"break\" after the \"final\" text has been computed if nothing has changed.\n\nThis suppresses spurious newlines.\n\nA new idea:  Make sure the text _does_ have a newline at all times.  I'm not sure this will work...\n\n- ALWAYS set the text in select.  This prevents some weird problems with trailing newlines.\n", "children": []}, {"h": "Fixed headline key handling", "gnx": "EKR.20040628095213.346", "b": "Hitting return in middle of a headline didn't work.\n", "children": []}, {"h": "Fixed Problems executing script", "gnx": "EKR.20040628095213.348", "b": "", "children": []}, {"h": "Fixed problem with PHP and @last", "gnx": "EKR.20040628095213.354", "b": "", "children": []}, {"h": "Fixed bug when writing unknownAttributes", "gnx": "EKR.20040628095213.366", "b": "", "children": []}, {"h": "Fixed bugs opening a second file", "gnx": "EKR.20040628095213.368", "b": "", "children": []}, {"h": "Fixed bug: @last silently failed when extra lines exist", "gnx": "EKR.20040628095213.404", "b": "", "children": []}, {"h": "Fixed hang when dragging from one clone copy to another", "gnx": "EKR.20040628095213.407", "b": "", "children": []}, {"h": "Fixed crash in Write Missing", "gnx": "EKR.20040628095213.412", "b": "", "children": []}, {"h": "Fixed bug in getScript", "gnx": "EKR.20040628095213.442", "b": "This only happened after previous write error.\n\nThe fix was to init self.errors in openWriteFile.\n\nThe whole atFile logic is pretty gruesome.  It's got to be cleaned up.\n", "children": []}, {"h": "Fixed problems with @all", "gnx": "EKR.20040628095213.444", "b": "- Allow indented @all.\n    - Changed to g.is_special\n    - Changed leoColor.doAtKeyword\n\n- Fixed bug in is_special that broke p.isAtAllNode.\n", "children": []}, {"h": "Fixed double print in Execute Script command", "gnx": "EKR.20040628095213.499", "b": "", "children": []}, {"h": "Fixed bug reading leo.nsi", "gnx": "EKR.20040628095213.512", "b": "The problem was setting endSentinelComment to None instead of \"\" in readDirective.\n\nThe code is pretty fragile; it should handle either None or \"\", but in fact it requires \"\".\n", "children": []}, {"h": "Added new features", "gnx": "EKR.20040628100535.1", "b": "", "children": ["EKR.20040628095213.52", "EKR.20040628095213.109", "EKR.20040628095213.110", "EKR.20040628095213.197", "EKR.20040628095213.198", "EKR.20040628095213.264", "EKR.20040628095213.269", "EKR.20040628095213.282", "EKR.20040628095213.314", "EKR.20040628095213.334", "EKR.20040628095213.377", "EKR.20040628095213.391", "EKR.20040628095213.408", "EKR.20040628095213.425", "EKR.20040628095213.485", "EKR.20040628095213.490", "EKR.20040628095213.493", "EKR.20040628095213.501"]}, {"h": "Allowed </leo_header> tag", "gnx": "EKR.20040628095213.52", "b": "", "children": []}, {"h": "Replaced the word \"Leo\" with Leo icon in Find/Compare/Prefs windows", "gnx": "EKR.20040628095213.109", "b": "http://sourceforge.net/forum/message.php?msg_id=2429098\n\nThe Leo icon can eliminate the need for the word Leo.\n\nWhat I did:\n\n- Eliminate Leo in name of Find panel.\n- Derived leoTkinterPrefs from leoTkinterDialog: creates icon.\n- Derived leoComparePanel from leoTkinterDialog: creates icon.\n- Eliminated the -t option when opening Idle: the idle window is now called \"Python Shell\"\n", "children": []}, {"h": "Improved Import command slightly", "gnx": "EKR.20040628095213.110", "b": "- Added @language html when importing \".htm\" and \".html\" files.\n- Added @nocolor when importing \".txt\" and \".text\" files\n", "children": []}, {"h": "Added 3 files to distribution lists", "gnx": "EKR.20040628095213.197", "b": "doc\\leoUsersGuide.txt\ndoc\\leoFAQ.txt\ndoc\\leoLeaps.txt\n", "children": []}, {"h": "Supported @tabwidth in indent/dedent", "gnx": "EKR.20040628095213.198", "b": "The old code used at c.tab_width.  It should also look for @tabwidth directives.\n\nThis was not good when @tabwidth -4 was in effect.\n", "children": []}, {"h": "Import now creates absolute path", "gnx": "EKR.20040628095213.264", "b": "", "children": []}, {"h": "Created @killcolor directive", "gnx": "EKR.20040628095213.269", "b": "", "children": []}, {"h": "Added Paste Retaining Clones command", "gnx": "EKR.20040628095213.282", "b": "- By default, finishPaste command reassigns all indices in copied nodes.\n- Created pasteOutlineRetainingClones.\n- Added reassignIndices arg to pasteOutline, getLeoOutline and finishPaste.\n- Added << recreate tnodesDict >> in getLeoOutline.\n- Simplified getTnode slightly: the \"if t\" code is the same for both kinds of reads.\n", "children": []}, {"h": "Added readLineGenerator & readLineClass to leoGlobals", "gnx": "EKR.20040628095213.314", "b": "", "children": []}, {"h": "Much better error handling in executeScript", "gnx": "EKR.20040628095213.334", "b": "- The string passed to exec now includes sentinels.\n\ngoToLineNumber needs sentinels to work properly.\n\n- es_exception now gets the error line number from the traceback.\n\n- Added new keyword arguments to goToLineNumber.\n\n- Created goToScriptLineNumber, which just calls goToLineNumber.\n", "children": []}, {"h": "Recovered nodes when reading .leo files containing topology errors", "gnx": "EKR.20040628095213.377", "b": "Changed getVnode so it checks for v = None after calling getExistingVnode.  Creating the node seems to work in this case: I wouldn't bet my life that it works in all cases.\n", "children": []}, {"h": "Generalized write-to-string logic", "gnx": "EKR.20040628095213.391", "b": "- Added toString to most write methods.\n- Retained scriptFile option for compatibility with plugins.\n", "children": []}, {"h": "Added case_sensitiveLanguage to colorizer", "gnx": "EKR.20040628095213.408", "b": "", "children": []}, {"h": "Write entire @thin tree on write errors", "gnx": "EKR.20040628095213.425", "b": "", "children": []}, {"h": "Handled inner @language and @comment properly", "gnx": "EKR.20040628095213.485", "b": "There was a small hole in the format of external files. Leo assumed that comment\ndelimiters do not change within any particular external file. This assumption is\nnot necessarily true in files like leoProjects.txt.\n\nWhat I did:\n\n- putDirective and readDirective now check for @langauge and @comment, and\nchange comment delims appropriately.\n\nThis is slightly dubious: after all, an @langauge directive in the middle of\nmost external files will cause havoc. However, one could say that this is the\nusers problem :-)\n\nBTW, this doesn't really solve all problems in @all trees: Leo can still get\nmightily confused about comment delims if the user doesn't put proper @language\ndirectives in @all trees.\n", "children": []}, {"h": "Better reporting of body text conflicts", "gnx": "EKR.20040628095213.490", "b": "readEndNode uses the existing tempBodyString attribute to determine if the body text has changed.  If so, we mark the tnode dirty.  The code in \n\ntop_df.read.<< copy all tempBodyStrings to tnodes >>\n\npropagates the dirty marks to all ancestor @file nodes.  This can't be done in readEndNode because no positions are available at that time.\n", "children": []}, {"h": "Improved error handling for unknownAttributes", "gnx": "EKR.20040628095213.493", "b": "", "children": []}, {"h": "Read and write all t.unknownAttributes in top vnode of an @thin tree", "gnx": "EKR.20040628095213.501", "b": "Leo now writes t.unknownAttributes to the .leo file when writing the <v> element\ncorresponding to the root of an @thin tree. Leo will do this by writing a new\nxml attribute, descendentTnodeUnknownAttributes, in <v> element.\n\nLeo will only write t.unknownAttributes, not v.unknownAttributes. This is\nbecause only tnodes have gnx's in thin external files. In effect, vnodes are\nanonymous. We could attempt to get around this by identifying vnodes by their\ncorresponding tnodes, but that's not a general solution and it is, in effect,\nequivalent to writing only t.unknownAttributes. This being so, it seems\npointless to \"pretend\" to be writing v.unknownAttributes.\n\nThe effect of this is to make all vnodes identical, as far as using\nunknownAttributes is concerned. As I've stated in the past, this won't do if,\nfor example, a plugin is trying create an arbitrary directed graph between\nvnodes. In that case, the plugin should confine itself to @file trees, or just\nvnodes in .leo files, for that matter.\n", "children": []}, {"h": "4.2 a3", "gnx": "EKR.20040601084317", "b": "Leo 4.2 alpha 3           June 1, 2004\n\nThis version fixes completes the essential features of version 4.2. All known\nincompletions and bugs involving shared nodes and Leo's new file format have\nbeen fixed. BTW, this version of Leo completes Leaps 201 and 202.\n\nIt should be safe to use this version for collaboration between Leo's\ndevelopers. I hereby encourage people to start using cvs for collaboration. Only\nby doing so will we discover any possible problems.\n\nThe only item that must be completed before releasing 4.2 beta is fixing the Go\nTo Line Number command so it supports thin external files.\n\nThere are many known bugs in this version: most are minor bugs that have been\naround for a long time. All known bugs will be fixed by the first release\ncandidate. See the to-do list in LeoPy.leo for the complete list.\n\nThe highlights of this version:\n\n- All features of @file-thin are now complete and appear to be stable. - All\n\t.leo files in the distribution use @thin files where possible. - Leo ignores\n\tall directives within the range of the @all directive. - The @+middle and\n\t@-middle sentinels allow sections to be defined in any descendant node. -\n\tThe @clone sentinel marks duplicate cloned siblings. - The beginnings of a\n\tnew undo scheme are in place. - @thin, @nosent, @noref and @asis are\n\tabbreviations for @file-thin, @file-nosent, @file-noref and @file-asis. -\n\tCreated new iterators that return lists of vnodes and tnodes, including\n\titerators that remove all duplicates from those lists.\n", "children": ["EKR.20040601084317.2", "EKR.20040601101227", "EKR.20040601102808"]}, {"h": "Bug fixes", "gnx": "EKR.20040601084317.2", "b": "", "children": ["EKR.20040601101118", "EKR.20040601101430", "EKR.20040601084317.99", "EKR.20040601084317.142", "EKR.20040601102115"]}, {"h": "Fixed copy/paste operations involving @thin trees", "gnx": "EKR.20040601101118", "b": "If the copied node was an @thin or @file-thin node node only the root node was copied.\n", "children": []}, {"h": "Fixed Change Headline command", "gnx": "EKR.20040601101430", "b": "This bug exists in 4.1 final. Leo did not properly show the found text in\nheadlines. The fix was in the code that redraws the screen, not in the\nfind/change code itself.\n", "children": []}, {"h": "Eliminated spurious \"Not written x.tmp\" message after write errors", "gnx": "EKR.20040601084317.99", "b": "This happened after write errors such as orphan nodes.\n", "children": []}, {"h": "Fixed problems saving unknownAttribute field", "gnx": "EKR.20040601084317.142", "b": "When writing .leo files Leo now pickle's and hexlify's all data in the\nv.unknownAttribute and t.unknownAttribute dictionaries. When reading .leo files\nLeo does the reverse.\n\nLeo ignores all elements in these dictionaries if some element can not be pickled.\n", "children": []}, {"h": "Fixed unicode problem in the Dump Outline command", "gnx": "EKR.20040601102115", "b": "", "children": []}, {"h": "New Features", "gnx": "EKR.20040601101227", "b": "", "children": ["EKR.20040601101227.1", "EKR.20040601101430.1", "EKR.20040601101510", "EKR.20040601101547", "EKR.20040601084317.102", "EKR.20040601102703", "EKR.20040601084317.161"]}, {"h": "Leo ignores all directives in @all trees", "gnx": "EKR.20040601101227.1", "b": "", "children": []}, {"h": "@+-middle sentinels allow sections to be defined in grandchildren", "gnx": "EKR.20040601101430.1", "b": "", "children": []}, {"h": "@clone sentinel allows siblings to be cloned", "gnx": "EKR.20040601101510", "b": "", "children": []}, {"h": "Created @thin, @nosent, @noref and @asis abbreviations", "gnx": "EKR.20040601101547", "b": "", "children": []}, {"h": "Made undo extensible", "gnx": "EKR.20040601084317.102", "b": "Added u.registerUndoHandlers.\n\nThis will become largely unnecessary in the new undo scheme.  It's good to have though.\n", "children": []}, {"h": "Started work on simple new undo scheme", "gnx": "EKR.20040601102703", "b": "The new scheme simply saves all information in one or more vnodes and their\nassociated tnodes. This is a general scheme that can be used by almost any\ncommand.\n\nAt present only the u.saveTree method exists. Coming soon, u.saveNode,\nu.saveNodeAndChildren and u.saveListOfNodes.\n", "children": []}, {"h": "Created new c, p, v iterators", "gnx": "EKR.20040601084317.161", "b": "I have fallen madly in love with generators.\nThe following new iterators are defined with generators.\n\nc.all_positions_iter\nc.all_tnodes_iter\nc.all_vnodes_iter\nc.all_unique_tnodes_iter\nc.all_unique_vnodes_iter\n\np.tnodes_iter\np.vnodes_iter\np.unique_tnodes_iter\np.unique_vnodes_iter\n\nv.self_and__subtree_iter\nv.self_and_unique_subtree_iter\n", "children": []}, {"h": "Known bugs", "gnx": "EKR.20040601102808", "b": "See the to-do list in LeoPy.leo for a list of known bugs in this version.\n\nNone of these bugs is serious:  I consider this version to be suitable for day-to-day work.\n", "children": []}, {"h": "4.2 a2", "gnx": "EKR.20040518070558", "b": "Leo 4.2 alpha 2           May 18, 2004\n\nThis is an important milestone in Leo's history; the two defining features of\nthe 4.2 code base are complete:\n\n1. This is the first stable version using the \"shared nodes\" code base.\n\nShared nodes dramatically improve the time needed to insert, delete, and move\nnodes. Moreover, the new code base is code compatible with the old. Indeed, much\nof Leo still uses the old code base. See the Scripting Leo for full details of how to\nscript Leo with the 4.2 code base.\n\n2. This is the first version to use @file-thin for most external files.\n\n@file-thin makes it possible to use Leo effectively in a cvs environment.  Indeed, cvs now contains only a \"dummy\" version of LeoPy.leo.  The idea is that:\n\n- LeoPyRef.leo hardly ever changes. Developers will download LeoPyRef.leo once\nfrom cvs, then rename LeoPyRef.leo to be LeoPy.leo. LeoPy.leo is private to each\ndeveloper.\n\n- Developers will commit and update to cvs only thin external files. There is no\nlonger any need to keep .leo files and the files derived from them \"in synch\".\n\n- Similar remarks apply to LeoPlugins.leo. Cvs contains only LeoPluginsRef.leo,\nand contributors will need only to submit thin external files.\n\nI have been using the new code base without incident for weeks now, and I am\nfairly confident that it is safe to use. Nevertheless, I would suggest routine\ncaution when dealing with this version until more people have tested it.\n\nKnown bugs\n\n- Cutting and pasting an @file-thin node does not work properly. This will be\neasy to fix, I think.\n\n- The present algorithm for reading thin external files probably does not handle\nproperly the situation in which a named node is some kind of grand child of the\nreferencing node rather than being an immediate child of the referencing node.\nThis is a rare situation, easily avoided, and it doesn't happen at all in\nLeoPy.leo. Nevertheless, something must be done.\n\nOther improvements:\n\n- Fixed a number of problems with using Leo on MacOS X. In particular, Leo now\nuses the clover key as is usual on the Mac. More Mac and *nix specific\nimprovements are coming.\n\nStill to do:\n\n- Perfect import and @import. - Make the Go To Line Number command work with\n@file-thin files. - Fix minor bugs and add new features See the \"To Do: 4.2\"\nnode in the leoToDo.txt node in LeoPy.leo.\n", "children": ["EKR.20040518070940.5", "EKR.20040518070824", "EKR.20040518075457"]}, {"h": "Implemented @file-thin", "gnx": "EKR.20040518070940.5", "b": "What I did:\n\nFile format\n\nAdded -thin field to @+leo sentinel\n\nRecognizers\n\n- Added vnode recognizers for @file-thin option.\n- Added position proxies for vnode recognizers.\n\nDirectives & sentinels\n- Added support for @all.\n\nWriting\n\n- Added top-level atFile code to write @file-thin tree.\n- DO write @file-thin vnodes if there was an error writing the external file.\n\t- No autosave for @file-thin.\n \t- Leo writes @file nodes first, so this is not a problem.\n\t- putVnode checks orphan bit, which gets set if there was an error.\n- Don't write vnodes (or related tnodes) for @file-thin trees. (fileCommands).\n- Do write empty nodes in @thin trees.\n- Don't generate close node sentinels until all children have been generated.\n\nReading\n\n- Set at.thinFile when reading thin files.\n- Suppressed changed message and related items for thin files.\n- Modified scanText4 and allies to read thin external files.\n\t- Don't look for tnodeList for thin files.\n\t- Initially, at.lastThinNode is at.root.v\n\t- readStartNode calls createThinChild\n\t- createThinChild makes a child of at.lastThinNode if needed and sets at.lastThinNode.\n- Updated fc.tnodesDict in at.createThinChild.\n\tOtherwise clones existing only in two thin files won't be linked properly.\n", "children": []}, {"h": "Fixed bugs", "gnx": "EKR.20040518070824", "b": "", "children": ["EKR.20040518071415", "EKR.20040518070940.156", "EKR.20040518070824.1", "EKR.20040518070940", "EKR.20040518070940.164"]}, {"h": "Fixed clone bug that caused parts of outlines to disappear", "gnx": "EKR.20040518071415", "b": "Leo did not handle moving a node to the root position of the outline correctly.\n", "children": []}, {"h": "Fixed long-standing problem with the outline-only command", "gnx": "EKR.20040518070940.156", "b": "After a match, the find-next command searched only in the suboutline where the first match occurred.\nTo fix this, we call g.app.findFrame.handleUserClick in various Tk event handlers.\n", "children": []}, {"h": "Made sure file indices are always assigned when writing files.", "gnx": "EKR.20040518070824.1", "b": "- Moved call to assignFileIndices into write_Leo_file.\n- Called assignFileIndices in writeAtFileNodes, writeDirtyAtFileNodes, writeMissingAtFileNodes\n", "children": []}, {"h": "Fixed problems with missing tnodeList with @file-noref", "gnx": "EKR.20040518070940", "b": "", "children": []}, {"h": "Added t.writeBit", "gnx": "EKR.20040518070940.164", "b": "@nocolor\n\n\np.v.t.visitedBit was used for two purposes:\n\n- To mark the nodes to be written.\n- To mark nodes that are not orphan.\n\nWhat I did:\n\n- Added t.is/set/clearWriteBit.\n- Call t.setWriteBit in putVnode unless we are in a thin node.\n- putTnodes tests for t.writeBit rather than t.visitedBit.\n", "children": []}, {"h": "Dangers of @file-thin", "gnx": "EKR.20040518075457", "b": "Using @ignore with @file-thin is asking for trouble.\nIf you remove the @ignore and then save, you will lose data.\n\nHow to recover the data:\n\t- Read Outline.\n\t- Remove @ignore\n\t- Import External File... \n", "children": []}, {"h": "4.3...@settings", "gnx": "ekr.20060206111600", "b": "", "children": ["ekr.20050917092557", "ekr.20050913131848", "ekr.20050906104918", "ekr.20050620144052", "ekr.20050523092026", "ekr.20050513141852", "ekr.20050429094215", "ekr.20050313101229", "ekr.20050221104844", "ekr.20050126100405", "ekr.20050122090311"]}, {"h": "4.3.3 final", "gnx": "ekr.20050917092557", "b": "Leo 4.3.3 final                 September 17, 2005\n\nLeo 4.3.3 fixes several bugs reported in Leo 4.3.2 final in the last several days.\n\nTo learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of 4.3.3 (and 4.3.2)\n-----------------------------------\n\n- Improved Leo's documentation:\n    - A tutorial introduction to Leo:\n      http://webpages.charter.net/edreamleo/intro.html\n    - A 5-minute guide to programming with Leo:\n      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers\n\n- The new rst3 plugin creates .html and .tex files from reStructuredText\n  embedded in Leo files. Any node of the source outline may contain options for\n  the rst3 plugin, which makes this plugin much more useful and flexible than\n  the previous rst plugins. All of Leo's documentation was created using this\n  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:\n  http://webpages.charter.net/edreamleo/rstplugin3.html.\n\n- The spellpyx (spell checking) plugin is now much easier to use.\n\n- The vim and openWith plugins now use Python's subprocess module if it is present.\n\n- Improved the Pretty Printing command.\n\n- The usual assortment of bug fixes.\n", "children": ["ekr.20050917105646", "ekr.20050917092557.1", "ekr.20050917092557.2", "ekr.20050917092557.8", "ekr.20050917092557.12"]}, {"h": "Fixes made in 4.3.3", "gnx": "ekr.20050917105646", "b": "- Fixed bug that caused the Open With command to crash if the subprocess module was not installed.\n\n- Fixed problems in the niceNocent and fastGotoNode plugins.\n", "children": []}, {"h": "Rewrote documentation", "gnx": "ekr.20050917092557.1", "b": "Here is a summary of the changes:\n\n- General: All chapters created with rst3 plugin. This ensures a uniform look.\nThe source is in LeoDocs.leo. Removed all references to older versions of Leo,\nexcept when discussing old file formats in the Appendices. Corrected all text so\nit discusses present version.\n\n- rst3 plugin itself: Correct bug that caused chapters to be formatted\ndifferently when processing multiple @rst trees.\n\n- rst3 button in LeoDocs.leo: The script first looks *up* the tree, looking for\nan @rst node. If found, it processes just that tree. If not found, it processes\nall @rst nodes *below* the originally selected node. The button is now much more\nconvenient to use.\n\n- Preface: Shorter, no history. No longer a dead end.\n\n- What People are Saying About Leo: No longer a dead end.\n\n- FAQ: Reorganized, simplified, revised. Added entries for running Leo in a\nconsole window and debugging docutils. Improved entry for using cvs.\n\n- Installation: Now the first chapter. Revised.\n\n- Tutorial: Completely rewritten. Like Python's tutorial, this\nchapter contains everything a beginner needs to understand and use Leo. The\n`Quickstart for programmers` section is the heart of this chapter. All terms\nused have links either to their definition in the tutorial or in the Glossary.\nNewbies should be able to digest this chapter easily. This chapter should make\nLeo comprehensible to many more people.\n\n- Using Outlines: Revised per general remarks above.\n\n- Writing Programs in Leo. Completely rewritten. The old chapter was\nan embarrassment. The new chapter is a reference guide, properly organized as\nsuch. The introduction warns newbies away.\n\n- Using Leo's Commands. 'Minor' revisions and corrections create a\nsubstantially better result.\n\n- Scripting Leo with Python: Rewritten, simplified, updated and\ncorrected. The sources in LeoDocs.leo are directly executable. rST sources use\nliteral blocks instead of code-blocks so that the sources are simplified.\n(Important when executing examples). Properly discusses positions, including\n'supremely important' section on copying positions.\n\n- Customizing Leo. Heavily revised. Discusses leoSettings.leo, not\nleoConfig.txt. Security warnings are more reasonable. Section on script buttons.\nRewrote section on uA's (Adding extensible attributes to nodes and .leo files).\n\n- History of Leo. Rewritten. Much shorter and more useful. Discusses\nthe major milestones, concentrating on explaining the major differences between\nversions. Gone are details of how discoveries came to be. They are in\nLeoPostings.leo, which will be included in the distribution.\n\n- Theory of Operation. Largely rewritten. Discusses positions\nproperly. Omits discussion of how clones were implemented before 4.2.\n\n- White Papers. A new chapter. This is a slightly-edited version of\nwriting that had been buried in the appendices.\n\n- Appendices. Heavily revised and reformatted. Rewrote sections on file formats.\n\n- Glossary: A separate chapter. All terms have links to their definition. All\ndefinitions are rST targets so other chapters may refer to them. Added several\nnew entries.\n", "children": []}, {"h": "Bug fixes...", "gnx": "ekr.20050917092557.2", "b": "", "children": ["ekr.20050917092557.3", "ekr.20050917092557.4", "ekr.20050917092557.5", "ekr.20050917092557.6", "ekr.20050917092557.7"]}, {"h": "Fixed various unicode bugs", "gnx": "ekr.20050917092557.3", "b": "- Fixed bug with non-unicode characters in file name\n\n    http://sourceforge.net/forum/message.php?msg_id=3224635\n\n    Leo crashed try to read .leo files whose name contained non-ascii characters.\n\n- Fixed bug with non-unicode characters in settings value\n\n    http://sourceforge.net/forum/message.php?msg_id=3222750\n\n    Leo crashed try to write settings whose values contained non-ascii characters.\n\n- Fixed bug tangling sections with non-unicode characters.\n\n    http://sourceforge.net/forum/message.php?msg_id=3307318\n", "children": []}, {"h": "Fixed bugs relating to recent files", "gnx": "ekr.20050917092557.4", "b": "http://sourceforge.net/forum/message.php?msg_id=3218558\n", "children": []}, {"h": "Fixed minor crasher in colorizer", "gnx": "ekr.20050917092557.5", "b": "The fix was to add an entry of 'unknown' state to state_dict. This fixes the\ncrash by brute force, but may not be strictly correct. However, this is pretty\nmuch moot: we shall soon be moving to the new colorizer.\n", "children": []}, {"h": "Protected several methods used by plugin manager", "gnx": "ekr.20050917092557.6", "b": "The code gets c = keywords.get('c') in several places.\nThe protection is to return if c is None.\nThis affects the following files: plugins_menu.py, pluginsTest.py, plugin_manager.py\n", "children": []}, {"h": "Added test files to distribution list and cvs", "gnx": "ekr.20050917092557.7", "b": "http://sourceforge.net/forum/message.php?msg_id=3231597\n\ntest.leo had some non-@ignore'd @thin nodes for files not in the distribution.\n\n- Only files used by unit tests should be on cvs and the distribution.\n    - test\\unittest\\batchTest.py and test\\unittest\\errorTest.py were already on cvs.\n    - Added these files to the distribution.\n\n- Other test files should be distributed in @ignore nodes.\n\n- Leo's distribution checklist now has an item to check that the distributed test.leo can be opened without errors.\n", "children": []}, {"h": "New and improved  plugins", "gnx": "ekr.20050917092557.8", "b": "", "children": ["ekr.20050917092557.9", "ekr.20050917092557.11"]}, {"h": "New rst3 plugin", "gnx": "ekr.20050917092557.9", "b": "See http://webpages.charter.net/edreamleo/rstplugin3.html for full documentation\nof this plugin.\n\nThe rst3 plugin creates output files from Leo outlines containing\nreStructuredText (rST) ReStructuredText is a simple and powerful text formatting\nmarkup language. Outlines are a natural way to organize rST (or any text).\n\nThis plugin adds the Write Restructured Text command to Leo's Edit menu. The\nWrite Restructured Text command searches the selected outline looking for rst\nroot nodes whose headline have the form @rst <filename>. The plugin then creates\nthe named file in various ways depending which rst3 options are in effect.\n\nBy default, the rst3 plugin creates rST headings automatically from outlines, so\nthe higher-level nodes in the outline correspond to higher-level sections in the\noutput. Creating rST headings automatically relieves you from one of the most\ntedious chores in creating rST markup.\n\nTo use this plugin effectively, Python's docutils module must be installed. The\nrst3 plugin will use the SilverCity syntax coloring package if it installed.\n\nThis plugin sends .htm, .html or .tex files to the docutils module for further\nprocessing. Docutils generates HTML files or LaTeX files depending on the file's\nextension. HTML files generated by docutils refer to three .css (cascading style\nsheet) files that should exist in the same directory as the generated HTML file.\nYou can control the formatting of the HTML file by altering these .css files.\n", "children": []}, {"h": "Improved vim and openWith plugins", "gnx": "ekr.20050917092557.11", "b": "These plugins now use Python's subprocess module if it is present. The\nsubprocess module comes standard with Python 2.4. For Linux systems, Leo will\nuse subprocess.py in Leo's extensions folder if necessary.\n\nFor Windows systems you can install Python's subprocess module in Python 2.2 or\n2.3 as follows:\n\n    - Go to http://www.effbot.org/downloads/#subprocess\n\n    - Download and execute one of the following installers, depending on your version of Python:\n        subprocess-0.1-20041012.win32-py2.3.exe \n        subprocess-0.1-20041012.win32-py2.2.exe\n\nThis installer installs the subprocess sources and also _subprocess.pyd in Python's site-packages folder.\n", "children": []}, {"h": "New & improved features...", "gnx": "ekr.20050917092557.12", "b": "", "children": ["ekr.20050917092557.13", "ekr.20050917092557.14"]}, {"h": "Added g.es_print, g.es_trace function", "gnx": "ekr.20050917092557.13", "b": "Calling print directly is dangerous: it will fail for unicode characters.\n", "children": []}, {"h": "Improved PrettyPrinting", "gnx": "ekr.20050917092557.14", "b": "The new Pretty Print code has the following improvements:\n\n- Strip trailing blanks in get.\n- Many improvement to doOp.\n- Improved DoMultiline:\n    - Added special case logic to ensure '#' is preceded by space except at start of line.\n    - Added blank after multi-line string if needed.\n- Added lastName token for special-case handling depending on previous token.\n- No change to put, putArray or doName.\n", "children": []}, {"h": "4.3.2 final", "gnx": "ekr.20050913131848", "b": "Leo 4.3.2 final                 September 16, 2005\n\nTo learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of 4.3.2:\n-----------------------\n\n- Improved Leo's documentation:\n    - A tutorial introduction to Leo:\n      http://webpages.charter.net/edreamleo/intro.html\n    - A 5-minute guide to programming with Leo:\n      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers\n\n- The new rst3 plugin creates .html and .tex files from reStructuredText\n  embedded in Leo files. Any node of the source outline may contain options for\n  the rst3 plugin, which makes this plugin much more useful and flexible than\n  the previous rst plugins. All of Leo's documentation was created using this\n  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:\n  http://webpages.charter.net/edreamleo/rstplugin3.html.\n\n- The spellpyx (spell checking) plugin is now much easier to use.\n\n- The vim and openWith plugins now use Python's subprocess module if it is present.\n\n- Improved the Pretty Printing command.\n\n- The usual assortment of bug fixes.\n", "children": ["ekr.20050906104918.1", "ekr.20050906104931.1", "ekr.20050908164150", "ekr.20050906104931.48"]}, {"h": "Rewrote documentation", "gnx": "ekr.20050906104918.1", "b": "Here is a summary of the changes:\n\n- General: All chapters created with rst3 plugin. This ensures a uniform look.\nThe source is in LeoDocs.leo. Removed all references to older versions of Leo,\nexcept when discussing old file formats in the Appendices. Corrected all text so\nit discusses present version.\n\n- rst3 plugin itself: Correct bug that caused chapters to be formatted\ndifferently when processing multiple @rst trees.\n\n- rst3 button in LeoDocs.leo: The script first looks *up* the tree, looking for\nan @rst node. If found, it processes just that tree. If not found, it processes\nall @rst nodes *below* the originally selected node. The button is now much more\nconvenient to use.\n\n- Preface: Shorter, no history. No longer a dead end.\n\n- What People are Saying About Leo: No longer a dead end.\n\n- FAQ: Reorganized, simplified, revised. Added entries for running Leo in a\nconsole window and debugging docutils. Improved entry for using cvs.\n\n- Chapter 1: Installation: Now the first chapter. Revised.\n\n- Chapter 2: Tutorial: Completely rewritten. Like Python's tutorial, this\nchapter contains everything a beginner needs to understand and use Leo. The\n`Quickstart for programmers` section is the heart of this chapter. All terms\nused have links either to their definition in the tutorial or in the Glossary.\nNewbies should be able to digest this chapter easily. This chapter should make\nLeo comprehensible to many more people.\n\n- Chapter 3: Using Outlines: Revised per general remarks above.\n\n- Chapter 4: Writing Programs in Leo. Completely rewritten. The old chapter was\nan embarrassment. The new chapter is a reference guide, properly organized as\nsuch. The introduction warns newbies away.\n\n- Chapter 5: Using Leo's Commands. 'Minor' revisions and corrections create a\nsubstantially better result.\n\n- Chapter 7: Scripting Leo with Python: Rewritten, simplified, updated and\ncorrected. The sources in LeoDocs.leo are directly executable. rST sources use\nliteral blocks instead of code-blocks so that the sources are simplified.\n(Important when executing examples). Properly discusses positions, including\n'supremely important' section on copying positions.\n\n- Chapter 8: Customizing Leo. Heavily revised. Discusses leoSettings.leo, not\nleoConfig.txt. Security warnings are more reasonable. Section on script buttons.\nRewrote section on uA's (Adding extensible attributes to nodes and .leo files).\n\n- Chapter 9: History of Leo. Rewritten. Much shorter and more useful. Discusses\nthe major milestones, concentrating on explaining the major differences between\nversions. Gone are details of how discoveries came to be. They are in\nLeoPostings.leo, which will be included in the distribution.\n\n- Chapter 10: Theory of Operation. Largely rewritten. Discusses positions\nproperly. Omits discussion of how clones were implemented before 4.2.\n\n- Chapter 11: White Papers. A new chapter. This is a slightly-edited version of\nwriting that had been buried in the appendices.\n\n- Appendices. Heavily revised and reformatted. Rewrote sections on file formats.\n\n- Glossary: A separate chapter. All terms have links to their definition. All\ndefinitions are rST targets so other chapters may refer to them. Added several\nnew entries.\n", "children": []}, {"h": "Bug fixes...", "gnx": "ekr.20050906104931.1", "b": "", "children": ["ekr.20050909082711", "ekr.20050906104931.15", "ekr.20050906104931.38", "ekr.20050906104931.42", "ekr.20050906104931.43"]}, {"h": "Fixed various unicode bugs", "gnx": "ekr.20050909082711", "b": "- Fixed bug with non-unicode characters in file name\n\n    http://sourceforge.net/forum/message.php?msg_id=3224635\n\n    Leo crashed try to read .leo files whose name contained non-ascii characters.\n\n- Fixed bug with non-unicode characters in settings value\n\n    http://sourceforge.net/forum/message.php?msg_id=3222750\n\n    Leo crashed try to write settings whose values contained non-ascii characters.\n\n- Fixed bug tangling sections with non-unicode characters.\n\n    http://sourceforge.net/forum/message.php?msg_id=3307318\n", "children": []}, {"h": "Fixed bugs relating to recent files", "gnx": "ekr.20050906104931.15", "b": "http://sourceforge.net/forum/message.php?msg_id=3218558\n", "children": []}, {"h": "Fixed minor crasher in colorizer", "gnx": "ekr.20050906104931.38", "b": "The fix was to add an entry of 'unknown' state to state_dict. This fixes the\ncrash by brute force, but may not be strictly correct. However, this is pretty\nmuch moot: we shall soon be moving to the new colorizer.\n", "children": []}, {"h": "Protected several methods used by plugin manager", "gnx": "ekr.20050906104931.42", "b": "The code gets c = keywords.get('c') in several places.\nThe protection is to return if c is None.\nThis affects the following files: plugins_menu.py, pluginsTest.py, plugin_manager.py\n", "children": []}, {"h": "Added test files to distribution list and cvs", "gnx": "ekr.20050906104931.43", "b": "http://sourceforge.net/forum/message.php?msg_id=3231597\n\ntest.leo had some non-@ignore'd @thin nodes for files not in the distribution.\n\n- Only files used by unit tests should be on cvs and the distribution.\n    - test\\unittest\\batchTest.py and test\\unittest\\errorTest.py were already on cvs.\n    - Added these files to the distribution.\n\n- Other test files should be distributed in @ignore nodes.\n\n- Leo's distribution checklist now has an item to check that the distributed test.leo can be opened without errors.\n", "children": []}, {"h": "New and improved  plugins", "gnx": "ekr.20050908164150", "b": "", "children": ["ekr.20050908164150.1", "ekr.20050910143326"]}, {"h": "New rst3 plugin", "gnx": "ekr.20050908164150.1", "b": "See http://webpages.charter.net/edreamleo/rstplugin3.html for full documentation\nof this plugin.\n\nThe rst3 plugin creates output files from Leo outlines containing\nreStructuredText (rST) ReStructuredText is a simple and powerful text formatting\nmarkup language. Outlines are a natural way to organize rST (or any text).\n\nThis plugin adds the Write Restructured Text command to Leo's Edit menu. The\nWrite Restructured Text command searches the selected outline looking for rst\nroot nodes whose headline have the form @rst <filename>. The plugin then creates\nthe named file in various ways depending which rst3 options are in effect.\n\nBy default, the rst3 plugin creates rST headings automatically from outlines, so\nthe higher-level nodes in the outline correspond to higher-level sections in the\noutput. Creating rST headings automatically relieves you from one of the most\ntedious chores in creating rST markup.\n\nTo use this plugin effectively, Python's docutils module must be installed. The\nrst3 plugin will use the SilverCity syntax coloring package if it installed.\n\nThis plugin sends .htm, .html or .tex files to the docutils module for further\nprocessing. Docutils generates HTML files or LaTeX files depending on the file's\nextension. HTML files generated by docutils refer to three .css (cascading style\nsheet) files that should exist in the same directory as the generated HTML file.\nYou can control the formatting of the HTML file by altering these .css files.\n", "children": []}, {"h": "Improved vim and openWith plugins", "gnx": "ekr.20050910143326", "b": "These plugins now use Python's subprocess module if it is present. The\nsubprocess module comes standard with Python 2.4. For Linux systems, Leo will\nuse subprocess.py in Leo's extensions folder if necessary.\n\nFor Windows systems you can install Python's subprocess module in Python 2.2 or\n2.3 as follows:\n\n    - Go to http://www.effbot.org/downloads/#subprocess\n\n    - Download and execute one of the following installers, depending on your version of Python:\n        subprocess-0.1-20041012.win32-py2.3.exe \n        subprocess-0.1-20041012.win32-py2.2.exe\n\nThis installer installs the subprocess sources and also _subprocess.pyd in Python's site-packages folder.\n", "children": []}, {"h": "New & improved features...", "gnx": "ekr.20050906104931.48", "b": "", "children": ["ekr.20050906104931.49", "ekr.20050906104931.56"]}, {"h": "Added g.es_print, g.es_trace function", "gnx": "ekr.20050906104931.49", "b": "Calling print directly is dangerous: it will fail for unicode characters.\n", "children": []}, {"h": "Improved PrettyPrinting", "gnx": "ekr.20050906104931.56", "b": "The new Pretty Print code has the following improvements:\n\n- Strip trailing blanks in get.\n- Many improvement to doOp.\n- Improved DoMultiline:\n    - Added special case logic to ensure '#' is preceded by space except at start of line.\n    - Added blank after multi-line string if needed.\n- Added lastName token for special-case handling depending on previous token.\n- No change to put, putArray or doName.\n", "children": []}, {"h": "4.3.2 beta 1", "gnx": "ekr.20050906104918", "b": "Leo 4.3.2 beta 1                  September 10, 2005\n\nTo learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of 4.3.2:\n-----------------------\n\n- Improved Leo's documentation:\n    - A tutorial introduction to Leo:\n      http://webpages.charter.net/edreamleo/intro.html\n    - A 5-minute guide to programming with Leo:\n      http://webpages.charter.net/edreamleo/intro.html#quick-start-for-programmers\n\n- The new rst3 plugin creates .html and .tex files from reStructuredText\n  embedded in Leo files. Any node of the source outline may contain options for\n  the rst3 plugin, which makes this plugin much more useful and flexible than\n  the previous rst plugins. All of Leo's documentation was created using this\n  plugin from sources in LeoDocs.leo. For full documentation for rst3 see:\n  http://webpages.charter.net/edreamleo/rstplugin3.html.\n\n- The spellpyx (spell checking) plugin is now much easier to use.\n\n- The vim and openWith plugins now use Python's subprocess module if it is present.\n\n- Improved the Pretty Printing command.\n\n- The usual assortment of bug fixes.\n", "children": []}, {"h": "4.3.1", "gnx": "ekr.20050620144052", "b": "Leo 4.3.1                    June 20, 2005\n\n- Added support for Tk resource files.\n- Added support for coloring the PL/SQL language.\n- All Mark commands are now undoable.\n- Improved Resize To Screen command.\n- The usual assortment of minor bug fixes.\n", "children": ["ekr.20050620144052.2", "ekr.20050620144052.207"]}, {"h": "Bug fixes...", "gnx": "ekr.20050620144052.2", "b": "", "children": ["ekr.20050620144052.3", "ekr.20050620144052.6", "ekr.20050620144052.8", "ekr.20050620144052.48", "ekr.20050620144052.112", "ekr.20050620144052.114", "ekr.20050620144052.116", "ekr.20050620144052.119", "ekr.20050620144052.154", "ekr.20050620144052.166", "ekr.20050620144052.182", "ekr.20050620144052.185", "ekr.20050620144602"]}, {"h": "Fixed bug in @ratio setting", "gnx": "ekr.20050620144052.3", "b": "http://sourceforge.net/forum/message.php?msg_id=3166883\nBy: rogererens\n\nI swear I didn't wait for the release to be the first to report a bug! I just\ndidn't try this in the alpha/beta versions:\n\nLeo 4.3 final, build  1.262 , May 23, 2005\nPython 2.4.1, Tk 8.4.7, win32\n\nChanging\nGlobal settings: C:\\Leo\\config\\leoSettings.leo-->Window options-->@page Options\nfor new windows-->@ratio initial_horizontal_ratio = 0.3\nor any of the other ratios, does not save them to leoSettings.leo. So after\nrestarting I still have the old settings in use.\n", "children": []}, {"h": "Fixed crasher footprint plugin", "gnx": "ekr.20050620144052.6", "b": "http://sourceforge.net/forum/message.php?msg_id=3167166\n\nThe fix was to add the following line to the init function:\n\n    global click_registry, coloured_nodes\n", "children": []}, {"h": "Fixed invalid position bug)", "gnx": "ekr.20050620144052.8", "b": "Modifying outlines can invalidate existing positions! This rarely happens. At\npresent it affects the atFile.read logic when reading an outline whose initial\ncurrent position is a clone outside an @thin tree with another clone inside the\n@thin tree. So the read logic computes the expected current position before\nreading all external files, and this expected current position becomes invalid.\n\nWhat I did:\n\n1. Moved << set current and top positions >> from getVnodes to end of\ngetLeoFile. This ensures that the outline won't change after computing the\nposition.\n\n2. Unit tests will have to be revised to make sure that only valid positions get\nused.\n", "children": []}, {"h": "Fixed undo problems in unit tests", "gnx": "ekr.20050620144052.48", "b": "- Fixed bugs in convertAllBlanks and convertAllTabs.\n\nThese must always call afterChangeGroup to match beforeChangeGroup, even if\nnothing has changed.\n\n- Added u.getMark and u.rollbackToMark.\n\nThese allow unit tests to cut the undo stack back to an initial position in the\ntearDown method. This should be done for all tests that use u.undo and u.redo\nmethods. The bug was probably the result of changing the outline in the tearDown\nmethod.\n\nBoth the Reformat Paragraph and Edit Body unit tests now roll back the undo stack.\n\n- Added traces for unexpected conditions in u.undo, u.redo and tree.select.\n\n- Call u.setUndoTypes() in u.setUndoTypingParams when returning early.\n\n- Corrected Edit Body unit tests.\n\nThese tests should not call undo/redo when nothing is expected to change. Doing\nso may trigger the new 'cant undo' traces in u.undo.\n\n- doTest in leoTest.py now makes copies of both p and p1.\n\nIt's not clear that this is needed, it can't hurt, and it may have been important.\n", "children": []}, {"h": "Made sure same case is used in all recent files entries", "gnx": "ekr.20050620144052.112", "b": "The problem was that leo.__file__ returns a randomly upper or lower cased drive letter.\n", "children": []}, {"h": "Made sure all dialogs gets focus when they are run", "gnx": "ekr.20050620144052.114", "b": "# The About Leo dialog was not getting focus.\n", "children": []}, {"h": "Improved Resize To Screen command", "gnx": "ekr.20050620144052.116", "b": "", "children": []}, {"h": "Made sure comments are always visible in setting dialog even for non-@ nodes", "gnx": "ekr.20050620144052.119", "b": "http://sourceforge.net/forum/message.php?msg_id=3176499\n\n5) am I missing text in the Settings panels?  the outline shows that certain\nnodes have text (e.g., \"About keyboard shortcuts\" has the blue rectangle), yet\nthe body pane is empty; heck, even the title suggests that something should\nbe there...\n", "children": []}, {"h": "Fixed problem with leading @ in body text", "gnx": "ekr.20050620144052.154", "b": "http://sourceforge.net/forum/message.php?msg_id=3190593\n\nAs luck would have it, I need to put an @ character at the beginning of a line\nin source code (windows registry file format) and can't figure out how to do\nit. \n", "children": []}, {"h": "Fixed several  crashers while undoing a move involving clones", "gnx": "ekr.20050620144052.166", "b": "", "children": []}, {"h": "Fixed Unicode encoding problem", "gnx": "ekr.20050620144052.182", "b": "http://sourceforge.net/forum/message.php?msg_id=3186385\n\nI just tried 4.3-final, and it seems it does not work with Chinese LC_CTYPE:\n", "children": []}, {"h": "Fixed problem with coloring @language plain", "gnx": "ekr.20050620144052.185", "b": "http://sourceforge.net/forum/message.php?msg_id=3175553\n\nWhen I set default_target_language to plain in 4.2., no words in any body text\nis colored. This behavior seems to have changed in 4.3. Is it right, that I\nnow have to write @nocolor on top of *every* body text to get rid of randomly\ncolored words?\n\nWhat I did:\n\n- Added entries for target_language to ivarsDic and defaultsDict in leoConfig.py.\n- Added @language target_language = Python to leoSettings.leo.\n- Convert c.target_language to lowercase in several places.\n", "children": []}, {"h": "Fixed bug: Mark Clones command did not work", "gnx": "ekr.20050620144602", "b": "", "children": []}, {"h": "New features...", "gnx": "ekr.20050620144052.207", "b": "", "children": ["ekr.20050620144052.208", "ekr.20050620144052.210", "ekr.20050620144052.222", "ekr.20050620144052.231", "ekr.20050620144425"]}, {"h": "Created separate helpers for idle_body_key", "gnx": "ekr.20050620144052.208", "b": "idle_body_key now calls doAutoIndent and convertBlanksToTabs. The idea is that\nplugins could override these methods if desired.\n", "children": []}, {"h": "Made all Mark commands undoable", "gnx": "ekr.20050620144052.210", "b": "# I also fixed a bug: the Mark Clones command did not work!\n", "children": []}, {"h": "Removed dependence on profile and pstats modules from leoTest.py", "gnx": "ekr.20050620144052.222", "b": "Some non-standard distributions don't include the profile and pstats modules.\n", "children": []}, {"h": "Added support for tk resource files", "gnx": "ekr.20050620144052.231", "b": "Leo will now look for a file called .leo_xresources in the users home directory.\nIf found, Leo will pass that file to Tk's option_readfile method for the top\nwidget. This allows users to set Tk options.\n", "children": []}, {"h": "Added support for coloring the PL/SQL language", "gnx": "ekr.20050620144425", "b": "", "children": []}, {"h": "4.3-final", "gnx": "ekr.20050523092026", "b": "Leo 4.3 final                 May 23, 2005\n\nLeo 4.3 is here after almost five months of work.\n\nThe defining features of Leo 4.3:\n---------------------------------\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo now stores recent files information in .leoRecentFiles.txt files.\n\n4. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n5. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. This plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n6. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail. Leo is distributed with Pmw (Python Mega Widgets), path.py and\nsets.py in this directory.\n", "children": ["ekr.20050523092056.1", "ekr.20050523092056.4"]}, {"h": "Fixed crasher when pie-menu plugin enabled", "gnx": "ekr.20050523092056.1", "b": "http://sourceforge.net/forum/message.php?msg_id=3155657\n\nEnabling the Pie Menu plug-in caused Leo to quit when opening .leo files.\n", "children": []}, {"h": "Fixed crasher in Extract Section Command", "gnx": "ekr.20050523092056.4", "b": "This fixed a recent bug.\nThe crash happened if not section text was specified.\nAdded new checks and new error messages.\n", "children": []}, {"h": "4.3-beta 2", "gnx": "ekr.20050513141852", "b": "Leo 4.3 beta 2                 May 15, 2005\n\nLeo 4.3 beta 2 completes all major features of Leo 4.3 and fixes all bugs\nreported since the beta 1 release.\n\nThe defining features of Leo 4.3:\n---------------------------------\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo now stores recent files information in .leoRecentFiles.txt files.\n\n4. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n5. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. This plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n6. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail. Leo is distributed with Pmw (Python Mega Widgets), path.py and\nsets.py in this directory.\n", "children": ["ekr.20050513141913.1", "ekr.20050513141913.187"]}, {"h": "Fixed bugs...", "gnx": "ekr.20050513141913.1", "b": "", "children": ["ekr.20050513141913.16", "ekr.20050513141913.17", "ekr.20050513141913.22", "ekr.20050513141913.30", "ekr.20050513141913.57", "ekr.20050513141913.60", "ekr.20050513141913.82", "ekr.20050513141913.91", "ekr.20050513141913.127", "ekr.20050513141913.140", "ekr.20050513141913.145", "ekr.20050513141913.149"]}, {"h": "Fixed nodenavagator bug", "gnx": "ekr.20050513141913.16", "b": "http://sourceforge.net/forum/message.php?msg_id=3133917\n\n'Recent' and 'Marked' button now appear in new windows.\n", "children": []}, {"h": "Fixed LaTex Coloring bug", "gnx": "ekr.20050513141913.17", "b": "http://sourceforge.net/forum/message.php?msg_id=3133915\n\nThe colorizer now correctly handles the following:\n\n\\@, \\(, \\), \\{, \\}\n\nAnd also constructs like \\documentclass{report}.\n", "children": []}, {"h": "Error messages in scripts are now redirected properly.", "gnx": "ekr.20050513141913.22", "b": "http://sourceforge.net/forum/message.php?msg_id=3051870\n", "children": []}, {"h": "Fixed 2 crashers in nav_buttons plugin", "gnx": "ekr.20050513141913.30", "b": "The nav_buttons plugin was using self.c rather than keywords.get('c') in a hook\nhandler. The general rule is that hook handlers should do nothing if self.c !-\nkeywords.get('c').  This was an old bug, arising from the rewrite of the plugin.\n\nI added a warning to that effect in the plugin template.\n\nIt would perhaps be better to specify an optional commander in registerHandler\nand only call the handler if the commander matches. However, this isn't so easy\nor clean to do.I\n\nThe plugin was failing to set the positionList ivar (in the base\ntkinterListBoxDialog class). This was a fairly recent blunder: I saw that\npositionList wasn't used in the plugin directly, so I 'improved' the code by\nusing a local var instead of self.positionList. This illustrates a hazard of\nusing subclassing.\n", "children": []}, {"h": "Fixed crasher in yoffsetTree", "gnx": "ekr.20050513141913.57", "b": "This happened when creating a new chapter with chapters.py enabled.\n", "children": []}, {"h": "Fixed crasher in undo", "gnx": "ekr.20050513141913.60", "b": "The fix was to recompute newSel in << handle backspace with negative tab_width >> in idle_body_key.\n", "children": []}, {"h": "Fixed  several problems with Extract and Extract Section", "gnx": "ekr.20050513141913.82", "b": "- The section name lost its indentation.\n- The created section had extra indentation.\n- Undoing did not remove the inserted section node.\n\nThe unit tests now properly test indentation.\n", "children": []}, {"h": "Fixed bug with Delete in headlines", "gnx": "ekr.20050513141913.91", "b": "http://sourceforge.net/forum/message.php?msg_id=3143895\n\nThe Edit->Delete command did nothing when the selected text was in a headline.\n", "children": []}, {"h": "Fixed bugs re initial_splitter_orientation & @strings & @ints generally", "gnx": "ekr.20050513141913.127", "b": "doStrings now accepts either:\n\n@strings[values]name=value\n@strings name[values]=value\n\nSimilarly, doInts accepts:\n\n@ints[values]name=value\n@ints name[values]=value\n", "children": []}, {"h": "Fixed bug with hoist + insert", "gnx": "ekr.20050513141913.140", "b": "http://sourceforge.net/forum/message.php?msg_id=3149604\n\nChanged c.hoistStack[-1].current to c.hoistStack[-1].p in c.insertHeadline.\n", "children": []}, {"h": "Fixed problem with settings dialog position when panes split horizontally", "gnx": "ekr.20050513141913.145", "b": "The code now calls frame.resizePanesToRatio in createFrame in Leo.\n\nNot only does this fix this bug, it honors the following settings:\n\n- initial_horizontal_ratio\n- initial_horizontal_secondary_ratio\n- initial_vertical_ratio\n- initial_vertical_secondary_ratio\n", "children": []}, {"h": "Fixed problem changing shortcut & redid shortcuts widget", "gnx": "ekr.20050513141913.149", "b": "http://sourceforge.net/forum/message.php?msg_id=3138608\n\nReplaced individual shortcuts widget with a single text widget. This allows the\nuser to add or delete shortcuts.\n", "children": []}, {"h": "New Features...", "gnx": "ekr.20050513141913.187", "b": "", "children": ["ekr.20050513141913.97", "ekr.20050513141913.188", "ekr.20050513141913.194", "ekr.20050513141913.197", "ekr.20050513141913.233"]}, {"h": "Marking any node sets the outline changed", "gnx": "ekr.20050513141913.97", "b": "The following methods changed:\n\n- markAllAtFileNodesDirty\n- markAtFileNodesDirty\n- markClones\n- markHeadline\n- markSubheads\n\nI also rewrote the code using explicit positions.\n", "children": []}, {"h": "Allow quoted urls in  @urls nodes", "gnx": "ekr.20050513141913.188", "b": "http://sourceforge.net/forum/message.php?msg_id=3135170\n", "children": []}, {"h": "Moved executeFile into core", "gnx": "ekr.20050513141913.194", "b": "For a test of this, see the script in test.leo at:\n\nScripts-->Script to execute @test, @suite or file\n\nRead the documentation in that node before running the script.\n", "children": []}, {"h": "Rewrote g.getScript using at.writeFromString", "gnx": "ekr.20050513141913.197", "b": "g.getScript now fully processes all scripts, regardless of where they came from.\n\n- Changed g.getScript:\n    - p arg is now required.\n    - Removed unused script arg.\n    - Added forcePythonSentinels arg (default is True).\n    - g.getScript no longer temporarily alters any body text.\n        - atFile.writeFromString gets the initial text using the fromString arg.\n    - g.getScript now always calls atFile.writeFromString to handle all Leo directives.\n\n- Added forcePythonSentinels to atFile.initWriteIvars and atFile.scanAllDirectives.\n    - Default is None, in which case the code sets forcePythonSentinels to the scriptWrite arg.\n\n- Added forcePythonSentinels to atFile.scanAllDirectives.\n    - Default is False.\n\n- Created atFile.putAtFirstLines and atFile.putAtLastLines.\n    - These replace the corresponding sections in writeOpenFile.\n    - It was not actually necessary to define these, but it cleans up the code.\n\n- Created atFile.writeFromString.\n    - This handles all the details of simulating a write _from_ a string _to_ a string.\n\n- atFile.initWriteIvars and atFile.openFileForWriting now allow root to be None.\n    - This is not used at present: root is always defined.\n\n- Added fromString arg to atFile.writeOpenFile and atFile.putBody.\n", "children": []}, {"h": "Added define_name arg to c.executeScript", "gnx": "ekr.20050513141913.233", "b": "http://sourceforge.net/forum/forum.php?thread_id=1281640&forum_id=10228\n\nThe default is ''.  It define_name exists c.executeScript executes the script in an environment containing\n__name__ = define_name.\n", "children": []}, {"h": "4.3-beta 1", "gnx": "ekr.20050429094215", "b": "Leo 4.3 beta 1                 April 30, 2005\n\nLeo 4.3 beta 1 completes all major features of Leo 4.3. There are no known\nsignificant bugs remaining.\n\nThe defining features of Leo 4.3:\n---------------------------------\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo now stores recent files information in .leoRecentFiles.txt files.\n\n4. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n5. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. \nThis plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n6. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail. Leo is distributed with Pmw (Python Mega Widgets), path.py and\nsets.py in this directory.\n", "children": ["ekr.20050429094215.2", "ekr.20050429094215.130"]}, {"h": "Fixed bugs...", "gnx": "ekr.20050429094215.2", "b": "", "children": ["ekr.20050429094215.3", "ekr.20050429094215.22", "ekr.20050429094215.31", "ekr.20050429094215.41", "ekr.20050429094215.113", "ekr.20050429094215.116", "ekr.20050429094215.120"]}, {"h": "Made sure NameErrors are reported with tracebacks in scripts", "gnx": "ekr.20050429094215.3", "b": "The initial bug report:\n\nhttp://sourceforge.net/forum/message.php?msg_id=3048149\n\nThe problem arose from a misguided attempt to eliminate non-useful information\nfrom traces. Alas, the baby got thrown out with the bath water.\n\nHere are the changes I made:\n\n - c.executeScript now calls g.es_exception(full=True) to ensure that a full\n stack trace always gets produced. This is especially important when the\n exception happens in a module (file) called by the script.\n\n- c.executeScript now always executes the section < < dump the lines near the\nerror > >, regardless of context. The lines are printed (in black) in the log.\nThis is useful information in almost all cases.\n\n- After much experimentation, g.es_exception is basically unchanged. Note: If\nthe error occurs in your script itself (as contrasted with an exception thrown\nfrom a file called by your script) Leo always has properly put the cursor on the\noffending line. I made no changes in this logic.\n\nBTW, calling pdb.set_trace() in your scripts may cause more problems than it is\nworth. Indeed.pdb.set_trace() uses only the information on the stack, and that\nmay not be enough information to be useful. I usually use g.trace to find out\nwhat is happening. This works well.\n", "children": []}, {"h": "Finally! fixed .leoID problem!", "gnx": "ekr.20050429094215.22", "b": "Initial bug report:\n\nhttp://sourceforge.net/forum/message.php?msg_id=3053699\n\nThere were three similar bugs, all arising from the fact that g.os_path_abs and\ng.os_path_join return the _working_ directory if the initial path is None!\n\nI removed my HOME directory for testing. This was essential.\n\n- Compute home directory must return None, rather than the working directory if\nthe HOME variable is None.\n\n- app.setLeoId must be careful (in two sections) to do nothing if any of\n(homeDir,globalConfigDir,loadDir) is None.\n", "children": []}, {"h": "Investigated problem with LeoPluginsRef.leo", "gnx": "ekr.20050429094215.31", "b": "The problem is that newButtons must use @nosent, so any changes to newButtons\nmust be accompanied by a change to LeoPluginsRef.py. There is nothing more that\nneeds to be done.\n", "children": []}, {"h": "Fixed conflicts in menu shortcuts", "gnx": "ekr.20050429094215.41", "b": "The De-hoist command conflicted with the Expand/Contract submenu.\n\nThe Paste Node As Clone conflicted with the Mark submenu.\n", "children": []}, {"h": "Fixed bug in p.initStatus caught by pychecker", "gnx": "ekr.20050429094215.113", "b": "The status bits weren't being passed to v.initStatus!\n", "children": []}, {"h": "Fixed crasher in import logic (leoAtFile)", "gnx": "ekr.20050429094215.116", "b": "Traceback (most recent call last):\n  File \"c:\\prog\\leoCVS\\leo\\src\\leoCommands.py\", line 174, in doCommand\n    command()\n  File \"c:\\prog\\leoCVS\\leo\\src\\leoCommands.py\", line 863, in importDerivedFile\n    c.importCommands.importDerivedFiles(v,names)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoImport.py\", line 137, in importDerivedFiles\n    isThin = at.scanHeaderForThin(theFile,fileName)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoAtFile.py\", line 570, in scanHeaderForThin\n    junk,junk,isThin = at.scanHeader(theFile,fileName)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoAtFile.py\", line 2616, in scanHeader\n    at.error(\"Bad @+leo sentinel in: %s\" % fileName)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoAtFile.py\", line 4500, in error\n    self.printError(message)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoAtFile.py\", line 4509, in printError\n    if self.errors == 0:\nAttributeError: atFile instance has no attribute 'errors'\n", "children": []}, {"h": "Put in protections against unbounded recursion in idle_scrollTo", "gnx": "ekr.20050429094215.120", "b": "Traceback (most recent call last):\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoTkinterTree.py\", line 1409, in idle_scrollTo\n    h1 = self.yoffset(p)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoTkinterTree.py\", line 1488, in yoffset\n    h, flag = self.yoffsetTree(root,v1)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoTkinterTree.py\", line 1506, in yoffsetTree\n    h2, flag = self.yoffsetTree(child,p1)\n\n# Maximum recursion depth exceeded.\n\nIt is still not completely clear why this happened.\n", "children": []}, {"h": "New features...", "gnx": "ekr.20050429094215.130", "b": "", "children": ["ekr.20050429094215.131", "ekr.20050429094215.139", "ekr.20050429094215.145", "ekr.20050429094215.173", "ekr.20050429094215.286", "ekr.20050429094215.316", "ekr.20050429094215.347", "ekr.20050429094215.353", "ekr.20050429095849"]}, {"h": "Created stand-alone leoGlobals.py module", "gnx": "ekr.20050429094215.131", "b": "- Moved computeGlobalConfigDir, computeHomeDir, computeLoadDir and\nstartupEncoding from leo.py to leoGlobals.py.\n\n- Created g.computeStandardDirectories and used it in leo.py.\n\n- Created g.createStandAloneApp using the above functions. This function was\nbased on the 'Standalone Operation' classed in the plugin_manager plugin.\ng.createStandAloneApp doesn't actually use any of these classes because the\nnullGui class is basically a clumsier version of the BlackHole class.\n\n- Added a do-nothing attachLeoIcon method to nullGui class to suppress a\nwarning. As I said, the nullGui class is not as elegant as Paul's BlackHole\nclass.\n\n- Added <<importLeoGlobals>> button to newButtons plugin. This creates a node\n  named << define importLeoGlobals >> whose body text defines an\n  importLeoGlobals function.\n\nThe idea is that importing leoGlobals from a stand-alone plugin is a bit tricky.\nThe importLeoGlobals handles these details. Note that we don't want to define\nimportLeoGlobals in a node included by @others, because this function must be\navailable to the code in the << imports >> section. So we use a named section\nand reference it in before referencing the << imports >> section. See the\nplugin_manager plugin for an example.\n\n- Changed the plugin_manager plugin as follows: - Used the newButtons plugin to\n    add an << define importLeoGlobals >> section. - Simplified the import logic\n    using importLeoGlobals function. - Commented out the Standalone Operation\n    classes. - Called g.createStandAloneApp in the '__name__ == \"__main__\"'\n    code.\n", "children": []}, {"h": "Leo now ignores problems opening settings file for chapters plugin", "gnx": "ekr.20050429094215.139", "b": "- config.openSettingsFile returns None if there is a read error.\n\n- leoFileCommand.open gives no BadLeoFile message if silent is True.\n", "children": []}, {"h": "Improved write logic", "gnx": "ekr.20050429094215.145", "b": "- Simplified write_Leo_file using new leoFileCommand.deleteFileWithMessage and g.utils_rename.\n\n- Eliminated outputList var.\n    - The code that writes to a clipboard sets self.outputFile to g.fileLikeObject.\n\n- Sped up put routine: it always writes to self.outputFile.\n\n- self.outputFile is now a cStringIo object.  However, the heart of the put routine is:\n\n    s = g.toEncodedString(s,self.leo_file_encoding,reportErrors=True)\n    self.outputFile.write(s)\n\nand it appears that the call to g.toEncodedString is the limiting factor.\n", "children": []}, {"h": "Rewrote the undo code", "gnx": "ekr.20050429094215.173", "b": "- Use g.Bunch to simplify code.\n- Added 'before' & 'after' methods\n- Added entries to optionalIvars dynamically in bead methods.\n- Eliminated 'case-itis' by making it unnecessary ever to add more cases.\n- Removed 'v' key in undoer:  replaced it with 'p'.\n- Replaced u.v by u.p and v by p in find code (It's too confusing).\n- p.setDirty and p.setAllAncestorAtFileNodesDirty  return list of nodes that were marked dirty.\n- Create new top-level before/after methods & helpers:\n- Changed setUndoTypingParams to use new dispatch method.\n- Removed makeBeadDict.\n- Removed updateSetChangedFlag.\n- Added new methods to nullUndoer class.\n- Moved undo methods from leoNodes.py to leoUndo.py\n- Added dirtyVnodeList param to afterChangeNodeContents.\n", "children": []}, {"h": "Implemented undo/redo for Paste Retaining clones", "gnx": "ekr.20050429094215.286", "b": "", "children": []}, {"h": "Added support for 'str_' uA's", "gnx": "ekr.20050429094215.316", "b": "The only changes concern how Leo encodes and decodes items in\nt.unknownAttributes and v.unknownAttributes.\n\nWithout changing the file format, the only way to tell Leo how to write\nattributes is to use naming conventions. When writing attributes, Leo now does\nthe following:\n\n- Do nothing except apply xml escapes if the attribute name (in\nt.unknownAttributes or v.unknownAttributes) starts with str_ and the attribute\nis, in fact, a string. If the string is a Unicode string Leo converts the\nUnicode string to an encoded string.\n\n- Use the present pickling/hexlifying scheming otherwise. In particular, issue a\nwarning and ignore the attribute if the attribute can not be pickled. BTW, there\nis no need for separate base64 support: hexlifying guarantees that the result is\nvalid in any xml environment.\n\nLeo now does the reverse when reading.\n\nBTW, plugins could add their own naming conventions in an emergency. Indeed, the\nconventions will be confined to code in atFile.putUa and atFile.getUa, so a\nplugin would only need to override these two methods.\n", "children": []}, {"h": "Removed unused params from leoAtFile.py", "gnx": "ekr.20050429094215.347", "b": "Removed inAtOthers  param from putOpen/CloseNodeSentinel.\nRemoved inAtAll param from putCloseNodeSentinel.\nRemoved putCloseSentinel param from putAtAllBody\nRemoved putCloseSentinel param from putBody\n\nRemoved toString param from openFileForWritingHelper\nRemoved toString param from v.putUnknownAttributes\n\nNote: most(all?) top-level atFile.write methods pass toString to initWriteIvars.\n", "children": []}, {"h": "Leo  saves recent files info in .leoRecentFiles.txt files", "gnx": "ekr.20050429094215.353", "b": "Leo stores recent files information as follows.\n\n1. Leo stores recent files info in files called .leoRecentFiles.txt. These will\nbe a plain text files with one line per recent files entry. An Easter egg: if\nthe file starts with read-only, read_only, readonly, etc. Leo will never update\nthe file and will not remember changes to the Recent Files menu.\n\n2. On startup, Leo searches for the .leoRecentFiles.txt files in the user's home\ndirectory, if it exists. Leo looks in Leo's config directory next, but only if\nthe home directory does not exist, or does not contain a .leoRecentFiles.txt\nfile. In other words, Leo will use at most one .leoRecentFiles.txt file on\nstartup.\n\n3. When opening a .leo file, Leo looks for .leoRecentFiles.txt in the directory\ncontaining the file.\n\n4. At no time after installation does Leo create any .leoRecentFiles.txt file.\nThis will allow users (or their managers) to set policy regarding where to store\nthis information (if anywhere).\n\n5. Leo writes at most one .leoRecentFiles.txt file when saving a .leo file,\nnamely the file read in item 3 if it exists, or the file read in item 2\notherwise.\n\nThis is a flexible scheme that should meet most needs without having to resolve\nthorny questions about exactly where recent files info belongs.\n", "children": ["ekr.20050429094215.354", "ekr.20050429094215.355"]}, {"h": "What I did", "gnx": "ekr.20050429094215.354", "b": "@killcolor\n\n- Properly implemented undo/redo Clear Recent Files.\n\n- readSettingsFiles now reads @recentfiles nodes from all settings files.\n\n- Created @settings nodes and @recent-files nodes if they do not exist.\n", "children": []}, {"h": "New plan", "gnx": "ekr.20050429094215.355", "b": "You all have convinced me that storing recent files data in .leo files is a\ndubious idea. My new plan is as follows:\n\n1. Leo will store recent files info in files called .leoRecentFiles.txt. These\nwill be a plain text files with one line per recent files entry. These will be\nlocal files, so problems concerning directory structure and path specifications\nshould go away.\n\n2. On startup, Leo will search for the .leoRecentFiles.txt files in the user's\nhome directory, if it exists. Leo will look in Leo's config directory next, but\nonly if the home directory does not exist, or does not contain a\n.leoRecentFiles.txt file. In other words, Leo will use at most one\n.leoRecentFiles.txt file on startup.\n\n3. When opening a .leo file, Leo will look for .leoRecentFiles.txt in the\ndirectory containing the file.\n\n4. At no time after installation will Leo create any .leoRecentFiles.txt file.\nThis will allow users (or their managers) to set policy regarding where to store\nthis information (if anywhere).\n\n5. Leo will write at most one .leoRecentFiles.txt file when saving a .leo file,\nnamely the file read in item 3 if it exists, or the file read in item 2\notherwise.\n\n6. Leo will have settings to tell which .leoRecentFiles.txt files may be\nwritten.\n\n7. Leo will never create @settings nodes or @recent-files nodes automatically.\nMoreover, I shall remove the @recent-files panel from the settings dialog and\nthe corresponding @recent-files code from the config classes.\n\nI believe this will address everyone's concerns without the need for resolving\nthorny questions about exactly where recent files info belongs.\n", "children": []}, {"h": "Finished all @settings coding", "gnx": "ekr.20050429095849", "b": "- Saved expansion state of @settings trees when the user hits the OK button.\n\n- Added support for UNL's in the status line when the settings dialog is active.\n\n- Debugged @if-platform, @if-gui, @ints & @strings.\n\n- Reloaded settings files when opening the settings dialog.\n\n- Removed support for @recent-files nodes.  This is now handled by .leoRecentFiles.txt files.\n", "children": []}, {"h": "4.3-a4", "gnx": "ekr.20050313101229", "b": "Leo 4.3 alpha 4                 March 15, 2005\n\nLeo 4.3 is the culmination of more than five months of work. This alpha 4\nfocuses on plugins: all known plugins are now in leoPlugins.leo. Most plugins\nnow work with the 4.3 code base. Warning: not all plugins have been tested\nthoroughly.\n\nThis alpha 4 release also adds the frequently-requested Add Comments and Delete\nComments commands to Leo's Edit Body menu.\n\nThe defining features of Leo 4.3:\n\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n4. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. \nThis plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n5. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail. Leo is distributed with Pmw (Python Mega Widgets), path.py and\nsets.py in this directory.\n", "children": ["ekr.20050313101229.2", "ekr.20050313103448", "ekr.20050313101229.100"]}, {"h": "Fixed bugs...", "gnx": "ekr.20050313101229.2", "b": "", "children": ["ekr.20050313101229.74", "ekr.20050313101229.77"]}, {"h": "Fixed @wrap bug", "gnx": "ekr.20050313101229.74", "b": "http://sourceforge.net/forum/message.php?msg_id=3035471\n\nLeo was not inserting a visible horizontal scrollbar when @nowrap was in effect.\n", "children": []}, {"h": "Fixed change-all bug", "gnx": "ekr.20050313101229.77", "b": "http://sourceforge.net/forum/message.php?msg_id=3042593\n\nLeo now properly redraws the screen after a Change All command.\n", "children": []}, {"h": "New features...", "gnx": "ekr.20050313103448", "b": "", "children": ["ekr.20050313101229.95", "ekr.20050313101229.94", "ekr.20050313103448.1", "ekr.20050313101229.101"]}, {"h": "Created Add Comments and Delete Comments commands", "gnx": "ekr.20050313101229.95", "b": "The Add Comments command puts comments around a block of code. This command uses\nsingle-line comments if the language in effect for the node supports single-line\ncomments.\n\nThe Delete Comments command deletes the comments specified by the Add Comments command.\n", "children": []}, {"h": "Deprecated new_c key in hooks, added c key", "gnx": "ekr.20050313101229.94", "b": "Several hooks use the 'new_c' key in the keywords dictionary. Plugin writers had\nto remember whether to get the commander using keywords.get('c') or\nkeywords.get('new_c') or both. This was needlessly confusing.\n\nAll hooks that use the 'new_c' key now use also include the 'c' key. The 'new_c'\nkey is deprecated; plugins should use the 'c' key instead. \n\nNone of the plugins presently in leoPlugins.leo use the 'new_c' key, but the\n'new_c' key still exists for compatibility.\n\nThe following plugins were affected by this change:\n\nConceptualSort.py\nURLloader.py\nUASearch.py\narrows.py\nautocompleter.py\nbase64Packager.py\ncleo.py\ndyna_menu.py\nmacros.py\nmod_read_dir_outline.py\nmod_scripting.py\nmultifile.py\nnodebar.py\nnodenavigator.py\nopen_with.py\nscheduler.py\nread_only_nodes.py\ntemplates.py\n", "children": []}, {"h": "Added the 'before-create-leo-frame' hook", "gnx": "ekr.20050313103448.1", "b": "Leo calls the 'before-create-leo-frame' hook just before calling frame.onCreate.\nSimilarly, Leo calls the 'after-create-leo-frame' just after calling\nframe.onCreate.\n", "children": []}, {"h": "Added support for mod_labels plugin", "gnx": "ekr.20050313101229.101", "b": "atFile.copyAllTempBodyStringsToTnodes calls:\n\n    c.mod_label_controller.add_label(p,\"before change:\",old_body)\n", "children": []}, {"h": "Revised plugins for the 4.3 code base", "gnx": "ekr.20050313101229.100", "b": "Fixed problems in the following plugins. See the << version history >> section\nin each plugin for details.\n\nautocompleter.py\ncleo.py\nmod_scripting.py\nmod_tempfname.py\ntemplates.py\nvim.py\nxemacs.py\n\nReplaced the 'new_c' key by the 'c' key in the following plugins:\n\nConceptualSort.py\nURLloader.py\nUASearch.py\narrows.py\nautocompleter.py\nbase64Packager.py\ncleo.py\ndyna_menu.py\nmacros.py\nmod_read_dir_outline.py\nmod_scripting.py\nmultifile.py\nnodebar.py\nnodenavigator.py\nopen_with.py\nscheduler.py\nread_only_nodes.py\ntemplates.py\n\nReplaced the 'start2' hook by the 'new' hook in the following plugins: (This was\nmade possible now that 'new' is called when opening a new window if the\n'open1/2' hooks are not called.\n\nURLloader.py\nUASearch.py\nat_produce.py\nautocompleter.py\ncolor_markup.py\nfastGotoNode.py\ngroupOperations.py\nimport_cisco_config.py\nmultifile.py\nnodebar.py\nopen_with.py\nread_only_nodes.py\nscheduler.py\ntable.py\nusetemacs.py\nxsltWithNodes.py\n", "children": []}, {"h": "4.3-a3", "gnx": "ekr.20050221104844", "b": "Leo 4.3 alpha 3                 February 24, 2005\n\nLeo 4.3 is the culmination of more than five months of work. This alpha 3\nrelease corrects various bugs in Leo's core and in plugins. This is the first\nrelease that include an installer for MacOSX.\n\nThe defining features of Leo 4.3:\n\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n4. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically.\nThis plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n5. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail. Leo is distributed with Pmw (Python Mega Widgets), path.py and\nsets.py in this directory.\n", "children": ["ekr.20050221104844.2", "ekr.20050221104844.57"]}, {"h": "Bugs", "gnx": "ekr.20050221104844.2", "b": "", "children": ["ekr.20050221104844.12", "ekr.20050221104844.14", "ekr.20050221104844.27", "ekr.20050221104844.45", "ekr.20050221104844.54", "ekr.20050222100936"]}, {"h": "Applied patch to rst2 plugin", "gnx": "ekr.20050221104844.12", "b": "http://sourceforge.net/forum/message.php?msg_id=2999651\n\nI was pleasantly surprised to discover the reST2 plug-in working under 4.3a2\n(this is one the first thing I try as I'd like to use Leo as an editor\nfor that).\n\nAs mentioned in early threads, it still needs @rst for each node to be included\nin the reST rendering process. So I put @rst test.html and then a child with\n@rst and some reST code and it worked !!\n\nThen I tried to to get a simple rst file using @rst test but the plugin complained:\n\n[snip]\n\n  File \"C:\\dn_apps\\Leo\\plugins\\rst2.py\", line 164, in onIconDoubleClick\n    writeTreeAsRst(rstFile,fname,p,c)\nTypeError: writeTreeAsRst() takes exactly 5 arguments (4 given)\n\nSo I looked at the rst2.py and found a way to get it working but I would need\nsomeone to verify it :\n\nline 164, replaced   writeTreeAsRst(rstFile,fname,p,c)  by\n\nsyntax = False\nwriteTreeAsRst(rstFile,fname,p,c,syntax)\n\nAnd it worked!\n", "children": []}, {"h": "Revised searchbox plugin so it works with Leo 4.3", "gnx": "ekr.20050221104844.14", "b": "", "children": []}, {"h": "Fixed bugs in nav_buttons and nodenavigator plugins", "gnx": "ekr.20050221104844.27", "b": "http://sourceforge.net/forum/message.php?msg_id=3005140\nBy: ktenney\n\n- perform a search which marks a number of nodes\n- select \"Outline -> Mark/Unmark -> Unmark All\"\n- Several marks are still listed in in the nodenavigator \"Marks\" list.\n  (They are not marked in the outline.)\n\nWhat I did:\n\n- The p.set/clearMark methods now call the hook _after_ changing the marked status.\n  This fixes the apparent bug in nodenavigator.py.\n- Rewrote nav_buttons.py.  The old code was a mess; the new code is clean.\n- Changed the vnodeList ivar in leoTkinterDialog to positionList.\n- Rewrote c.unmarkAll to make clear that it is using positions.\n    - Added test_c_unmark_all test routine.\n", "children": []}, {"h": "Made sure Leo asks for leoID at most once", "gnx": "ekr.20050221104844.45", "b": "http://sourceforge.net/forum/message.php?msg_id=2958470\nFrom: Rich\n\nLeo 4.3 alpha 1, build  1.208 , January 24, 2005\nPython 2.3.4, Tk 8.4.3, win32\n\nOpened a new .leo file. It asked for an ID, and said it saved it. Closed the\nnew leo file & tried opening \"Leo\\config\\leoSettings.leo\". _It_ is asking for\na leoID!\n\nWhat I did\n\nAll changes were to g.app.leoID():\n    - Fixed bug:  set g.app.leoID in << put up a dialog requiring a valid id >>.\n    - Improved signon message.\n    - Better error handling and reporting. \n", "children": []}, {"h": "Fixed botch in g.pdb", "gnx": "ekr.20050221104844.54", "b": "g.pdb wasn't working because pdb wasn't imported inside the function.\n", "children": []}, {"h": "Fixed crasher when executing a script if the script was selected text in a new window", "gnx": "ekr.20050222100936", "b": "http://sourceforge.net/forum/message.php?msg_id=3008045\n\nLeo crashed when executing a script if the script was selected text in a new window.\n\nWhat I did:\n\n- g.getScript now calls g.getOutputNewline(c=c) rather than look at atFile.output_newline.\n\natFile.output_newline may not exist if a) the file is new and b) g.getScript\ndoesn't call atfile.write.\n\n- Set scripting=scriptWrite in call to atFile.scanAllDirectives in atFile.write.\n\nThis suppresses the following irrelevant message when executing scripts:\n\n    \"No absolute directory specified anywhere.\"\n", "children": []}, {"h": "New features", "gnx": "ekr.20050221104844.57", "b": "", "children": ["ekr.20050221104844.58", "ekr.20050221104844.59"]}, {"h": "Added sets.py to distribution", "gnx": "ekr.20050221104844.58", "b": "This allows plugins such as plugin_manager.py to work on Python 2.2.x.\n", "children": []}, {"h": "Added color='suppress' hack to g.es", "gnx": "ekr.20050221104844.59", "b": "g.es does nothing if color=='suppress'.  This can be useful in unit tests.\n", "children": []}, {"h": "4.3-a2", "gnx": "ekr.20050126100405", "b": "Leo 4.3 alpha 2                 February 14, 2005\n\nLeo 4.3 is the culmination of more than four months of work. This alpha 2\nrelease corrects various bugs and distribution problems.\n\na2 also adds several new features:\n\n- Adds 'word', 'line' and 'node' undo granularities.\n- Predefines 'c','g', and 'p' in scripts and unit tests.\n- Added support for top-level init functions in plugins.\n- Buttons can remove themselves when their scripts fail.\n\nThe defining features of Leo 4.3:\n\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n4. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. \nThis plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n5. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail.  Leo is distributed with Pmw (Python Mega Widgets) in this directory.\n", "children": ["ekr.20050130112336.1", "ekr.20050209141626.3", "ekr.20050209141626.150"]}, {"h": "To do: Improve how Leo handles recent files", "gnx": "ekr.20050130112336.1", "b": "Warning: The following features of @recentfiles nodes are confusing and probably\nwill be changed:\n\n- Leo does not save recent file information unless the open .leo file has an\n@settings tree and an @recentfiles node within the @settings tree. That is, Leo\ndoes not save recent files information in leoSettings.leo files.\n\n- Changing the @rencentfiles node doesn't mark the Leo file as dirty, so if you\ndon't save the .leo file the recent files information will not be updated.\n", "children": []}, {"h": "Bugs fixed...", "gnx": "ekr.20050209141626.3", "b": "", "children": ["ekr.20050209141626.4", "ekr.20050209141626.8", "ekr.20050209141626.12", "ekr.20050209141626.13", "ekr.20050209141626.16", "ekr.20050209141626.23", "ekr.20050209141626.42", "ekr.20050209141626.43", "ekr.20050209141626.46", "ekr.20050209141626.53", "ekr.20050209141626.54", "ekr.20050209141626.55", "ekr.20050209141626.91", "ekr.20050210101318", "ekr.20050209141626.101", "ekr.20050209141626.102", "ekr.20050209141626.105", "ekr.20050209141626.113", "ekr.20050209141626.114", "ekr.20050211095754", "ekr.20050212054743", "ekr.20050212144116"]}, {"h": "Fixed very old bug in Undo Insert Node", "gnx": "ekr.20050209141626.4", "b": "http://sourceforge.net/forum/message.php?msg_id=2795653\n\n1. Select a node in the tree\n2. Hit CTRL-I to insert a node\n3. Hit CTRL-Z to undo the insert\n4. There is no longer a node selected in the tree so keyboard tree navigation etc \ncommands don't work until you click on something with the mouse\n\n-----\n\nhttp://sourceforge.net/forum/message.php?msg_id=2795656\n\n1. Select a node in the tree\n2. Hit CTRL-I to insert a node\n3. Hit CTRL-Z to undo the insert\n4. Hit Hoist before clicking on anything\n\nNow you are hoisted on the recently removed node! The node is dead but his memory lives on ...\n", "children": []}, {"h": "Made sure to remove duplicates from recent files", "gnx": "ekr.20050209141626.8", "b": "", "children": []}, {"h": "Fixed indentation problems in leoTkinterFind.py", "gnx": "ekr.20050209141626.12", "b": "", "children": []}, {"h": "Changed leoConfig.txt to leoSettings.leo in Help menu, etc.", "gnx": "ekr.20050209141626.13", "b": "", "children": []}, {"h": "Investigated recent files problems", "gnx": "ekr.20050209141626.16", "b": "http://sourceforge.net/forum/message.php?msg_id=2966541\n\n---- Report:\n\n\"Recent Files\"  is not remembering files after one closes all open leo sessions.\n\nBut it does update the \"Recent Files\" list while leo is open in the same session.\nIf one opens more files it adds them to the list. But close all files and Leo\nforgets them all.\n\n---- Added to @recentfile documentation: \n\nWarning: The following features of @recentfiles nodes are confusing and probably\nwill be changed:\n\n- Leo does not save recent file information unless the open .leo file has an\n@settings tree and an @recentfiles node within the @settings tree. That is, Leo\ndoes not save recent files information in leoSettings.leo files.\n\n- Changing the @rencentfiles node doesn't mark the Leo file as dirty, so if you\ndon't save the .leo file the recent files information will not be updated.\n", "children": []}, {"h": "Improved queuing of log messages", "gnx": "ekr.20050209141626.23", "b": "http://sourceforge.net/forum/message.php?msg_id=2960328\n\nSymptom\n\nCan not import messages were not being sent to the console, even though there is a call to es in g.cantImport.\n\nWhat I did\n\n- The code in g.es now checks for nullLog as well as log == None when deciding when to queue messages.\n\n- g.openWithFileName now calls g.app.writeWaitingLog immediately after enabling the new log.\n\nThis writes the queued log messages in the proper order: a major advance in clarity.\n\n- Added silent param to two methods.\n\nThis allows the 'reading settings from' message to be sent to the log instead of the default 'reading' message.\n", "children": []}, {"h": "Fixed crasher in Change All command", "gnx": "ekr.20050209141626.42", "b": "", "children": []}, {"h": "Fixed crasher in script button", "gnx": "ekr.20050209141626.43", "b": "The new code no longer requires that the present node have a tnodeList.\n\nFile \"/Users/edream/leoCVS/leo/src/leoAtFile.py\", line 3830, in putOpenNodeSentinel\n    at.root.v.t.tnodeList.append(p.v.t)\n\nAttributeError: 'tnode' object has no attribute 'tnodeList'\n", "children": []}, {"h": "Fixed print problems on the Mac", "gnx": "ekr.20050209141626.46", "b": "The message 'command for widget 5' was a message from Tk saying in effect that no command was bound to the button.\n\nIndeed, this was so: a recent botch in a change in mod_scripting.py prevented the binding.\n\nMoreover, there were some extra print statements in the g.es logic for the Mac.\n", "children": []}, {"h": "leoTest.runTests now makes copies of all positions", "gnx": "ekr.20050209141626.53", "b": "This makes the test more robust in case of failure.\n", "children": []}, {"h": "Fixed problems with unit test file paths", "gnx": "ekr.20050209141626.54", "b": "Changed the setup code for the import/export test cases so that it uses os.path.sep when it sees \\\\ in the test nodes.\n\nWith this change all unit tests pass on the Mac as well as on XP.\n", "children": []}, {"h": "Made local config settings work again", "gnx": "ekr.20050209141626.55", "b": "*None* of the local settings were working(!!)\n\nThe old init code in the configSettings class had no chance of working. We must\nuse the full g.app.config.get logic.\n\nAdded some very simple unit tests to make sure the basics will never break\nagain so easily.\n", "children": []}, {"h": "Fix problems searching for nothing but whitespace", "gnx": "ekr.20050209141626.91", "b": "There were problems searching for whitespace.\n\nNote: it just ran slowly & silently.\n", "children": []}, {"h": "Fixed problems with typing return in the Find panel", "gnx": "ekr.20050210101318", "b": "Typing return now correctly invokes the Find button, without adding a newline in the find string.\n", "children": []}, {"h": "Buttons no longer work in toolbars when settings dialog is open", "gnx": "ekr.20050209141626.101", "b": "", "children": []}, {"h": "Fixed bug in delayed focus logic", "gnx": "ekr.20050209141626.102", "b": "http://sourceforge.net/forum/message.php?msg_id=2958470\n\nI opened a new .leo file, and the cursor was flashing in the text box. I started\ntyping \"@language\", and found that the first character is in the text box, and\nthe rest is in the headline!\n\nWhat I did:\n\nThis was the result of a race condition in the new scheme for setting focus. I\nrewrote set_focus so the delayed callback always sets the last requested focus.\nThe new code also takes care to clear the last request after fulfilling it.\n", "children": []}, {"h": "Made sure Leo asks for leoID at most once", "gnx": "ekr.20050209141626.105", "b": "http://sourceforge.net/forum/message.php?msg_id=2958470\n\nAll changes were to g.app.leoID():\n\n- Fixed bug:  set g.app.leoID in << put up a dialog requiring a valid id >>.\n- Improved signon message.\n- Better error handling and reporting. \n", "children": []}, {"h": "Leo now prints unicode characters properly in the log pane", "gnx": "ekr.20050209141626.113", "b": "This now works: g.es('\ufebb\ufeb1',color='red')\n\ng.es must send the original unicode string to the log pane widget, NOT an encoded string.\n", "children": []}, {"h": "Fixed various problems with opening files with Unicode filenames", "gnx": "ekr.20050209141626.114", "b": "http://sourceforge.net/forum/message.php?msg_id=2983923\n\n- Replaced string.+ with string.% in numerous places.\n- Simplified g.openWithFileName and corrected problems in error-reporting logic.\n", "children": []}, {"h": "Fixed bug reading encoding field in external files", "gnx": "ekr.20050211095754", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=2990951\nMilan Melena\n\nI think, I found two bugs:\n\n1) leoAtFile.py:\n<< read optional encoding param >>\nchanged first instance of i = j + 1 to i = j + 2\n\n2) leoGlobals.py\ng.getScript now returns with\n\nif at.output_newline == 'crlf':\n    return script.replace(\"\\r\\n\",\"\\n\")\nelse:\n    return script\n", "children": []}, {"h": "Allow indented code blocks to be run using Execute Script command", "gnx": "ekr.20050212054743", "b": "At present, such indented blocks may not contain Leo directives or section references.  This will be fixed in 4.3a3.\n", "children": []}, {"h": "Fixed problems found by pychecker", "gnx": "ekr.20050212144116", "b": "1. (fixed) C:\\prog\\leoCVS\\leo\\src\\leoCommands.py:4539: No global (loadDir) found\n    # Would cause leoSettings.leo in Window menu to crash.\n\n2. (fixed) C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:3426: No global (local) found\n\n    # Local --> locale\n    # Might cause getpreferredencoding to fail on *nix.\n\n3. (fixed) C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:4152: No global (testing) found\n    # Should be self.testing.\n\n4. (fixed) mu problems:\n    - Changed x to self.x:\n        - C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:3795: No global (removeSentinelsFromLines) found\n        - C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:3838: No global (getSentinelsFromLines) found\n    - Changed self.x to g.x:\n        C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:3854: No class attribute (comment_delims_from_extension) found\n    - pull_source has been renamed, I don not know to what.\n        C:\\prog\\leoCVS\\leo\\src\\leoGlobals.py:4170: Object (mu) has no attribute (pull_source)\n        (commented out the code that contains this)\n\n5. (removed code) from << create a node p for  kind & root2 >>\n    - last_p is None at first, so last_p.insertAfter does not make sense.\n", "children": []}, {"h": "New features...", "gnx": "ekr.20050209141626.150", "b": "", "children": ["ekr.20050126100405.1", "ekr.20050209141626.185", "ekr.20050209141626.190", "ekr.20050209141626.193", "ekr.20050209141626.194", "ekr.20050209141626.195", "ekr.20050209141626.196", "ekr.20050209141626.198"]}, {"h": "Added undo granularity", "gnx": "ekr.20050126100405.1", "b": "", "children": ["EKR.20040524104904.48"]}, {"h": "Undoing operations", "gnx": "EKR.20040524104904.48", "b": "Leo supports unlimited undo for all typing and all commands. The\n'undo_granularity' setting controls the granularity of undo. There are four\npossible values:\n\nnode\n    Starts a new undo unit when typing moves to a new node.\n\nline (default)\n    Starts a new undo unit when typing moves to new line.\n\nword\n    Starts a new undo unit when typing starts a new word.\n\nchar (not recommended)\n    Starts a new undo unit for each character typed.\n    This wastes lots of computer memory.\n\nInternally, setUndoTypingParams() calls recognizeStartOfTypingWord() to recognize the\nstart of words. Plugins can modify recognizeStartOfTypingWord(). It should\nreturn True if the typing indicated by the params starts a new 'word' for the\npurposes of undo with 'word' granularity. setUndoTypingParams() calls this\nmethod only when the typing could possibly continue a previous word. In other\nwords, undo will work safely regardless of the value returned. See the actual\ncode for recognizeStartOfTypingWord() for more details.\n", "children": []}, {"h": "Added support for top-level init function in plugins", "gnx": "ekr.20050209141626.185", "b": "When loading plugins, the Leo checks to see if the plugin has an init function\nat the top level (the module level). If so, Leo calls the init function. This\nfunction should return True (or equivalent) if the module loaded correctly.\n\nIf the top-level init function does not exist, Leo assumes the module loaded\ncorrectly.\n", "children": []}, {"h": "Changed name of Paste Retaining Clones to Paste Node As Clone", "gnx": "ekr.20050209141626.190", "b": "", "children": []}, {"h": "Added leoPlugins.leo to Help menu", "gnx": "ekr.20050209141626.193", "b": "", "children": []}, {"h": "Script buttons can request to be removed", "gnx": "ekr.20050209141626.194", "b": "A script in an @button node or script node can now request to be removed by\nsetting g.app.scriptDict['removeMe'] = True. Leo checks this value after\nexecuting the script in the button.\n", "children": []}, {"h": "Improved documentation in several nodes in leoSettings.leo", "gnx": "ekr.20050209141626.195", "b": "", "children": []}, {"h": "Predefined c,g & p in scripts, unit tests & test routines", "gnx": "ekr.20050209141626.196", "b": "@nocolor\n\nAdded define_p keyword arg in executeScript. When True (the default), the script\nor unit test is run in an environment in which c, p and g are all defined.\nc is the commander for the outline in which the script appears.\np is the same as c.currentPosition and g is the leoGlobals module.\n\nTherefore, the following lines need never appear in scripts or unit tests!\n\n@color\n\nimport leoGlobals as g\np = c.currentPosition()\n", "children": []}, {"h": "Changed name of Preferences command to Settings", "gnx": "ekr.20050209141626.198", "b": "", "children": []}, {"h": "4.3-a1", "gnx": "ekr.20050122090311", "b": "Leo 4.3 alpha 1                 January 24, 2005\n\nLeo 4.3 is the culmination of more than four months of work. \n\nThe defining features of Leo 4.3:\n\n1. Leo now stores options in @settings trees, that is, outlines whose headline\nis '@settings'. When opening a .leo file, Leo looks for @settings trees not only\nin the outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.  Readers of Python's configParser shootout take note!\n\n2. The Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\n3. Leo's read/write code in leoAtFile.py has been rewritten to support user-\ndefined tangling and untangling.  This is a major cleanup of Leo's core.\n\n4. Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables\nand disables plugins automatically. This plugin also tells you everything you need to know\nabout each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\n5. You can install third-party extensions in Leo's extensions directory. Leo\nwill attempt to import such extensions from the extensions directory if normal\nimports fail.\n", "children": ["ekr.20050123112834", "ekr.20050123092834.1", "ekr.20050123092834.896"]}, {"h": "Defining features of 4.3", "gnx": "ekr.20050123112834", "b": "", "children": ["ekr.20050123110009", "ekr.20050123092834.520", "ekr.20050123115804", "ekr.20050123115804.1"]}, {"h": "Using @settings trees and leoSettings.leo", "gnx": "ekr.20050123110009", "b": "Leo now stores options in @settings trees, that is, outlines whose headline is\n'@settings'. When opening a .leo file, Leo looks for @settings trees not only in\nthe outline being opened but also in various leoSettings.leo files.\n\nThe key design goal of @settings trees was that Leo's user options must be\ninfinitely flexible. That goal has been accomplished. Indeed, users can create\narbitrarily complex user options with @settings trees. Leo settings outlines\nare, in fact, infinitely more flexible and powerful than any scheme based on\nflat text.\n\nThe Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings pane\". This settings pane allows you to change\nthe settings selected in the outline pane using standard gui widgets. The\nsettings pane is dynamically created from nodes in the settings tree; it is as\nextensible as the @settings tree itself.\n\nFor full details, see the children of this node.\n", "children": ["ekr.20050122084954", "ekr.20050122091036"]}, {"h": "Using leoSettings.leo and @settings trees", "gnx": "ekr.20050122084954", "b": "Leo stores options in @settings trees, that is, parts of Leo outlines whose root node has the headline @settings.  When opening a .leo file, Leo looks for @settings trees in the following places:\n\n- The file called leoSettings.leo in the leo/config directory.\n- The file called leoSettings.leo in the users home directory.\n- The file being loaded.\n\nSettings that later in the above list override settings found earlier. For\nexample, any setting specified in an @settings tree in the file being loaded\noverrides any setting seen in any leoSettings.leo file.\n\nThe Settings command temporarily replaces the outline pane with an outline\nshowing all the @settings trees in effect. The Settings command also replaces\nthe body pane with a \"settings dialog\" pane. This settings dialog pane allows\nyou to change the settings selected in the outline pane using standard gui\nwidgets.\n\nThe format of nodes in @settings trees are as follows:\n\n1. \"Simple settings nodes\" have headlines of the form:\n\n@<type> name = val\n\nset the value of name to val, with the indicated type.\n\n<type> may be one of the following, with valid values shown:\n\n<type>          Valid values\n-----           ------------\n\\@bool           True, False, 0, 1\n\\@color          A Tk color name or value, such as 'red' or 'xf2fddff' (without the quotes)\n\nFor a list of Tk color specifiers see:\n\n- http://www.tcl.tk/man/tcl8.4/TkCmd/colors.htm\n- http://www.tcl.tk/man/tcl8.4/TkLib/GetColor.htm\n\n\\@directory      A path to a directory\n\\@float          A floating point number of the form nn.ff.\n\\@int            An integer\n\\@ints[list]     An integer (must be one of the ints in the list).\n                 Example: @ints meaningOfLife[0,42,666]=42\n\\@path           A path to a directory or file\n\\@ratio          A floating point number between 0.0 and 1.0, inclusive.\n\\@string         A string\n\\@strings[list]  A string (must be one of the strings in the list).\n                 Example: @strings tk_relief['flat','groove','raised']='groove'\n\n2. \"Complex settings nodes\" have headlines of the form:\n\n\\@<type> description\n\nThe actual settings are specified in the body text.  At present, there are two such kinds of complex settings nodes:\n\n- @font\n\nThe body text contains a list of settings for a font.  For example:\n\nbody_text_font_family = Courier New\nbody_text_font_size = None\nbody_text_font_slant = None\nbody_text_font_weight = None\n\n- @recentFiles\n\nThe body text contains a list of paths of recently opened files, one path per line.\n\nWarning: The following features of @recentfiles nodes are confusing and probably\nwill be changed:\n\n- Leo does not save recent file information unless the open .leo file has an\n@settings tree and an @recentfiles node within the @settings tree. That is, Leo\ndoes not save recent files information in leoSettings.leo files.\n\n- Changing the @rencentfiles node doesn't mark the Leo file as dirty, so if you\ndon't save the .leo file the recent files information will not be updated.\n\n3.  All other nodes are \"Organizer\" nodes.  Such nodes have no effect on the settings shown in the dialog.  You may use them as you please to organize settings.\n\nNotes:\n\nA.  At present, you can not change @settings trees while executing the Settings command.  You can, however, change any @settings tree normally when not executing the Settings command.\n\nB. Other kinds of settings nodes are planned for future releases.\n", "children": []}, {"h": "Unfinished configuration features", "gnx": "ekr.20050122091036", "b": "The essential features of @settings trees and the settings dialog appear to be stable.  However, many improvements can be imagined, including the following:\n\n- Allow searching for nodes while in the settings dialog.\n\n- Allow adding, deleting, rearranging nodes while in the settings dialog.\n\n- Allow adding, deleting, rearranging recent files while in the settings dialog.\n\nThese will be added as time permits and people request.\n", "children": []}, {"h": "Rewrote Leo's read/write logic", "gnx": "ekr.20050123092834.520", "b": "The new code greatly simplifies the class structure. The intention is to allow plugins to override methods of this file more easily.\n\nThe highlights:\n\n- Plugins may now override methods in this file much more easily.\n    - All code is now in a single class.\n    - Resolved the few name conflicts by renaming x to x3 or x4.\n    - The new code generally uses methods instead of sections.\n    - Initialization is now simple and sane, and is done in dedicated methods.\n    - All constants are class constants: no more module-level constants.\n\n- All top-level methods support toString or fromString arguments.\n", "children": []}, {"h": "Added Plugins Manager plugin", "gnx": "ekr.20050123115804", "b": "Leo now boasts a wonderful new Plugins Manager plugin. This plugin enables and\ndisables plugins automatically.This plugin also tells you everything you need to\nknow about each plugin. Finally, this plugin also lets you download plugins from\nLeo's cvs site! Many thanks to Paul Patterson for this excellent work.\n\nNote. The Plugins Manager plugin requires Pmw. You can install Pmw in Leo's\nextensions directory if you like.\n", "children": []}, {"h": "You can install third-party extensions in Leo's extensions directory", "gnx": "ekr.20050123115804.1", "b": "You can can import any extension to Leo by putting the extension in the 'extensions' directory and using g.importExtension to import it.\n\n- created the 'extensions' directory and g.app.extensionsDir\n\n- created g.importModule and g.importExtension\n", "children": []}, {"h": "Fixed bugs...", "gnx": "ekr.20050123092834.1", "b": "", "children": ["ekr.20050123101208", "ekr.20050123092834.2", "ekr.20050123100706.1", "ekr.20050123092834.165", "ekr.20050123103303", "ekr.20050123100706.2", "ekr.20050123092834.159", "ekr.20050123111723", "ekr.20050123092834.526", "ekr.20050123092834.438", "ekr.20050123092834.486"]}, {"h": " Major bugs: these bugs corrupted external files!", "gnx": "ekr.20050123101208", "b": "", "children": ["ekr.20050123092834.432", "ekr.20050123092834.497"]}, {"h": "Fixed double doc part bug", "gnx": "ekr.20050123092834.432", "b": "Leo did not correctly write adjacent @doc parts in @file trees.  Leo could not read the resulting external files!\n\nThe bug happened if any node in an @file tree contains adjacent @doc parts, like this:\n\n@  first doc part\n...\n@ second doc part\n...\n\nLeo failed to write the closing #@-at sentinel that would finish the first @doc part.\n", "children": []}, {"h": "Fixed bug in how Leo writes thin external files", "gnx": "ekr.20050123092834.497", "b": "Leo did not properly write external files that contained section references to grand-children.\n\nFor example:\n\n<< current level>>\n  reference to << 3. level>>\n    << 1.level>>\n        << 2.level >>\n            << 3.level>>\n\nThe fix was simply to reverse the order in which putRefAt puts +middle and -middle sentinels.\n", "children": []}, {"h": "Commands", "gnx": "ekr.20050123092834.2", "b": "", "children": ["ekr.20050123092834.6", "ekr.20050123092834.19", "ekr.20050123092834.27", "ekr.20050123092834.42", "ekr.20050123092834.71", "ekr.20050123092834.510"]}, {"h": "Fixed problems with spawnv option of openWith", "gnx": "ekr.20050123092834.6", "b": "The Open With logic in createOpenWithMenuFromTable for the 'spawnv' case now\nactually calls os.spawnv (rather than spawnl) and it allows a variable length\nlist of parameters.\n", "children": []}, {"h": "Fixed bug in  Remove Sentinels command", "gnx": "ekr.20050123092834.19", "b": "The old code wasn't handling single file selections properly. The new code works\naround an apparent bug in Tk.askopenfilename.\n", "children": []}, {"h": "Fixed bug re Paste Node As Clone", "gnx": "ekr.20050123092834.27", "b": "The new code forbids Paste Node As Clone if the paste would result in a node being a clone of itself.\n", "children": []}, {"h": "Fixed Pretty Print commands for Python 2.4", "gnx": "ekr.20050123092834.42", "b": "The '@' sign is an operator in Python 2.4, not an error token.\n", "children": []}, {"h": "Fixed crasher in Import external files command", "gnx": "ekr.20050123092834.71", "b": "What I did:\n\n- Created a new top-level method: scanHeaderForThin.\n\nThis sets self.encoding temporarily. The actual value of self.encoding does not\nreally matter: no errors will be given by readLine and its helpers even if there\nare unicode encoding errors.\n\n- We must _not_ set self.encoding in scanHeader: that would interfere with\nnormal initialization.\n", "children": []}, {"h": "Search commands are now restricted to hoisted area", "gnx": "ekr.20050123092834.510", "b": "", "children": []}, {"h": "Distribution", "gnx": "ekr.20050123100706.1", "b": "", "children": ["ekr.20050123092834.491"]}, {"h": "Fixed file association in leoDist.leo", "gnx": "ekr.20050123092834.491", "b": "Changed the open command associated with .leo files on Windows from:\n\npythonw.exe \"<leodir>\\src\\leo.py\" %1\n\nto:\n\n\"pythonw.exe\" \"<leodir>\\src\\leo.py\" \"%1\"\n\nThe difference is in quotes.  Especially quotes around \"%1\" seem to matter.\n", "children": []}, {"h": "Files", "gnx": "ekr.20050123092834.165", "b": "", "children": ["ekr.20050123092834.492", "ekr.20050123092834.166", "ekr.20050123092834.176", "ekr.20050123092834.196", "ekr.20050123092834.422", "ekr.20050123092834.424", "ekr.20050123092834.431", "ekr.20050123092834.434", "ekr.20050123092834.499", "ekr.20050123092834.544", "ekr.20050123151338"]}, {"h": "g.import wrappers return module if it is in sys.modules", "gnx": "ekr.20050123092834.492", "b": "This is an important difference. imp.load_module is equivalent to a reload, so\nwe must not call this if the module already exists!\n", "children": []}, {"h": "Disabled changes to comment delims in @@language and @@comment sentinels", "gnx": "ekr.20050123092834.166", "b": "he readDirective method was changing the comment delimiters as the result of\nseeing the sentinels corresponding to @language or @comment directives. But in\ngeneral this makes no sense! Comment delimiters should be set once and for all\nin the @+leo sentinel: there is no compiler in the world that tolerates mixed\ncomment delimiters.\n\nBTW, the way to set javascript \"inner\" comments is to use @delims, not @comment.\nN.B. The @language and @comment delimiters _will_ have an effect, and that\neffect is in the _write_ logic, not the read logic. The effect is to set the\ncomment delims in the @+leo sentinel.\n\nThe quick fix is to comment out code in readDirective.\n", "children": []}, {"h": "Made sure files that differ only in line ending get written if @lineending is in effect", "gnx": "ekr.20050123092834.176", "b": "The old code did not honor the @lineending directive if the two files would otherwise be identical.\n\nWhat I did:\n\n- Added self.explicitLineEnding to remember whether an explicit @lineending directive is in effect.\n\n- Make sure the user knows why an otherwise identical file was written.\n\n- Changed name of compareFilesIgnoringNewlines to compareFiles.\n\n- Added ignoreLineEndings arg to compareFiles.\n", "children": []}, {"h": "Fixed bug:  @nosent wrote sentinels!", "gnx": "ekr.20050123092834.196", "b": "The fix was to add nosentinels=nosentinels in the call to initWriteIvars in atFile.write.\n", "children": []}, {"h": "Fixed bug in replaceTargetFileIfDifferent", "gnx": "ekr.20050123092834.422", "b": "This method now does nothing if at.toString is True.\n", "children": []}, {"h": "Made sure that @ignore forces writing of inner @thin trees", "gnx": "ekr.20050123092834.424", "b": "", "children": []}, {"h": "Fixed crasher when attempting to write a external file to an invalid path", "gnx": "ekr.20050123092834.431", "b": "", "children": []}, {"h": "Fixed Python 2.4 deprecation warning when saving .leo files", "gnx": "ekr.20050123092834.434", "b": "The new code uses protocol=1 instead of the deprecated bin argument to Pickler.\n", "children": []}, {"h": "Fixed crasher in getOutputNewline", "gnx": "ekr.20050123092834.499", "b": "In some cases g.app.config.output_newline was None.  The new code sets the default to '', and then assigns a valid default to ''.\n", "children": []}, {"h": "Always use os.rename in utils_rename", "gnx": "ekr.20050123092834.544", "b": "Apparently distutils.file_util is not present in all Python distributions!\n\nNew approaches:\n    - Fall back on code in distutils.file_util if import fails.\n    - Make sure the src and dst volumes are the same (so Linux os.rename will always work)\n    - Simplify replaceTargetFileIfDifferent by creating new routines.\n\nWhat I did:\n    - Rewrote replaceTargetFileIfDifferent in terms of atFile.rename, atFile.remove, etc.\n    - Rewrote update_file_if_changed in terms of g.utils_rename, g.utils_remove, etc.\n", "children": []}, {"h": "Fixed bugs handling @language & @comment in atFile.scanAllDirectives & g.scanDirectives)", "gnx": "ekr.20050123151338", "b": "Changed scanDirectives and atFile.scanDirectives so they work like\ntangle.scanAllDirectives. Also added a few clarifying words in LeoDocs.leo.\n\nThis should have worked, but didn't:\n\n+ Code \n  @language python \n  + @file sql_create.sql \n    @comment -- \n\nSo I rearranged the outline (probably more logical anyway) to  \n+Code \n  + Python \n  ... \n+ SQL \n  ... \n", "children": []}, {"h": "Gui", "gnx": "ekr.20050123103303", "b": "", "children": ["ekr.20050123092834.502"]}, {"h": "Put the scrollWheel workaround in createTkTreeCanvas", "gnx": "ekr.20050123092834.502", "b": "This binds scroll-wheel events to Button-4 and Button-5\n", "children": []}, {"h": "Menus", "gnx": "ekr.20050123100706.2", "b": "", "children": ["ekr.20050123092834.81", "ekr.20050123092834.490"]}, {"h": "Fixed problems with Control-E", "gnx": "ekr.20050123092834.81", "b": "- Restored non Pmw code in resizePanesToRatio. This code got deleted by mistake.\nThe Equal Sized Panes works again.\n\n- Added many do-nothing methods to nullMenu class.\n\nThis should prevent the startup logic from messing with shortcuts in any way.\nIt's also the right thing to do.\n\n- Added an entry for EqualSizedPanes to leoSettings.leo. This overrides the\ndefault (Ctrl-E) and thereby prevents the default from overriding the entry for\nExecuteScript!\n\n- Re-enabled code in createMenuEntries that warns when shortcuts have been\nredefined. Not sure if this is a wise idea, or indeed if it actually does\nanything :-)\n\nI am tempted to remove all the default entries entirely. This would simplify\nerror reporting, but then Leo would hardly work at all if leoSettings.leo were\nnot present.\n", "children": []}, {"h": "Better handling of duplicate menu shortcuts", "gnx": "ekr.20050123092834.490", "b": "The code now clears previous shortcut, and tells what the previous entry was.\n", "children": []}, {"h": "Nodes", "gnx": "ekr.20050123092834.159", "b": "", "children": ["ekr.20050123092834.160", "ekr.20050123092834.163", "ekr.20050123093854.1"]}, {"h": "Fixed crash after cutting an imported node", "gnx": "ekr.20050123092834.160", "b": "p.moveToParent now just returns if p is a null position.\n", "children": []}, {"h": "Removed invalid assert in lastVisible", "gnx": "ekr.20050123092834.163", "b": "# Leo looped after this assert failed.\n", "children": []}, {"h": "Fixed bugs in tnodes_iter and unique_tnodes_iter", "gnx": "ekr.20050123093854.1", "b": "tnodes_iter and unique_tnodes_iter were returning vnodes, not tnodes!\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20050123111723", "b": "", "children": ["ekr.20050123092834.1047", "ekr.20050123092834.1052", "ekr.20050123092834.1057", "ekr.20050123092834.506"]}, {"h": "Fixed two bugs in Plugins Manager plugin", "gnx": "ekr.20050123092834.1047", "b": "- This plugin now handles both kinds of triple-quotes correctly so that both\nkinds of docstrings are recognized.\n", "children": []}, {"h": "Fixed bug re referencing destroyed ivars", "gnx": "ekr.20050123092834.1052", "b": "Created callTagHandler. This checks 'idle' hooks to make sure that any commander\nreferenced by the 'c','new_c' or 'old_c' keywords still exists.\n", "children": []}, {"h": "Fixed bug in registerOneHandler", "gnx": "ekr.20050123092834.1057", "b": "leoPlugins.registerOneHandler wasn't working properly at all. In effect, only\nthe last registered hook was ever being remembered!\n", "children": []}, {"h": "Fixed conflict between settings panel and chapters plugin", "gnx": "ekr.20050123092834.506", "b": "chapters.py requires that the canvas have a name ivar.\n\nAdded treeCanvas.name = '1' in:\n\n<< replace tree pane with settings tree >>\n", "children": []}, {"h": "Pychecker", "gnx": "ekr.20050123092834.526", "b": "Fixed shadow warnings.  The following are all Python global functions:\n\ncmp -> compare\ndict -> theDict\ndir -> theDir\nfile -> theFile\nid -> theId\ntype -> theType\ninput  (suppressed the warning)\niter -> theIter\n", "children": []}, {"h": "Scripting", "gnx": "ekr.20050123092834.438", "b": "", "children": ["ekr.20050123092834.439", "ekr.20050123092834.474", "ekr.20050123092834.480"]}, {"h": "Fixed unbounded recursion with --script and redirected output", "gnx": "ekr.20050123092834.439", "b": "The problem was that nullLog.write calls print, and if print is redirected the\ncode ends up calling nullLog.write again.\n\nWhat I did:\n\n- g.redirectClass.redirect does nothing if g.app.batchMode is True.\n- added g.rawPrint.\n- Changed self.old.write(s) to self.old.write(s+'\\n') throughout.\n", "children": []}, {"h": "Script buttons now execute the entire script", "gnx": "ekr.20050123092834.474", "b": "It makes no sense to use only the selected text.\n", "children": []}, {"h": "Fixed error reporting in executeScript when the error happens outside the script", "gnx": "ekr.20050123092834.480", "b": "The old code assumed that the error is always in the script itself. Not true!\nThe error could happen in methods called by the script.\n\nThis code works with Python 2.3.4 and Python 2.4.  It may be version dependent.\n", "children": []}, {"h": "Startup", "gnx": "ekr.20050123092834.486", "b": "", "children": ["ekr.20050123092834.487", "ekr.20050123092834.1011"]}, {"h": "Non-existent command-line file becomes name of new Leo wiindow", "gnx": "ekr.20050123092834.487", "b": "Leo now sets the name of the frame to the requested file name on the command line even if the file name does not exist.\n", "children": []}, {"h": "computeHomeDir now handles references to other vars", "gnx": "ekr.20050123092834.1011", "b": "computeHomeDir() now test the first retrieval of the %HOME% var and grab it's\nresults if it is in fact another environment variable.\n", "children": []}, {"h": "New or improved features...", "gnx": "ekr.20050123092834.896", "b": "", "children": ["ekr.20050123110009", "ekr.20050123103303.1", "ekr.20050123103521", "ekr.20050123092834.1044", "ekr.20050123103753"]}, {"h": "Code", "gnx": "ekr.20050123103303.1", "b": "", "children": ["ekr.20050123092834.520", "ekr.20050123092834.173", "ekr.20050123092834.901", "ekr.20050123092834.928", "ekr.20050123092834.984", "ekr.20050123092834.1004", "ekr.20050123092834.565"]}, {"h": "Added g.cantImport", "gnx": "ekr.20050123092834.173", "b": "", "children": []}, {"h": "Added g.fileLikeObject.readline", "gnx": "ekr.20050123092834.901", "b": "This supports the fromString option in read commands.\n", "children": []}, {"h": "Added support for g.app.debugSwitch in es_exception", "gnx": "ekr.20050123092834.928", "b": "It's not clear that this support is so useful for debugging scripts.\n\nIf g.app.debugSwitch is True es_exception gives a full traceback.\n", "children": []}, {"h": "Restored drawing/event hooks", "gnx": "ekr.20050123092834.984", "b": "Restored the following hooks:\n\n\"boxclick1\"     before click in +- box            c,p,v,event\n\"boxclick2\"     after  click in +- box            c,p,v,event\n\"drag1\"         before start of drag              c,p,v,event\n\"drag2\"         after  start of drag              c,p,v,event\n\"dragging1\"     before continuing to drag         c,p,v,event\n\"dragging2\"     after  continuing to drag         c,p,v,event\n\"enddrag1\"      before end of drag                c,p,v,event\n\"enddrag2\"      after  end of drag                c,p,v,event\n\nThe following already existed.  I added v=p keyword params:\n\n\"iconclick1\"    before single click in icon box   c,p,v,event\n\"iconclick2\"    after  single click in icon box   c,p,v,event\n\"iconrclick1\"   before right click in icon box    c,p,v,event\n\"iconrclick2\"   after  right click in icon box    c,p,v,event\n\"icondclick1\"   before double click in icon box   c,p,v,event\n\"icondclick2\"   after  double click in icon box   c,p,v,event\n", "children": []}, {"h": "Added p=p param to all hooks containing v=v", "gnx": "ekr.20050123092834.1004", "b": "Changed these hooks:\n\n\"bodyclick1\", \"bodyclick2\",\n\"bodydclick1\", \"bodydclick2\",\n\"bodyrclick1\", \"bodyrclick2\",\n\"bodykey1\", \"bodykey2\",\n\"command1\", \"command2\",\n\"headclick1\", \"headclick2\",\n\"headrclick1\", \"headrclick2\",\n\"headkey1\", \"headkey2\", \n\"hyperclick1\", \"hyperclick2\",\n\"hyperenter1\", \"hyperenter2\",\n\"hyperleave1\", \"hyperleave2\", \n\"openwith1\", \"openwith2\",\n\"menu1\", \"menu2\", \n\"recentfiles1\", \"recentfiles2\",\n\"save1\", \"save2\",\n\"select1\", \"select2\", \"select3\",\n\"start2\",\n\"unselect1\", \"unselect2\",\n\"url1\", \"url2\", \n\n\"clear-mark\", \"set-mark\", \n\"color-optional-markup\",\n\"create-popup-menu\", \n\"draw-outline-icon\",\n\"draw-outline-node\",\n\"draw-outline-text-box\",\n\"draw-sub-outline\", \n\"init-color-markup\",\n\"scan-directives\", \n\"draw-outline-box\",\n\"enable-popup-menu-items\",\n\"show-popup-menu\",\n", "children": []}, {"h": "Implemented delayed focus scheme", "gnx": "ekr.20050123092834.565", "b": "Leo's code now contains an important simplification to Leo's gui code. This\narose because of a problem in the UNL plugin. The window that opened when double\nclicking an @url UNL node wasn't staying on top.\n\nIt turns out that this was essentially impossible to fix with the old code. The\nproximate cause of the original problem button-1 was bound to OnActivateTree,\nwhich called g.app.gui.set_focus after the new window was visible, thereby\nbringing the old tree to the front.\n\nFurther investigation revealed other problems. For example, the idle-time code\nin the status line logic was also messing with the focus. It turns out that\nrepeatedly calling g.app.gui.set_focus is a very bad idea, for lots of reasons\nwhich I won't go into in detail here.\n\nThe old code called g.app.gui.set_focus explicitly whenever it wanted focus to\nchange. But there is a much better way, namely to have routines that _indicate_\nwhere they want the focus to be \"after the dust settles\", that is, when all gui\ncalls have been completed. I call this a \"delayed focus\" scheme.\n\nSo I rewrote all the code that sets the focus. The new code replaces direct\ncalls to g.app.gui.set_focus with calls to the following methods in\nleoTkinterFrame class: bodyWantsFocus, statusLineWantsFocus, treeWantsFocus and\nlogWantsFocus. Actually, these xWantsFocus methods all do the same thing, but\nusing different methods improves traces.\n\nThis is an excellent pattern. Again, rather than setting the focus directly,\nthese xWantsFocus methods merely signal their intension to set the focus. This\nallows very complex logic to be hidden in leoTkinterFrame.set_focus.\n\nleoTkinterFrame.set_focus is indeed complex. It took me several hours this\nmorning to get it just right. It queues up a 'one-shot' callback. That is, at\nmost one copy of the callback is ever waiting to be executed. Furthermore, the\ncallback is only queued for execution at the result of a call to xWantsFocus; it\nis never run automatically at idle time. Finally, even when executed, the\ncallback does nothing if the last requested commander (in the new ivar,\ng.app.wantedFocus) does not match the commander to which the callback was bound.\n\nThese checks allow the UNL plugin to open a window properly and keep it topmost.\n\nThis is a big step forward for Leo, for the following reasons:\n\n- Delayed focus ensures that the body pane always has focus unless the code has\na specific, positive reason for the focus to be elsewhere. This was difficult\n(or rather impossible) to do with the old code: there are _many_ Tk calls that\ncan affect the focus.\n\n- Delayed focus minimizes calls to g.app.gui.set_focus. Unlike the old code,\nmany seconds may elapse between calls. The stress on Tk is much less, and I\nbelieve this may cure some flakiness in how focus changes, especially in\nheadlines.\n\n- There are some cases where focus must change immediately. The xWantsFocus\nmethods all support a 'later' keyword argument. By default it is True, but when\nit is False leoTkinterFrame.set_focus calls g.app.gui.set_focus immediately.\n\n- The xWantsFocus methods all support a 'tag' keyword argument that tells what\nroutine the method is called from. It is a big help in making sense of traces.\nBTW, extensive traces are the _only_ possible way of tracking down\nfocus/selection problems.\n", "children": []}, {"h": "Commands", "gnx": "ekr.20050123103521", "b": "", "children": ["ekr.20050123092834.897", "ekr.20050123092834.908", "ekr.20050123092834.1005", "ekr.20050123105026", "ekr.20050123092834.961", "ekr.20050123092834.1018", "ekr.20050123092834.1043", "ekr.20050123092834.517"]}, {"h": "Added 'Expand Or Go Right' and 'Contract or Go Left' commands", "gnx": "ekr.20050123092834.897", "b": "These commands work as do the similar commands in Windows Explorer. How did we\never live without them?\n", "children": []}, {"h": "Added keyboard shortcuts to find panel", "gnx": "ekr.20050123092834.908", "b": "- Tab toggles between the Search to the Replace areas.\n\n- Control-Tab inserts a tab.\n\n- Added hot keys for all settings.  Use Alt-x to activate hot key x.\n  The Enter key activates the Find button.\n\n- As usual, Alt-F4 dismisses the Find panel.\n", "children": []}, {"h": "Find panels are now associated with individual Leo windows", "gnx": "ekr.20050123092834.1005", "b": "Leo no loner has any global windows!\n\n- Each commander has its own find window.\n    - It's title tells to what commander it applies.\n", "children": []}, {"h": "Find panels are now inited from @settings nodes", "gnx": "ekr.20050123105026", "b": "- Leo now ignores all find settings in .leo files.  Instead, Leo inits find settings from @settings entries.\n\n- Removed all c ivars corresponding to leoFind ivars.\n    - This eliminates the ugliest code in Leo.\n    - Inits all leoFind ivars from @settings in init, a helper of the ctor.\n    - Updates all the leoFind ivars in update_ivars, called just before doing any find.\n\n- Removed the _flag suffix from leoFind ivars.\n    - Another major mess cleaned up.\n\n- Renamed find/change_text to find/change_ctrl to avoid name conflict.\n", "children": []}, {"h": "Improved Go To Line Number and Execute Script commands", "gnx": "ekr.20050123092834.961", "b": "- Go To Line Number command now assumes the presently selected node is a script if there is no ancestor @file node.\n\n- Execute Script command uses this new logic to select the proper node and line in a script if there is an error.\n\nHow did we ever live without these features?\n", "children": []}, {"h": "Improved support for relative path names", "gnx": "ekr.20050123092834.1018", "b": "Actually, support already existed for them in getBaseDirectly!\n\nWhat I did.\n\n- Added a c keyword to getBaseDirectory.\n- Added similar logic to os_path_join.\n\n- Changed some stupid code in g.openWithFileName (called by @url logic):\n    changed: fileName = g.os_path_join(os.getcwd(),fileName)\n    to:      fileName = g.os_path_abspath(fileName)\n\nMAYBE g.os_path_abspath should force '.' to mean c.openDir, but I kinda doubt\nit. This could be asking for trouble.\n\nOTOH, the various flavors of scanAllDirectives already do this.  Hmmmmmm.\n", "children": []}, {"h": "Implemented 'Undo Clear Recent Files'", "gnx": "ekr.20050123092834.1043", "b": "", "children": []}, {"h": "Removed old-style write commands", "gnx": "ekr.20050123092834.517", "b": "Leo can still read such files, but old-style file formats are now deprecated\n", "children": []}, {"h": "Plugins & extensions", "gnx": "ekr.20050123092834.1044", "b": "", "children": ["ekr.20050123115804", "ekr.20050123115804.1", "ekr.20050123112151", "ekr.20050123092834.1013"]}, {"h": "Improved doHandlersForTag", "gnx": "ekr.20050123112151", "b": "- leoPlugins.doHandlersForTag now executes the list of hook handlers for a\nparticular tag (hook name) until one of the handlers returns a non-None result.\ndoHandersForTag no longer tries to \"sort\" handlers, so the order that the\nhandlers are executed is the order in which they were registered.\n\nI finally understand the concerns people have raised several times about hooks\ninterfering with each other. If two handlers try to return a non-None result\nonly one of them will ever execute. doHandlersForTag can't do much about this: a\nbetter solution would require more conceptual framework. Not now...\n", "children": []}, {"h": "Leo now associates modules with hook handlers", "gnx": "ekr.20050123092834.1013", "b": "", "children": []}, {"h": "Syntax Coloring & languages", "gnx": "ekr.20050123103753", "b": "", "children": ["ekr.20050123092834.903", "ekr.20050123092834.929"]}, {"h": "Added support for Ada", "gnx": "ekr.20050123092834.903", "b": "Thanks to Bernhard Mulder for the new code.\n", "children": []}, {"h": "Added support for Forth", "gnx": "ekr.20050123092834.929", "b": "Thanks to David McNab <david@freenet.org.nz> for this work.\n", "children": []}, {"h": "4.4 minibuffer, keys, autocompletion, multiple log panes", "gnx": "ekr.20060206111717.1", "b": "", "children": ["ekr.20051219150602", "ekr.20051028051444", "ekr.20060116174906", "ekr.20060206111508", "ekr.20060215112429", "ekr.20060217071505", "ekr.20060227102028", "ekr.20060328171518", "ekr.20060417092536", "ekr.20060428084553", "ekr.20060511074853"]}, {"h": "4.4 alpha 5", "gnx": "ekr.20051219150602", "b": "Leo 4.4 alpha 5                                             January 6, 2006\n\nThis release completes the last major features of Leo 4.4:\n\n- User-specified key-binding modes.\n- Support for multiple key-bindings for individual minibuffer commands.\n\nThis will be the last alpha version of Leo 4.4. Beta 1 is coming in about a\nweek. You should be able to use this version safely; there are no known serious\nbugs.\n\nTo learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n----------------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname. Support for tab completion.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Support for most commands in the Emacs Cmds menu, including cursor and screen\nmovement, basic character, word and paragraph manipulation, and commands to\nmanipulate buffers, the kill ring, regions and rectangles.\n\n- Per-pane key bindings. You can bind shortcuts to multiple commands depending\non which of Leo's panes presently has focus. For example, you can use arrow keys\nto move nodes in the outline pane, while retaining their defaults in Leo's body\npane.\n\n- User-specified key-binding modes. This feature makes it possible to emulate all\naspects of Emacs and Vim as far as key bindings are concerned.\n\n- @command nodes create minibuffer commands. You can bind key shortcuts to\n@button and @command nodes.\n\n- Leo recovers from crashes much more reliably than in any previous version.\n\n- Leo handles keystrokes and updates the screen immediately rather than waiting\nfor idle time.\n", "children": ["ekr.20051219150602.2", "ekr.20051219150602.100"]}, {"h": "Fixed bugs", "gnx": "ekr.20051219150602.2", "b": "", "children": ["ekr.20051219150602.3", "ekr.20051219150602.7", "ekr.20051219150602.10", "ekr.20051219150602.13", "ekr.20051219150602.28", "ekr.20051219150602.75", "ekr.20051219150602.81", "ekr.20051219150602.85", "ekr.20060105182648.376", "ekr.20060105182648.377", "ekr.20060105182648.378", "ekr.20060105182648.379", "ekr.20060105182648.382"]}, {"h": "Made sure focus doesn't go to log during tab completion or after writes to log", "gnx": "ekr.20051219150602.3", "b": "", "children": []}, {"h": "Fixed problem with getScript in batch mode", "gnx": "ekr.20051219150602.7", "b": "", "children": []}, {"h": "Text box is now selected in goto-line-number command", "gnx": "ekr.20051219150602.10", "b": "http://sourceforge.net/forum/message.php?msg_id=3464874\n", "children": []}, {"h": "Restored headkey  & bodykey hooks", "gnx": "ekr.20051219150602.13", "b": "http://sourceforge.net/forum/message.php?msg_id=3466412\n\nNew in Leo 4.4: Leo calls the 'headkey1' and 'headkey2' hooks only when the user\ncompletes the editing of a headline, and ch is always '\\r', regardless of\nplatform.\n\nhttp://sourceforge.net/forum/message.php?msg_id=3462294\n", "children": []}, {"h": "Fixed ancient bug in read error logic that hung Leo", "gnx": "ekr.20051219150602.28", "b": "http://sourceforge.net/forum/message.php?msg_id=3467558\n\nWhat I did:\n\n- atFile.readError deletes root's entire subtree.\n- atFile.read only warns about unvisited node if there is no error.\n", "children": []}, {"h": "Fixed many headline problems", "gnx": "ekr.20051219150602.75", "b": "http://sourceforge.net/forum/message.php?msg_id=3461068\n\nAnd a recent bug: clicking in the expand/contract box didn't save the headline.\n", "children": []}, {"h": "Fixed problem in reformatParagraph", "gnx": "ekr.20051219150602.81", "b": "The problem was caused by the recent change to g.app.gui.setTextSelection.\n\nThe default for the new 'insert' keyword must be sel.end for compatibility with old code.\n", "children": []}, {"h": "Installed LeoUsers patch", "gnx": "ekr.20051219150602.85", "b": "Read @file Nodes and Import external file commands no longer create copies of the root node.\n", "children": []}, {"h": "Improved Import external files command.", "gnx": "ekr.20060105182648.376", "b": "Leo no longer creates a duplicate root node when importing external files.\n\nThe code is due to LeoUser.\n", "children": []}, {"h": "Fixed crasher in backwardDeleteCharacter", "gnx": "ekr.20060105182648.377", "b": "", "children": []}, {"h": "Fixed recent bug: dialogs now get focus properly when first opened.", "gnx": "ekr.20060105182648.378", "b": "", "children": []}, {"h": "Made sure shortcuts are printed clearly by k.registerCommand", "gnx": "ekr.20060105182648.379", "b": "", "children": []}, {"h": "Suppressed crash undoing a clone followed by a drag", "gnx": "ekr.20060105182648.382", "b": "The reason for this assert is unclear.\n", "children": []}, {"h": "New features", "gnx": "ekr.20051219150602.100", "b": "", "children": ["ekr.20051219150602.101", "ekr.20051219150602.102", "ekr.20051219150602.105", "ekr.20051219151926", "ekr.20060105182648.432", "ekr.20060105182648.469"]}, {"h": "created ut.leo, ut.py and ut.bat", "gnx": "ekr.20051219150602.101", "b": "The provide batch-mode unit testing.\n", "children": []}, {"h": "Added modes/*.xml to distribution", "gnx": "ekr.20051219150602.102", "b": "", "children": []}, {"h": "Revised cursor movement commands and added selection-extension commands", "gnx": "ekr.20051219150602.105", "b": "Leo now supports the following commands, shown below with their present bindings:\n\nback-char ! text = LtArrow\nback-char-extend-selection ! text = Shift-LtArrow\nback-paragraph ! text = Alt-braceleft \nback-paragraph-extend-selection ! text = Alt-Shift-braceleft\nback-sentence ! text = Alt-a \nback-sentence-extend-selection  = None\nback-word ! text = Alt-b  # No conflict   \nback-word-extend-selection  ! text = Alt-Shift-b\nbeginning-of-buffer ! text = Alt-less # Note: same as Alt-Shift-less\nbeginning-of-buffer-extend-selection  = None\nbeginning-of-line ! text = Ctrl-a\nbeginning-of-line-extend-selection = None\nexchange-point-mark = None\nforward-char ! text = RtArrow\nforward-char-extend-selection ! text = Shift-RtArrow\nforward-paragraph ! text = Alt-braceright\nforward-paragraph-extend-selection ! text = Alt-Shift-braceright\nforward-sentence ! text = Alt-e\nforward-sentence-extend-selection ! text = Alt-Shift-e\nforward-word ! text = Alt-f\nforward-word-extend-selection ! text = Alt-Shift-f\nnext-line ! text = DnArrow\nnext-line-extend-selection  ! text = Shift-DnArrow\nprevious-line ! text = Uparrow\nprevious-line-extend-selection ! text = Shift-UpArrow\n\nThe -extend-selection variants move the cursor and also extend the selection\nfrom the insert point in the indicated direction. As usual exchange-point-mark\nswitches the insert point from one side of the selection to the other: which\nside of the selection the insert point is on does make a difference.\n\nI also added three commands that implement so-called 'extend mode':\n\nclear-extend-mode = None\nset-extend-mode = None\ntoggle-extend-mode = None\n\nWhen extend mode is on (it is off at first), all cursor movement commands listed\nabove extend the selection. Very handy. Thanks to Brian for this suggestion.\n\nThis is the start of mouseless Leo. For the first time all the common Emacs\ncursor-movement commands exist. These commands should work in any text widget.\n", "children": []}, {"h": "Added classic key bindings in leoSettings.leo", "gnx": "ekr.20051219151926", "b": "leoSettings.leo now contains a node called:\n\n@@shortcuts traditional Leo bindings\n\nThis node contains the 'classic' Leo key bindings that appeared in Leo 4.3. I\nhave proofed these settings carefully, but some errors may remain. Please report\nany errors or any other suggestions for these settings.\n", "children": []}, {"h": "Allow multiple key bindings to the same command", "gnx": "ekr.20060105182648.432", "b": "", "children": []}, {"h": "Settings command now opens leoSettings.leo", "gnx": "ekr.20060105182648.469", "b": "This is the end of the ill-fated settings dialog.\n\nImportant: you can use the show-colors and show-fonts commands to help set\ncolors and fonts in leoSettings.leo.\n", "children": []}, {"h": "4.4 alpha 4", "gnx": "ekr.20051028051444", "b": "Leo 4.4 alpha 4                                         December 5, 2005\n\nLeo 4.4 a4 introduces the 'Newer World Order' for redrawing the screen,\ncorrects numerous bugs in the 4.4 code base, and introduces several new features.\n\nYou should be able to use this version safely. There are no known serious bugs,\nbut several minibuffer commands are not ready for prime time. All the major\nfeatures of 4.4 are in place.\n\nTo learn about Leo, see: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n----------------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname. Support for tab completion.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Support for almost all commands in the Emacs Cmds menu, including cursor\nand screen movement, basic character, word and paragraph manipulation, and\ncommands to manipulate buffers, the kill ring, regions and rectangles.\n\n- Per-pane key bindings. You can bind shortcuts to multiple commands depending\non which of Leo's panes presently has focus. For example, you can use arrow keys\nto move nodes in the outline pane, while retaining their defaults in Leo's body\npane. Per-pane key bindings are essential for mouseless Leo.\n\n- @command nodes create minibuffer commands. You can bind key shortcuts to\n@button and @command nodes.\n\n- A rewrite of Leo's keystroke handling. In particular, Leo handles key events\nimmediately rather than queuing them for idle time.\n\n- Leo recovers from crashes much more reliably than in any previous version.\n\n- Leo updates the screen immediately rather than waiting for idle time.\nThis 'Newer World Order' simplifies the code and improves performance.\n\nKnown bugs in Leo 4.4a4\n-----------------------\n- Several minibuffer commands do not work.  See the release notes for details.\n\nComing in later releases of Leo 4.4:\n------------------------------------\n- An auto-complete command that shows class members in the Completion tab.\n\n- More support for mouseless Leo. There will be commands to manipulate all\naspects of Leo using commands, so your fingers will never have to leave the\nkeyboard.\n\n- Support for Vim and other 'plain-key' input modes.\n", "children": ["ekr.20051028051444.1", "ekr.20051028051444.2", "ekr.20051205091625", "ekr.20051028051616", "ekr.20051028051616.1", "ekr.20051109112610", "ekr.20051128181229"]}, {"h": "Quick Start", "gnx": "ekr.20051028051444.1", "b": "Here are the default bindings relating to the minibuffer. Any of\nthese may be changed by changing @shortcuts nodes in leoSettings.leo.\n\nAlt-x: Just like Emacs: starts minibuffer. The prompt is 'full-command' Type a\nfull command name, then hit <Return> to execute the command. Tab completion\nworks, but not for file names.\n\nAlt-c: Like Emacs Control-C: (Ctrl-C conflicts with XP cut). starts minibuffer.\nThe prompt is 'quick-command'. This mode is not completed, but stuff like\n`Ctrl-C r` and `Ctrl r r` do work.\n\nAlt-u: Like Emacs Ctrl-u: (Ctrl-u conflicts with move-outline-up). Add a repeat\ncount for later command. Ctrl-u 999 a adds 999 a's, but many features remain\nunfinished.\n\nCtrl-g: Just like Emacs Ctrl-g: Closes the mini-buffer.\n\nThe @bool useMinibuffer setting in leoSettings.leo just controls whether the\nminibuffer is visible. The minibuffer exists (and you can type into it) even if\nit isn't visible! You can use the show-mini-buffer, hide-mini-buffer and\ntoggle-mini-buffer commands to show or hide the minibuffer.\n", "children": []}, {"h": "The 'key' features of 4.4", "gnx": "ekr.20051028051444.2", "b": "The most important new features of Leo 4.4 have to do with key bindings.\n\nSee the children of this node for details.\n\n\n", "children": ["ekr.20051101161405", "ekr.20051101161405.1", "ekr.20051101161405.2", "ekr.20051101161405.3", "ekr.20051101162123"]}, {"h": "Leo's minibuffer works like the Emacs mini-buffer", "gnx": "ekr.20051101161405", "b": "At the bottom of Leo's window you will now see an area labeled the mini-buffer.\nYou can't type in it directly, you activate the buffer by typing Alt-x or Alt-c.\nTyping Alt-x takes you to 'full-command' mode. Type the full name of a command,\nfollowed by a 'return'. \n\n- To get help, type Alt-x help.\n- For a list of commands, type Alt-x print-commands.\n- For a list of present key bindings, type Alt-x print-bindings.\n- To leave the mini-buffer at any time type Ctrl-g.\n\nNote: you can redefine any of these keys as you wish.\n\nImportant: you can execute any of Leo's 'legacy' commands from the mini-buffer.\nFor example, Alt-x about-leo or Alt-x open-find-dialog. Note: Leo's Find\n*dialog* is deprecated. You will find it much more convenient to use Leo's new\nFind *tab*. Use the open-find-tab command.\n\nYou can use tab-completion in the minibuffer to cycle through the list of\ncommands that start with what is in the buffer. Typing backspace takes you back\nto the what you previously typed (less on character.) The 'Completion' tab shows\nall possible completions. This tab appears automatically when you type a tab in\nthe minibuffer.\n\nThe mini-buffer reduces the need for shortcuts dramatically. For example, none\nof Leo's import commands need a shortcut because it is easy enough to execute\nthem from the minibuffer. In particular, executing commands from the minibuffer\nis much easier than executing commands by hand from a menu. \n", "children": []}, {"h": "@shortcuts nodes in leoSettings.leo allow per-pane bindings", "gnx": "ekr.20051101161405.1", "b": "leoSettings.leo contains one functional @shortcuts node and one disabled\n@@shortcuts node. These node contain entries for every command.\n\nYou can assign key shortcuts to any command, as discussed in the comments in\nthat file. You can leave the nodes as they are, use them as base for\nmodifications, or roll your own. You should define a binding for every function,\neven if that binding is 'None'. If you don't, Leo will issue a warning.\n\nLeo now supports per-pane bindings.  Bindings of the form:\n\ncommand-name ! pane = shortcut\n\nbind the shortcut to the command only withing a single pane. The possible values\nfor 'pane' are:\n\npane    affected panes\n----    --------------\nall     body,log,tree\nbody    body\nlog     log\nmini    minibuffer\ntext    body,log\ntree    tree\n", "children": []}, {"h": "The scripting plugin allows key bindings", "gnx": "ekr.20051101161405.2", "b": "The scripting plugin has been improved in two ways:\n\n1. You can specify key bindings in @button nodes as follows:\n\n@button name @key=shortcut\n\nThis binds the shortcut to the script in the script button. The button's name is\n'name', but you can see the full headline in the status line when you move the\nmouse over the button.\n\n2. You can create new minibuffer commands with @command nodes:\n\n@command name @key=shortcut\n\nThis creates a new minibuffer command and binds shortcut to it.\n", "children": []}, {"h": "EKR shortcuts", "gnx": "ekr.20051101161405.3", "b": "Abbreviations may not work at present. A new kind of abbreviation is presently\nhard coded in add_ekr_altx_commands in leoKeys.py. For example, one ekr-shortcut\nis: 'f', which is bound to leo-find-panel. Typing Alt-x f Return executes\nleo-find-panel. These may be quicker than Emacs abbreviations, or not.\n", "children": []}, {"h": "Leo now ignores key bindings in menu tables", "gnx": "ekr.20051101162123", "b": "These 'hard-coded' bindings are no longer needed and interfere with per-pane bindings.\n", "children": []}, {"h": "Status of minibuffer commands", "gnx": "ekr.20051205091625", "b": "- The abbreviation and buffer commands are not ready yet.\n\n- repeat-complex-command does not work.\n\n- Moving the cursor when the 'mark' has been defined does not expand the visibly\nselected text.\n\n- Yanking and killing have not been well tested.\n\n- C-u 5 <return> works but is not undone properly. Also, the kill-line command\ndoes not work as in Emacs.\n\n- Many new commands must be generalized to handle the more complex environment\nLeo offers. For example, search commands must be told whether to limit the\nsearch a single node, or a node or and its descendants, or the entire outline.\nWe need a set-variable command that sets a (Python) variable using an\nemacs-style variable name.\n\n- The notion of the 'point' must be expanded so it indicates a node as well as\ntext location.\n\n- New commands are needed to support 'mouseless-Leo'. The user must be able to\ndrive all dialogs from the keyboard, or to get the same effect without using a\ndialog at all. Examples: dismiss-top-dialog, scroll-outline-up/down. We also\nneed commands to change focus and to manage menus. Examples: focus-in-body,\nfocus-in-tree, etc, activate-edit-menu, etc.\n", "children": []}, {"h": "New in alpha 1...", "gnx": "ekr.20051028051616", "b": "", "children": ["ekr.20051028051444.4", "ekr.20051028051444.8", "ekr.20051028051444.9", "ekr.20051028051444.13"]}, {"h": "New options", "gnx": "ekr.20051028051444.4", "b": "", "children": ["ekr.20051028051444.5", "ekr.20051028051444.6", "ekr.20051028051444.7"]}, {"h": "The @bool useMinibuffer option", "gnx": "ekr.20051028051444.5", "b": "1. The minibuffer exists regardless of this setting, but will not be shown\n   initially if it is False.\n\n2. Hiding the minibuffer does not change any bindings or the operation of Leo in\n   any other way. Therefore, if you do hide the minibuffer initially, and never\n   want to use it, you should not bind shortcuts to any commands that use the\n   minibuffer.\n\n3. You can execute the show-mini-buffer, hide-mini-buffer and toggle-mini-buffer\n   commands (or any other minibuffer command!) if the minibuffer is hidden.\n   Indeed, the following will work even if the minibuffer is hidden.\n\n       <alt-x>show-mini-buffer<return>\n", "children": []}, {"h": "The @bool useCmdMenu option", "gnx": "ekr.20051028051444.6", "b": "This option controls whether Leo creates a Cmds menu.\n\nThis menu is not ready yet, though nothing bad happens if this option is True.\n", "children": []}, {"h": "Options for selected body text", "gnx": "ekr.20051028051444.7", "b": "http://sourceforge.net/forum/message.php?msg_id=3355954\n\n'body_text_selection_background_color'  Default is 'Gray80'\n'body_text_selection_foreground_color'  Default is 'white'\n", "children": []}, {"h": "New mini-buffer commands", "gnx": "ekr.20051028051444.8", "b": "- The contract-and-go-right command moves to the parent node and collapses the\nparent node.\n\n- The goto-first-sibling and goto-last-sibling commands allow rapid movement\nthrough an ouline without collapsing nodes.\n\n- The print-bindings and print-commands show what commands exist and what keys\nare bound to them.\n\n- The help command gives a brief quick start introduction to Leo's Emacs-like\nfeatures.\n", "children": []}, {"h": "New code-level features", "gnx": "ekr.20051028051444.9", "b": "", "children": ["ekr.20051028051444.10", "ekr.20051028051444.11", "ekr.20051028051444.12"]}, {"h": "Dictionaries of keys and commands", "gnx": "ekr.20051028051444.10", "b": "Leo maintains the following dictionaries.  As usual, k refers to c.keyHandler:\n\n- c.keyHandler.registerCommand can be called from scripts to register new alt-x\n  commands. It probably won't work from plugins yet.\n\nNew dictionaries and methods make it easier to customize and extend Leo:\n\n- c.commandsDict describes all commands. Keys are full Emacs command names;\nvalues are functions f.\n\n- k.inverseCommandsDict: keys are f.__name__, values are emacs command names.\n\n- k.leoCallbackDict: keys are leoCallback functions, values are called\nfunctions.\n\n- k.bindingsDict: keys are shortcuts, values are g.bunches with the following\n    members: func, name, warningGiven, fromMenu.\n", "children": []}, {"h": "Functions that return the present key bindings", "gnx": "ekr.20051028051444.11", "b": "The following helper functions make it easy to discover the binding presently in\neffect for a command:\n\n- k.getShortcutForCommandName(self,commandName) returns the shortcut given\n  f.__name__.\n\n- k.getShortcutForCommand(self,f) returns the shortcut for f.\n", "children": []}, {"h": "Added registerCommand helper", "gnx": "ekr.20051028051444.12", "b": "c.k.registerCommand (self,commandName,shortcut,func)\n\nThis function make the func available as a minibuffer command, and optionally\nbinds a shortcut to func. You can wrap any method in a function, so the\nrestriction to functions is not significant.\n\nHere is an example take from an @button node::\n\nk = c.keyHandler\n\ndef f (event):\n    g.es_print('Hello',color='purple')\n\nk.registerCommand('print-hello','Alt-Ctrl-Shift-p',f)\nk.registerCommand('print-hello2',None,f)\n", "children": []}, {"h": "Bugs fixed (in 4.3 code base)", "gnx": "ekr.20051028051444.13", "b": "The following bugs exist in 4.3 final.\n", "children": ["ekr.20051028051444.14", "ekr.20051028051444.15", "ekr.20051028051444.16", "ekr.20051028051444.17", "ekr.20051028051444.18", "ekr.20051028051444.19"]}, {"h": "Leo protects c.endUpdate with a 'finally' clause", "gnx": "ekr.20051028051444.14", "b": "This makes it much harder to hang Leo after taking an exception. Leo 4.4a1 is\n*much* more robust than Leo 4.3 final in this regard.\n", "children": []}, {"h": "Added kludge to solve infamous control-v problems", "gnx": "ekr.20051028051444.15", "b": "Added big kludge to menu.createMenuEntries so that f.OnCut/Copy/PasteFromMenu get called\n**only** when explicitly selected from the menu (rather than from a shortcut).\nThis allows the code in cut/copy/paste-text to be different as needed.\n\nUsers can override the shortcut by assigning shortcuts to cut/copy/paste-text commands.\nThe shortcut will appear in the menu, but does **not** get bound to c.frame.menu.\n\nThis is an essential step in solving the infamous Control-V problem.\nThe code appears to work properly on XP.  Not tested other places.\n\nThis is the last best hope to solve this problem: the code interacts as little as possible with Tk.\n", "children": []}, {"h": "Fixed bug in Leo's read logic", "gnx": "ekr.20051028051444.16", "b": "http://sourceforge.net/forum/message.php?msg_id=3351985\n\nLeo did not read empty tnodes like <t/> properly.\n", "children": []}, {"h": "Fixed bug in goto-last-node.", "gnx": "ekr.20051028051444.17", "b": "", "children": []}, {"h": "Leo now reads @settings trees when opening a .leo file from another outline.", "gnx": "ekr.20051028051444.18", "b": "http://sourceforge.net/forum/message.php?msg_id=3376527\n", "children": []}, {"h": "Improved g.removeExtraLws", "gnx": "ekr.20051028051444.19", "b": "It now computes the minimum leading whitespace of all non-blank lines. The old\ncode computed the leading whitespace of the *first* non-blank line. This would\ngive the wrong results if the first line were indented.\n", "children": []}, {"h": "New in alpha 2", "gnx": "ekr.20051028051616.1", "b": "", "children": ["ekr.20051101162123.1", "ekr.20051028061322", "ekr.20051028051616.299", "ekr.20051101182739", "ekr.20051101161949", "ekr.20051101163145", "ekr.20051101163404"]}, {"h": "The tabbed log", "gnx": "ekr.20051101162123.1", "b": "- The open-find-tab command opens the Find tab.\n\n- The open-spell-tab command opens the Spell-checking tab.\n\nThe Find and Spell *tabs* replace the corresponding legacy *dialogs*. Using tabs\neliminates previous problems with dialogs obscuring Leo's main window.\n\nTwo essential components of the settings dialog now are implemented in the tabbed log:\n\n- The show-colors command creates the 'Colors' tab in the log pane.\n\n- The show-fonts command creates the 'Fonts' tab in the log pane.\n\nThese two tabs allow you to pick color or font names without using the @settings dialog.\n\nImportant: scripts and plugins can easily create new tabs in the Log pane. See\nChapter 7 of the Users Guide for details.\n", "children": ["ekr.20051028051616.172"]}, {"h": "Programming the tabbed log", "gnx": "ekr.20051028051616.172", "b": "@color\n\n# Plugins and scripts can easily create new tabs in the log panel.\n# Important: you can run any of these examples using the 'Run Script' button.\n\n# To create a tab named \"Test\" or make it visible if it already exists:\n\nc.frame.log.selectTab('Test')\n\n# When first created, a tab contains a text widget.\n# To write to this widget, add the tabName argument to g.es:\n\ng.es('Test',color='blue',tabName='Test')\n\n# Plugins and scripts can easily replace the default Text widget with other Tk widgets.\n# c.frame.log.tabFrame contains the Tk.Frame that contains all the other widgets of the frame.\n# c.frame.log.logCtrl contains the Tk.Text widget that is initially the only widget in this frame.\n# So to remove this text widget just do:\n\nc.frame.log.logCtrl.pack_forget()\n\n# Now you can pack any other widgets into c.frame.log.tabFrame.\n\nimport Tkinter as Tk ; log = c.frame.log\nlog.selectTab('Test')\nlog.logCtrl.pack_forget()\nf = Tk.Frame(log.tabFrame,bg='red',height='1inch',width='2inch')\nf.pack(side='left',expand=0,fill='none')\n", "children": []}, {"h": "New minibuffer commands", "gnx": "ekr.20051028061322", "b": "**Important**: The print-bindings and print-commands commands (new in a1) show\nwhat commands exist and what keys are bound to them.\n\n- The help command tells how to use the minibuffer.\n\n- The show-minibuffer, hide-minibuffer and toggle-mini-buffer commands show and hide the minibuffer.\n\nIt *is* possible to execute these command even if the minibuffer isn't presently\nvisible. For example, typing \n\n<alt-x>toggle-mini-buffer<return>\n\nshould always work.\n\n- The open-find-tab command opens the Find tab. The Find tab replaces the old\nFind panel. The Find panel is deprecated.\n\n- The open-spell-tab command opens the Spell-checking tab.\n\n- The show-colors command creates the 'Colors' tab in the log pane. This tab allows you to\nexperiment with picking fonts.\n\n- The show-fonts command creates the 'Fonts' tab in the log pane. This tab allows you to\nexperiment with picking colors.\n", "children": []}, {"h": "Optional generation of closing brackets", "gnx": "ekr.20051028051616.299", "b": "Leo can optionally generate matching brackets depending on the setting:\n\n@bool autocomplete-brackets = TrueOrFalse\n\nIf True, Leo will immediately type the corresponding closing bracket whenever\nyou type a '(', '[' or '{' character. You can use the forward-char command to\nmove past the closing bracket, and Leo will move past any closing bracket if you\ntype the closing bracket with the cursor just to the left of a closing bracket.\n", "children": []}, {"h": "New settings in leoSettings.leo", "gnx": "ekr.20051101182739", "b": "- The node::\n\n    @shortcuts traditional Leo shortcuts with important emacs bindings\n\ncontains Leo key bindings.\n\n- The spelling settings in leoSettings.leo replace the settings in spellpyx.ini.\n\n- You can specify the background of tabs using the following pattern::\n\n    @color log_pane_XXX_tab_background_color = aColor\n\nFor example::\n\n    @color log_pane_Find_tab_background_color = #d6c7d3\n\n- The @bool autocomplete-brackets setting controls whether Leo types a matching\nclosing bracket immediately when you type '(', '[' or '{'.\n", "children": []}, {"h": "Improved and retired plugins", "gnx": "ekr.20051101161949", "b": "", "children": ["ekr.20051028051616.160", "ekr.20051101162947"]}, {"h": "Improved the scripting plugin", "gnx": "ekr.20051028051616.160", "b": "@nocolor\n\nThe scripting plugin has been improved as follows:\n\n1. You can bind shortcuts in @button nodes.  Like this:\n\n@button name @key=shortcut\n\nThis binds the shortcut to the script in the script button. The button's name is\n'name', but you can see the full headline in the status line when you move the\nmouse over the button. This is a clean and simple way of discovering the\nshortcut.\n\n2. You can create your own minibuffer commands with @command nodes.\n\nA node whose headline has the form:\n\n@command command-name\n\na new minibuffer command whose name is 'command-name'.\n\nA node whose headline has the form:\n\n@command command-name @key=shortcut\n\ncreates new minibuffer command and binds shortcut to it.\n\n3. The scripting plugin no longer contains the 'bindLate' code-level option. The\nscripts for all @button or @command nodes are computed 'dynamically', that is,\nwhen the button is pushed or the command is executed from the minibuffer. This\nis the most useful way, and the most intuitive.\n\nPreviously, scripts for @button nodes were never dynamic, while scripts in\n@button nodes created by the 'Script button' button were dynamic only if\nbindLate was True. You could call this a bug: it was unhelpful, annoying and\nconfusing.\n\n4. The scripting plugin no longer prints an 'end of script' message. This allows\nscripts to select tabs in the log pane\n", "children": []}, {"h": "Retired the TabbedLog plugin", "gnx": "ekr.20051101162947", "b": "Leo's core now supports tabs in the log pane.\n", "children": []}, {"h": "Many code-level improvements", "gnx": "ekr.20051101163145", "b": "Leo 4.4a2 contains a large number of code-level improvements--some very\nsignificant. For full details, see the (Projects) section of LeoPy.leo.\n", "children": []}, {"h": "Fixed minor bugs", "gnx": "ekr.20051101163404", "b": "The following bugs existed in the 4.4a1 code base and have now been fixed:\n\n- Removed warnings from compare dialog.\n", "children": []}, {"h": "New in alpha 3", "gnx": "ekr.20051109112610", "b": "", "children": ["ekr.20051109112826", "ekr.20051109141223", "ekr.20051109141524", "ekr.20051109141524.1"]}, {"h": "The New and Newer World Orders", "gnx": "ekr.20051109112826", "b": "@nocolor\n\nThe New World Order means that drawing happens immediately, not at idle time.\n\nThe Newer World Order means that c.endUpdate is equivalent to c.redraw_now.\n", "children": []}, {"h": "Bugs fixed...", "gnx": "ekr.20051109141223", "b": "", "children": ["ekr.20051109112826.217", "ekr.20051109112826.227", "ekr.20051109112826.257", "ekr.20051109112826.315", "ekr.20051109112826.265"]}, {"h": "Fix crasher in Open logic", "gnx": "ekr.20051109112826.217", "b": "http://sourceforge.net/forum/message.php?msg_id=3411030\n\nThe fix was to add guards so the code does not assume w._name exists for all widgets w.\n", "children": []}, {"h": "(Undo ends editing", "gnx": "ekr.20051109112826.227", "b": "", "children": []}, {"h": "Disabled minibuffer when not in use", "gnx": "ekr.20051109112826.257", "b": "For now, I just set c.useTextMinibuffer = False,\nso Leo uses a Tk.Label rather than a Tk.Text widget.\n\nThis will cause less confusion than always having the minibuffer enabled.\n", "children": []}, {"h": "Fixed bug in Find Backward", "gnx": "ekr.20051109112826.315", "b": "http://sourceforge.net/forum/message.php?msg_id=3418304\n\nFixed an edge effect when backward searching for a match that occurs at the very\nend of body text. In the process I removed an ancient hack.\n", "children": []}, {"h": "Improved Spell tab", "gnx": "ekr.20051109112826.265", "b": "http://sourceforge.net/forum/message.php?msg_id=3415021\n\nThe code now uses the settings in leoSettings.leo.\n", "children": []}, {"h": "New features", "gnx": "ekr.20051109141524", "b": "", "children": ["ekr.20051109112826.222", "ekr.20051109112826.254", "ekr.20051109112826.310"]}, {"h": "Created scripts.leo and unitTest.leo", "gnx": "ekr.20051109112826.222", "b": "Scripts.leo contains general-purpose scripts.\n\nunitTest.leo contains all of Leo's unit tests.\n\ntest.leo is now for recent tests.  Its small size speeds up my workflow.\n", "children": []}, {"h": "c.executeMinibufferCommand executes a minibuffer command by name", "gnx": "ekr.20051109112826.254", "b": "http://sourceforge.net/forum/message.php?msg_id=3412644\n\nYou can invoke minibuffer commands by name.  For example:\n\nc.executeMinibufferCommand('open-outline')\n\nNote: c.keyHandler.funcReturn contains the value returned from the command. In\nmany cases, as above, this value is simply 'break'.\n", "children": []}, {"h": "Improved perl entries in language dicts", "gnx": "ekr.20051109112826.310", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3414639\n\nThe entries for Perl and Perlpod are now as follows:\n\n@color\n\nself.language_extension_dict = {\n    \"perl\" : \"pl\",\n    \"perlpod\" : \"pod\",\n}\n\nself.extension_dict = {\n    \"pl\"    : \"perl\",\n    \"pod\"   : \"perlpod\",\n}\n", "children": []}, {"h": "Code-level changes", "gnx": "ekr.20051109141524.1", "b": "", "children": ["ekr.20051109112826.223", "ekr.20051109112826.224", "ekr.20051109142920"]}, {"h": "Changed  edit_text to edit_widget everywhere", "gnx": "ekr.20051109112826.223", "b": "Changed the following plugins:\n\ncleo.py, footprints.py,__wx_gui.py, zodb.py\n", "children": []}, {"h": "Removed tree ivars", "gnx": "ekr.20051109112826.224", "b": "Removed tree.redrawScheduled, tree.updateCount and tree.disableRedraw\n\nThree major complications are gone.\n", "children": []}, {"h": "Removed frame.begin/endUpdate", "gnx": "ekr.20051109142920", "b": "This code should never have existed.  It was used only in the macro plugin.\n", "children": []}, {"h": "New in alpha 4", "gnx": "ekr.20051128181229", "b": "", "children": ["ekr.20051128181351", "ekr.20051128181651", "ekr.20051128181651.1"]}, {"h": "Bugs fixed", "gnx": "ekr.20051128181351", "b": "", "children": ["ekr.20051128181302.148", "ekr.20051128181302.183", "ekr.20051128181302.192", "ekr.20051128181302.193", "ekr.20051128181302.231", "ekr.20051128181302.244", "ekr.20051205090923.13", "ekr.20051205090923.16", "ekr.20051205090923.22", "ekr.20051128181302.204"]}, {"h": "Changed scripting plugin so files opened with buttons stay in front", "gnx": "ekr.20051128181302.148", "b": "The plugin can not call bodyWantsFocus.\n", "children": []}, {"h": "Fixed undo/redo bugs", "gnx": "ekr.20051128181302.183", "b": "http://sourceforge.net/forum/message.php?msg_id=3434727\n\n- Added calls to c.frame.body.onBodyChanged in cut/paste handlers.\n\n- Added call to c.selectPosition(c.currentPosition()) in undo/redo.\n    This is essential because previous calls to c.selectPosition may have had redraw_flag = False.\n", "children": []}, {"h": "Fixed focus problem with tab completion", "gnx": "ekr.20051128181302.192", "b": "", "children": []}, {"h": "Fixed minor Save bug", "gnx": "ekr.20051128181302.193", "b": "http://sourceforge.net/forum/message.php?msg_id=3425967\n\nWhen creating a new Leo outline (no leo file created yet), the Save As command\ncreated the file Test4.leo instead of the expected Test4.3.leo\n", "children": []}, {"h": "Fixed long-standing problem with Plugins Manager plugin", "gnx": "ekr.20051128181302.231", "b": "http://sourceforge.net/forum/message.php?msg_id=3442064\n\nThis was not, in fact, a problem with the plugins manager plugin.\n\nThe bug was in << put up a dialog requiring a valid id >> in app.setLeoID.\nThe code set g.app.gui to None after calling g.app.gui.runAskLeoIDDialog the code set!\n\nWhile I was at it, Leo's core now always inits Pmw when creating Tk.Tk. This\nremoves the necessity for Plugins to do this.\n", "children": []}, {"h": "Fixed 2 outline editing bugs", "gnx": "ekr.20051128181302.244", "b": "1: Outline not marked dirty during editing\n\nhttps://sourceforge.net/forum/message.php?msg_id=3447570\n\n2: Inserting a headline didn't save previous edits of headlines\n", "children": []}, {"h": "Fixed crasher in deleteNextChar", "gnx": "ekr.20051205090923.13", "b": "", "children": []}, {"h": "Fixed new headline bug", "gnx": "ekr.20051205090923.16", "b": "http://sourceforge.net/forum/message.php?msg_id=3450435\n", "children": []}, {"h": "Fix problems applying settings", "gnx": "ekr.20051205090923.22", "b": "http://sourceforge.net/forum/message.php?msg_id=3389810\n", "children": []}, {"h": "Fixed several bugs in rst3 plugin", "gnx": "ekr.20051128181302.204", "b": "http://sourceforge.net/forum/message.php?msg_id=3427809\n\nAllowed relative path to stylesheets.\n\nhttp://sourceforge.net/forum/message.php?msg_id=3433717\n\nThe rst3 plugin now traverses the tree as was done previously in the @button rst3 nodes.\n\nhttp://sourceforge.net/forum/message.php?msg_id=3456419\n\nThe rst3 plugin now looks up and down the tree for settings doc parts.\n\nThe rst3 plugin now supports the default_path option.\n", "children": []}, {"h": "Code changes", "gnx": "ekr.20051128181651", "b": "Leo 4.4a4 completes the transition to the 'Newer World Order'.\n", "children": ["ekr.20051128181302.149", "ekr.20051128181302.196", "ekr.20051128181302.208"]}, {"h": "Removed later arg from c.frame.xWantsFocus", "gnx": "ekr.20051128181302.149", "b": "Later may never come in the Newer World Order, so everything must happen immediately.\n", "children": []}, {"h": "Created enableTclTraces", "gnx": "ekr.20051128181302.196", "b": "", "children": []}, {"h": "Eliminated w.update in g.app.gui.set_focus", "gnx": "ekr.20051128181302.208", "b": "@nocolor\n\n- The focusIn/Out trace is a great tool.\n\n- doTabCompletion now calls w.update before calling bodyWantsFocus.\n\n- Eliminated w.update from g.app.gui.set_focus.  It is now called only in\nthose places where it is truly essential, such as in k.doTabCompletion and\nwherever else it might be required.\n\n- Pmw.Notebook does a *lot* when it switches panes (e.g., the _layout method)\nand potentially any of the things it does could result in focus shifting to\nwidget. Rather than trying to make sense of it all, Leo will simply call\nw.update as necessary to force completion of the Pmw.Notebook work before trying\nto set focus.\n", "children": []}, {"h": "New & improved features and files", "gnx": "ekr.20051128181651.1", "b": "", "children": ["ekr.20051128181302.147", "ekr.20051128181302.150", "ekr.20051128181302.151", "ekr.20051128181302.156", "ekr.20051128181302.171", "ekr.20051128181302.211", "ekr.20051128181302.213", "ekr.20051128181302.214", "ekr.20051128181302.229"]}, {"h": "Moved all scripts into scripts.leo", "gnx": "ekr.20051128181302.147", "b": "", "children": []}, {"h": "Improved how the New Tab and Rename Tab commands work in the log pane", "gnx": "ekr.20051128181302.150", "b": "This ensures that the widget is always visible.\n", "children": []}, {"h": "Improved the appearance of the Spell tab", "gnx": "ekr.20051128181302.151", "b": "", "children": []}, {"h": "Added Clone-find checkbox to the Find tab", "gnx": "ekr.20051128181302.156", "b": "http://sourceforge.net/forum/message.php?msg_id=3425070\n\nThis code was contributed by Roger Erens.\n\nWhen the Clone Find All checkbox is checked, the Find All command creates a new\nroot node called Found: <your search pattern>\n\nThis node contains clones of the nodes found by the Find All command. It is your\nown responsibility to navigate to this new node and to clean it up when it's no\nlonger needed.\n", "children": []}, {"h": "Improved find tab", "gnx": "ekr.20051128181302.171", "b": "The tab now scrolls properly.\n", "children": []}, {"h": "Improved formatting of shortcuts in print-commands and print-bindings", "gnx": "ekr.20051128181302.211", "b": "", "children": []}, {"h": "Added settings for vim plugin", "gnx": "ekr.20051128181302.213", "b": "http://sourceforge.net/forum/message.php?msg_id=3440420\n\nAdded @string vim_cmd and @string vim_exe settings. The defaults now correspond\nto default installations of vim.\n", "children": []}, {"h": "Put up a dialog if can't import Pmw", "gnx": "ekr.20051128181302.214", "b": "http://sourceforge.net/forum/message.php?msg_id=3436726\n\nThe dialog warns about the extensions folder not containing Pmw. This can happen\nwhen getting files from cvs.\n", "children": []}, {"h": "Bound <Return> to end-edit-headline", "gnx": "ekr.20051128181302.229", "b": "http://sourceforge.net/forum/message.php?msg_id=3437089\n\nThe new default binding causes focus to move to the body pane when the user hits\n<Return> to end editing in a headline.\n", "children": []}, {"h": "4.4 beta 1", "gnx": "ekr.20060116174906", "b": "Leo 4.4 beta 1                                             January 17, 2006\n\nThe code is stable; there are no known serious bugs. Some features are\nincomplete.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060116174906.2", "ekr.20060116174906.195", "ekr.20060116174906.258", "ekr.20060116174906.257"]}, {"h": "Bugs fixed", "gnx": "ekr.20060116174906.2", "b": "", "children": ["ekr.20060116174906.3", "ekr.20060116174906.63", "ekr.20060116174906.86", "ekr.20060116174906.87", "ekr.20060116174906.88", "ekr.20060116174906.90", "ekr.20060116174906.97", "ekr.20060116174906.100", "ekr.20060116174906.103", "ekr.20060116174906.104", "ekr.20060116174906.113", "ekr.20060116174906.118", "ekr.20060116174906.122", "ekr.20060116174906.125", "ekr.20060116174906.130", "ekr.20060116174906.160", "ekr.20060116174906.163", "ekr.20060116174906.164", "ekr.20060116174906.185", "ekr.20060116174906.187", "ekr.20060116174906.194"]}, {"h": "Fixed minor headline problems", "gnx": "ekr.20060116174906.3", "b": "A 'backward' delete at the start of a headline deletes the first character.\ndelete-char did not work in headlines.\n", "children": []}, {"h": "Fixed undo problems", "gnx": "ekr.20060116174906.63", "b": "http://sourceforge.net/forum/message.php?msg_id=3465251\n", "children": []}, {"h": "Improved word-export plugin", "gnx": "ekr.20060116174906.86", "b": "http://sourceforge.net/forum/message.php?msg_id=3495741\n\nThe plugin now uses sys.getdefaultencoding() to set the encoding.\n", "children": []}, {"h": "Removed a bad use of g.app.log in the find panel", "gnx": "ekr.20060116174906.87", "b": "This could have been the source of weird find behavior.\n", "children": []}, {"h": "Fix crash: tab in minibuffer", "gnx": "ekr.20060116174906.88", "b": "The fix was to have x.getSelectedText return '' instead of None.\n", "children": []}, {"h": "Installed patch for headline width", "gnx": "ekr.20060116174906.90", "b": "http://sourceforge.net/forum/message.php?msg_id=3510983\n", "children": []}, {"h": "Redraw screen properly after Move To Next Dirty", "gnx": "ekr.20060116174906.97", "b": "", "children": []}, {"h": "Fixed focus bug", "gnx": "ekr.20060116174906.100", "b": "https://sourceforge.net/forum/message.php?msg_id=3514627\n\nc.endUpdate now restores the previous focus by default.\n", "children": []}, {"h": "Made sure to bring proper window on top in settings.leo button", "gnx": "ekr.20060116174906.103", "b": "", "children": []}, {"h": "Arrow keys now clear the text selection", "gnx": "ekr.20060116174906.104", "b": "http://sourceforge.net/forum/message.php?msg_id=3514755\n", "children": []}, {"h": "Fixed several minor bugs", "gnx": "ekr.20060116174906.113", "b": "http://sourceforge.net/forum/message.php?msg_id=3515341\n", "children": []}, {"h": "Fixed problems with plugins", "gnx": "ekr.20060116174906.118", "b": "http://sourceforge.net/forum/message.php?msg_id=3509141\n\nProblems with cleo.  Installed patch: http://sourceforge.net/forum/message.php?msg_id=3517080\n\nhttps://sourceforge.net/forum/message.php?msg_id=3515025\n\nProblems with fastgotonode and and groupOperations.\n", "children": []}, {"h": "Fixed old file handling bug", "gnx": "ekr.20060116174906.122", "b": "http://sourceforge.net/forum/message.php?msg_id=3518722\n\nTo generate HTML file I entered the outline header \"@file bbb.xml\" under which\nI put the following body text:\n\n//////////////// beginning of excerpt\n@first <?xml version=\"1.0\" encoding=\"windows-1250\" ?>\n@language html\n@\ncomment line\n@c\n@others\n//////////////// end of excerpt\n\nThis works OK.\nBut, if I put a space after the sole @ above \"comment line\",  save and close\nthe .leo file and then open it, Leo protests in log pane on the right:\n\n//////////////// beginning of excerpt\n----- error reading @file: bbb.xml\nMissing open block comment\n//////////////// end of excerpt\n", "children": []}, {"h": "Use shutil.move in g.utils_rename", "gnx": "ekr.20060116174906.125", "b": "This corrects a problem that shows up as 'Invalid cross-device link' messages on Linux.\n\nhttp://sourceforge.net/forum/message.php?msg_id=3519803\n", "children": []}, {"h": "Simplified k.copyBindingsToWidget and eliminated k.onTextWidgetKey", "gnx": "ekr.20060116174906.130", "b": "These should be considered bug fixes.\n\n- copyBindingsToWidget now binds keys in priority order. This also simplifies\nand clarifies the code.\n\n- Removed k.onTextWidgetKey.  Added a callback that invokes k.masterCommand.\n", "children": []}, {"h": "Made sure that focus stays in body during tab completion", "gnx": "ekr.20060116174906.160", "b": "Hitting Backspace immediately put the focus in the log. Another backspace put\nthe focus in the body pane.\n\nThe problem was in log.clearTab.  It must do call t.update().\n", "children": []}, {"h": "Leo now puts focus in body pane after deleting a window", "gnx": "ekr.20060116174906.163", "b": "", "children": []}, {"h": "Fixed many binding problems", "gnx": "ekr.20060116174906.164", "b": "", "children": []}, {"h": "Fixed extend-selection problems", "gnx": "ekr.20060116174906.185", "b": "extensionHelper resets movePoint any time there is no selection.\n", "children": []}, {"h": "Fixed per-pane bindings!", "gnx": "ekr.20060116174906.187", "b": "", "children": []}, {"h": "Always redraw the screen after editing a label", "gnx": "ekr.20060116174906.194", "b": "The fix was to call endUpdate() rather than endUpdate(changed) in onHeadChanged.\n", "children": []}, {"h": "Code level changes", "gnx": "ekr.20060116174906.195", "b": "", "children": ["ekr.20060116174906.198", "ekr.20060116174906.199", "ekr.20060116174906.213", "ekr.20060116174906.255"]}, {"h": "Removed g.top from Leo's core and all plugins", "gnx": "ekr.20060116174906.198", "b": "g.top and the associated g.app.log logic is inherently unreliable.\n", "children": []}, {"h": "Created c.exists ivar and related logic", "gnx": "ekr.20060116174906.199", "b": "This allows code to determine in a standard way whether a window is in the process of being destroyed.\n", "children": []}, {"h": "Call c.setLog in all entries into code", "gnx": "ekr.20060116174906.213", "b": "This includes k.masterCommand and all event handlers.\n", "children": []}, {"h": "Generalized doCommand", "gnx": "ekr.20060116174906.255", "b": "Leo now calls doCommand on all commands, so the 'command' hooks and error\nprocessing always get done.\n", "children": []}, {"h": "New features", "gnx": "ekr.20060116174906.258", "b": "", "children": ["ekr.20060116174906.259", "ekr.20060116174906.262", "ekr.20060116174906.263", "ekr.20060116174906.267", "ekr.20060116174906.272", "ekr.20060116174906.296", "ekr.20060116174906.306"]}, {"h": "Installed many standard bindings to leoSettings.leo", "gnx": "ekr.20060116174906.259", "b": "@nocolor\n", "children": []}, {"h": "Added Check Bindings script in leoSettings.leo", "gnx": "ekr.20060116174906.262", "b": "", "children": []}, {"h": "Scripts now maintain original focus", "gnx": "ekr.20060116174906.263", "b": "http://sourceforge.net/forum/message.php?msg_id=3518792\n\nEKR: The change in focus happened in c.endEditing in at.writeFromString.\n\nI added a new restoreFocus keyword arg to c.endEditing.\n", "children": []}, {"h": "Added scroll-up/down-extend-selection commands", "gnx": "ekr.20060116174906.267", "b": "", "children": []}, {"h": "Improved cursor move/extend commands", "gnx": "ekr.20060116174906.272", "b": "http://sourceforge.net/forum/message.php?msg_id=3515616\n\nCould we have a visible-line-up and visible-line-down command? (I.e. to move\nthe cursor up or down by a visible rather than a logical line).  With these\ncommands, the arrows plugin could be permanently retired!\n\nWhat I did:\n\n- next-line and prev-line now work as requested.  This obsoletes the arrow plugin.\n    - Removed the redundant tree.OnUpKey and tree.OnDownKey\n    - Retired the arrows plugin.\n\n- Created the extendHelper method.\n    This creates and maintains the moveSpot, moveCol an moveSpotNode ivars,\n    and is responsible for extending the selection range.\n", "children": []}, {"h": "Added support for @mode nodes", "gnx": "ekr.20060116174906.296", "b": "Still to do:\n\nSpecify what mode to enter after each command:\n\n- command-name -> mode-name = binding\n\nwill specify what mode to enter after each command.\nAt present, all commands exit to the top-level mode.\n\n- Add @string active-keyset setting?\n", "children": []}, {"h": "keyboard-quit restores default input mode", "gnx": "ekr.20060116174906.306", "b": "", "children": []}, {"h": "Added discusion to FAQ about when deleting a node is 'dangerous'", "gnx": "ekr.20060116174906.257", "b": "", "children": ["ekr.20060111192108"]}, {"h": "4.4 beta 2", "gnx": "ekr.20060206111508", "b": "Leo 4.4 beta 2                                              February 14, 2006\n\nThis version fixes dozens of bugs, improves performance and polishes the user\ninterface. The code is stable; there are no known serious bugs.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4b2:\n----------------------------\n- Much better 'fit and finishes'.\n- New commands that support mouseless Leo.\n- Minibuffer search commands provide all features of Leo's legacy search commands.\n- User modes are fully functional and you can create special bindings for the minibuffer.\n- New master key and click handlers and improved allocation of screen widgets.\n\nComing in Leo 4.4b3:\n--------------------\n- A revived chapters plugin.\n- Autocompleter Tab.\n- Improved incremental searches.\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060206111508.2", "ekr.20060206111508.547", "ekr.20060206112001", "ekr.20060214090742", "ekr.20060214083808", "ekr.20060214083647", "ekr.20060214092741"]}, {"h": "Bugs fixed", "gnx": "ekr.20060206111508.2", "b": "", "children": ["ekr.20060206111508.3", "ekr.20060206111508.4", "ekr.20060206111508.48", "ekr.20060206111508.49", "ekr.20060206111508.54", "ekr.20060206111508.58", "ekr.20060206111508.63", "ekr.20060206111508.74", "ekr.20060206111508.75", "ekr.20060206111508.553", "ekr.20060206111508.97", "ekr.20060206111508.103", "ekr.20060206111508.136", "ekr.20060211104746.2", "ekr.20060214085054", "ekr.20060211104746.162", "ekr.20060211104746.177", "ekr.20060211104746.208", "ekr.20060214074035.9", "ekr.20060214074035.20", "ekr.20060214074035.41", "ekr.20060214074035.101"]}, {"h": "Fixed crasher in Save button", "gnx": "ekr.20060206111508.3", "b": "@nocolor\n\nMust check for c.exists in c.executeScript after executing the script.\n", "children": []}, {"h": "Fixed minor bugs & made minor improvements", "gnx": "ekr.20060206111508.4", "b": "@nocolor\n\n- keyboard-quit now ends editing.\n\n- print-bindings shows plain keys only in 'ignore' mode.\n\n- Removed k.add_ekr_altx_commands and k.makeHardBindings.\n\n- Added binding to vim plain shortcuts: mode-help = h\n\n- Print the initial mode when first creating a window.\n  The change had to be made in g.openWithFileName because of the UNL plugin.\n\n- Improved print-bindings & mode help.\n\n- endMode retains the widget on entry, so e.g., inserting a new node retaining the headline editing state.\n\n@color\n", "children": ["ekr.20060206111508.5", "ekr.20060206111508.14", "ekr.20060206111508.40"]}, {"h": "Fixed two annoying headline glitches", "gnx": "ekr.20060206111508.5", "b": "@nocolor\n\n- Added initialClickExpandsOrContractsNode settings.  Clicking an node expands or contracts the node if this setting is True.  EKR much prefers False. \n\n- Selecting a headline should not select text in it.\n\n@color\n", "children": []}, {"h": "Insert headline didn't redraw headline properly in vim mode", "gnx": "ekr.20060206111508.14", "b": "@nocolor\n\nWhat I did:\n\n- endMode must not change focus.\n\n- modeHelp calls c.endEditing(retainFocus=True)\n\n@color\n", "children": []}, {"h": "Improved printBindings, printCommands & modeHelp", "gnx": "ekr.20060206111508.40", "b": "", "children": []}, {"h": "Fixed crasher re BackSpace in log window", "gnx": "ekr.20060206111508.48", "b": "\n", "children": []}, {"h": "Fixed crashers in cut/copy/paste commands", "gnx": "ekr.20060206111508.49", "b": "Traceback (most recent call last):\n\n  File \"c:\\prog\\leoCVS\\leo\\src\\leoCommands.py\", line 250, in doCommand\n    val = command() # Call legacy command\n\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoTkinterFrame.py\", line 1777, in cutText\n    oldText = w.get('1.0','end')\n\nAttributeError: Canvas instance has no attribute 'get'\n", "children": []}, {"h": "Fixed crasher when clicking the close box during a long command", "gnx": "ekr.20060206111508.54", "b": "", "children": []}, {"h": "cloneFindAll now honor present find settings", "gnx": "ekr.20060206111508.58", "b": "", "children": []}, {"h": "Double-click didn't work in the body pane.", "gnx": "ekr.20060206111508.63", "b": "", "children": []}, {"h": "Improved body.makeInsertPointVisible", "gnx": "ekr.20060206111508.74", "b": "Call w.see('insert'), not w.see('insert-5L')\n", "children": []}, {"h": "Fixed cut/copy/paste from menu", "gnx": "ekr.20060206111508.75", "b": "", "children": []}, {"h": "Fixed major blunder: tree.onHeadChanged sets focus only if there was a real change", "gnx": "ekr.20060206111508.553", "b": "", "children": []}, {"h": "Disabled plain-key bindings in insert/overwrite modes", "gnx": "ekr.20060206111508.97", "b": "", "children": []}, {"h": "Disabled auto-scrolling in outline pane on clicks", "gnx": "ekr.20060206111508.103", "b": "The outline jumps around too much when expanding/contracting nodes\n", "children": []}, {"h": "move-outline and find commands force a screen scroll", "gnx": "ekr.20060206111508.136", "b": "# This is required now that scrolling is disabled by default.\n", "children": []}, {"h": "Fixed undo problem in headlines", "gnx": "ekr.20060211104746.2", "b": "In the new drawing scheme, tree.redraw_now always calls c.endEditing, which\ncalls tree.onHeadChanged. The effect of this was to reverse the action of\nundo/redoNodeContents.\n\nThe solution was to change the edit widget directly before calling\ntree.redraw_now. To do this, I created the new tree.setHeadline method.\n", "children": []}, {"h": "Found the cause of 'sticking focus' problem", "gnx": "ekr.20060214085054", "b": "The problem with focus 'sticking' in the Pmw.Notebook was due to a call to\nbringToFront. Apparently, the side effect was to assign a focus to the widget\nthat had it previously. This makes sense, and can not be considered a Tk bug.\n\nRemove almost all calls to w.update in Leo.\n\nNo more calls to w.after that were used to draw the status line. The master key\nand click handlers now call the label update method directly. This may ease a\nmajor stress on Tk.\n", "children": []}, {"h": "Fixed tree icon bug", "gnx": "ekr.20060211104746.162", "b": "Backspace in empty body text sometimes moved focus to canvas, and sometimes\nimproperly drew icon.\n\nMade several fixes to onBodyChanged. There was no test for unchanged text! This\ncould have created all sorts of problems for undo.\n", "children": []}, {"h": "Set remembered column properly in prev-line and next-line", "gnx": "ekr.20060211104746.177", "b": "http://sourceforge.net/forum/message.php?msg_id=3549737\n\nfor extend selection,\nwith binding to arrow keys,\nif you switch from up to down arrow,\nthe selection restarts again.\nthis should just change extend direction\nwhile still using the same selection.\n", "children": []}, {"h": "Fixed focus problems in spell tab", "gnx": "ekr.20060211104746.208", "b": "", "children": []}, {"h": "Fixed problem with body_gmt_time setting", "gnx": "ekr.20060214074035.9", "b": "http://sourceforge.net/forum/message.php?msg_id=3549737\n\nThe fix was to call getBool rather than getString.\n", "children": []}, {"h": "Made sure save updates the open directory", "gnx": "ekr.20060214074035.20", "b": "http://sourceforge.net/forum/message.php?msg_id=3534349\nBy: edcdave\n\nSaving the Leo file is not sufficient - I have to exit the document and open\nit again before the rst destination directory is set correctly.\n\nThe fix was to set c.frame.openDirectory in save.\n", "children": []}, {"h": "Fixed sort-lines problems", "gnx": "ekr.20060214074035.41", "b": "The problem: event.widget is the minibuffer.  It must be the body text.\n\n- k.fullCommand saves the initial event and passes it on to callAltXFunction.\n\n- There was a bug in c.masterFocusHandler.  The correct test for 'no change' is:\n\n    if c.hasFocusWidget and c.requestedFocusWidget == c.hasFocusWidget:\n\n** Important: the 'extra' calls to set_focus are correct. The minibuffer messes\nwith the tab pane, and so we *must* be careful to yank the focus back to the\nbody.\n", "children": []}, {"h": "Fixed bug: paste outline lost headline editing", "gnx": "ekr.20060214074035.101", "b": "", "children": []}, {"h": "Code improvements", "gnx": "ekr.20060206111508.547", "b": "- Replaced frame.xWantsFocus with c.xWantsFocus.\n- Added event arg to all legacy commands.\n- Replaced k.tkBindingFromSetting by k.shortcutFromSetting.\n- Replaced k.canonicalizeShortcut by k.shortcutFromSetting.\n- Replaced k.bindShortcut with bindKey.\n- k.makeBindingsFromCommandsDict does not call k.bindKey for mode bindings.\n- Call update_idletasks when writing to the log.\n- Updated selection point immediately in masterKeyHandler.\n  Otherwise, updateStatusLine would be one click behind.\n", "children": ["ekr.20060206111508.550", "ekr.20060206111508.596", "ekr.20060211104746.12", "ekr.20060211104746.168", "ekr.20060211104746.346", "ekr.20060214074035.6", "ekr.20060214074035.12"]}, {"h": "Removed code in c.begin/EndUpdate and c.endEditLabel that tried to save/restore focus", "gnx": "ekr.20060206111508.550", "b": "@nocolor\n\nThis is logically and practically dubious.\nTrue, a screen redraw shouldn't mess with the focus,\nbut there are the following problems:\n\n1. c.endUpdate can happen anytime, and it could interfere with other efforts to set focus.\n2. g.app.get_focus might get the 'wrong' or a 'bad' focus.\n", "children": []}, {"h": "Improved tree allocation", "gnx": "ekr.20060206111508.596", "b": "A *major* improvement to the tree allocation code:\n\n1.  Use p.key() to as keys to tree.visibleText.\n This greatly speeds up tree.findEditWidget\n\n2. Eliminated the brain-dead requirement that previously-allocated widgets must match the position.\n   - The allocation code just gets *any* previously allocated widget.\n     This eliminates an n**2 search!\n   - The ancient problem was that theId refers to the *window* not its Text widget:\n     the *window* must be moved to the right spot.\n\n3. recycleWidgets is simpler and a bit faster.\n\n4. destroyWidgets now works: (the bug was not clearing tree.ids).\n", "children": []}, {"h": "Created c.masterFocusHandler", "gnx": "ekr.20060211104746.12", "b": "* Found the reason why focus was *still* sticking in the outline pane:\n    - The click handlers must return 'break', not continue.\n    - However, OnActivateHeadline must return 'continue' when the headline is active\n      so that Tk will handle the click properly.\n\n- UNL does not seem to be causing problems.\n\n- No need to save/restore focus in status line.\n\n- Added several new traces to tkTree class.\n\n* tree.redraw_now now ends editing properly. This fixes lots of bugs. In\nparticular, it avoid any chance that p.edit_widget won't correspond to the\npresent position.\n\n- k.masterClickHandler calls tree.OnDeactivate() if there is no callback function.\n  This solves most headline focus problems, provided that all panes bind clicks to k.masterClickHandler.\n\n- toggle-active-pane now ends editing properly.\n\n- insert-headline now calls c.editPosition after calling c.endUpdate().\n", "children": []}, {"h": "Added unit tests for key dicts", "gnx": "ekr.20060211104746.168", "b": "@ This revealed several problems:\n\n- Most find dialog commands do not actually exist. All find commands except\nopen-find-dialog actual refer to the find tab.\n\n- Several other minor shortcut problems.\n", "children": []}, {"h": "Special-cased commands for minibuffer", "gnx": "ekr.20060211104746.346", "b": "select-all-text, move back/forward line/char, start/end-of-line.\n", "children": []}, {"h": "Made sure yield works with Python 2.2", "gnx": "ekr.20060214074035.6", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3549737\n\n\\src\\leoEditCommands.py:340: \nWarning: 'yield' will become a reserved keyword \n\nfor python2.2 leoEditCommands.py needs\nfrom __future__ import generators\n\nAlso changed the following plugins:\n\nat_produce.py\nfastGotoNode.py\nrst3.py\nzodb.py\n", "children": []}, {"h": "Use os.getenv('User\") if it exists to get initial cvs name", "gnx": "ekr.20060214074035.12", "b": "http://sourceforge.net/forum/message.php?msg_id=3237845\n\nOn startup, it asked me for a unique id, \"possibly your CVS username\".\nAs a non-windows-user, that made no sense at all to me - at very least, it should\nfill in os.getenv(\"USER\") as a default, because it's right on non-windows systems,\nisn't it?  (If it isn't, there's no explanation at that point that would tell\nme otherwise, that's the value I used anyway...)  Just an out-of-box-experience\nissue.\n", "children": []}, {"h": "Improved commands", "gnx": "ekr.20060206112001", "b": "- Improved format of print-commands and print-bindings commands.\n\n- Eliminated clone-find-all, selection-only, show-context checkboxes\n  when show_only_find_tab_options setting is True.\n\n- All minibuffer find commands copy the find string from the Find tab into the minibuffer.\n\n- The replace-string command sets up arguments for Tab find. This is different\n  from the normal Emacs replace-string command, but it works well in Leo.\n\n- Leo doesn't abort the minibuffer if the command does not exist.\n  This is much more convenient.\n", "children": ["ekr.20060212102459.4", "ekr.20060214074035.67"]}, {"h": "Minibuffer-oriented find commands", "gnx": "ekr.20060212102459.4", "b": "All minibuffer search commands, with the exception of the isearch (incremental) commands, simply provide a minibuffer interface to Leo's legacy find commands.  This means that all the powerful features of Leo's legacy commands are available to the minibuffer search commands.\n\nNote: all bindings shown are the default bindings for these commands.  You may change any of these bindings using @shortcuts nodes in leoSettings.leo.\n\nSettings\n\nleoSettings.leo now contains several settings related to the Find tab:\n\n- @bool show_only_find_tab_options = True\n\nWhen True (recommended), the Find tab does not show the 'Find', 'Change', 'Change, Then Find', 'Find All' and 'Change All' buttons.\n\n- @bool minibufferSearchesShowFindTab = True\n\nWhen True, Leo shows the Find tab when executing most of the commands discussed below.  It's not necessary for it to be visible, but I think it provides good feedback about what search-with-present-options does.  YMMY.  When True, the sequence Control-F, Control-G is one way to show the Find Tab.\n\nBasic find commands\n\n- The open-find-tab command makes the Find tab visible.  The Find tab does **not** need to be visible to execute any search command discussed below.\n\n- The hide-find-tab commands hides the Find tab, but retains all the present settings.\n\n- The search-with-present-options command (Control-F) prompts for a search string.  Typing the <Return> key puts the search string in the Find tab and executes a search based on all the settings in the Find tab.   This command is my 'workhorse' search command.\n\n- The show-search-options command shows the present search options in the status line.  At present, this command also shows the Find tab.\n\nSearch again commands\n\n- The find-tab-find command (F3) is the same as the search-with-present-options command, except that it uses the search string in the find-tab.  This is what I use as my default 'search again' command.\n\n- Similarly, the find-tab-find-previous command (F2) repeats the command specified by the Find tab, but in reverse.\n\n- The find-again command a combination of the search-with-present-options and find-tab-find command.  It is the same as the find-tab-find command if a search pattern other than '<find pattern here>' exists in the Find tab.  Otherwise, the find-again is the same as the search-with-present-options command.\n\nSetting find options\n\n- Several minibuffer commands toggle the checkboxes and radio buttons in the Find tab, and thus affect the operation of the search-with-present-options command. Some may want to bind these commands to keys. Others, will prefer to toggle options in a mode.\n\n\nHere are the commands that toggle checkboxes: toggle-find-ignore-case-option, toggle-find-in-body-option, toggle-find-in-headline-option, toggle-find-mark-changes-option, toggle-find-mark-finds-option, toggle-find-regex-option, toggle-find-reverse-option, toggle-find-word-option, and toggle-find-wrap-around-option.\n\nHere are the commands that set radio buttons: set-find-everywhere, set-find-node-only, and set-find-suboutline-only.\n\n- The enter-find-options-mode (Ctrl-Shift-F) enters a mode in which you may change all checkboxes and radio buttons in the Find tab with plain keys.  As always, you can use the mode-help (Tab) command to see a list of key bindings in effect for the mode.\n\nSearch commands that set options as a side effect\n\nThe following commands set an option in the Find tab, then work exactly like the search-with-present-options command.\n\n- The search-backward and search-forward commands set the 'Whole Word' checkbox to False.\n\n- The word-search-backward and word-search-forward set the 'Whole Word' checkbox to True.\n\n- The re-search-forward and re-search-backward set the 'Regexp' checkbox to True.\n\nFind all commands\n\n- The find-all command prints all matches in the log pane.\n\n- The clone-find-all command replaces the previous 'Clone Find' checkbox.  It prints all matches in the log pane, and creates a node at the beginning of the outline containing clones of all nodes containing the 'find' string.  Only one clone is made of each node, regardless of how many clones the node has, or of how many matches are found in each node.\n\nNote: the radio buttons in the Find tab (Entire Outline, Suboutline Only and Node only) control how much of the outline is affected by the find-all and clone-find-all commands.\n\nSearch and replace commands\n\nThe replace-string prompts for a search string.  Type <Return> to end the search string.  The command will then prompt for the replacement string.  Typing a second <Return> key will place both strings in the Find tab and executes a **find** command, that is, the search-with-present-options command.\n\nSo the only difference between the replace-string and search-with-present-options commands is that the replace-string command has the side effect of setting 'change' string in the Find tab.  However, this is an extremely useful side effect, because of the following commands...\n\n- The find-tab-change command (Ctrl-=) replaces the selected text with the 'change' text in the Find tab.\n\n- The find-tab-change-then-find (Ctrl--) replaces the selected text with the 'change' text in the Find tab, then executes the find command again.\n\nThe find-tab-find, find-tab-change and find-tab-change-then-find commands can simulate any kind of query-replace command.  **Important**: Leo presently has separate query-replace and query-replace-regex commands, but they are buggy and 'under-powered'.  Fixing these commands has low priority.\n\n- The find-tab-change-all command changes all occurrences of the 'find' text with the 'change' text.  Important: the radio buttons in the Find tab (Entire Outline, Suboutline Only and Node only) control how much of the outline is affected by this command.\n\nIncremental search commands\n\nLeo's incremental search commands are completely separate from Leo's legacy search commands.  At present, incremental search commands do not cross node boundaries: they work only in the body text of single node.\n\nComing in Leo 4.4b3: the incremental commands will maintain a list of previous matches.  This allows for\n\na) support for backspace and\nb) an incremental-search-again command.\n\nFurthermore, this list makes it easy to detect the end of a wrapped incremental search.\n\nHere is the list of incremental find commands: isearch-backward, isearch-backward-regexp, isearch-forward and\nisearch-forward-regexp.'''\n", "children": []}, {"h": "Leo remembers the previous open directory", "gnx": "ekr.20060214074035.67", "b": "http://sourceforge.net/forum/message.php?msg_id=3571431\nBy: ktenney\n\nTo reiterate a request:\n\nWhen doing File->Open the default directory should the directory which\nwas navigated to for previous 'Open'\n\nWhat I did:\n\n- Defined g.app.globalOpenDir # The directory last used to open a file.\n", "children": []}, {"h": "Improved plugins", "gnx": "ekr.20060214090742", "b": "", "children": ["ekr.20060214074035.65", "ekr.20060214074035.66"]}, {"h": "Fixed problem with view plugin", "gnx": "ekr.20060214074035.65", "b": "http://sourceforge.net/forum/message.php?msg_id=3538274\n\nIt's not clear that there were serious problems with the plugin, but I improved the code and error messages.  All features work for me.\n\nSeveral plugins use the icon-double-click hook.  The reported problems could have been due to plugin conflicts.\n", "children": []}, {"h": "Installed cleo patch", "gnx": "ekr.20060214074035.66", "b": "http://sourceforge.net/forum/message.php?msg_id=3517080\n", "children": []}, {"h": "New commands", "gnx": "ekr.20060214083808", "b": "Debugging commands:\n\n- dump-all-objects, ump-new-objects, verbose-dump-objects.\n- free-text-widgets.\n\nFind commands:\n\nSee the child of this node for details.\n\n- find-again.\n- find-all and clone-find-all.\n- find-tab-find command, find-tab-find-previous.\n- find-tab-change, find-tab-change-all, find-tab-change-then-find.\n- hide-find-tab, open-find-tab.\n- re-search-forward and re-search-backward.\n- replace-string.\n- search-with-present-options.\n- search-backward and search-forward.\n- show-search-options.\n- word-search-backward and word-search-forward.\n\nSearch options:\n\n- set-find-everywhere, set-find-node-only, and set-find-suboutline-only.\n- toggle-find-ignore-case-option, toggle-find-in-body-option,\n  toggle-find-in-headline-option, toggle-find-mark-changes-option,\n  toggle-find-mark-finds-option, toggle-find-regex-option,\n  toggle-find-reverse-option, toggle-find-word-option, \n  toggle-find-wrap-around-option.\n\nMouseless Leo:\n\n- activate-cmds-menu, activate-edit-menu, activate-file-menu activate-help-menu,\n  activate-outline-menu, activate-plugins-menu, activate-window-menu.\n- contract-body-pane, contract-log-pane, contract-outline-pane, contract-pane.\n- expand-body-pane, expand-log-pane, expand-outline-pane, expand-pane.\n- fully-expand-body-pane, fully-expand-log-pane, fully-expand-outline-pane, fully-expand-pane.\n- hide-body-pane, hide-log-pane, hide-outline-pane, hide-pane.\n- click-click-box, click-headline, click-icon-box, double-click-headline,\n  double-click-icon-box, simulate-begin-drag, simulate-end-drag.\n  (These commands trigger event hooks. In particular, double-click-icon-box will\n  invoke the vim or xemacs plugins if they are enabled.)\n", "children": ["ekr.20060212102459.4"]}, {"h": "New settings", "gnx": "ekr.20060214083647", "b": "New settings:\n\n- @int max_undo_stack_size\n- @bool minibufferSearchesShowFindTab\n- @bool show_only_find_tab_options\n\nNew debugging settings:\n\n@bool allow_idle_time_hook\n@bool gc_before_redraw\n@bool show_tree_stats\n@bool trace_bindings\n@bool trace_doCommand\n@bool trace_f.set_focus\n@bool trace_focus = False\n@bool trace_g.app.gui.set_focus\n@bool trace_gc\n@bool trace_gc_calls\n@bool trace_gc_verbose\n@bool trace_masterClickHandler\n@bool trace_masterCommand\n@bool trace_masterFocusHandler\n@bool trace_masterKeyHandler\n@bool trace_modes\n@bool trace_redraw_now\n@bool trace_select\n@bool trace_tree\n@bool trace_tree_alloc\n@bool trace_tree_edit\n@bool use_syntax_coloring\n@string trace_bindings_filter\n@string trace_bindings_pane_filter\n", "children": []}, {"h": "User input modes", "gnx": "ekr.20060214092741", "b": "- @mode nodes in leoSettings.leo allow you to specify input modes with separate key bindings.\n\nSee the child of this node for full details.\n\n- All key bindings specified with !mini pane specifier apply to all modes.\n\n", "children": []}, {"h": "4.4 experimental 1", "gnx": "ekr.20060215112429", "b": "Leo 4.4 experimental 1                                      February 15, 2006\n\nThis version is an emergency measure.  It's goals:\n\n1.  To fix some of the key-handling issues in Leo 4.4 b2.\n2.  To allow further experimentation with key handling.\n3.  To allow easy reporting of any other key handling problems.\n\nPlease do not use this version (or Leo 4.4b2) unless you are ready to report bugs.\n\nMy apologies for the key handling problems in Leo 4.4 b2.  I hope this version will\nbe all that is necessary to fix those problems.\n\nHere are the details of the key-handling changes:\n\n- Added support for trace_key_event setting.\n- Added support for ignore_caps_lock setting.\n- Added Caps_Lock and Num_Lock to k.tkNamesList and in the list of\n  special keys in k.masterCommand and k.masterKeyHandlerHelper.\n- Added support for k.ignore_unbound_non_ascii_keys logic in masterKeyHandlerHelper.\n- Disabled unknown keysym trace in k.strokeFromEvent.\n- Enabled the international keyboard on XP as an aid to testing.\n- Added support for swap_mac_keys setting in k.shortcutFromSetting.\n", "children": ["ekr.20060215112429.9", "ekr.20060215112429.2", "ekr.20060215112429.3", "ekr.20060215112429.6"]}, {"h": "Fixed (maybe) problems with unicode characters & caps lock", "gnx": "ekr.20060215112429.9", "b": "http://sourceforge.net/forum/message.php?msg_id=3573470\n\nWhat I did:\n\n- Added support for trace_key_event setting.\n- Added support for ignore_caps_lock setting.\n- Added Caps_Lock and Num_Lock to k.tkNamesList and in the list of\n  special keys in k.masterCommand and k.masterKeyHandlerHelper.\n- Added support for k.ignore_unbound_non_ascii_keys logic in masterKeyHandlerHelper.\n- Disabled unknown keysym trace in k.strokeFromEvent.\n- Enabled the international keyboard on XP as an aid to testing.\n- Added support for swap_mac_keys setting in k.shortcutFromSetting.\n", "children": []}, {"h": "Restored some legacy bindings", "gnx": "ekr.20060215112429.2", "b": "extract                             = Shift-Ctrl-D\nextract-names                       = Shift-Ctrl-N\nextract-section                     = Shift-Ctrl-S  # Shift-Ctrl-E: end-of-line-extend-selection\n\nwrite-at-file-nodes                 = Shift-Ctrl-W # Was enter-file-mode.\nwrite-dirty-at-file-nodes           = Shift+Ctrl+Q\n\n# Removed definitions of find and file modes.  I never used them.\n", "children": []}, {"h": "Fixed crasher in Go To Line command", "gnx": "ekr.20060215112429.3", "b": "http://sourceforge.net/forum/message.php?msg_id=3545403\n", "children": []}, {"h": "Fixed menu problem on Linux", "gnx": "ekr.20060215112429.6", "b": "The patch was reported at:\n\nhttp://sourceforge.net/forum/message.php?msg_id=3577681\n", "children": []}, {"h": "4.4 a6", "gnx": "ekr.20060217071505", "b": "Leo 4.4 alpha 6                                         February 17, 2006\n\nLeo 4.4 b2 was broken on some platforms.  Leo 4.4 a6 should fix those problems\nforever.  However, only wider distribution will verify that for certain.\n\nBesides fixing the fatal problems with Leo 4.4b2, this version fixes two minor bugs\nand adds some new settings in leoSettings.leo.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4 b2 and a6:\n----------------------------\n- Smoother user interface.\n- New commands that support mouseless Leo.\n- Minibuffer search commands provide all features of Leo's legacy search commands.\n- User modes are fully functional; you can create special bindings for the minibuffer.\n- New master key and click handlers and improved allocation of screen widgets.\n\nComing in Leo 4.4b3:\n--------------------\n- A revived chapters plugin.\n- Autocompleter Tab.\n- Improved incremental searches.\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060217071505.1", "ekr.20060217072324", "ekr.20060217072647"]}, {"h": "Fixed urgent compatibility problems", "gnx": "ekr.20060217071505.1", "b": "The new scheme binds to keystrokes, not commands.  This should be as portable\nand robust as all previous versions (except b2, which was broken).\n\n- Created k.completeAllBindings, called last in k.makeAllBindings. This binds\nall keystrokes in k.bindingsDict to k.masterKeyHandler with an optional stroke\nargument. This allows k.masterKeyhandler to dispense with the problematic call\nto k.strokeFromEvent. This is all that is really required. \n\n- Added code to menu.createMenuEntries that clears the accelerator on MacOS for\nany key that isn't a control, alt or command key. This solves the recurring\nproblems with the Return key. The only effect is that the menu won't mention a\nbinding that is actually in effect, but apparently that cannot be helped.\n\n- Added g.safeCompareStrings, which may, or may not, fix the crasher when\ncomparing k.abortAllModesKey to the incoming keystroke in k.masterKeyHandler.\nIt's a bit tricky to test.\n\n- The ignore_caps_lock is no longer functional. Sigh. This depends on knowing\nthe Caps_Lock bit in key events. I may put this back later, but I can't delay a6\neven a minute for this.\n", "children": []}, {"h": "Minor bugs fixed", "gnx": "ekr.20060217072324", "b": "- Fixed crasher in k.masterCommand.\n\n- Arrow keys no longer destroy UNL line\n", "children": []}, {"h": "New debugging options in leoSettings.leo", "gnx": "ekr.20060217072647", "b": "- @bool trace_autocompleter # The autocompleter itself is not ready yet.\n- @bool trace_key_event\n- @bool trace_minibuffer\n- @bool trace_status_line\n", "children": []}, {"h": "4.4 a7", "gnx": "ekr.20060227102028", "b": "Leo 4.4 alpha 7                                             February 28, 2006\n\nThis version fixes some minor problems with Leo 4.4a6 and adds autocompletion\nand calltips.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060227102028.2"]}, {"h": "Bugs Fixed", "gnx": "ekr.20060227102028.2", "b": "", "children": ["ekr.20060227102028.3", "ekr.20060227102028.14", "ekr.20060227102028.15", "ekr.20060227102028.16", "ekr.20060227102028.17", "ekr.20060227102028.18"]}, {"h": "Fixed binding bug", "gnx": "ekr.20060227102028.3", "b": "# http://sourceforge.net/forum/message.php?msg_id=3583335\n", "children": []}, {"h": "Fixed bug in open-find-dialog", "gnx": "ekr.20060227102028.14", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3586962\nBy: bwmulder\n\nthe open-find-dialog is broken. \n\nError: 4 \nTypeError Exception in Tk callback \nFunction: <function findButtonCallback at 0x04E219F0> (type: <type 'function'>) \nArgs: () \nTraceback (innermost last): \nFile \"C:\\Python24\\lib\\site-packages\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1747, in __call__ \nreturn apply(self.func, args) \nTypeError: findButtonCallback() takes at least 1 argument (0 given) \n", "children": []}, {"h": "Ensure dialogs properly get focus", "gnx": "ekr.20060227102028.15", "b": "", "children": []}, {"h": "Disabled autocompleter in headlines", "gnx": "ekr.20060227102028.16", "b": "# This was causing problems.  It may be an easy fix, but I kinda doubt it.\n", "children": []}, {"h": "Removed horrible g.app.dialogs hack", "gnx": "ekr.20060227102028.17", "b": "\n", "children": []}, {"h": "Fix crasher in plugin", "gnx": "ekr.20060227102028.18", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3597694\nBy: tfer\n\nTemplate Plug-in (maybe others too) co,plain when activated:\nexception executing command\nTraceback (most recent call last):\n  File \"leoCommands.py\", line 265, in doCommand\n    val = command(event)\n  File \"c:\\Leo_Cvs\\Leo\\plugins\\plugins_menu.py\", line 350, in about\n    PluginAbout(self.name, self.version, self.doc)\n  File \"c:\\Leo_Cvs\\Leo\\plugins\\plugins_menu.py\", line 576, in __init__\n    g.app.dialogs += 1\nAttributeError: LeoApp instance has no attribute 'dialogs'\n", "children": []}, {"h": "4.4 b3", "gnx": "ekr.20060328171518", "b": "Leo 4.4 beta 3                                             April 14, 2006\n\nThis version fixes some minor problems and adds various features.  This code\nhas been in use for several weeks without any major problems reported.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060328171518.1", "ekr.20060328171518.47", "ekr.20060328171518.191"]}, {"h": "New features", "gnx": "ekr.20060328171518.1", "b": "", "children": ["ekr.20060328171518.10", "ekr.20060328171518.11", "ekr.20060328171518.15", "ekr.20060328171518.16", "ekr.20060328171518.45"]}, {"h": "Added scroll outline pane commands", "gnx": "ekr.20060328171518.10", "b": "http://sourceforge.net/forum/message.php?msg_id=3608246\n\nAdded the following commands:\n\nscroll-outline-down-line       \nscroll-outline-down-page       \nscroll-outline-up-line       \nscroll-outline-up-page\n", "children": []}, {"h": "Improved registerCommand", "gnx": "ekr.20060328171518.11", "b": "It now properly creates bindings.\n", "children": []}, {"h": "Suppressed autocompletion after numbers", "gnx": "ekr.20060328171518.15", "b": "", "children": []}, {"h": "Added colorizing support for Lua language", "gnx": "ekr.20060328171518.16", "b": "http://sourceforge.net/forum/message.php?msg_id=3572598\n", "children": []}, {"h": "Added run-unit-test command", "gnx": "ekr.20060328171518.45", "b": "This is equivalent to the Unit Test script button in unitTest.leo\n", "children": []}, {"h": "Bugs", "gnx": "ekr.20060328171518.47", "b": "", "children": ["ekr.20060328171518.48", "ekr.20060328171518.57", "ekr.20060328171518.83", "ekr.20060328171518.85", "ekr.20060328171518.101", "ekr.20060328171518.108", "ekr.20060328171518.111", "ekr.20060328171518.119", "ekr.20060328171518.135", "ekr.20060328171518.151", "ekr.20060328171518.152", "ekr.20060328171518.169", "ekr.20060328171518.190", "ekr.20060328171518.248", "ekr.20060328171518.249", "ekr.20060414071350.1", "ekr.20060414071350.8", "ekr.20060414071350.39", "ekr.20060414071350.47", "ekr.20060414071350.58"]}, {"h": "Fixed problem with left & right arrows in outline mode", "gnx": "ekr.20060328171518.48", "b": "http://sourceforge.net/forum/message.php?msg_id=3619340\n\nJust tried out CVS today, and on Linux left/right and L/R in outline mode\n(Ctrl-Shift-O) seem to do nothing, whereas they should expand/contract parent\nnodes.\n", "children": []}, {"h": "Fixed undo problem with clones", "gnx": "ekr.20060328171518.57", "b": "http://sourceforge.net/forum/message.php?msg_id=3639193\n\nThe dirty bits were not updated properly in several undo/redo operations.\n", "children": []}, {"h": "Investigated setting descendant @file nodes dirty when changing body text", "gnx": "ekr.20060328171518.83", "b": "http://sourceforge.net/forum/message.php?msg_id=3642892\n\nThe present code is probably the best compromise between strict accuracy and marking too many nodes dirty.\n", "children": []}, {"h": "Work around newline problems on the Mac", "gnx": "ekr.20060328171518.85", "b": "http://sourceforge.net/forum/message.php?msg_id=3606515\n\nAdded insert-newline command and fixed some related commands.\n", "children": []}, {"h": "Got rid of settings messages", "gnx": "ekr.20060328171518.101", "b": "Apparently g.app.unitTesting isn't set properly for the new-window test.\n", "children": []}, {"h": "Clicks outside minibuffer no longer rip focus", "gnx": "ekr.20060328171518.108", "b": "The bug: Hit control-f, then select the text that doesn't have focus.\n", "children": []}, {"h": "Handled missing leoSettings.leo files more gracefully", "gnx": "ekr.20060328171518.111", "b": "http://sourceforge.net/forum/message.php?msg_id=3641107\n\nConfigSettings.initEncoding now uses the g.app.config settings if no other settings are available.\n\nIn particular, this causes at.encoding to be inited to a reasonable value.\n", "children": []}, {"h": "Converted all shortcuts to unicode", "gnx": "ekr.20060328171518.119", "b": "- onBodyChanged now converts everything to unicode, either directly or by calling g.app.gui.getAllText.\n\n- Replaced all calls to g.safeStringCompare by g.app.gui.getAllText which calls g.toUnicode.\n\n- Converted all shortcuts to unicode in shortcutFromSetting (a.k.a strokeFromSetting)\n\n- Removed g.safeStringCompare.  This function was a bad idea.\n\nImportant: Leo is supposed to convert all characters to unicode, so there should\nnever be a need for safeStringCompare. The proper way to avoid UnicodeError's is\nto call g.toUnicode(s,g.app.tkEncoding).\n", "children": []}, {"h": "Made Open With shortcuts work again", "gnx": "ekr.20060328171518.135", "b": "http://sourceforge.net/forum/message.php?msg_id=3607355\n", "children": []}, {"h": "Made sure autocompleter and calltip text stick", "gnx": "ekr.20060328171518.151", "b": "", "children": []}, {"h": "Fixed a bug in c.openWith", "gnx": "ekr.20060328171518.152", "b": "http://sourceforge.net/forum/message.php?msg_id=3573148\n\nc.openWith now calls g.enableIdleTimeHook\n", "children": []}, {"h": "Import/export commands now set directory for next open", "gnx": "ekr.20060328171518.169", "b": "These commands now set g.app.globalOpenDir.\n", "children": []}, {"h": "Investigated colorizer problems: can not reproduce", "gnx": "ekr.20060328171518.190", "b": "http://sourceforge.net/forum/message.php?msg_id=3585710\n", "children": []}, {"h": "Removed support @ifgui: it doesn't and can't work", "gnx": "ekr.20060328171518.248", "b": "Alas, @if-gui can't be made to work. The problem is that plugins can set\ng.app.gui, but plugins need settings so the leoSettings.leo files must be parsed\nbefore g.app.gui.guiName() is known.\n", "children": []}, {"h": "Removed autocompletion for self", "gnx": "ekr.20060328171518.249", "b": "It's not ready for prime time.\n", "children": []}, {"h": "Rewrote g.importExtension to simplify startup logic", "gnx": "ekr.20060414071350.1", "b": "", "children": []}, {"h": "Removed calls to lstrip and rstrip for compatibility with Python 2.2.1", "gnx": "ekr.20060414071350.8", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3671350\n\nChange aString.lstrip and aString.rstrip to the aString.replace.\n@color\n", "children": []}, {"h": "Fixed crash in string.startswith and string.endswith", "gnx": "ekr.20060414071350.39", "b": "leoID = ekr (in c:\\Documents and Settings\\Ed)\nreading settings in C:\\prog\\leoCVS\\leo\\config\\leoSettings.leo\nreading settings in C:\\prog\\leoCVS\\leo\\src\\LeoPy.leo\nrst3 plugin: SilverCity not loaded\nAttributeError Exception in Tk callback\n  Function: <function bindKeyCallback at 0x016F2E70> (type: <type 'function'>)\n  Args: (<Tkinter.Event instance at 0x03510288>,)\n  Event type: KeyPress (type num: 2)\nTraceback (innermost last):\n  File \"C:\\prog\\leoCVS\\leo\\extensions\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1752, in __call__\n    return apply(self.func, args)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 2002, in bindKeyCallback\n    return k.masterKeyHandler(event,stroke=stroke)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 2928, in masterKeyHandler\n    val = self.masterKeyHandlerHelper(event,stroke)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 2992, in masterKeyHandlerHelper\n    val = k.callStateFunction(event) # Calls end-command.\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 2219, in callStateFunction\n    val = k.state.handler(event)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 348, in autoCompleterStateHandler\n    self.insertNormalChar(ch,keysym)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 856, in insertNormalChar\n    self.calltip(obj)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoKeys.py\", line 455, in calltip\n    obj = getattr(string,obj.__name__)\nAttributeError: 'module' object has no attribute 'startswith'\n", "children": []}, {"h": "Fixed Crash after undoing clearRecentFiles command", "gnx": "ekr.20060414071350.47", "b": "exception executing command\nTraceback (most recent call last):\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoCommands.py\", line 264, in doCommand\n    val = command(event)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoCommands.py\", line 884, in clearRecentFiles\n    u.afterClearRecentFiles(bunch)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoUndo.py\", line 621, in afterClearRecentFiles\n    u.pushBead(bunch)\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoUndo.py\", line 192, in pushBead\n    u.setUndoTypes()\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoUndo.py\", line 341, in setUndoTypes\n    u.cutStack()\n  File \"C:\\prog\\leoCVS\\leo\\src\\leoUndo.py\", line 136, in cutStack\n    if bunch.kind == 'beforeGroup':\nAttributeError: 'Bunch' object has no attribute 'kind'\n", "children": []}, {"h": "Fixed minor problems reported by Pychecker", "gnx": "ekr.20060414071350.58", "b": "# No change for now\nC:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py:1050: Parameter (thread) not used\n\n# Fixed\nC:\\prog\\tigris-cvs\\leo\\src\\leoTkinterFrame.py:1428: Function returns a value and also implicitly returns None\nC:\\prog\\tigris-cvs\\leo\\src\\leoTkinterTree.py:1222: Local variable (delta) not used\nC:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py:1931: Local variable (f) not used\nC:\\prog\\tigris-cvs\\leo\\src\\leoGlobals.py:5246: Local variable (buttonList) not used\nC:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py:493: No global (enableIdleTimeHook) found\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20060328171518.191", "b": "", "children": ["ekr.20060328171518.238", "ekr.20060328171518.240", "ekr.20060328171518.244", "ekr.20060328171518.245", "ekr.20060328171518.246"]}, {"h": "Changed path to stylesheet in the rst3 plugin", "gnx": "ekr.20060328171518.238", "b": "http://sourceforge.net/forum/message.php?msg_id=3637393\n\nI'm trying to set up a default stylesheet for a project and want this to be\nheld relative to the project directory (where the .leo file is). The default\nis to place it in the same directory as the output, which is a couple of levels\ndown.\n\nhttp://sourceforge.net/forum/message.php?msg_id=3639216\n\ng.os_path_dirname(self.outputFileName) with self.c.frame.openDirectory. This\nmakes the path relative to the project. Not 100% as the stylesheet filename\nwould need a path embedded in it to move the location down the tree. However,\nit is consistent with the way the output file is named.\n", "children": []}, {"h": "Fixed problems with chapters plugin", "gnx": "ekr.20060328171518.240", "b": "See the chapters2 in leoPlugins.leo.\n\nSee also:\n\nhttp://sourceforge.net/forum/message.php?msg_id=3626542\n\nhttps://sourceforge.net/forum/message.php?msg_id=3629055\n\nhttp://sourceforge.net/forum/message.php?msg_id=3632004\n", "children": []}, {"h": "Improved groupoperations plugin", "gnx": "ekr.20060328171518.244", "b": "Cleaned up the code and added support minibuffer commands:\n\ngroup-operations-clear-marked       = Alt-Ctrl-Shift-l\ngroup-operations-mark-for-copy      = Alt-Ctrl-Shift-c\ngroup-operations-mark-for-move      = Alt-Ctrl-Shift-m\ngroup-operations-mark-for-clone     = Alt-Ctrl-`\ngroup-operations-mark-target        = Alt-Ctrl-Shift-t\ngroup-operations-operate-on-marked  = Alt-Ctrl-Shift-o\ngroup-operations-transfer           = Alt-Ctrl-Shift-d\n\nThis code has not been tested with the chapters2 plugin.\n", "children": []}, {"h": "Fixed crasher in Word (and other) plugins", "gnx": "ekr.20060328171518.245", "b": "http://sourceforge.net/forum/message.php?msg_id=3617936\n\nThe fix was to plugins_menu.py: the cmd_callback must have an event argument.\n", "children": []}, {"h": "Fixed problem with labels plugin", "gnx": "ekr.20060328171518.246", "b": "The fix: all menu commands now have event=None in their argument list.\n", "children": []}, {"h": "4.4 b4", "gnx": "ekr.20060417092536", "b": "Leo 4.4 beta 4                                             April 21, 2006\n\nThis version fixes a long-standing MacOS bug.  It is likely to be the last\nbeta release before 4.4 final.  This release also adds several new commands\nand contains a script for updating leoSettings.leo.\n\nWarning: The previous beta was not widely distributed. Please do some testing in\nyour environment before recommending this version of Leo to others, (such as\nyour students).\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://sourceforge.net/cvs/?group_id=3458\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060421070409.1", "ekr.20060421070409.37"]}, {"h": "Bugs", "gnx": "ekr.20060421070409.1", "b": "", "children": ["ekr.20060421070602", "ekr.20060421070409.2", "ekr.20060421070409.3", "ekr.20060421070409.9", "ekr.20060421070409.33", "ekr.20060421070409.36"]}, {"h": "Fixed rename-buffer command", "gnx": "ekr.20060421070602", "b": "", "children": []}, {"h": "Investigated problems with legacy bindings", "gnx": "ekr.20060421070409.2", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3688804\nBy: paulpaterson\n\nIt seems that copying and pasting nodes with CTRL-SHIFT-C, V is not working.\n- (legacy bindings)\n- select a node\n- CTRL-SHIFT-C\n- CTRL-SHIFT-V\n- Vim opens up! I expect to paste the node. The clipboard doesn't seem to contain\nany XML\n- The menu items show that these keys are bound to the copy and paste node\ncommands\n\n*** Also on legacy bindings the arrow keys don't seem to move the cursor in the\nbody.\n", "children": []}, {"h": "Fixed bug when cutting text in headline", "gnx": "ekr.20060421070409.3", "b": "", "children": ["ekr.20060421070409.4"]}, {"h": "Report", "gnx": "ekr.20060421070409.4", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3692247\nBy: vpe\n\nAfter cutting selection in the headline, headline area shrinks too much.  Example:\nheadline is 'NewHeadline', select last 'e', ctrl-x, it shrinks to 'Ne'\n\nTo fix by hand: add\n\ns=g.app.gui.getAllText(w)\n\nJust before\n\nw.configure(width=f.tree.headWidth(s=s))\n\nin cutText in leoTkFrame.py\n", "children": []}, {"h": "Fixed crasher in open-find-dialog", "gnx": "ekr.20060421070409.9", "b": "", "children": ["ekr.20060421070409.10", "ekr.20060421070409.11"]}, {"h": "Report", "gnx": "ekr.20060421070409.10", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3692247\n\nFind panel cannot be re-opened. Run open-find-dialog. Close it. Run open-find-dialog\nagain -- crash.\n\nThe fix was to move the line:\n\nself.top.protocol(\"WM_DELETE_WINDOW\", self.onCloseWindow)\n\nfrom createBindings to createFrame in the leoTkinterFind class.\n", "children": []}, {"h": "Traceback", "gnx": "ekr.20060421070409.11", "b": "TclError Exception in Tk callback\n  Function: <function bindKeyCallback at 0x0169B170> (type: <type 'function'>)\n  Args: (<Tkinter.Event instance at 0x01865EB8>,)\n  Event type: KeyPress (type num: 2)\nTraceback (innermost last):\n  File \"C:\\prog\\tigris-cvs\\leo\\extensions\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1752, in __call__\n    return apply(self.func, args)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 1991, in bindKeyCallback\n    return k.masterKeyHandler(event,stroke=stroke)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 2931, in masterKeyHandler\n    val = self.masterKeyHandlerHelper(event,stroke)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 2990, in masterKeyHandlerHelper\n    val = k.callStateFunction(event) # Calls end-command.\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 2208, in callStateFunction\n    val = k.state.handler(event)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 2289, in fullCommand\n    k.callAltXFunction(k.mb_event)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoKeys.py\", line 2327, in callAltXFunction\n    func(event)\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py\", line 2801, in showFindPanel\n    c.frame.findPanel.bringToFront()\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoTkinterFind.py\", line 469, in bringToFront\n    self.top.withdraw() # Helps bring the window to the front.\n  File \"c:\\python24\\lib\\lib-tk\\Tkinter.py\", line 1562, in wm_withdraw\n    return self.tk.call('wm', 'withdraw', self._w)\nTclError: bad window path name \".25637872\"\n\n================================================\n  Event contents:\n    char:\n    delta: 13\n    height: ??\n    keycode: 13\n    keysym: Return\n    keysym_num: 65293\n    num: ??\n    serial: 1486\n    state: 0\n    time: 1717970\n    type: 2\n    widget: .17570752.17571352.19882152.minibuffer\n    width: ??\n    x: 183\n    x_root: 576\n    y: -62\n    y_root: 859\n\n", "children": []}, {"h": "Don't do typing completion for numbers", "gnx": "ekr.20060421070409.33", "b": "# getLeadinWord must clear self.membersList to disable completion.\n", "children": []}, {"h": "Fixed crash in undo", "gnx": "ekr.20060421070409.36", "b": "leoID = ekr (in c:\\Documents and Settings\\Ed)\nreading settings in C:\\prog\\tigris-cvs\\leo\\config\\leoSettings.leo\nreading settings in C:\\Documents and Settings\\Ed\\My Documents\\ekr.leo\nrst3 plugin: SilverCity not loaded\nexception executing command\nTraceback (most recent call last):\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py\", line 264, in doCommand\n    val = command(event)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py\", line 2969, in pasteOutline\n    u.afterInsertNode(pasted,undoType,undoData)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoUndo.py\", line 750, in afterInsertNode\n    u.pushBead(bunch)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoUndo.py\", line 182, in pushBead\n    if bunch2 and bunch2.kind == 'beforeGroup':\n\nAttributeError: 'Bunch' object has no attribute 'kind'\n", "children": []}, {"h": "New features", "gnx": "ekr.20060421070409.37", "b": "", "children": ["ekr.20060417092825.1", "ekr.20060421070409.41", "ekr.20060421070409.40"]}, {"h": "Added script to update new copies of leoSettting.leo from previous copies", "gnx": "ekr.20060417092825.1", "b": "See the (presently disabled) script button in scripts.leo at:\n\nButtons-->@@button updateSettings\n\nFrom the docstring:\n\nHere is a **preliminary** script that updates a new leoSettings.leo file\n(path2) from the settings in a previous leoSettings.leo file (path1).\nPresumably, the path2 file is the leoSettings.leo file from a new distribution,\nand the path1 file a leoSettings.leo file containing settings that you have\nmodified.  You must specify the full path of both files in the top-level @button node.\n\n**Warning**: This script modifies the path2 file. Make sure that you don't mind\nmodifying this file.\n\n**Warning**: This script is unsophisticated in its update algorithm. If if finds\ncorresponding nodes (node with the same settings name) in both outlines it simply\nreplaces the node in the path2 file with the node in the path1 file. In\nparticular, it does not keep track of individual shortcuts: it replaces the body\nof one @shortcuts node with the body of the corresponding @shortcuts node.\n\n**Note**: If the path1 file contains a settings node not in the path2 file it\nattempts to create a new node in the corresponding place in the path2 file. If\nthis is not possible, say because the structures of the files are different, the\nscript places the new node as the last child of the @settings node in the path2\nfile.\n", "children": []}, {"h": "Added new commands", "gnx": "ekr.20060421070409.41", "b": "New commands:\n\nadd-space-to-lines,\nadd-tab-to-lines\nclean-lines\nclear-selected-text\ngoto-global-line\nhelp-for-command\nopen-outline-by-name (filename completion)\nremove-space-from-lines\nremove-tab-from-lines\n", "children": []}, {"h": "Made all edit command undoable", "gnx": "ekr.20060421070409.40", "b": "", "children": []}, {"h": "4.4 rc1", "gnx": "ekr.20060428084553", "b": "Leo 4.4 release candidate 1                                 April 28, 2006\n\nThis version fixes a few minor bug reported in 4.4b4 and adds 9 new commands.\nThe open-outline-by-name command supports filename completion.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060428084553.2", "ekr.20060428084553.38"]}, {"h": "Bugs", "gnx": "ekr.20060428084553.2", "b": "", "children": ["ekr.20060428084957", "ekr.20060428084553.4", "ekr.20060428084553.10", "ekr.20060428084553.34", "ekr.20060428084553.37", "ekr.20060428084711"]}, {"h": "Fixed rename-buffer command", "gnx": "ekr.20060428084957", "b": "", "children": []}, {"h": "Fixed bug when cutting text in headline", "gnx": "ekr.20060428084553.4", "b": "http://sourceforge.net/forum/message.php?msg_id=3692247\n\nAfter cutting selection in the headline, headline area shrank too much.  \n", "children": []}, {"h": "Fixed crasher in open-find-dialog", "gnx": "ekr.20060428084553.10", "b": "http://sourceforge.net/forum/message.php?msg_id=3692247\n\nFind panel cannot be re-opened. Run open-find-dialog. Close it. Run open-find-dialog\nagain -- crash.\n", "children": []}, {"h": "Suppressed typing completion for numbers", "gnx": "ekr.20060428084553.34", "b": "# getLeadinWord must clear self.membersList to disable completion.\n", "children": []}, {"h": "Fixed crash in undo", "gnx": "ekr.20060428084553.37", "b": "Traceback (most recent call last):\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py\", line 264, in doCommand\n    val = command(event)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoCommands.py\", line 2969, in pasteOutline\n    u.afterInsertNode(pasted,undoType,undoData)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoUndo.py\", line 750, in afterInsertNode\n    u.pushBead(bunch)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\src\\leoUndo.py\", line 182, in pushBead\n    if bunch2 and bunch2.kind == 'beforeGroup':\n\nAttributeError: 'Bunch' object has no attribute 'kind'\n", "children": []}, {"h": "Fixed crash in datenodes plugin", "gnx": "ekr.20060428084711", "b": "https://sourceforge.net/forum/message.php?msg_id=3699799\n", "children": []}, {"h": "New features", "gnx": "ekr.20060428084553.38", "b": "", "children": ["ekr.20060428084553.39", "ekr.20060428084553.41", "ekr.20060428084553.42", "ekr.20060428084553.273"]}, {"h": "Added clear-selection command", "gnx": "ekr.20060428084553.39", "b": "Useful, e.g., after a find.\n", "children": []}, {"h": "Made all edit command undoable", "gnx": "ekr.20060428084553.41", "b": "self.beginCommand(undoType='xxx')\n...\nself.endCommand(changed=True,setLabel=True)\n", "children": []}, {"h": "Added new commands", "gnx": "ekr.20060428084553.42", "b": "New commands:\n\nadd-space-to-lines\nadd-tab-to-lines\nclean-lines\nclear-selected-text\ngoto-global-line\nhelp-for-command\nremove-space-from-lines\nremove-tab-from-lines\n", "children": []}, {"h": "Added filename completion", "gnx": "ekr.20060428084553.273", "b": "At present, only the open-outline-by-name command supports filename completion.\n", "children": []}, {"h": "4.4 final", "gnx": "ekr.20060511074853", "b": "Leo 4.4 Final                                                     May 11, 2006\n\nLeo 4.4 Final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4:\n--------------------------\n- An Emacs-like mini-buffer: you can now execute any command by typing its long\nname, with tab completion.\n\n- Many new commands, including cursor and screen movement, basic character, word\nand paragraph manipulation, and commands to manipulate buffers, the kill ring,\nregions and rectangles. You can use Leo without using a mouse.\n\n- Flexible key bindings and input modes. You can emulate the operation of Emacs,\nVim, or any other editor.\n\n- A tabbed log pane. The Find and Spell Check commands now use tabs instead of\ndialogs, making those commands much easier to use. Plugins or scripts can easily\ncreate new tabs. The Completion tab shows possible typing completions.\n\n- Autocompletion and calltips.  Autocompletion works much like tab completion.\n  To enable autocompletion, bind a key to the auto-complete command.\n\n- Dozens of other new features and bug fixes since Leo 4.3.3.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.4.x", "gnx": "ekr.20080311060457.214", "b": "", "children": ["ekr.20060822140418", "ekr.20061008190905", "ekr.20070316182323", "ekr.20070806090235", "ekr.20071115102421", "ekr.20080106114331", "ekr.20080218154129", "ekr.20080311060457.215", "ekr.20080405074410.4"]}, {"h": "4.4.1...new colorizer, slideshow, multiple editors", "gnx": "ekr.20060822140418", "b": "", "children": ["ekr.20060830141224", "ekr.20060822140418.1", "ekr.20060601101643", "ekr.20060620094645", "ekr.20060629083400.1", "ekr.20060903102158"]}, {"h": "4.4.1 final", "gnx": "ekr.20060830141224", "b": "Leo 4.4.1 final                                            August 30, 2006\n\nLeo 4.4.1 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.\n- A new colorizer plugin controlled by jEdit language description files.\n- A new shadow files plugin that allows external files not to have sentinel lines.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help, toggle-invisibles,\n  and scroll-outline-left/right.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060830141224.2", "ekr.20060830141224.13"]}, {"h": "Removed warning about changed nodes", "gnx": "ekr.20060830141224.2", "b": "# Possibly a less intrusive warning should be used.\n", "children": []}, {"h": "Bugs fixed", "gnx": "ekr.20060830141224.13", "b": "", "children": ["ekr.20060830141224.14", "ekr.20060830141224.37", "ekr.20060830141224.45"]}, {"h": "Fixed serious bug in Paste Node as Clone", "gnx": "ekr.20060830141224.14", "b": "", "children": ["ekr.20060830141224.15", "ekr.20060830141224.16"]}, {"h": "Report", "gnx": "ekr.20060830141224.15", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3885494\nBy: mikecrowe\n\nOK, I found out how to duplicate this one.  This caused me a lot of grief until\nI found out what is causing it.\n\nNodeA:\n...Child1\n...Child2\n...Child3\n\nNodeB:\n...CloneChild1\n...CloneChild2\n...CloneChild3\n\nNow, put cursor on NodaA.  Ctrl-Shift-C (copy node).\nNext, put cursor on CloneChild3.  Paste Node as Clone\nYou should get an invalid paste clone message.\n\nNow, first cursor move (for me) puts NodeB as top node, ERASING all other nodes.\nWarning:  DO NOT SAVE NOW.  It will erase all other nodes.\n", "children": []}, {"h": "What I did", "gnx": "ekr.20060830141224.16", "b": "@nocolor\n\n- Created getLeoOutlineHelper.  This simplifies the code.\n- Init self.checking in getLeoFile and getLeoOutline.\n- Use self.checking in getVnodes, getVnode and createVnode.\n  Using self.checking in getVnode complicates an already way-too-complex method, but it can't be helped.\n", "children": []}, {"h": "Fixed minor .leoID.txt bug", "gnx": "ekr.20060830141224.37", "b": "", "children": ["ekr.20060830141224.38"]}, {"h": "Report", "gnx": "ekr.20060830141224.38", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3886250\nBy: znafets\n\nA .leoID.txt with a \\n behind the idstring creates a problem. \nIt will be read in g.app.leoID and being used as is when writing the Leo file.\n\nThe fix is in app.setLeoID -> << return if we can set leoID from \"leoID.txt\" >>\n", "children": []}, {"h": "Improved speed of unmark-all and corresponding undo/redo", "gnx": "ekr.20060830141224.45", "b": "", "children": ["ekr.20060830141224.46"]}, {"h": "Report", "gnx": "ekr.20060830141224.46", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3890031\nBy: terry_n_brown\n\nI have a tree of some 2500 nodes, run a script that marks\nprobably 1500-2000 of them, and that's quick (2-3 seconds max.).\n\nI can clear all the marks with:\n\nfor p in c.all_positions():\n    p.v.clearMarked()\n\nand that also is quick (2-3 seconds max.).  But when I use the menu option Unmark\nAll, that takes forever (1-2 minutes :-) running 100% CPU all the while.\n", "children": []}, {"h": "4.4.1 b4", "gnx": "ekr.20060822140418.1", "b": "Leo 4.4.1 beta 4                                            August 24, 2006\n\nLeo 4.4.1 beta 4 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.\n- A new colorizer plugin controlled by jEdit language description files.\n- A new shadow files plugin that allows external files not to have sentinel lines.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help, toggle-invisibles,\n  and scroll-outline-left/right.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060822140418.3", "ekr.20060822140418.69"]}, {"h": "Bugs fixed", "gnx": "ekr.20060822140418.3", "b": "", "children": ["ekr.20060822140418.4", "ekr.20060822140418.26", "ekr.20060822140418.29", "ekr.20060822140418.36", "ekr.20060822140418.39", "ekr.20060822140418.41", "ekr.20060822140418.49", "ekr.20060822140418.97"]}, {"h": "Added bindings to text panes for show-font command", "gnx": "ekr.20060822140418.4", "b": "http://sourceforge.net/forum/forum.php?thread_id=1542384&forum_id=10228\n", "children": []}, {"h": "Fixed kill-line, kill-word, kill-sentence, etc", "gnx": "ekr.20060822140418.26", "b": "http://sourceforge.net/forum/message.php?msg_id=3839322\n", "children": []}, {"h": "Fixed minor scrolling problem", "gnx": "ekr.20060822140418.29", "b": "http://sourceforge.net/forum/message.php?msg_id=3805745\n", "children": []}, {"h": "Fixed bug in backward-kill-word", "gnx": "ekr.20060822140418.36", "b": "http://sourceforge.net/forum/message.php?msg_id=3841115\n\nThere is still some doubt about what the best operation of this command should be.\n", "children": []}, {"h": "Fixed unicode bug in forward-word and backward-word commands", "gnx": "ekr.20060822140418.39", "b": "http://leo.zwiki.org/9RussianUnicodeWordsAreNotDetectedProperlyInBodyPane\n", "children": []}, {"h": "Fixed problem setting body background color", "gnx": "ekr.20060822140418.41", "b": "http://sourceforge.net/forum/message.php?msg_id=3874380\n\nSetting a value for background color in the body pane had no effect.\n\nThere were several problems, among which conflicting and confusing settings.\nIn particular, the insert_mode_bg_color setting overrides the body_text_background_color setting.\n\nI changed the code so that insert_mode_bg_color defaults to\nbody_text_background_color, and put all the settings for the body text in one\nplace.\n", "children": []}, {"h": "Disabled incremental colorizing in new colorizer when there are multiple editors", "gnx": "ekr.20060822140418.49", "b": "", "children": []}, {"h": "Removed component classes", "gnx": "ekr.20060822140418.97", "b": "These were overly complicated an not useful.\n", "children": []}, {"h": "New features", "gnx": "ekr.20060822140418.69", "b": "", "children": ["ekr.20060822140418.76", "ekr.20060822140418.77", "ekr.20060822140418.88", "ekr.20060822140418.92", "ekr.20060822140418.70"]}, {"h": "Added scroll-outline-left/right commands", "gnx": "ekr.20060822140418.76", "b": "http://sourceforge.net/forum/message.php?msg_id=3834645\n", "children": []}, {"h": "Generalized bracket flasher", "gnx": "ekr.20060822140418.77", "b": "http://sourceforge.net/forum/message.php?msg_id=3802513\n\nAdded these settings:\n\n@string open_flash_brackets = ([{\n@string close_flash_brackets = )]}\n", "children": []}, {"h": "Leo *already* supports Python decorators", "gnx": "ekr.20060822140418.88", "b": "Leo *already* outputs decorators correctly, assuming the decorator does not conflict with a Leo directive.\n", "children": []}, {"h": "Wrote script to convert g.es to g.et where appropriate", "gnx": "ekr.20060822140418.92", "b": "http://sourceforge.net/forum/message.php?msg_id=3858363\n", "children": []}, {"h": "Created menu font settings", "gnx": "ekr.20060822140418.70", "b": "http://sourceforge.net/forum/message.php?msg_id=3802624\n\nAdded @font menu font setting\n", "children": []}, {"h": "4.4.1 b1", "gnx": "ekr.20060601101643", "b": "Leo 4.4.1 beta 1                                            June 3, 2006\n\nLeo 4.4.1 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- A new colorizer plugin controlled by jEdit language description files.\n  At present this plugin only reliably colors @language python code.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help and toggle-invisibles.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060601101958.1", "ekr.20060601102802", "ekr.20060601102802.2", "ekr.20060601101958.28"]}, {"h": "Fixed bugs", "gnx": "ekr.20060601101958.1", "b": "", "children": ["ekr.20060601101958.56", "ekr.20060601101958.2", "ekr.20060601101958.6", "ekr.20060601101958.13", "ekr.20060601101958.14", "ekr.20060601101958.16", "ekr.20060603082009"]}, {"h": "The Open Python Window command runs Idle in a separate process", "gnx": "ekr.20060601101958.56", "b": "This fixes all conflicts between Leo and Idle.\n", "children": []}, {"h": "Fixed crasher in searchbox plugin", "gnx": "ekr.20060601101958.2", "b": "http://sourceforge.net/forum/message.php?msg_id=3729858\n\nFixed crasher in Leo 4.4 by initing self.p in Quickfind ctor.\n", "children": []}, {"h": "Fixed binding problems in leoSettings.leo reported by Check bindings script.", "gnx": "ekr.20060601101958.6", "b": "http://sourceforge.net/forum/message.php?msg_id=3737879\n", "children": []}, {"h": "Fixed crasher in macros plugin", "gnx": "ekr.20060601101958.13", "b": "http://sourceforge.net/forum/message.php?msg_id=3737745\n\n- Added event keyword argument to parameterize function.\n", "children": []}, {"h": "Fixed crasher in  UNL plugin", "gnx": "ekr.20060601101958.14", "b": "http://sourceforge.net/forum/message.php?msg_id=3737745\n\nThe fix was to add a c argument to g.findTopLevelNode and g.findNodeInTree.\n", "children": []}, {"h": "Suppressed traceback in g.callers when the call stack isn't deep enough", "gnx": "ekr.20060601101958.16", "b": "", "children": []}, {"h": "Fixed long-standing bug involving @comment and @language", "gnx": "ekr.20060603082009", "b": "http://sourceforge.net/forum/message.php?msg_id=3761285\n\nThere were actually two bugs:\n\n- parseLeoSentinel was not recognizing the closing comment delim (!!)\n\n- putDirective was incorrectly setting delims for @language and @comment delims.\n  This is wrong: the init code calls scanAllDirectives, and the comment delims\n  **must not change** in the file (except as the result of @delims.)\n", "children": []}, {"h": "New features, commands & plugins", "gnx": "ekr.20060601102802", "b": "", "children": ["ekr.20060601101958.245", "ekr.20060601101958.70", "ekr.20060601101958.52", "ekr.20060601101958.58", "ekr.20060603072938", "ekr.20060601101958.277", "ekr.20060601101958.172", "ekr.20060601101958.234", "ekr.20060603081537"]}, {"h": "Support for multiple editors in the body pane", "gnx": "ekr.20060601101958.245", "b": "The add-editor command adds a new editor, the delete-editor command deletes the\npresently selected editor, and the cycle-editor-focus command cycles focus\nbetween editors in the body text.\n", "children": []}, {"h": "Improved searches", "gnx": "ekr.20060601101958.70", "b": "- Allow \\1, \\2, etc. replacements in re searches.\n\n- Allow \\n and \\t in plain searches.\n\n- The shortcut for the replace-string command now changes from the find command\nto the replace command.\n", "children": []}, {"h": "Added debug command", "gnx": "ekr.20060601101958.52", "b": "This runs the winpdb debugger in a separate process.\n\nThe winpdb debugger must be installed for this command to work.\n\nFor more details, see: http://webpages.charter.net/edreamleo/debuggers.html\n", "children": []}, {"h": "Added Debug button to scripting plugin", "gnx": "ekr.20060601101958.58", "b": "", "children": []}, {"h": "Added python-help command", "gnx": "ekr.20060603072938", "b": "This prompts for a string s, then puts the result of help(s) in Leo's log pane.\n", "children": []}, {"h": "Added toggle-invisibles and hide-invisibles commands", "gnx": "ekr.20060601101958.277", "b": "", "children": []}, {"h": "Added run-unit-test command", "gnx": "ekr.20060601101958.172", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3575014\n\nActually, the run-unit-tests command first appeared in Leo 4.4, but it never got\nproperly announced.\n", "children": []}, {"h": "The help-for-command command now works for almost all commands", "gnx": "ekr.20060601101958.234", "b": "", "children": []}, {"h": "Added shortcut_button plugin", "gnx": "ekr.20060603081537", "b": "This plugin creates a 'Shortcut' button in the icon area. Pressing the Shortcut\nbutton creates *another* button which when pressed will select the presently\nselected node at the time the button was created.\n", "children": []}, {"h": "New and improved settings", "gnx": "ekr.20060601102802.2", "b": "", "children": ["ekr.20060601101958.174", "ekr.20060601101958.264", "ekr.20060601101958.244", "ekr.20060601101958.276"]}, {"h": "Added @bool idle_redraw setting", "gnx": "ekr.20060601101958.174", "b": "http://sourceforge.net/forum/message.php?msg_id=3729823\n\nThis is intended to help with redraw problems on Linux.\n", "children": []}, {"h": "Added autoindent_in_nocolor_mode setting", "gnx": "ekr.20060601101958.264", "b": "@nocolor\n\nleoSettings.leo now contains the following setting, with default as shown:\n\n@bool autoindent_in_nocolor_mode = True\n\n\nTrue:  auto-indent regardless of how text is colored.\nFalse: disable auto-indenting if in range @nocolor or @kill.\n\nThis will make the default action work as Roger Erens requested, and will allow\nyou to make Leo work exactly as before if you want.\n", "children": []}, {"h": "Added warnings about the expanded_click_area setting", "gnx": "ekr.20060601101958.244", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3737745\n\nAdded warnings in various places that the setting:\n\n@bool expanded_click_area = True\n\ninterferes with the  Universal Scrolling plugin.\n", "children": []}, {"h": "Removed support for @shortcut (@shortcuts remains)", "gnx": "ekr.20060601101958.276", "b": "@shortcut nodes never worked and apparently nobody ever used them.\n", "children": []}, {"h": "Minor improvements", "gnx": "ekr.20060601101958.28", "b": "", "children": ["ekr.20060601101958.218", "ekr.20060601101958.235", "ekr.20060601101958.238", "ekr.20060601101958.239"]}, {"h": "Finished Cmds menu", "gnx": "ekr.20060601101958.218", "b": "", "children": []}, {"h": "Improved show-fonts command", "gnx": "ekr.20060601101958.235", "b": "It is now clearer what the selected values are.\n", "children": []}, {"h": "Strip quotes from color, font settings.", "gnx": "ekr.20060601101958.238", "b": "", "children": []}, {"h": "Warn about invalid Enter and Leave key bindings", "gnx": "ekr.20060601101958.239", "b": "", "children": []}, {"h": "4.4.1 b2", "gnx": "ekr.20060620094645", "b": "Leo 4.4.1 beta 2                                            June 23, 2006\n\nLeo 4.4.1 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- A new colorizer plugin controlled by jEdit language description files.\n  At present this plugin only reliably colors @language python code.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help and toggle-invisibles.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060620094645.34", "ekr.20060620094645.78", "ekr.20060620094645.85", "ekr.20060620094645.302", "ekr.20060622132524"]}, {"h": "Bugs fixed", "gnx": "ekr.20060620094645.34", "b": "", "children": ["ekr.20060620094645.35", "ekr.20060620094645.43", "ekr.20060620094645.44", "ekr.20060620094645.45", "ekr.20060620094645.46", "ekr.20060620094645.50", "ekr.20060620094645.52", "ekr.20060620094645.64", "ekr.20060620094645.68", "ekr.20060620094645.76", "ekr.20060620094645.77", "ekr.20060622130815", "ekr.20060622130815.3"]}, {"h": "Made sure calltip always adds '('", "gnx": "ekr.20060620094645.35", "b": "", "children": []}, {"h": "word matches now succeed if first character of the pattern is not in word-chars.", "gnx": "ekr.20060620094645.43", "b": "", "children": []}, {"h": "Dialogs now bring the Leo window back to the front", "gnx": "ekr.20060620094645.44", "b": "Called c.bringToFront() after open/save/import dialogs.\n", "children": []}, {"h": "Fixed unit test: ensure that body gets focus after ending editing", "gnx": "ekr.20060620094645.45", "b": "FAIL: @test return ends editing of headline\n\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoTest.py\", line 155, in runTest\n    exec script + '\\n' in {'c':c,'g':g,'p':p}\n  File \"<string>\", line 14, in ?\nAssertionError: oops2\n\n----------------------------------------------------------------------\nRan 438 tests in 193.628s\n\nFAILED (failures=1)\n>>>\n", "children": []}, {"h": "Remember scrolling postion, insert point and selection range in multiple editors", "gnx": "ekr.20060620094645.46", "b": "http://sourceforge.net/forum/message.php?msg_id=3764077\n", "children": []}, {"h": "Fix crasher in kill-region command", "gnx": "ekr.20060620094645.50", "b": "", "children": []}, {"h": "Fixed bug: cycle-editor hung Leo", "gnx": "ekr.20060620094645.52", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3771032\nBy: paulpaterson\n\nThe cycle-editor-focus command causes Leo to lock up  on my machine (WinXP,\nPython 2.4).\n\n@color\n", "children": []}, {"h": "Fixed crasher in init code", "gnx": "ekr.20060620094645.64", "b": "http://sourceforge.net/forum/message.php?msg_id=3771014\n", "children": []}, {"h": "use g.stripBrackets instead of lstrip and rstrip", "gnx": "ekr.20060620094645.68", "b": "lstrip and rstrip do not exist in Python 2.2.1.\n", "children": []}, {"h": "Restore cursor when changing focus in editors", "gnx": "ekr.20060620094645.76", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3778764\nBy: davidmcnab\n\nWhen I hit my 'change-editor-focus' binding, the cursor jumps\nto unpredictable places within the next editor pane.\n", "children": []}, {"h": "Undo restores focus again", "gnx": "ekr.20060620094645.77", "b": "", "children": []}, {"h": "Updated row/col indicators when using arrow keys", "gnx": "ekr.20060622130815", "b": "http://sourceforge.net/forum/message.php?msg_id=3790857\n", "children": []}, {"h": "Fixed show-invisibles crasher", "gnx": "ekr.20060622130815.3", "b": "http://sourceforge.net/forum/message.php?msg_id=3790814\n", "children": []}, {"h": "Code level", "gnx": "ekr.20060620094645.78", "b": "", "children": ["ekr.20060620094645.79", "ekr.20060622130815.9"]}, {"h": "Simplified gui bindings", "gnx": "ekr.20060620094645.79", "b": "Added makeMasterGuiBinding.\n", "children": []}, {"h": "Created g.app.gui.makeScriptButton", "gnx": "ekr.20060622130815.9", "b": "", "children": []}, {"h": "New & improved features", "gnx": "ekr.20060620094645.85", "b": "", "children": ["ekr.20060620094645.86", "ekr.20060620094645.96", "ekr.20060620094645.97", "ekr.20060620094645.103", "ekr.20060620094645.106", "ekr.20060620094645.107", "ekr.20060620094645.108", "ekr.20060620094645.109", "ekr.20060620094645.194", "ekr.20060620094645.225", "ekr.20060620094645.231", "ekr.20060620094645.232", "ekr.20060620094645.233", "ekr.20060620094645.234", "ekr.20060620094645.242", "ekr.20060620094645.243", "ekr.20060620094645.252", "ekr.20060620094645.258", "ekr.20060620094645.286", "ekr.20060622130553", "ekr.20060622130553.2"]}, {"h": "Improved filename completion", "gnx": "ekr.20060620094645.86", "b": "", "children": []}, {"h": "Added support for --> command-name in @mode nodes", "gnx": "ekr.20060620094645.96", "b": "", "children": []}, {"h": "Better listings for print-commands and print-bindings & mode-help commands", "gnx": "ekr.20060620094645.97", "b": "", "children": []}, {"h": "Fixed find-character & find-word commands", "gnx": "ekr.20060620094645.103", "b": "", "children": []}, {"h": "Better printing of bindings (period -> .) etc", "gnx": "ekr.20060620094645.106", "b": "", "children": []}, {"h": "Added support for !command, !insert and !overwrite bindings", "gnx": "ekr.20060620094645.107", "b": "Leo now supports bindings of the form:\n\ncommand-name !command = shortcut\n\nYou will find examples in leoSettings.leo in the node\n\n@keys EKR bindings: vim mode bindings-->Shortcuts-->@shortcuts top-level keys\n\nSuch bindings are essential for all plain key bindings that are *only* to be executed in command mode.  Most, but *not* all plain key bindings should be bound in the !command 'pane'.  The two exceptions presently are '.' which *always* invokes the autocompleter code and '(' which *always* invokes the calltips code.\n\nIt is now possible to have a *single* set of key bindings be 'Emacs-like' and\n'Vim-like' at the same time. See the node EKR bindings: vim mode bindings in\nleoSettings.leo.\n\nOne setting switches between emacs-like operation and vim-like operation:\n\nFor emacs, use:\n@strings  [ignore,insert,overwrite] top_level_unbound_key_action = insert\n\nFor vim, use:\n@strings  [ignore,insert,overwrite] top_level_unbound_key_action = ignore\n\nVim-like modes are made possible by two new features:\n\n1. Entry commands in @mode nodes. In the body of @mode nodes, lines of the form\n\n--> command-name\n\ntell Leo to execute the command when entering the mode. More than one such lines\nmay exist; Leo executes them in the order they appear. Entry commands are\npotentially a very powerful feature. To avoid chaos, entry commands should not\nalter the minibuffer :-)\n\n2. Silent modes. In order to keep the selected text visible, Leo must *not* move\nfocus into the minibuffer for editing commands. The set-silent-mode command\ntells Leo to treat the mode described in the @mode node as a silent mode. A true\nmode is created, but it only affects key bindings and the minibuffer never\nbecomes active.\n\nThus, all @mode nodes for vim-like modes contain the following line:\n\n--> set-silent-mode.\n", "children": []}, {"h": "Improved check bindings script in leoSettings.leo", "gnx": "ekr.20060620094645.108", "b": "All sets of key bindings in leoSettings.leo now start with @keys in the headline\nof the root node. The @keys convention is used *only* by the Check Bindings\nscript. So now, instead of having a static list of key bindings sets (which is\nguaranteed to get out-of-date), the Check Bindings script can scan all of\nleoSettings.leo for sets of key bindings.\n\nAnother improvement to the Check Bindings script. Besides doing a better job of\nchecking, you may now specify optional commands, such as commands defined in\nplugins. The Check Bindings will not complain if the commands don't presently\nexists in k.commandsDict. You specify such commands by adding items to the\nfollowing lists in the root node of the Check Bindings script, i.e., the node\nButtons-->@button Check Bindings.\n\noptionalCommandPrefixes = ['group-operations']\noptionalCommandNames = []\n", "children": []}, {"h": "Improved isearch & added isearch-with-present-options command", "gnx": "ekr.20060620094645.109", "b": "- added isearch-with-present-options.\n- many small improvements to isearch code.\n- regex searches now highlighted properly.\n- isearches are (and should be) confined to a single body text.\n- Backspace now handled properly.\n\nA small glitch. Starting a regexp pattern with '.' will cause the entire pattern\nto turn red initially, which is technically correct but perhaps a bit\nconfusing.\n", "children": []}, {"h": "Use last shortcut defined", "gnx": "ekr.20060620094645.194", "b": "http://sourceforge.net/forum/message.php?msg_id=3767016\n", "children": []}, {"h": "selfInsertCommand sets the column used by up/down arrows", "gnx": "ekr.20060620094645.225", "b": "", "children": []}, {"h": "Added toggle-autocompleter and toggle-calltips commands", "gnx": "ekr.20060620094645.231", "b": "The commands that enable and disable calltips now update the status line.\n", "children": []}, {"h": "Script buttons now create press-xxx-button commands", "gnx": "ekr.20060620094645.232", "b": "Creating a script button creates the press-xxx-button command,\nand you can specify settings for such commands using @shortcuts nodes.\n", "children": []}, {"h": "print-bindings command now properly sorts bindings", "gnx": "ekr.20060620094645.233", "b": "", "children": []}, {"h": "Allow @shortcuts bindings to apply to press-xxx-commands", "gnx": "ekr.20060620094645.234", "b": "@nocolor\n\nThe scripting plugin now creates a press-x-button command for each scripting button named x.\nYou can bind shortcuts to such commands by placing @shortcuts nodes in an @setting tree in the outline containing the @button nodes.  test.leo shows an example.\n\nWhat I did:\n\n- The scripting plugin now defines button bindings with the 'button' pane specifier.\n  This takes precedence over all other specifiers.\n\n- k.bindKeyToDict now does a better job of detecting and warning about redefinitions.\n\n- k.printBindings now properly sorts entries.\n  This was causing me a great deal of confusion.\n\n- k.registerCommand now properly gets shortcuts from settings if possible,\n  and makes bindings in the new 'button' pane specifier.\n\n- masterKeyHandlerHelper now supports the 'button' pane specifier,\n  which overrides all others.\n\n@color\n", "children": []}, {"h": "Added support for @abbrev nodes in leoSettings.leo", "gnx": "ekr.20060620094645.242", "b": "", "children": []}, {"h": "Created open-users-guide command", "gnx": "ekr.20060620094645.243", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3772475\n\nMaybe put a link to the html TOC into the Help Menu,\n\"%leodir%/doc/html/leo_TOC.html\".\n\nThis is more intuitive (to newbies) than the LeoDocs.leo link.  I found this\nvery confusing in the beginning.\n\nWhat I did:\n\n- Created open-users-guide command.\n- Created Open Users Guide menu item.\n- Removed Open Offline Tutorial menu item.\n\n@color\n", "children": []}, {"h": "scroll-up/down commands now scroll the outline if focus is in outline pane", "gnx": "ekr.20060620094645.252", "b": "# Important: this can be done better using per-pane bindings as in the default leoSettings.leo.\n", "children": []}, {"h": "Cycle-focus command cycles through tabs and editors", "gnx": "ekr.20060620094645.258", "b": "", "children": []}, {"h": "Allow @mode outside of leoSettings.leo", "gnx": "ekr.20060620094645.286", "b": "", "children": []}, {"h": "Added section about upgrading settings", "gnx": "ekr.20060622130553", "b": "\nhttp://sourceforge.net/forum/message.php?msg_id=3784292\n\nhttp://webpages.charter.net/edreamleo/installing.html#updating-settings-from-previous-versions-of-leo\n", "children": []}, {"h": "Documented how to turn @buttons into plugins", "gnx": "ekr.20060622130553.2", "b": "http://sourceforge.net/forum/message.php?msg_id=3778946\n\nhttp://webpages.charter.net/edreamleo/writingPlugins.html#turning-script-buttons-into-plugins\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20060620094645.302", "b": "", "children": ["ekr.20060620094645.303", "ekr.20060620094645.304", "ekr.20060620094645.305", "ekr.20060620094645.306", "ekr.20060620094645.307", "ekr.20060620094645.308", "ekr.20060620094645.309"]}, {"h": "Added doc-only option to rst3", "gnx": "ekr.20060620094645.303", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3767601\nhttp://sourceforge.net/forum/message.php?msg_id=3768413\nCraig\n\nI have an @thin file with @Doc and @Code sections scattered though out the tree,\nwhere each node has one or more doc and code sections.\n\nI would like to be able to use the rst3 plugin to produce an html file containing\nonly info from the doc sections, ignoring the code sections.\n\nI added the \n", "children": []}, {"h": "Fixed bug in rst doc_only_mode", "gnx": "ekr.20060620094645.304", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3770732\nBy: ktenney\n\nIn << Theory of operation of find/change >> \nthe opening paragraph does not appear in the html,\n", "children": []}, {"h": "Support show_headlines options in doc-only mode in rst3 plugin", "gnx": "ekr.20060620094645.305", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3780216\nCraig\n\nIn Doc_Only_Mode the rst3 plugin outputs headlines irrespective of the show_headlines\nsetting.  The other modes do honor this setting.\n\nI scratched around and managed to fix this by changing the node: rst3.py-->class\nrstClass-->write methods-->writeBody & helpers-->handleDocOnlyMode\n\nIn Line 25 I added a new statement:\n     if showHeadlines:\nand indented the following 3 lines to make them conditional on this if:\n        if result or showThisHeadline or showOrganizers or p == self.topNode:\n            # g.trace(len(result),p.headString())\n            self.writeHeadlineHelper(p)\n", "children": []}, {"h": "Fixed bug in UNL plugin", "gnx": "ekr.20060620094645.306", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3785400\nBy: craigj3\n\n\nI have a @url node pointing to a Leo file which has a filename with %20 in it.\nWhen I double-click this node I get:\n\n\"can not open: \\\\\\Documents%20and%20Settings\\tftcj1.EDCON\\My%20Documents\\Proj\\RI\nCAA\\PcasCellLink.leo\"\n\nTaking a look with a debugger, I see that Plugins-->Enhancing the icon and status\nareas-->@thin UNL.py-->onUrl1 line 29ish does not covert %20 to spaces before\ncalling openWithFileName.\n", "children": []}, {"h": "Improved image plugin", "gnx": "ekr.20060620094645.307", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3783225\nCraig\n\nI am looking at the image plugin for organizing photos, and discovered that\nit is limited to gif files only.  I found this a bit silly as installing the\nImageTk module from the Python Imaging Library and making a two line change\nto the plugin enables it to be used on practically any image type.\n\nThe two line are:\n1.  a new import:-\nimport ImageTk\n\n2. In <<select image>> line 9 change \nphoto = Tk.PhotoImage(master=a.root, file=filename)\n\nto\n\nphoto = ImageTk.PhotoImage(master=a.root, file=filename)\n", "children": []}, {"h": "Fixed path problem with rst3 plugin", "gnx": "ekr.20060620094645.308", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=3779706\nBy: mstarzyk\n\nMy point was not about not found CSS, but that .html files are written to\ndefault_path directory, but .txt files are not written to default_path\ndirectory.\n", "children": []}, {"h": "Fixed crashers in scheduler plugin", "gnx": "ekr.20060620094645.309", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3784636\nBy: craigj3\n\nI note that the scheduler plugin is currently broken.\n\nThe problem was that all commands now get an event arg.\n\nThe Begin Recording and End Recording commands do not seem to work...\n", "children": []}, {"h": "Settings", "gnx": "ekr.20060622132524", "b": "", "children": ["ekr.20060620094645.299"]}, {"h": "Added editor_orientation setting", "gnx": "ekr.20060620094645.299", "b": "http://sourceforge.net/forum/message.php?msg_id=3778744\n\nAdded editor_orientation setting: valid values are vertical and horizontal.\n", "children": []}, {"h": "4.4.1 b3", "gnx": "ekr.20060629083400.1", "b": "Leo 4.4.1 beta 3                                            June 29, 2006\n\nLeo 4.4.1 beta 3 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- A new colorizer plugin controlled by jEdit language description files.\n  At present this plugin only reliably colors @language python code.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help and toggle-invisibles.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060629083935.2", "ekr.20060629083935.74", "ekr.20060629083935.96"]}, {"h": "Bugs fixed", "gnx": "ekr.20060629083935.2", "b": "", "children": ["ekr.20060629083935.3", "ekr.20060629083935.8", "ekr.20060629083935.15", "ekr.20060629083935.25", "ekr.20060629083935.32", "ekr.20060629083935.61", "ekr.20060629083935.70", "ekr.20060629083935.71"]}, {"h": "Fixed recent bug: Ctrl-g does not work in @mode nodes", "gnx": "ekr.20060629083935.3", "b": "", "children": []}, {"h": "Update column display when typing", "gnx": "ekr.20060629083935.8", "b": "http://sourceforge.net/forum/message.php?msg_id=3795258\n\nThe column display doesn't change while typing.\n\n", "children": []}, {"h": "Fixed long-standing problem reporting indentation errors", "gnx": "ekr.20060629083935.15", "b": "http://sourceforge.net/forum/message.php?msg_id=3510448\n\nThe fix was to getLastTracebackFileAndLineNumber.\n\nI also created handleScriptException.\n", "children": []}, {"h": "Fixed long-standing bug in Remove Sentinels command", "gnx": "ekr.20060629083935.25", "b": "http://sourceforge.net/forum/message.php?msg_id=3413805\n", "children": []}, {"h": "Fixed long-standing bugs in import code", "gnx": "ekr.20060629083935.32", "b": "- Underindented comments do not end the scan of Python classes or methods.\n- Handles continued signature lines properly.\n", "children": []}, {"h": "Overwrite mode now works in headllines", "gnx": "ekr.20060629083935.61", "b": "Note: Editing headline text will happen in insert mode unless\n\n@strings top_level_unbound_key_action = overwrite\n", "children": []}, {"h": "Fixed crasher in masterCommand", "gnx": "ekr.20060629083935.70", "b": "After executing a command we must be careful to test c.exists.\n", "children": []}, {"h": "Improved view-lossage command", "gnx": "ekr.20060629083935.71", "b": "- A better trace, and the trace goes to the log pane.\n\n- Eliminated k.keysymHistory: Tk keysyms are pretty useless.\n", "children": []}, {"h": "New features", "gnx": "ekr.20060629083935.74", "b": "", "children": ["ekr.20060629083935.75", "ekr.20060629083935.76", "ekr.20060629083935.93"]}, {"h": "Finished repeat-complex-command", "gnx": "ekr.20060629083935.75", "b": "@nocolor\n\n- Improved prompt.\n- Added message if no previous complex command.\n- Added mode entries.\n", "children": []}, {"h": "Read leoSettings.leo from the directory containing the .leo file", "gnx": "ekr.20060629083935.76", "b": "http://sourceforge.net/forum/message.php?msg_id=3794854\n", "children": []}, {"h": "Flash matching parens & corresponding settings", "gnx": "ekr.20060629083935.93", "b": "@killcolor\n\nHere are the relevant settings:\n\n@bool flash_matching_brackets: True: flash matching bracket when typing (, ), [, ], { or }.\n\n@color flash_brackets_background_color and @color flash_brackets_foreground_color.\n\n@int flash_brackets_count: The number of times to flash matching brackets.\n\n@int flash-brackets-delay: One half the total cycle time of bracket flashes, in milliseconds.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20060629083935.96", "b": "", "children": ["ekr.20060629083935.97", "ekr.20060629083935.98", "ekr.20060629083935.99", "ekr.20060629083935.100"]}, {"h": "Added standard bindings for Ctrl-y (yank) and Ctrl-k (kill-line)", "gnx": "ekr.20060629083935.97", "b": "# Ctrl-k is no longer needed by the match-brackets command now that brackets flash automatically.\n", "children": []}, {"h": "Added @bool warn_about_redefined_shortcuts setting", "gnx": "ekr.20060629083935.98", "b": "", "children": []}, {"h": "Added @bool trace_bind_key_exceptions setting", "gnx": "ekr.20060629083935.99", "b": "When True, this provides a full traceback for all exceptions taken when binding keyboard shortcuts.\n", "children": []}, {"h": "Added bracket flash settings", "gnx": "ekr.20060629083935.100", "b": "@killcolor\n\n@bool flash_matching_brackets: True: flash matching bracket when typing (, ), [, ], { or }.\n\n@color flash_brackets_background_color and @color flash_brackets_foreground_color.\n\n@int flash_brackets_count: The number of times to flash matching brackets.\n\n@int flash-brackets-delay: One half the total cycle time of bracket flashes, in milliseconds.\n", "children": []}, {"h": "4.4.1.1 final", "gnx": "ekr.20060903102158", "b": "Leo 4.4.1.1 final                                       September 3, 2006\n\nLeo 4.4.1.1 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.1.1 corrects a serious last-minute unicode bug in Leo 4.4.1.\nThis version also adds the new slideshow plugin.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.1:\n----------------------------\n- Leo outputs decorators correctly, provided that the decorator is not a Leo directive.\n- A new colorizer plugin controlled by jEdit language description files.\n- A new shadow files plugin that allows external files not to have sentinel lines.\n- A new slide show plugin allows you to use Leo outlines as slide shows.\n- Multiple editors in Leo's body pane.\n- Search commands now support regex replace patterns: \\1, \\2, etc.\n- Support for external debuggers: see http://webpages.charter.net/edreamleo/debuggers.html\n- The scripting plugin now creates a Debug Script button.\n- Several new commands including run-unit-test, python-help, toggle-invisibles,\n  and scroll-outline-left/right.\n- The help-for-command commands now contains information for almost all commands.\n- A new shortcut_button plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.4.2... opml, zodb, sax, myLeoSettings, leoPymacs, autocontract, outline nav", "gnx": "ekr.20061008190905", "b": "", "children": ["ekr.20060928172040", "ekr.20061008190655", "ekr.20061020155306", "ekr.20061026095728"]}, {"h": "4.4.2 beta 1", "gnx": "ekr.20060928172040", "b": "Leo 4.4.2 beta 1                                  September 29, 2006\n\nLeo 4.4.2 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.2:\n----------------------------\n- You can now store settings in myLeoSettings.leo without fear of those settings\n  being changed by cvs updates or in future versions of Leo.\n- Leo's vnode and tnode classes are now completely independent of the rest of Leo.\n  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.\n- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,\n  i.e., they can optionally derive from ZODB.Persistence.Persistent.\n  See Chapter 17: Using ZODB with Leo for details.\n- The leoOPML plugin defines commands to read and write OPML files.\n- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.\n- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.\n- Much faster navigation through the outline using Alt-arrow keys.\n- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.\n- The find command now closes nodes not needed to show the node containing the present match.\n- Numerous changes that make Leo easier to use without using a mouse.\n- Many new minibuffer commands now appear in the Cmds menu.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20060928172525.81", "ekr.20060928195040", "ekr.20060928195040.1"]}, {"h": "The 'big reorg':  vnode, tnode and position classes are independent of the rest of Leo", "gnx": "ekr.20060928172525.81", "b": "What I did:\n\n- Removed c argument from t, v and p ctors.\n- Removed c argument from most position methods.\n    - In particular, p.link, p.unlink, v.link and v.unlink no longer update c.currentPosition()\n    - Moved all position methods that still had a c argument to the Commands class.\n- Removed p.all_positions.\n- Added c.findRootPosition and c.findRootVnode.\n- c.rootPosition now returns c.findRootPosition(c.currentPosition())\n\nAs a result:\n\n- The tnode, vnode and position classes are *completely* independent of Leo.\n  In particular, no tnode, vnode or position method gets a c argument.\n- The p.link, p.unlink, v.link and v.unlink are significantly simpler.\n- The machinery for keeping the root position up-to-date is\n  simple and confined to one place in the Commands class.\n", "children": []}, {"h": "New features", "gnx": "ekr.20060928195040", "b": "", "children": ["ekr.20060928194633.1", "ekr.20060928172525.195", "ekr.20060928172525.172", "ekr.20060928172525.180", "ekr.20060928172525.198", "ekr.20060928172525.237", "ekr.20060928172525.240", "ekr.20060928172525.252", "ekr.20060928172525.167"]}, {"h": "myLeoSettings.leo", "gnx": "ekr.20060928194633.1", "b": "The myLeoSettings.leo file is a way of ensuring that your customized settings\nare not altered when updating Leo from cvs or while installing a new version of\nLeo. The myLeoSettings.leo acts much like Python's site-customize.py file. The\nmyLeoSettings.leo file will never be part of any Leo distribution. This solution\nis *much* better than trying to update leoSettings.leo with scripts.\n\nLeo loads settings from myLeoSettings.leo *after* loading settings from\nleoSettings.leo files but *before* loading settings from the .leo file being\nopened.\n", "children": []}, {"h": "Created simple support for ZODB databases", "gnx": "ekr.20060928172525.195", "b": "@nocolor\n\nMy present thinking is that scripts should be able to store/retrieve persistent\nobjects to/from the zodb. That is, the zodb plugin is likely to be retired.\n\nLeo's vnode and tnode classes now derive from ZODB.Persistence.Persistent if\nleoNodes.use_zodb is True. It remains to be seen whether having use_zodb = True\nwill cause any serious problems.\n\nSee the posting below (Scripting using zodb) for latest details.\n\nSee the node 'zodb get/put buttons' in test.leo for examples of how scripts can access zodb easily.\n\nCreated g.init_zodb and v.detach.\n", "children": ["ekr.20060928172525.197"]}, {"h": "Scripting using zodb", "gnx": "ekr.20060928172525.197", "b": "> Do you see zodb as persisting Leo files or Leo nodes?\n\nInteresting question.  I now see the zodb plugin as a proof-of-concept for *user-defined* scripts.  The zodb plugin is probably going to go away.\n\nLet us suppose that db is a ZODB.DB instance. (To see how to create such an instance, see the init_zodb method in the zodb plugin.  Perhaps I'll defines something like g.openZodb to make this easier.)  Then the statements:\n\nconnection = db.open()\nroot = connection.root()\nroot[aKey] = v\nget_transaction().commit()\nconnection.close()\n\nwill write all of v's data (all vnodes and tnodes) to the zodb.  This is true whatever v is: it can be the root of an entire outline, or any suboutline.  If you want to write a single node, you would have to 'detach' that node from the outline.  You can do this by copying the node and then unlinking the node from its descendants. Perhaps I could add a convenience method to the vnode class to make this easier.\n\n>Do you see zodb work as providing enhanced access to nodes across multiple files?\n\nScripts could do so easily.  Happily, the distinction between 'long-lived' and 'short-lived' connections is not important for scripts: a script should hold a connection open only for as long as needed.  So it would be easy to write any number of vnode trees to the zodb.  Later, another script could access any of the data in the zodb by zodb key.  Like this:\n\nconnection = db.open()\nroot = connection.root()\nv = root.get(aKey)\np = leoNodes.position(v,[])\n\nAfter running this script, p is a position representing the root of the tree of 'imported' vnodes.  The script above does not 'connect' the imported trees to an outline, nor should it do so.  As I write this, I realize that the position ctor should make the second argument optional, so that leoNodes.position(v) would be equivalent to leoNodes.position(v,[]).\n\nEach script should open at most connection at a time and be sure to close any zodb connection it creates.  The proper way to do this is in a finally statement, like this:\n\ntry:\n....connection = db.open()\n....root = connection.root()\n....v = root.get(aKey)\n....p = leoNodes.position(v,[])\n....<< do something with the nodes in p's tree>>\nfinally:\n....get_transaction().commit()\n....connection.close()\n\nIn short, the recent changes to Leo's vnode and tnode classes give scripts the ability to save/retrieve Leo data to/from the zodb in any way a script wants, without any further support from Leo, or from me.\n\nI shall spend an hour or two more with the zodb plugin, but it looks to me that the plugin has served its purpose.  Rather than trying to guess how people will want to use the zodb, it will be simpler and more general to have people write scripts that do exactly what they want.  In particular, such scripts can easily sidestep the problems with multiple open connections.\n\nEdward\n\nP.S. Please note that the scripts shown above could not have been written without all the recent work with the zodb plugin and the big code reorg.\n\nP.P.S. A couple of unit tests involving the new v/t.__hash__ methods just failed, so it may be just a little bit longer before the code on cvs is truly zodb ready.  I'll also be working on example scripts and the convenience methods described above.\n\nEKR\n", "children": []}, {"h": "Improved help-for-command", "gnx": "ekr.20060928172525.172", "b": "It now prints the binding for the command.\n", "children": []}, {"h": "Improved  quick-find commands", "gnx": "ekr.20060928172525.180", "b": "Rewrote moveWordHelper. It now avoids Tk and regexes.  *Much* simpler.\n", "children": []}, {"h": "Improved how Leo works w/o the mousre", "gnx": "ekr.20060928172525.198", "b": "- Removed all modes except Alt-C mode.\n- Use Shift-arrows for outline moves when focus is in outline pane.\n- Put help / apropos commands in help menu.\n- Put focus commands in Cmds menu.\n- When focus is in outline, normal character navigates like Windows explorer.\n- Put Scrolling commands in Cmds menu.\n- Screened out(some) unwanted characters from affecting outline navigation.More work is needed.\n- Esc character is never inserted into text.\n- Replaced @button clones-tab with @command clones-tab.\n- Scripting plugins now sets verbose=True so @commands get shown.\n* Alt keys (outline move commands) should set focus to outline even if nothing else happens.\n- Closing a window no longer puts focus in limbo: added force argument to c.set_focus.\n- New gui bindings: (I should actually be able to remember these).\n    cycle-all-focus                     = Alt-Y\n    contract-pane                       = Alt+Ctrl+-\n    expand-pane                         = Alt+Ctrl-=\n    focus-to-tree                       = Alt-space\n    scroll-outline-down-page            = Alt-PageDn\n    scroll-outline-down-page            ! tree = PageDn\n    scroll-outline-up-page              = Alt-PageUp\n    scroll-outline-up-page              ! tree = PageUp\n    scroll-outline-left                 = Alt+Ctrl+LtArrow\n    scroll-outline-right                = Alt+Ctrl+RtArrow\n- Put find-character and back-find-character in Edit:Find menu.\n- Use Alt-S,Alt-R for incremental searches.\n- Created find-character-extend-selection and back-find-character-extend-selection.\n- Added binding (Ctrl-W) and entry in Cmds menu for select-word-at-cursor.\n- Added binding (Ctrl-P) for repeat-complex-command.\n- Added binding (Ctrl-B) for execute-script.\n* Fixed bug in extend mode.\n- Added binding (Ctrl-space) for toggle extend mode.\n- Removed most cursor move bindings involving ctrl keys. Exception: ctrl-a and ctrl-e.\n    ** The idea is that I'll use extend mode instead.\n- Stay in outline mode: added @bool stayInTreeAfterEditHeadline setting.\n- Added Cmds:Toggle Settings submenu.\n- Use emacs names in Cmds menu (and in some other places): allow single item in menu tables.\n", "children": []}, {"h": "Increased speed of arrow keys", "gnx": "ekr.20060928172525.237", "b": "http://sourceforge.net/forum/message.php?msg_id=3935368\n", "children": []}, {"h": "Find command now collapses nodes during searches", "gnx": "ekr.20060928172525.240", "b": "http://sourceforge.net/forum/message.php?msg_id=3935780\n\nThis greatly speeds searches that used to open many nodes.\n", "children": []}, {"h": "Added support  -- comments in @url nodes", "gnx": "ekr.20060928172525.252", "b": "http://sourceforge.net/forum/message.php?msg_id=3935981\n\n@url nodes of the form::\n\n    @url -- aComment\n\nnow get the actual url from the entire first line of body text.\nSuch url's need not be quoted if they contain spaces.\n\n", "children": []}, {"h": "Added many new commands to Cmds menu", "gnx": "ekr.20060928172525.167", "b": "", "children": []}, {"h": "New plugins", "gnx": "ekr.20060928195040.1", "b": "The following plugins are new in Leo 4.4.2 b2:\n\nleo_to_rtf\nleo_to_html\nleoOPML  (At present, contained in leoOPML.leo instead of leoPlugins.leo)\npaste_as_headlines\nslideshow\nword_count\n\nThe __saxRead__.py plugin is an **experimental** for use by EKR.\nIt will be folded into Leo's core in the near future.\n", "children": []}, {"h": "4.4.2 beta 2", "gnx": "ekr.20061008190655", "b": "Leo 4.4.2 beta 2                                  October 9, 2006\n\nLeo 4.4.2 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.2:\n----------------------------\n- You can now store settings in myLeoSettings.leo without fear of those settings\n  being changed by cvs updates or in future versions of Leo.\n- Leo's vnode and tnode classes are now completely independent of the rest of Leo.\n  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.\n- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,\n  i.e., they can optionally derive from ZODB.Persistence.Persistent.\n  See Chapter 17: Using ZODB with Leo for details.\n- The leoOPML plugin defines commands to read and write OPML files.\n- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.\n- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.\n- Much faster navigation through the outline.\n- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.\n- The find command now optionally closes nodes not needed to show the node containing the present match.\n- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.\n- Many new minibuffer commands now appear in the Cmds menu.\n- A sax parser can now optionally read .leo files.\n- Fixed numerous bugs.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20061008190633.248", "ekr.20061008192040", "ekr.20061008192040.1", "ekr.20061008190633.295", "ekr.20061009074305"]}, {"h": "Bugs", "gnx": "ekr.20061008190633.248", "b": "", "children": ["ekr.20061008190633.249", "ekr.20061008190633.250", "ekr.20061008190633.257", "ekr.20061008190633.261", "ekr.20061008190633.262", "ekr.20061008190633.264", "ekr.20061008190633.265", "ekr.20061008190633.283", "ekr.20061008190633.294"]}, {"h": "Fixed rst3 problem", "gnx": "ekr.20061008190633.249", "b": "http://sourceforge.net/forum/message.php?msg_id=3932641\n\nLEO *always* outputs the first line of a node without indentation even if it is indented in the node.\n", "children": []}, {"h": "Fixed apparent bug in pmw", "gnx": "ekr.20061008190633.250", "b": "This was a very weird one.  It's not clear why it wasn't biting before.\n\nTraceback (most recent call last):\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leo.py\", line 321, in <module>\n    run(fileName)\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leo.py\", line 151, in run\n    g.app.gui.runMainLoop()\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoTkinterGui.py\", line 182, in runMainLoop\n    self.root.mainloop()\n  File \"c:\\python25\\lib\\lib-tk\\Tkinter.py\", line 1023, in mainloop\n    self.tk.mainloop(n)\n  File \"C:\\prog\\tigris-cvs\\leo\\extensions\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1756, in __call__\n    _reporterror(self.func, args)\n  File \"C:\\prog\\tigris-cvs\\leo\\extensions\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1782, in _reporterror\n    msg = exc_type + ' Exception in Tk callback\\n'\nTypeError: unsupported operand type(s) for +: 'type' and 'str'\n", "children": []}, {"h": "Fixed various unicode word-select problems", "gnx": "ekr.20061008190633.257", "b": "- created g.isWordChar.  It does proper test for letters and numbers.\n- Used g.isWordChar in extendToWord and moveWordHelper.\n- OnBodyDoubleClick now just calls c.editCommands.extendToWord.\n\nSo Russian characters, e.g., no longer 'interrupt' words.\n\nAnother fix: extend-to-word now works properly at the very end of a word.\n", "children": []}, {"h": "Installed installer patch", "gnx": "ekr.20061008190633.261", "b": "Installer does not complain about missing Python and does not install anything\neither. Here is a fix to this behavior. In most user-friendly way it would be\nbetter to provide a clickable link to Python site and a way to specify the path\nmanually, but for now it is just that - a fix.\n", "children": []}, {"h": "Use letter accellerators for recent files after 9", "gnx": "ekr.20061008190633.262", "b": "", "children": []}, {"h": "Made yank work in minibuffer", "gnx": "ekr.20061008190633.264", "b": "w was set to self.w, rather than event.widget.\n", "children": []}, {"h": "Mass change to edit commands: made sure w is a text widget", "gnx": "ekr.20061008190633.265", "b": "Added self.editWidget.  This sets self.w and makes sure w is a text widget.\n", "children": []}, {"h": "Do full recolor after cut/paste/yank", "gnx": "ekr.20061008190633.283", "b": "This fixes a long-standing, annoying bug.\n", "children": []}, {"h": "Fixed crash when pasting a node", "gnx": "ekr.20061008190633.294", "b": "The solution was to call setTimestamp if needed in getNewIndex.\n\n", "children": []}, {"h": "Settings", "gnx": "ekr.20061008192040", "b": "", "children": ["ekr.20061008190633.298", "ekr.20061008190633.306", "ekr.20061008190633.307", "ekr.20061008190633.325", "ekr.20061008190633.362", "ekr.20061008190633.360", "ekr.20061009112808"]}, {"h": "Completed support for myLeoSettings.leo", "gnx": "ekr.20061008190633.298", "b": "New in beta 2: Leo looks for myLeoSettings.leo files in the same place Leo looks for leoSettings.leo files.\n", "children": []}, {"h": "Added settings for all mod_scripting switches", "gnx": "ekr.20061008190633.306", "b": "", "children": []}, {"h": "Added @bool collapse_nodes_during_finds", "gnx": "ekr.20061008190633.307", "b": "http://sourceforge.net/forum/message.php?msg_id=3935780\n\nThis greatly speeds searches that used to open many nodes.\n\nAdded support for @bool collapse_nodes_during_finds setting.\n", "children": []}, {"h": "Added @bool outline_pane_has_initial_focus", "gnx": "ekr.20061008190633.325", "b": "", "children": []}, {"h": "Added @bool sparse_move_outline_left", "gnx": "ekr.20061008190633.362", "b": "\n\n\n\n\n", "children": []}, {"h": "Added bindings for Alt-Shift-Arrow keys to force an outline move", "gnx": "ekr.20061008190633.360", "b": "", "children": []}, {"h": "Added @bool use_sax_based_read", "gnx": "ekr.20061009112808", "b": "True:  Use a sax-based parser to read .leo files.\n       This is slower than using Leo's legacy xml parser, but may solve some unicode problems.\n\nFalse: Use Leo's legacy xml parser code.\n", "children": []}, {"h": "New commands", "gnx": "ekr.20061008192040.1", "b": "", "children": ["ekr.20061008190633.354", "ekr.20061008190633.356", "ekr.20061008190633.364", "ekr.20061008190633.371"]}, {"h": "Added extend-to-line command", "gnx": "ekr.20061008190633.354", "b": "", "children": []}, {"h": "Improved print-bindings command", "gnx": "ekr.20061008190633.356", "b": "The bindings are sorted by prefix: this is a big help in understanding bindings.\nFor each prefix, first print items with only a single character after the prefix.\n", "children": []}, {"h": "Created extend-to-sentence and extend-to-paragraph commands", "gnx": "ekr.20061008190633.364", "b": "Possibly define kill-sentence and kill-paragraph in terms of these.\n", "children": []}, {"h": "Created runEditCommandTest", "gnx": "ekr.20061008190633.371", "b": "", "children": []}, {"h": "Features", "gnx": "ekr.20061008190633.295", "b": "", "children": ["ekr.20070622180342", "ekr.20061008190633.296", "ekr.20061008190633.297", "ekr.20061008190633.311", "ekr.20061008190633.347", "ekr.20061008190633.351", "ekr.20061008190633.353", "ekr.20061008190633.382"]}, {"h": "Added chapters", "gnx": "ekr.20070622180342", "b": "- Added support for chapters to Leo's core\n\n  Chapters are regions of a Leo outline whose root is an @chapter node. @chapter\n  nodes may appear anywhere in an outline, but the create-chapter command (see\n  below) creates @chapter nodes as children of a single @chapters node.\n\n  Selecting a chapter shows only then nodes in the selected chapter; in this\n  respect, chapters are like hoists. The main chapter represents the entire\n  outline and can not be deleted by name. When chapters are in effect, Leo\n  creates a hidden @chapters node containing one @chapter node for every chapter\n  except the 'main' chapter.\n\n  Associated settings:\n\n  - The @bool use_chapters setting determines whether chapters are enabled.\n  - The @bool use_chapter_tabs setting determines whether the chapters\n    pop-up menu appears in the icon area. Choosing a chapter name from this list selects a chapter.\n\n  When chapters are enabled, the Cmds:Chapters menu shows all available chapter commands:\n\n  - The create-chapter command creates an @chapter node and with a single node.\n  - The delete-chapter command deletes the presently selected chapter.\n  - The select-chapter command makes only the nodes of the selected chapter visible.\n  - The move-node-to-chapter, clone-node-to-chapter and copy-node-to-chapter commands\n    add a node (and its descendants) to another chapter.\n", "children": []}, {"h": "Improved the mod_scripting plugin", "gnx": "ekr.20061008190633.296", "b": "- Make showing the Run Script button optional.\n- The Script Button button now creates the press-script-button-button command.\n- A new utility method does a much better job of massaging button and command names.\n", "children": []}, {"h": "rst3 plugin now registers the rst3-process-tree command", "gnx": "ekr.20061008190633.297", "b": "", "children": []}, {"h": "Made writing .leo files faster", "gnx": "ekr.20061008190633.311", "b": "The code that writes .leo files is now almost exactly twice as fast as the old code.\n", "children": []}, {"h": "Generalized navigation in outline pane to ignore @file, @thin, etc prefixes", "gnx": "ekr.20061008190633.347", "b": "", "children": []}, {"h": "Made outline navigation cumulative", "gnx": "ekr.20061008190633.351", "b": "http://sourceforge.net/forum/message.php?msg_id=3941670\n\nThe code on cvs now supports the 'extended' character search. When keystrokes\n(in the outline pane) are typed 'close' together in time Leo first tries to look\nfor prefix + ch, where ch is the character just typed and prefix is the previous\nmatch.\n\nBy 'close together' I mean the time interval specified by the new setting:\n\n@float outline_nav_extend_delay = 2.0\n\nThe unit of time is seconds.\n\nThe outline nav search revers to a single-character if the extended search\nfails, so in fact the delay is not too significant. In practice everything works\nwell without me thinking at all about what is happening.\n", "children": []}, {"h": "added p.archivedPosition", "gnx": "ekr.20061008190633.353", "b": "", "children": []}, {"h": "(Integrated sax with read logic)", "gnx": "ekr.20061008190633.382", "b": "", "children": []}, {"h": "Leap 204. \"New\" positions allow Leo outlines to represent arbitrary directed graphs", "gnx": "ekr.20061009074305", "b": "Leo's theory of relativity\n\n1. We can archive any position p by saving the list [p.childIndex() for p in\n   p.self_and_parents_iter()]. Let us call the *reverse* of this list the\n   **parents index list**. Clearly, this list provides an unambiguous way of\n   reaching position p from the root node. Archived positions, like all other\n   positions, become invalid when the outline changes. \n\n2. Leo's position class can be based on parents index lists. Let us call such\n   positions **new positions**. Replacing legacy positions with new position\n   will have important benefits: \n\n- The only structure information in vnodes will be a v.links field. Two\n  interpretations of v.links are possible. When Leo's data is a DAG (the clone\n  world), v.links is a lists of v's children. This is the legacy world we all\n  know and love. When Leo's data is an arbitrary graph, v.links is simply the\n  list of all vnodes to which v points, with *no* necessary restrictions on what\n  nodes may be contained in v.links. \n\n- New positions provide a self contained way of traversing an arbitrary graphs\n  **largely independently** of the data. This is Leo's theory of relativity. The\n  notions of 'parent' and 'sibling' have meaning *only* in the context of a\n  particular position. The v.links field appears to be the absolute minimum\n  amount of structure information that vnodes must contain. v.links defines the\n  children or linked-to nodes in a general graph. \n\n- Leo's data can be considered an unrooted tree: *any* node could be considered\n  the root. New positions provide enough information to traverse an arbitrary\n  graph starting at any node. \n\n- The fundamental p.moveToX methods should be significantly faster. All of Leo's\n  iterators use p.moveToX methods. \n\n3. The changeover to new positions can be done easily. Initially, the api of the\n   new position class will be identical to the api of the present position\n   class. Later, the api for the new position class might be extended in an\n   upward compatible manner. The api's for the vnode and tnode class will remain\n   strictly unchanged. \n\n4. These changes imply no change to the separation of data into vnodes and\n   tnodes. This separation is required to handle clones. Furthermore, the format\n   of .leo files is a separate issue from the internal representation of Leo's\n   data, as proved by the opml plugin. Thus, the transition to new positions\n   will have *no* effect on file formats, and no effect of scripts. All scripts\n   will continue to work *exactly* as they have before, *except* scripts, e.g.\n   unit tests, that probe Leo's internals. \n\nSummary \n\nLeo's theory of relativity is this: the position class provides a 'frame of\nreference' for traversing data. **Only in a particular frame of reference** do\nthe notions of 'parent' and 'siblings' have meaning. Leo's theory of relatively\nis the ultimate expression of LeoUser's notion of a 'sea of nodes'. It provides\na solid context on which to base traversals of either outlines with clones\n(DAG's) or general directed graphs. \n\nLeo's position class, far from being just a technical tool, is important\ntheoretically. The position class (old or new) provides the essential tool\nneeded to separate data from traversals of the data. The re-visioning of the\nposition and vnode classes brings that potential into reality. \n", "children": []}, {"h": "4.4.2 beta 3", "gnx": "ekr.20061020155306", "b": "Leo 4.4.2 beta 3                                  October 20, 2006\n\nLeo 4.4.2 beta 3 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThe beta release fixed dozens of bugs and smoothed many rough edges.  There\nare no known major bugs in Leo.  This will be the last beta release before\nLeo 4.4.2 final.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.2:\n----------------------------\n- You can now store settings in myLeoSettings.leo without fear of those settings\n  being changed by cvs updates or in future versions of Leo.\n- Leo's vnode and tnode classes are now completely independent of the rest of Leo.\n  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.\n- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,\n  i.e., they can optionally derive from ZODB.Persistence.Persistent.\n  See Chapter 17: Using ZODB with Leo for details.\n- The leoOPML plugin defines commands to read and write OPML files.\n- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.\n- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.\n- Much faster navigation through the outline.\n- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.\n- The find command now optionally closes nodes not needed to show the node containing the present match.\n- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.\n- Many new minibuffer commands now appear in the Cmds menu.\n- A sax parser can now optionally read .leo files.\n- Fixed numerous bugs.\n\nLinks:\n------\nLeo:        http://webpages.charter.net/edreamleo/front.html\nWhat's new: http://webpages.charter.net/edreamleo/new-4-4-2.html\nHome:       http://sourceforge.net/projects/leo/\nDownload:   http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:        http://leo.tigris.org/source/browse/leo/\nQuotes:     http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20061020155235.1", "ekr.20061020155235.263", "ekr.20061020155235.393", "ekr.20061020155235.403"]}, {"h": "Bugs", "gnx": "ekr.20061020155235.1", "b": "", "children": ["ekr.20061020155235.2", "ekr.20061020155235.9", "ekr.20061020155235.27", "ekr.20061020155235.36", "ekr.20061020155235.37", "ekr.20061020155235.41", "ekr.20061020155235.47", "ekr.20061020155235.123", "ekr.20061020155235.124", "ekr.20061020155235.126", "ekr.20061020155235.149", "ekr.20061020155235.180", "ekr.20061020155235.185", "ekr.20061020155235.254", "ekr.20061020155235.255"]}, {"h": "Fixed crash when searching for headllines containing unicode chars", "gnx": "ekr.20061020155235.2", "b": "", "children": []}, {"h": "Fixed bugs in cycle-all-focus command", "gnx": "ekr.20061020155235.9", "b": "", "children": []}, {"h": "Fixed bug with Alt-n keys", "gnx": "ekr.20061020155235.27", "b": "@command whatever @key Alt-1 didn't work\nActually, no Alt-n keys worked for n in (1,2,3,4,5) in any context.\n", "children": []}, {"h": "Fix bug: closing a window after removing a script button can crash", "gnx": "ekr.20061020155235.36", "b": "", "children": []}, {"h": "The end-of-script message no longer yanks focus from tabs", "gnx": "ekr.20061020155235.37", "b": "", "children": []}, {"h": "Fixed  warning if minibuffer command does not exist when making menus", "gnx": "ekr.20061020155235.41", "b": "The warning was disabled due to a programming error (not not)\nEnabling this found two errors: view-lossage (missing comma) and\nfind-with-present-options --> search-with-present-options.\n", "children": []}, {"h": "Fixed new unicode bug", "gnx": "ekr.20061020155235.47", "b": "https://sourceforge.net/forum/message.php?msg_id=3957980\n\nThis was a major effort.  What I did:\n\n- Defined g.isWordChar in terms of ch.isalnum()\n\n- Replace almost all instances of string.letters and string.digits by calls to\n  ch.isalnum(), ch.isalpha(), ch.isdigit(), etc.\n\n- Similarly, replaced word_chars.\n\n- The new code uses string literals only for\n\na) small constants like '+-' and\nb) constants in a very limited context, as in the input to regexp.\n", "children": []}, {"h": "Made 'About Plugin' dialog scrollable", "gnx": "ekr.20061020155235.123", "b": "http://sourceforge.net/forum/message.php?msg_id=3960993\n", "children": []}, {"h": "Removed unwanted key-state message", "gnx": "ekr.20061020155235.124", "b": "https://sourceforge.net/forum/message.php?msg_id=3961623\n", "children": []}, {"h": "Made sure all kill commands do a full recolor", "gnx": "ekr.20061020155235.126", "b": "", "children": []}, {"h": "Fixed bug in new colorizer", "gnx": "ekr.20061020155235.149", "b": "Did not restore selection after indent/undent commands.\n", "children": []}, {"h": "Removed set-mark-command and all calls to removeRKeys", "gnx": "ekr.20061020155235.180", "b": "The 'hang' was due to removeRKeys, which removes the bindings create by\nsetRegion (set-mark-command) by *also* cleared all the other bindings!\nFor now I have simply disabled the set-mark-command and commented out all\ncalls to removeRKeys.\n\nNote that toggle-extend-mode (Alt-3) is a good way to define regions.\n", "children": []}, {"h": "Fixed body editor problems", "gnx": "ekr.20061020155235.185", "b": "onFocusIn and its associated binding were a very bad idea.  It is not needed:\nk.masterClickHandler simply calls the new onClick method.\n\nWhat I did:\n\n- Eliminating onFocusIn and its associated binding.\n  Hurray: this also fixed the Find problem.\n- Fixed problem with deleting nodes when multiple editors are present.\n- Fixed minor problem with cycle-all-focus.\n- Removed title bar when penultimate editor is deleted.\n", "children": []}, {"h": "Moved @import to top of doc/default.css", "gnx": "ekr.20061020155235.254", "b": "", "children": []}, {"h": "Fixed focus problem when double-clicking @url nodes", "gnx": "ekr.20061020155235.255", "b": "Double-clicking  @url <leo-file> did not bring Leo file to top.\n", "children": []}, {"h": "Features", "gnx": "ekr.20061020155235.263", "b": "", "children": ["ekr.20061020155235.271", "ekr.20061020155235.292", "ekr.20061020155235.294", "ekr.20061020155235.304", "ekr.20061020155235.307", "ekr.20061020155235.308", "ekr.20061020155235.335", "ekr.20061020155235.337", "ekr.20061020155235.385"]}, {"h": "Added minibuffer and Settings menus", "gnx": "ekr.20061020155235.271", "b": "http://sourceforge.net/forum/message.php?msg_id=3588148\n\nOne way to make Leo more newbie friendly is to add menu items for key features\nthat are likely to cause confusion in the beginning.\n", "children": []}, {"h": "Toggling autocompleter and calltips now write to log (in red) instead of the statusLine", "gnx": "ekr.20061020155235.292", "b": "This is much more visible.\n", "children": []}, {"h": "Finished collapse-on-move-left", "gnx": "ekr.20061020155235.294", "b": "Added support for @bool sparse_move_outline_left\n\nWhen True, Leo collapses the (former) parent of a node when moving that node left.\nTakes getting used to, but I like it.\n\nNote that the move-outline-up/down commands can have the effect of moving an outline left.\n", "children": []}, {"h": "Properly create Help menu on the Mac", "gnx": "ekr.20061020155235.304", "b": "At long last Leo creates a proper help menu on the Mac.\n", "children": []}, {"h": "'*command-name' in headline means convert '-' to blanks", "gnx": "ekr.20061020155235.307", "b": "This would greatly simplify menu entries.\n", "children": []}, {"h": "Removed all references to commands from menu tables", "gnx": "ekr.20061020155235.308", "b": "This is an important step towards making all menus configurable.\n", "children": []}, {"h": "Add Open scripts.leo to help menu", "gnx": "ekr.20061020155235.335", "b": "The open-scripts-leo command.\n", "children": []}, {"h": "The spell tab now uses ctypes for Python 2.5", "gnx": "ekr.20061020155235.337", "b": "", "children": []}, {"h": "Simulated x-windows middle-button paste", "gnx": "ekr.20061020155235.385", "b": "", "children": []}, {"h": "Plugins", "gnx": "ekr.20061020155235.393", "b": "", "children": ["ekr.20061020155235.394", "ekr.20061020155235.395", "ekr.20061020155235.396", "ekr.20061020155235.397", "ekr.20061020155235.398", "ekr.20061020155235.399", "ekr.20061020155235.400", "ekr.20061020155235.402", "ekr.20061020155235.125", "ekr.20061020155235.34", "ekr.20061020155235.35"]}, {"h": "Fixed keyBindings plugin", "gnx": "ekr.20061020155235.394", "b": "http://sourceforge.net/forum/message.php?msg_id=3958380\n", "children": []}, {"h": "The scripting plugin now creates a delete-x-script-button command for each script button", "gnx": "ekr.20061020155235.395", "b": "http://sourceforge.net/forum/message.php?msg_id=3423121\n", "children": []}, {"h": "Fixed the nodenavigator plugin", "gnx": "ekr.20061020155235.396", "b": "http://sourceforge.net/forum/message.php?msg_id=3959003\n", "children": []}, {"h": "Rewrote the multifile plugin for the 4.x code base.", "gnx": "ekr.20061020155235.397", "b": "", "children": []}, {"h": "Replaced __name__ with __plugin_name__ in four plugins", "gnx": "ekr.20061020155235.398", "b": "http://sourceforge.net/forum/message.php?msg_id=3962632\n", "children": []}, {"h": "Improved the scripting plugin", "gnx": "ekr.20061020155235.399", "b": "- Every button created by the plugin creates a corresponding command. The\ncommand name is the 'cleaned' version of the button name.\n\n- Every button created by the plugin also creates a delete-x-button command,\nwhere x is the command name as just discussed. So now you can delete script\nbuttons without right-clicking.\n\n- I took the time to revise, refactor, clean up, reorganize and better document\nthe code. This was overdue: the previous code had grown difficult to understand\nthrough multiple small accretions. I can actually understand the new code.\n", "children": []}, {"h": "Fixed bugs in multi-file plugin", "gnx": "ekr.20061020155235.400", "b": "", "children": []}, {"h": "Fix bug in shortcut_button plugin", "gnx": "ekr.20061020155235.402", "b": "http://sourceforge.net/forum/message.php?msg_id=3963657\n", "children": []}, {"h": "Removed datenodes.ini from cvs", "gnx": "ekr.20061020155235.125", "b": "No longer needed now that the datenodes plugins gets settings from cvs.\n", "children": []}, {"h": "Fix bug in ops plugin", "gnx": "ekr.20061020155235.34", "b": "http://sourceforge.net/forum/message.php?msg_id=3956836\n", "children": []}, {"h": "Fixed crasher on script button balloons", "gnx": "ekr.20061020155235.35", "b": "http://sourceforge.net/forum/message.php?msg_id=3958333\n", "children": []}, {"h": "Settings", "gnx": "ekr.20061020155235.403", "b": "", "children": ["ekr.20061020155235.404", "ekr.20061020155235.405", "ekr.20061020155235.410", "ekr.20061020155235.411", "ekr.20061020155235.412", "ekr.20061020155235.413", "ekr.20061020155235.264"]}, {"h": "Made unlimited undo the default", "gnx": "ekr.20061020155235.404", "b": "As always, you can set max_undo_stack_size in myLeoSettings.leo.\n", "children": []}, {"h": "Added @bool select_all_text_when_editing_headlines", "gnx": "ekr.20061020155235.405", "b": "A highly useful option.\nHowever, creating a new node always selects the entire text, regardless of this option.\n", "children": []}, {"h": "Added bindings to toggle-autocompleter and toggle-calltips", "gnx": "ekr.20061020155235.410", "b": "- Added bindings for toggle-autocompleter (Alt-1) and toggle-calltips (Alt-2)\n\n- Ctrl-. and ctrl-( do not seem to do anything.\n\n** Mystery solved: there was a trace in the calltip logic!\n\nDisabled these binding:\n\nauto-complete-force         = None # This command needs work before it is useful. Ctrl-period\nshow-calltips-force         = None # This command needs work before it is useful. Alt-parenleft\n\nThe problem is that autocompletion depends on state: self.leadinWord,\nprevObjects, etc. Thus, it's not presently possible to start the process\nanywhere. Similar remarks apply to calltips, which relies on autocompleter\nstate.\n\nThis is a complex problem, and not very serious now that there is an easy way of\ntoggling autocompleter and calltips on and off. It's been added to a 'later'\nsection of the to-do list.\n", "children": []}, {"h": "Added 'Candidates for myLeoSettings.leo' to leoSettings.leo", "gnx": "ekr.20061020155235.411", "b": "Added the node: Candidates for settings in myLeoSettings.leo. This lists the\nmost 'controversial' settings in leoSetting.leo, and is a quick-start to\ncreating myLeoSettings.leo.\"\n", "children": []}, {"h": "Recent changes to settings", "gnx": "ekr.20061020155235.412", "b": "- Added shift-ctrl keys to extend the selection.\nfocus-to-body = Alt-D\nfocus-to-tree = Alt-T\ntoggle-extend-mode = Alt-3\n", "children": []}, {"h": "Added @bool insert_new_nodes_at_end", "gnx": "ekr.20061020155235.413", "b": "", "children": []}, {"h": "Removed .leoRecentFiles.txt from distribution and cvs", "gnx": "ekr.20061020155235.264", "b": "What I did\n\n- @bool write_recent_files_as_needed = True\n\nPeople who don't want Leo to update .leoRecentFiles.txt can set this to False.\n\n- Remove .leoRecentFiles from cvs\n- Remove .leoRecentFiles from distribution list.\n", "children": []}, {"h": "4.4.2 final and 4.4.2.1 final", "gnx": "ekr.20061026095728", "b": "Leo 4.4.2.1 final                                October 29, 2006\n\nLeo 4.4.2.1 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.2.1 final fixes a recent bug that caused Leo not to create the\n.leoRecentFiles.txt file properly in some situations. There are no known\nsignificant bugs in this version of Leo.\n\nLeo 4.4.2 final fixes a few bugs and adds support for pymacs. \n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.2:\n----------------------------\n- You can now store settings in myLeoSettings.leo without fear of those settings\n  being changed by cvs updates or in future versions of Leo.\n- Leo's vnode and tnode classes are now completely independent of the rest of Leo.\n  Some api's have been changed.  This 'big reorg' and may affect scripts and plugins.\n- Leo's vnode and tnode classes can optionally be compatible with ZODB databases,\n  i.e., they can optionally derive from ZODB.Persistence.Persistent.\n  See Chapter 17: Using ZODB with Leo for details.\n- The leoOPML plugin defines commands to read and write OPML files.\n- The slideshow plugin allows Leo to run slideshows defined by @slideshow and @slide nodes.\n- The leo_to_rtf and leo_to_html plugins create rtf and html files from Leo outlines.\n- Much faster navigation through the outline.\n- When focus is in the outline pane, you can move to headlines by typing the first letter of headlines.\n- The find command now optionally closes nodes not needed to show the node containing the present match.\n- Numerous changes that make Leo easier to use without using a mouse, including new commands and options.\n- Many new minibuffer commands now appear in the Cmds menu.\n- A sax parser can now optionally read .leo files.\n- Fixed numerous bugs.\n\nLinks:\n------\nLeo:        http://webpages.charter.net/edreamleo/front.html\nWhat's new: http://webpages.charter.net/edreamleo/new-4-4-2.html\nHome:       http://sourceforge.net/projects/leo/\nDownload:   http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:        http://leo.tigris.org/source/browse/leo/\nQuotes:     http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20061026095922.1", "ekr.20061026095922.35"]}, {"h": "Bugs", "gnx": "ekr.20061026095922.1", "b": "", "children": ["ekr.20061026095922.2", "ekr.20061026095922.3", "ekr.20061026095922.15", "ekr.20061026095922.17", "ekr.20061026095922.19", "ekr.20061026095922.25", "ekr.20061026095922.32", "ekr.20061026095922.33"]}, {"h": "Changed leo_rst.css to pass the w3 validator", "gnx": "ekr.20061026095922.2", "b": "", "children": []}, {"h": "Fixed 'Run on string' message when typing", "gnx": "ekr.20061026095922.3", "b": "", "children": []}, {"h": "Fixed problem with c++ extensions", "gnx": "ekr.20061026095922.15", "b": "http://sourceforge.net/forum/message.php?msg_id=3971242\n", "children": []}, {"h": "Move on if regexp matches an empty string", "gnx": "ekr.20061026095922.17", "b": "", "children": []}, {"h": "Fixed several bugs related to multiple body panes", "gnx": "ekr.20061026095922.19", "b": "", "children": []}, {"h": "Fixed multipath plugin so it works with new colorizier", "gnx": "ekr.20061026095922.25", "b": "The new colorizer was innocent: the problem is that at.directiveKind4 uses leoColor.leoKeywords,\nso multipath must add entries to leoColor.leoColors.\n", "children": []}, {"h": "Fixed bug in new colorizer", "gnx": "ekr.20061026095922.32", "b": "It required a space after the '@'\n", "children": []}, {"h": "Fixed config bug", "gnx": "ekr.20061026095922.33", "b": "http://sourceforge.net/forum/message.php?msg_id=3975898\n", "children": []}, {"h": "New features", "gnx": "ekr.20061026095922.35", "b": "", "children": ["ekr.20061026095922.51", "ekr.20061026095922.36"]}, {"h": "Added forward-end-word/-extend-selection commands", "gnx": "ekr.20061026095922.51", "b": "http://sourceforge.net/forum/message.php?msg_id=3980193\n\n", "children": []}, {"h": "Created leoPymacs.py for interaction with pymacs", "gnx": "ekr.20061026095922.36", "b": "For full details, see Chapter 18 of Leo's Users Guide: Emacs and Leo.\n", "children": []}, {"h": "4.4.3... winpdb, leoBridge, gui reorg, chapters", "gnx": "ekr.20070316182323", "b": "", "children": ["ekr.20070122070619", "ekr.20070316182323.1", "ekr.20070513111132", "ekr.20070610063456", "ekr.20070622090350", "ekr.20070626082732", "ekr.20070702162421"]}, {"h": "4.4.3 alpha 1", "gnx": "ekr.20070122070619", "b": "Leo 4.4.3 alpha 1                                  January 26, 2006\n\nLeo 4.4.3 alpha 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nImportant: the wxGui plugin is still alpha-quality code at present.\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- A functional wxWidgets plugin.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Many minor improvements, new settings and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070122070634.1", "ekr.20070122070634.305", "ekr.20070122070634.58", "ekr.20070122070634.298", "ekr.20070122070634.301"]}, {"h": "Bugs", "gnx": "ekr.20070122070634.1", "b": "", "children": ["ekr.20070122070634.2", "ekr.20070122070634.4", "ekr.20070122070634.13", "ekr.20070122070634.40", "ekr.20070122070634.51", "ekr.20070122070634.54"]}, {"h": "Fixed an escape bug in new colorizer", "gnx": "ekr.20070122070634.2", "b": "Example:\n\nprint \"\\\\\" + \" this is a test\"\n\nThe escape mechanism must treat an even number of trailing escapes as not an escape.\n", "children": []}, {"h": "Treat escaped characters in find patterns as a single character", "gnx": "ekr.20070122070634.4", "b": "", "children": []}, {"h": "Fixed undo problems with yank/kill", "gnx": "ekr.20070122070634.13", "b": "http://sourceforge.net/forum/message.php?msg_id=3924236\n\nAdded unit tests for yank and all kill commands.\n", "children": []}, {"h": "Fixed clone-drag problem", "gnx": "ekr.20070122070634.40", "b": "http://sourceforge.net/forum/message.php?msg_id=3991369\n\nThe bindings to f.f.OnControlKeyDown/Up were mistakenly deleted in createOuterFrames.\n", "children": []}, {"h": "Made sure all ancestors expanded when select a body editor with multiple body editors", "gnx": "ekr.20070122070634.51", "b": "", "children": []}, {"h": "Fixed bug in CheckVersion", "gnx": "ekr.20070122070634.54", "b": "http://sourceforge.net/forum/message.php?msg_id=4112347\n", "children": []}, {"h": "Code reorg for wxGui plugin", "gnx": "ekr.20070122070634.305", "b": "Leo's core is now largely free of gui-dependent code, and should be completely\nfree of such code by the time Leo 4.4.3 final is released.\n", "children": []}, {"h": "Features", "gnx": "ekr.20070122070634.58", "b": "", "children": ["ekr.20070122070634.59", "ekr.20070122070634.66", "ekr.20070122070634.69", "ekr.20070122070634.81", "ekr.20070122070634.82", "ekr.20070122070634.83", "ekr.20070122070634.89", "ekr.20070122070634.91", "ekr.20070122070634.209", "ekr.20070122070634.220", "ekr.20070122070634.223", "ekr.20070122104240"]}, {"h": "Added handleUrlInUrlNode helper for OnIconDoubleClick", "gnx": "ekr.20070122070634.59", "b": "", "children": []}, {"h": "Only do one message re writing recent files", "gnx": "ekr.20070122070634.66", "b": "", "children": []}, {"h": "Made escape in the minibuffer work like ctrl-g", "gnx": "ekr.20070122070634.69", "b": "", "children": []}, {"h": "Clear status line in repeat-complex-command", "gnx": "ekr.20070122070634.81", "b": "This is much less confusing.\n", "children": []}, {"h": "Added shortcuts for goto-first/last-sibling", "gnx": "ekr.20070122070634.82", "b": "", "children": []}, {"h": "Made copied nodes valid Leo files", "gnx": "ekr.20070122070634.83", "b": "http://sourceforge.net/forum/message.php?msg_id=4014079\n", "children": []}, {"h": "Added support for chdir_to_relative_path setting", "gnx": "ekr.20070122070634.89", "b": "http://sourceforge.net/forum/message.php?msg_id=4005750\n\nI like the option @string relative_path_base_directory = .\n\nwhich puts @file nodes in the same directory as the current Leo file.\n\nI would like it if \nopen('file.txt','w').close()\n\nput file.txt in the same directory as the current Leo file.\n", "children": []}, {"h": "changeAll now works like findAll", "gnx": "ekr.20070122070634.91", "b": "", "children": []}, {"h": "Added Find & Spell tabs to log pane on startup", "gnx": "ekr.20070122070634.209", "b": "\n", "children": []}, {"h": "Created standard pluginsManager.txt only if it does not exist", "gnx": "ekr.20070122070634.220", "b": "http://sourceforge.net/forum/message.php?msg_id=3987635\n", "children": []}, {"h": "Improved support for the winpdb debugger", "gnx": "ekr.20070122070634.223", "b": "New settings\n\nThe following two new settings now control whether the execute-script and debug commands write the script to an external file.\n\n- @bool write_script_file = True\n\nTrue: The execute script command writes the script to be executed to a file, then executes the script using Python's execFile function. The script_file_path setting specifies the path to this file.\n\nFalse (legacy): The execute script command uses Python's exec command to execute the script. \n\n- @string script_file_path = ../test/scriptFile.py\n\nThe path to the file to be written by the execute-script command.\n\nNotes:\n\n- This setting has effect only if the write_script_file setting is True.\n- Use / to as the path delimiter, regardless of platform.\n- The default path is ../test/scriptFile.py if no path is given.\n- The path starts at g.app.loadDir, so for example ../test/scriptFile.py is equivalent to leo/test/scriptFile.py\n- The filename should end in .py.\n\nFrom here on, let us assume the settings are as shown above.  There are at least three ways of debugging scripts, depending on your preferences and whether the script contains leo-specific code (g, c or p) or not.\n\nFirst way:  The debug command\n\nThe debug command now works almost exactly like Kent's original @button node. This way of debugging can only be used for general scripts, not leo-specific scripts.  \n\nThe debug command writes the script to scriptFile.py and invokes the debugger as specified by the existing @string debugger_kind option.  winpdb opens and is already 'attached' to the script to be debugged.  You can single-step as you like.  Leo continues to run, but killing the debugger will also kill Leo.  When started this way, winpdb is really 'attached' to *all* of Leo, which means you can single step past the end of the script into Leo's executeScript code and from there into all of Leo(!)\n\nAs I write this I realize that the code uses arguments specific to winpdb.  That may have to be generalized, though I am not sure why anyone would want to use another debugger...\n\nSecond way: @button winpdb\n\nThis is almost exactly equivalent to the debug command, except that the script file must be *different* from the script file specified by the  script_file_path setting (The @button code *itself* uses the execute-script command, so we have to pass the script code, not the @button code to the debugger).\n\nThird way: The execute-script command with explicit debugger breaks\n\nThe third way of debugging scripts allows winpdb to debug scripts that use c, g and p.  I'm actually not sure of exactly how and why it works, but it certainly does work.\n\nIn contrast to the previous two ways, a little more work is needed because winpdb does not start automatically.  But I am getting ahead of myself.\n\nTo use this way, insert the following two lines of code at the start of the script to be debugged::\n\nimport rpdb2\nrpdb2.start_embedded_debugger('go',fAllowUnencrypted=True)\n\nNow just execute the execute-script command (*not* the debug command)  Leo will appear to hang.  Indeed, the  start_embedded_debugger command is waiting for *another* copy of winpdb to 'attach' to the script's process.  This process is all of Leo!  The default timeout is 5 minutes: I'm not sure what happens when the timeout happens: probably an exception gets thrown.\n\nSo you must start winpdb explicitly.  On XP just do something like\n\npython c:\\python25\\Scripts\\_winpdb.py -t\n\nThe -t option tells winpdb that no encoding of password is necessary.  The password is specified in the call to rpdb2.start_embedded_debugger in your script.  In this example, the password is 'go'.  Use the File:Attach command in winpdb to attach winpdb to Leo.  Specify the password as 'go' and you will see the scriptFile.py containing your entire script.  You can execute or single-step through the script. \n\nTo repeat, the big difference is that c, g and p are defined, so you can debug any script this way.  As before, killing winpdb also kills Leo.\n\nP.S.  winpdb and its documentation has been improved recently.  See\n\nhttp://www.digitalpeers.com/pythondebugger/  and especially\n\nhttp://www.digitalpeers.com/pythondebugger/embedded.htm\n\nThe discussion of embedded debugging may have been written specifically with Leo in mind.  It certainly could have been.\n", "children": []}, {"h": "Added \\runAskOkCancelStringDialog", "gnx": "ekr.20070122104240", "b": "http://sourceforge.net/forum/message.php?msg_id=4113315\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20070122070634.298", "b": "", "children": ["ekr.20070122072110", "ekr.20070122070634.299", "ekr.20070122070634.300"]}, {"h": "The wxGui plugin is now functional", "gnx": "ekr.20070122072110", "b": "", "children": []}, {"h": "Changed bindings in UniversalScrolling pluing", "gnx": "ekr.20070122070634.299", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3991223\n\nI assigned both Control and Shift modifiers to do scrolling: this is so my\nfinger can hit a key in the lower left corner of the keyboard, and I don't have\nto worry too much about my aim (I have LARGE fingers). Also, I stop the\nscrolling on the JUST button release -- less worry about my finger slipping off\nthe key.\n", "children": []}, {"h": "Registered write-restructured-text command in rst3 plugin", "gnx": "ekr.20070122070634.300", "b": "", "children": []}, {"h": "Settings", "gnx": "ekr.20070122070634.301", "b": "", "children": ["ekr.20070122070634.302", "ekr.20070122070634.303", "ekr.20070122070634.304"]}, {"h": "Added @bool center_selected_tree_node", "gnx": "ekr.20070122070634.302", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=3916155\n\nWhen a node is among several other nodes at the same level of hierarchy, which\nare all children of a node, and the \"MOVE LEFT\" command is executed, the node\ndoes move left in the outline hierarchy, but it also move down to just before\nthe next node at the higher hierarchy level - the level to which it is moving\nleft.\n\nEKR: I love this new option: how did we ever live without it?\n\n@color\n", "children": []}, {"h": "Added @bool invisible_outline_navigation = False", "gnx": "ekr.20070122070634.303", "b": "@nocolor\n\nThis option tells how to treat an uppercase letter typed when the outline pane\nis active but no headline is being edited. In such situations Leo searches for an\nnode whose headline starts with the present prefix, ignoring case The prefix\nstarts with the first letter typed and other letters are added if they are typed\nwithin a 'short' period of time, as specified by the outline_nav_extend_delay\n\nTrue: Look in invisible nodes.\nFalse: Look only in visible nodes.\n\nI set this option to False because it is too easy form me to type Shift-whatever\nwhen I meant Ctrl-whatever.\n\n@color\n", "children": []}, {"h": "Added @bool show_full_tracebacks_in_scripts", "gnx": "ekr.20070122070634.304", "b": "http://sourceforge.net/forum/message.php?msg_id=3985382\n\n", "children": []}, {"h": "4.4.3 alpha 2", "gnx": "ekr.20070316182323.1", "b": "Leo 4.4.3 alpha 2                                  March 17, 2006\n\nLeo 4.4.3 alpha 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version of Leo should be safe enough for production use. It is an alpha\ndistribution because not all plugins have been tested on the reorganized code\nbase.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- A leoBridge module that allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Added support for @enabled-plugins nodes in settings files.\n- The__wx_gui plugin is now functional.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Many minor improvements, new settings and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070316182341.1", "ekr.20070316182341.437", "ekr.20070317044545"]}, {"h": "Fixed Bugs", "gnx": "ekr.20070316182341.1", "b": "", "children": ["ekr.20070316182341.2", "ekr.20070316182341.6", "ekr.20070316182341.10", "ekr.20070316182341.39", "ekr.20070316182341.41", "ekr.20070316182341.42", "ekr.20070316182341.43", "ekr.20070316182341.54", "ekr.20070316182341.56", "ekr.20070316182341.66", "ekr.20070316182341.112", "ekr.20070316182341.113", "ekr.20070316182341.137", "ekr.20070316182341.138", "ekr.20070316182341.139"]}, {"h": "Fixed bugs in undo/redoNodeContents", "gnx": "ekr.20070316182341.2", "b": "", "children": []}, {"h": "Fixed minor xml problem", "gnx": "ekr.20070316182341.6", "b": "@nocolor\nhttp://sourceforge.net/forum/message.php?msg_id=4132529\n\nI'm generating Leo files with ElementTree and ran into a minor issue.\n\nElementTree generates an empty tag with a space before the closing slash:\n\n<globals />\n\nin Leo's code for dummy elements to allow copied nodes to be valid Leo files,\nthe empty tags are generated without the space\n\nleoFileCommands.py 2917\n        self.put('<globals/>\\n')\n        self.put('<preferences/>\\n')\n        self.put('<find_panel_settings/>\\n')\n\nit then checks for these tags in getDummyElements() leoFileCommands.py 1298\n\nSince ElementTree has the space before the slash, \nit's XML is considered invalid by Leo according to\nthis test.\n\nI would like it if the space could be added in Leo's\nself.put(...) and the check in getDummyElements()\n\nThe XML specs show the space as optional.\n\n@color\n", "children": []}, {"h": "Fixed C++ import bug", "gnx": "ekr.20070316182341.10", "b": "http://sourceforge.net/forum/message.php?msg_id=4134384\n", "children": []}, {"h": "Fixed recent bug in next-line command", "gnx": "ekr.20070316182341.39", "b": "Down arrow wasn't handled properly.\n", "children": []}, {"h": "Made standalone plugins manager work again", "gnx": "ekr.20070316182341.41", "b": "", "children": []}, {"h": "Fixed wiki markup bug", "gnx": "ekr.20070316182341.42", "b": "http://sourceforge.net/forum/message.php?msg_id=3994218\n", "children": []}, {"h": "Fixed bugs in regular expressions", "gnx": "ekr.20070316182341.43", "b": "", "children": []}, {"h": "Fixed memory error in leoBridge", "gnx": "ekr.20070316182341.54", "b": "", "children": []}, {"h": "Fixed backspace in headline bug", "gnx": "ekr.20070316182341.56", "b": "# The buggy code only happens when there is no binding for backward-delete-char.\n# http://sourceforge.net/forum/forum.php?thread_id=1681392&forum_id=10227\n", "children": []}, {"h": "Made sure alt-arrow keys honor focus settings", "gnx": "ekr.20070316182341.66", "b": "", "children": []}, {"h": "Fixed bug in nav button plugin", "gnx": "ekr.20070316182341.112", "b": "It's about Nav_buttons v1.5 (cvs version from last Saturday) \n\nPressing the green back button causes \n\nError: 1 \nAttributeError Exception in Tk callback \nFunction: <bound method Commands.goPrevVisitedNode of Commander 39717104: u'F:\\\\D\\\\PIM\\\\PIM_main.leo'> (type: <type 'instancemethod'>) \nArgs: () \nTraceback (innermost last): \nFile \"F:\\C\\Programs\\Leo_cvs\\extensions\\Pmw\\Pmw_1_2\\lib\\PmwBase.py\", line 1752, in __call__ \nreturn apply(self.func, args) \nFile \"F:\\C\\Programs\\Leo_cvs\\src\\leoCommands.py\", line 4435, in goPrevVisitedNode \nc.treeCommandHelper(v) \nAttributeError: Commands instance has no attribute 'treeCommandHelper' \n", "children": []}, {"h": "Fixed yet another cursor down bug", "gnx": "ekr.20070316182341.113", "b": "http://sourceforge.net/forum/message.php?msg_id=4201463\n", "children": []}, {"h": "Improved special case in moveOutlineUp", "gnx": "ekr.20070316182341.137", "b": "http://sourceforge.net/forum/message.php?msg_id=4205072\n", "children": []}, {"h": "Fixed crasher in rclicker plugin", "gnx": "ekr.20070316182341.138", "b": "Traceback (most recent call last):\n\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoGlobals.py\", line 2474, in doHook\n    return f(tag,keywords)\n\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoPlugins.py\", line 92, in doPlugins\n    return doHandlersForTag(tag,keywords)\n\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoPlugins.py\", line 70, in doHandlersForTag\n    val = callTagHandler(bunch,tag,keywords)\n\n  File \"c:\\prog\\tigris-cvs\\leo\\src\\leoPlugins.py\", line 49, in callTagHandler\n    result = handler(tag,keywords)\n\n  File \"C:\\prog\\tigris-cvs\\leo\\plugins\\rClick.py\", line 156, in rClicker\n    n0,p0=ind0.split('.',2)\n\nAttributeError: 'int' object has no attribute 'split'\n", "children": []}, {"h": "Fixed recent problem with settings report", "gnx": "ekr.20070316182341.139", "b": "Leo did not write to the log pane that settings, either present\nin myLeoSettings.leo or the current file, were read.\n", "children": []}, {"h": "New Features", "gnx": "ekr.20070316182341.437", "b": "", "children": ["ekr.20070316182341.440", "ekr.20070316182341.723", "ekr.20070316182341.718", "ekr.20070316182341.155", "ekr.20070316182341.438"]}, {"h": "Added leoBridge module", "gnx": "ekr.20070316182341.440", "b": "The leoBridge module allows complete access to all aspects of Leo from programs\nrunning independently of Leo. Let us call such a program a **host** program.\nUsing the leoBridge module, foreign programs can get access to:\n\n- all of Leo's source code,\n- the contents of any .leo file,\n- the commander of any .leo file.\n\nHost programs use the leoBridge module as follows::\n\n    import leoBridge\n    controller = leoBridge.controller(gui='nullGui')\n    g = controller.globals()\n    c = controller.openLeoFile(path)\n\nLet us look at these statements in detail.  The statements::\n\n    import leoBridge\n    controller = leoBridge.controller(gui='nullGui')\n\nimport the leoBridge module and create a **bridge controller**. In effect, these\nstatements embed an 'invisible' copy Leo into the host program. This embedded\ncopy of Leo uses a 'null' gui, which simulates all aspects of Leo's normal gui\ncode without creating any screen objects.\n\nThe statement::\n\n    g = controller.globals()\n\nprovides access to Leo's leoGlobals module, and properly inits globals such as g.app, g.app.gui, etc.  Host programs **should not** import leoGlobals directly, because doing so would not init the g.app object properly.\n\nThe statement::\n\n    c = controller.openLeoFile(path)\n\ninvisibly opens the .leo file given by the path argument. This call returns a\ncompletely standard Leo commander, properly inited. This is the big payoff from\nthe leoBridge module: the host program gets instant access to c.config.getBool,\netc. Do you see how sweet this is?\n\nThe following script runs leo/test/leoBridgeTest.py outside of Leo.\nleoBridgeTest.py uses the leoBridge module to run all unit tests in leo/test/unitTest.leo.\nTry it::\n\n    import os,sys\n\n    path = g.os_path_abspath(\n        g.os_path_join(\n            g.app.loadDir,'..','test','leoBridgeTest.py'))\n\n    os.system('%s %s' % (sys.executable,path))\n", "children": []}, {"h": "Added support for @enabled-plugins in settings files", "gnx": "ekr.20070316182341.723", "b": "Any .leo file may now contain an @enabled-plugins node as a child of an\n@settings node.\n\nNotes:\n\nA) Leo attempts to load all plugins every time an @enabled-plugins node is seen.\n   If the plugin has already been loaded, Leo silently ignores the\n   request to re-enable the plugin.\n   Leo never attempts to disable a plugin while processing enabled plugin\n   strings. Thus, plugins enabled in an @enabled-plugins node in leoSettings.leo\n   *will* be enabled regardless of the contents of any other @enabled-plugins node.\n\nB) The default plugins will be enabled in an @enabled-plugins\n   node in leoSettings.leo.\n\nC) g.app.gui.getEnabledPlugins contains the last value last processed @enabled-plugins node.\n", "children": []}, {"h": "Added new search path for pluginsManager.txt", "gnx": "ekr.20070316182341.718", "b": "http://sourceforge.net/forum/message.php?msg_id=4169720\n", "children": []}, {"h": "Made Leo's core gui-indenpendent", "gnx": "ekr.20070316182341.155", "b": "", "children": []}, {"h": "Warn on dubious section brackets", "gnx": "ekr.20070316182341.438", "b": "http://sourceforge.net/forum/message.php?msg_id=4162357\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20070317044545", "b": "The __wx_gui.py plugin is now minimally functional. All significant unit tests\npass with this plugin in effect. However, problems remain. See the bug list in\nthe plugin for details.\n", "children": []}, {"h": "4.4.3 beta 1", "gnx": "ekr.20070513111132", "b": "Leo 4.4.3 beta 1                                May 18, 2006\n\nLeo 4.4.3 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- Added support for chapters in Leo's core.\n  Chapters are disabled by default.  To enable, set @bool use_chapters = True.\n- Added support for zipped .leo files.\n- Added a leoBridge module that allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Added support for @enabled-plugins nodes in settings files.\n- Added support for @open-with nodes in settings files.\n- The__wx_gui plugin is now functional.\n- Many minor improvements, new settings, commands and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070513111526.1", "ekr.20070513111526.77"]}, {"h": "New features", "gnx": "ekr.20070513111526.1", "b": "", "children": ["ekr.20070513112414", "ekr.20070513111526.2", "ekr.20070513111526.7", "ekr.20070513111526.8", "ekr.20070513111526.10", "ekr.20070513111526.14", "ekr.20070513111526.39", "ekr.20070513111526.42"]}, {"h": "Added support for chapters to Leo's core", "gnx": "ekr.20070513112414", "b": "- Added support for chapters to Leo's core\n\n  Chapters are regions of a Leo outline whose root is an @chapter node. @chapter\n  nodes may appear anywhere in an outline, but the create-chapter command (see\n  below) creates @chapter nodes as children of a single @chapters node.\n\n  Selecting a chapter shows only then nodes in the selected chapter; in this\n  respect, chapters are like hoists. The main chapter represents the entire\n  outline and can not be deleted by name. When chapters are in effect, Leo\n  creates a hidden @chapters node containing one @chapter node for every chapter\n  except the 'main' chapter.\n\n  Associated settings:\n\n  - The @bool use_chapters setting determines whether chapters are enabled.\n  - The @bool use_chapter_tabs setting determines whether the chapters\n    pop-up menu appears in the icon area. Choosing a chapter name from this list selects a chapter.\n\n  When chapters are enabled, the Cmds:Chapters menu shows all available chapter commands:\n\n  - The create-chapter command creates an @chapter node and with a single node.\n  - The delete-chapter command deletes the presently selected chapter.\n  - The select-chapter command makes only the nodes of the selected chapter visible.\n  - The move-node-to-chapter, clone-node-to-chapter and copy-node-to-chapter commands\n    add a node (and its descendants) to another chapter.\n", "children": []}, {"h": "Added @bool force_newlines_in_at_nosent_bodies setting", "gnx": "ekr.20070513111526.2", "b": "It is True by default. In effect, this setting was False in previous versions\nof Leo, which might be considered a bug.\n", "children": []}, {"h": "Added apropos-debugging-commands command", "gnx": "ekr.20070513111526.7", "b": "", "children": []}, {"h": "Added print-plugins & print-plugin-handlers commands", "gnx": "ekr.20070513111526.8", "b": "", "children": []}, {"h": "Added print-settings command", "gnx": "ekr.20070513111526.10", "b": "", "children": []}, {"h": "Added support for @openwith nodes in leoSettings.leo", "gnx": "ekr.20070513111526.14", "b": "http://sourceforge.net/forum/message.php?msg_id=3737745\n\nhttp://sourceforge.net/forum/message.php?msg_id=3785897\n\nWould it be possible to have the table of \"Open With\" editors to be part of\nthe config system? I find myself patching the list every time I D/L a new Leo\nversion to add the editor I use. This would also help isolate the user from\nthe \"guts\" of Leo, thereby being less intimidating.\n", "children": []}, {"h": "Created clean-all-lines command", "gnx": "ekr.20070513111526.39", "b": "", "children": []}, {"h": "Support for compressed .leo files", "gnx": "ekr.20070513111526.42", "b": "Leo now supports zipped .leo files:\n\n- Leo now has save-file-as-zipped and save-file-as-unzipped commands, and\ncorresponding Save File As Zipped and Save File as Unzipped items in the File\nmenu. These are exactly the same as Leo's Save As commands except that they\ntemporarily force Leo to write the file in either zipped or unzipped format.\n\n- Leo remembers whether a file was originally zipped. The read logic handles\neither zipped or unzipped .leo files automatically. The write logic will zip the\nfile if it was originally zipped or if the save-file-as-zipped command is being\nexecuted.\n\n- Leo writes files with .leo extension, regardless of whether the file is zipped\nor not. Zipped .leo files contain a single archive, whose name is the same as\nthe .leo file itself.\n\nNotes:\n\n- The new save commands suffice to compress and expand .leo files on a\nfile-by-file basis. In particular, there is no need for any user settings.\n\n- Outside of Leo you can change the extension to .leo.zip and use stuffit or\nother program to expand the .leo file contained within. I've only tested this on\nXP, but it should work everywhere...\n\n- At present the code uses Python's zipfile module to read and write zipped files.\nIn turn, the zipfile module uses the zlib module to do the compression.\nConceivably somebody might want Leo to use some other compression technique, say\nPython's tarfile module. However, I think the present way should suffice for\nmost people.\n", "children": []}, {"h": "Fixed bugs", "gnx": "ekr.20070513111526.77", "b": "", "children": ["ekr.20070513111526.78", "ekr.20070513111526.80", "ekr.20070513111526.105", "ekr.20070513111526.198", "ekr.20070513111526.200"]}, {"h": "Fixed bug: new-file doesn't allow edit of initial headline", "gnx": "ekr.20070513111526.78", "b": "# Found via unit test.  Happens regardless of chapters.\n", "children": []}, {"h": "Removed all returns from finally clauses", "gnx": "ekr.20070513111526.80", "b": "# Returns in finally clauses prevent the re-raising of the saved exception(!!)\n", "children": []}, {"h": "Fixed repeatComplexCommand weirdness", "gnx": "ekr.20070513111526.105", "b": "", "children": []}, {"h": "Fixed minor chapter hoist bug", "gnx": "ekr.20070513111526.198", "b": "http://sourceforge.net/forum/message.php?msg_id=4215654\n\nThere was a bug with ordinary hoisting: in the \"Outline\" menu the \"Delete Node\"\nmenu item was not disabled when the local root is selected.\n", "children": []}, {"h": "Fixed crasher in plugins_menu.py", "gnx": "ekr.20070513111526.200", "b": "", "children": []}, {"h": "4.4.3 beta 2", "gnx": "ekr.20070610063456", "b": "Leo 4.4.3 beta 2                                June 12, 2006\n\nLeo 4.4.3 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- Added support for chapters in Leo's core.\n  Chapters are disabled by default.  To enable, set @bool use_chapters = True.\n- Added support for zipped .leo files.\n- Added a leoBridge module that allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Added support for @enabled-plugins nodes in settings files.\n- Added support for @open-with nodes in settings files.\n- Added support for @bool write_strips_blank_lines setting.\n- The__wx_gui plugin is now functional.\n- Leo can use aspell on Linux when using Python 2.5 or later.\n- Many minor improvements, new settings, commands and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070610063538.1", "ekr.20070610063538.280"]}, {"h": "Fixed bugs", "gnx": "ekr.20070610063538.1", "b": "", "children": ["ekr.20070610063538.2", "ekr.20070610063538.151", "ekr.20070610063538.163", "ekr.20070610063538.164", "ekr.20070610063538.165", "ekr.20070610063538.168", "ekr.20070610063538.171", "ekr.20070610063538.175", "ekr.20070610063538.209", "ekr.20070610063538.212", "ekr.20070611161859"]}, {"h": "Fixed noweb hangs", "gnx": "ekr.20070610063538.2", "b": "http://sourceforge.net/forum/message.php?msg_id=4315027\n\nThe fix was to g.skip_to_end_of_line (!)\n\nAll such functions now return len(s) as a boundary condition.\nThis is a major change.  All unit tests pass.\n", "children": []}, {"h": "Alt-4 did not work in tree pane in unitTest.leo", "gnx": "ekr.20070610063538.151", "b": "", "children": []}, {"h": "Investigated problem with subprocess (works for me)", "gnx": "ekr.20070610063538.163", "b": "http://sourceforge.net/forum/message.php?msg_id=4320971\n", "children": []}, {"h": "Fixed crashers in leoupate plugin", "gnx": "ekr.20070610063538.164", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=4309448\n\nStill to do: update urls for tigris.\n", "children": []}, {"h": "Fixed automatic directory creation", "gnx": "ekr.20070610063538.165", "b": "http://sourceforge.net/forum/message.php?msg_id=4301021\n", "children": []}, {"h": "Fixed bug: shift-arrow keys not bound properly when node is clicked", "gnx": "ekr.20070610063538.168", "b": "- Select a node by clicking on it.\n- The node is selected, but shift-arrow does not work.\n\nHowever, clicking the canvas does work.\n\nThe fix was to give the canvas, not the headline focus when clicking on a headline.\nThis results in canvas bindings, not text bindings, having priority.\nThis is not a kludge: the text widget isn't active, so text bindings should not be in effect.\n", "children": []}, {"h": "Made sure the new outlines aren't marked dirty", "gnx": "ekr.20070610063538.171", "b": "", "children": []}, {"h": "Fix crasher in maximizeNewWindows", "gnx": "ekr.20070610063538.175", "b": "http://sourceforge.net/forum/message.php?msg_id=4340244\n", "children": []}, {"h": "Don't change focus in the save command", "gnx": "ekr.20070610063538.209", "b": "http://sourceforge.net/forum/message.php?msg_id=4341644\n", "children": []}, {"h": "downcase-region and upcase-region didn't color body text.", "gnx": "ekr.20070610063538.212", "b": "", "children": []}, {"h": "Fixed *major* demote bug", "gnx": "ekr.20070611161859", "b": "http://sourceforge.net/forum/message.php?msg_id=4356197\n", "children": []}, {"h": "Features", "gnx": "ekr.20070610063538.280", "b": "", "children": ["ekr.20070610063538.281", "ekr.20070610063538.334", "ekr.20070610063538.366", "ekr.20070610063538.377", "ekr.20070610173300"]}, {"h": "Supported write_strips_blank_lines option", "gnx": "ekr.20070610063538.281", "b": "", "children": []}, {"h": "Completed chapters", "gnx": "ekr.20070610063538.334", "b": "The following chapter commands now exist:\n\nclone-node-to-chapter\nconvert-node-to-chapter\ncopy-node-to-chapter\ncreate-chapter\ncreate-chapter-from-node\nmove-node-to-chapter\nremove-chapter\nrename-chapter\nselect-chapter\n", "children": []}, {"h": "Improved dynamic abbreviations", "gnx": "ekr.20070610063538.366", "b": "http://sourceforge.net/forum/message.php?msg_id=4255709\n\nAdded globalDynamicAbbrevs setting.\nAdded tab completion for dabbrev-expand.\n", "children": []}, {"h": "Created the hoist-changed hook", "gnx": "ekr.20070610063538.377", "b": "This for the use of the hoist plugin.\n", "children": []}, {"h": "Enabled more plugins by default", "gnx": "ekr.20070610173300", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=4134565\n\nThe following are now enabled by default:\n\n# Plugin_manager.py needs plugins_menu.py\nplugins_menu.py\nplugin_manager.py\nopen_with.py\nmod_scripting.py\nrst3.py\nUNL.py\n\n# Enabled by default in Leo 4.4.3. (order is important)\nnav_buttons.py\nhoist.py\nimage.py\nleo_to_html.py\n\nI left out cleo because it has been reported not to be fully functional with Leo 4.4.3.\n", "children": []}, {"h": "4.4.3 beta 3", "gnx": "ekr.20070622090350", "b": "Leo 4.4.3 beta 3                                June 23, 2006\n\nLeo 4.4.3 beta 3 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis release fixes all known bugs and adds several new features.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- Added support for chapters in Leo's core.\n- Added support for zipped .leo files.\n- Added a leoBridge module that allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Added support for @enabled-plugins nodes in settings files.\n- Added support for @open-with nodes in settings files.\n- Added support for @bool write_strips_blank_lines setting.\n- The__wx_gui plugin is now functional.\n- Leo can use aspell on Linux when using Python 2.5 or later.\n- @test nodes can now be run from any .leo file.\n- Many minor improvements, new settings, commands and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070622090350.1", "ekr.20070622090350.59"]}, {"h": "Fixed bugs", "gnx": "ekr.20070622090350.1", "b": "", "children": ["ekr.20070622090350.8", "ekr.20070622090350.22", "ekr.20070622090350.42", "ekr.20070622090350.57"]}, {"h": "Fixed a bug that disabled icon button colors on Linux", "gnx": "ekr.20070622090350.8", "b": "", "children": []}, {"h": "Switch chapters if new position isn't in current chapter", "gnx": "ekr.20070622090350.22", "b": "http://sourceforge.net/forum/message.php?msg_id=4362825\n", "children": []}, {"h": "Improved goto-next/prev-node commands", "gnx": "ekr.20070622090350.42", "b": "Selecting a node now never truncates the beadList.\n", "children": []}, {"h": "Fixed failing bridge unit test", "gnx": "ekr.20070622090350.57", "b": "CleanLines was adding a trailing newline.\nThe fix was to suppress this during unit tests.\n", "children": []}, {"h": "New features & settings", "gnx": "ekr.20070622090350.59", "b": "", "children": ["ekr.20070622090350.60", "ekr.20070622090350.61", "ekr.20070622090350.62", "ekr.20070622090350.65", "ekr.20070622090350.66", "ekr.20070622090350.9"]}, {"h": "Added @bool contractVisitedNodes setting", "gnx": "ekr.20070622090350.60", "b": "", "children": []}, {"h": "Added goto-first-visible-node command", "gnx": "ekr.20070622090350.61", "b": "", "children": []}, {"h": "Changed binding of Alt-Home", "gnx": "ekr.20070622090350.62", "b": "Alt-home is now bound to goto-first-visible rather than goto-first.\n", "children": []}, {"h": "Added @button dynamic-tests.", "gnx": "ekr.20070622090350.65", "b": "This script runs all @test nodes as follows:\n\n- Copies all @suite and @tests nodes to dynamicUnitTests.leo.\n\n- Runs leoDynamicTest.py in a separate process. In turn, leoDynamicTest.py\n  use the leoBridge module to run dynamicUnitTests.leo.\n  (test.leo contains the source code for leoDynamicTest.py.)\n\nThus, all unit tests will be run with the latest Leo sources.\n\nAllowing @test nodes in leoPy.leo is important: unit tests can be placed near\nthe code they are intended to test.\n", "children": []}, {"h": "created g.unitTesting and g.getTestVars", "gnx": "ekr.20070622090350.66", "b": "The test 'if g.unitTesting:' is a shorter replacement for the test 'if g.app and g.app.unitTesting:'.\n\nUsing g.getTestVars eliminates pychecker warnings about undefined c and p variables.\n", "children": []}, {"h": "Made alt menu keys work", "gnx": "ekr.20070622090350.9", "b": "# Created menu-command-key command that just returns 'continue'.\n", "children": []}, {"h": "4.4.3 final", "gnx": "ekr.20070626082732", "b": "Leo 4.4.3 final                                  June 26, 2006\n\nLeo 4.4.3 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3:\n----------------------------\n- Added support for chapters in Leo's core.\n- Added support for zipped .leo files.\n- Added a leoBridge module that allows full access to all of Leo's capabilities\n  from programs running outside of Leo.\n- Removed all gui-dependent code from Leo's core.\n- Better support for the winpdb debugger.\n- Added support for @enabled-plugins nodes in settings files.\n- Added support for @open-with nodes in settings files.\n- Added support for @bool write_strips_blank_lines setting.\n- The__wx_gui plugin is now functional.\n- Leo can use aspell on Linux when using Python 2.5 or later.\n- @test nodes can now be run from any .leo file.\n- Many minor improvements, new settings, commands and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.4.3.1", "gnx": "ekr.20070702162421", "b": "Leo 4.4.3.1                                 July 3, 2006\n\nLeo 4.4.3.1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.3.1:\n----------------------------\n- Fixed a few minor bugs reported since Leo 4.4.3 was released.\n- Added better support for unit testing in Leo.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070703095207.1", "ekr.20070703095207.55"]}, {"h": "Bugs", "gnx": "ekr.20070703095207.1", "b": "", "children": ["ekr.20070703095207.2", "ekr.20070703095207.5", "ekr.20070703095207.34", "ekr.20070703095207.35", "ekr.20070703095207.40", "ekr.20070703095207.41", "ekr.20070703095207.43", "ekr.20070703095207.50", "ekr.20070703095207.51"]}, {"h": "Fixed improper can not open myLeoSettings message", "gnx": "ekr.20070703095207.2", "b": "", "children": []}, {"h": "Fixed import problem in leoDynamicTest.py", "gnx": "ekr.20070703095207.5", "b": "It's a bit tricky to ensure that leo/src is in sys.path\nThe code now changes the working directory to leo/src,\nand leoDynamicTest.py adds os.getcwd() to sys.path if it is not there.\n\n", "children": []}, {"h": "Fixed cleo crasher", "gnx": "ekr.20070703095207.34", "b": "https://sourceforge.net/forum/message.php?msg_id=4385604\n", "children": []}, {"h": "Fixed spell-check bug", "gnx": "ekr.20070703095207.35", "b": "Misspelled words were not selected properly on Linux.\n", "children": []}, {"h": "Fixed several crashers in the group operations plugin", "gnx": "ekr.20070703095207.40", "b": "http://sourceforge.net/forum/message.php?msg_id=4385699\n", "children": []}, {"h": "Fixed chapters bug", "gnx": "ekr.20070703095207.41", "b": "Moving into a chapters node from the main chapter did an automatic hoist.\n", "children": []}, {"h": "Fixed problems in groupOperations plugin", "gnx": "ekr.20070703095207.43", "b": "- Made inter-outline moves & copies work again.\n- Also, warn that inter-outline clones transfer have no effect.\n- Note: none of these operations are presently undoable.\n\nIn short, this code is no worse than it has ever been.\n", "children": []}, {"h": "Fixed pychecker complaints", "gnx": "ekr.20070703095207.50", "b": "# Added calls to c,p = g.getTestVars()\n\n(fixed) leoNodes.py:2801: No global (p) found\n(fixed) leoNodes.py:2804: No global (c) found\n\n(fixed) leoConfig.py:1739: No global (c) found\n\n(fixed) leoKeys.py:4446: No global (c) found\n\n(fixed) leoEditCommands.py:7823: No global (c) found\n(fixed) leoEditCommands.py:8508: No global (e) found\n", "children": []}, {"h": "Fixed editor bug: deleting an editor did not always select the proper body pane", "gnx": "ekr.20070703095207.51", "b": "", "children": []}, {"h": "Features", "gnx": "ekr.20070703095207.55", "b": "", "children": ["ekr.20070703095207.56", "ekr.20070703095207.61", "ekr.20070703095207.72"]}, {"h": "g.es and g.es_print print only to console during unit tests", "gnx": "ekr.20070703095207.56", "b": "", "children": []}, {"h": "Run unit tests in a separate process", "gnx": "ekr.20070703095207.61", "b": "For full details, see Chapter 20: Unit testing with Leo.\n", "children": []}, {"h": "Move most unit tests into external files", "gnx": "ekr.20070703095207.72", "b": "It is essential to protect them with::\n\n     if g.unitTesting:\n\nA new unit test ensures that this is so.\n", "children": []}, {"h": "4.4.4 @auto, @menus, threading syntax colorer, the Great Graph Aha", "gnx": "ekr.20070806090235", "b": "", "children": ["ekr.20070806090235.1", "ekr.20070915101216", "ekr.20071004101349", "ekr.20071026053825", "ekr.20071101162646"]}, {"h": "4.4.4 b1", "gnx": "ekr.20070806090235.1", "b": "Leo 4.4.4 beta 1                                August 10, 2007\n\nLeo 4.4.4 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.4:\n----------------------------\n\n- A threading_colorizer plugin replaces the __jEdit_colorizer__ plugin.\n  This plugin features much better performance.\n\n- Support for @auto nodes.  Such nodes allow people to collaborate using Leo\n  without inserting Leo sentinels in the files Leo generates.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070806090226.1", "ekr.20070806090226.14", "ekr.20070806090226.15"]}, {"h": "Added support for @mark-for-unit-tests node", "gnx": "ekr.20070806090226.1", "b": "The run-unit-tests command now includes *all* @mark-for-unit-test trees.\n", "children": []}, {"h": "Created threading_colorizer", "gnx": "ekr.20070806090226.14", "b": "The old __jEdit_colorizer__.py plugin has been retired.\n", "children": []}, {"h": "4.4.4 b2", "gnx": "ekr.20070915101216", "b": "Leo 4.4.4 beta 2                                September 19, 2007\n\nLeo 4.4.4 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.4:\n----------------------------\n\n- A threading_colorizer plugin replaces the __jEdit_colorizer__ plugin.\n  This plugin features much better performance.\n\n- Support for @auto nodes.  Such nodes allow people to collaborate using Leo\n  without inserting Leo sentinels in the files Leo generates.\n\n- New commands for resolving cvs conflicts.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20070915101157.1", "ekr.20070915101157.82"]}, {"h": "Bug fixes", "gnx": "ekr.20070915101157.1", "b": "", "children": ["ekr.20070915101157.3", "ekr.20070915101157.5", "ekr.20070915101157.14", "ekr.20070915101157.16", "ekr.20070915101157.17", "ekr.20070915101157.18", "ekr.20070915101157.19", "ekr.20070915101157.40", "ekr.20070915101157.45", "ekr.20070915101157.48", "ekr.20070915101157.50", "ekr.20070915101157.70", "ekr.20070915101157.81"]}, {"h": "Fixed UNL bug1", "gnx": "ekr.20070915101157.3", "b": "Email from Terry Brown\n\nA softish bug, but the use of findNodeInTree() in the UNL code can \ntake you to the wrong place if more than one node in the tree has \nthe same headString.  Patch below - can still go wrong if more than \none sibling has the same name, but the UNL system doesn't have a \nsolution for that.\n\nAn observation - the UNL jumping code will drop you as far down the \npath as it gets, i.e. you're moved to the last node that was one the \npath, even if the path ends before the last part of the UNL is \nreached.  This is ok, i.e. \"this is as far as I could follow the \nUNL\", the alternative would be to not move at all if the whole UNL \ncan't be followed.\n\nCheers -Terry\n\nanon_cvs> cvs diff leo/plugins/UNL.py\nIndex: leo/plugins/UNL.py\n===================================================================\nRCS file: /cvs/leo/plugins/UNL.py,v\nretrieving revision 1.14\ndiff -r1.14 UNL.py\n183c183,186\n<                             p = g.findNodeInTree(c2,p,headline)\n---\n>                             for tmpp in p.copy().children_iter():\n>                                 if tmpp.headString() == headline:\n>                                     p = tmpp\n>                                     break\n206c209,212\n<                             p = g.findNodeInTree(c,p,headline)\n---\n>                             for tmpp in p.copy().children_iter():\n>                                 if tmpp.headString() == headline:\n>                                     p = tmpp\n>                                     break\n\n", "children": []}, {"h": "Fixed how @auto handles paths", "gnx": "ekr.20070915101157.5", "b": "http://sourceforge.net/forum/message.php?msg_id=4444579\n", "children": []}, {"h": "Fixed another path bug", "gnx": "ekr.20070915101157.14", "b": "http://sourceforge.net/forum/message.php?msg_id=4445685\n", "children": []}, {"h": "fixed c parser so it handles non-ascii declaratsions", "gnx": "ekr.20070915101157.16", "b": "http://sourceforge.net/forum/message.php?msg_id=4446937\n", "children": []}, {"h": "Fixed colorizing bug and moved calls to w.toGuiIndex out of some loops", "gnx": "ekr.20070915101157.17", "b": "# The code that was removing tags was not working properly.\n", "children": []}, {"h": "Fixed unicode bug in http plugin", "gnx": "ekr.20070915101157.18", "b": "http://sourceforge.net/forum/message.php?msg_id=4437415\n", "children": []}, {"h": "Fixed new @path problem", "gnx": "ekr.20070915101157.19", "b": "http://sourceforge.net/forum/message.php?msg_id=4462693\n", "children": []}, {"h": "Fixed @auto path bug", "gnx": "ekr.20070915101157.40", "b": "http://sourceforge.net/forum/message.php?msg_id=4464980\n", "children": []}, {"h": "Improved messages on @import failure", "gnx": "ekr.20070915101157.45", "b": "@nocolor\n\nhttp://sourceforge.net/forum/message.php?msg_id=4465132\nBy: terry_n_brown\n\nSo I changed all my indentation to multiples of four, having decided I like\nthe extra line space this buys over aligning with the opening (.\n\nleo said this when it read the file:\n\n@auto did not import the file perfectly\n\nbut never mentioned @ignore or anything.  I made a trivial change and saved\nand diff could find no difference except my trivial change... which seems perfect\nto me...?\n\n@color\n", "children": []}, {"h": "Fixed problem with space in path names in runLeoDynamicTest", "gnx": "ekr.20070915101157.48", "b": "https://sourceforge.net/forum/message.php?msg_id=4459798\n", "children": []}, {"h": "Fixed bad drag & drop bug", "gnx": "ekr.20070915101157.50", "b": "http://sourceforge.net/forum/message.php?msg_id=4509897\n", "children": []}, {"h": "Fixed bug 'node note selected' bug", "gnx": "ekr.20070915101157.70", "b": "http://sourceforge.net/forum/message.php?msg_id=4514130\n", "children": []}, {"h": "Retain dirty bit after write @auto fails", "gnx": "ekr.20070915101157.81", "b": "http://sourceforge.net/forum/message.php?msg_id=4468174\n", "children": []}, {"h": "Features", "gnx": "ekr.20070915101157.82", "b": "", "children": ["ekr.20070915101157.168", "ekr.20070920092716"]}, {"h": "Read @auto nodes during saves if the node has not been read previously", "gnx": "ekr.20070915101157.168", "b": "When saving a .leo file, Leo now *reads* an @auto node if\n\n1) the external file exists,\n2) an 'insignificant' amount of data exists in the @auto tree, and\n3)the @auto node has not been read previously.\n\nThis promises to fix some quite awkward use cases.\n\nThe 'perfect import' code now is a bit more relaxed, especially for 'non-strict'\nlanguages (all languages except Python):\n\n- Leo leaves leading whitespace alone for non-strict languages.\n\n- Leo complains about intermixed tabs and blanks in leading whitespace only for\nstrict languages.\n\n- Leo ignores leading whitespace in the perfect import tests for non-strict\nlanguages.\n\nThese changes mean that Leo might change a external file if such a change occurs\nonly in leading whitespace in a non-strict language.\n", "children": []}, {"h": "4.4.4 b3", "gnx": "ekr.20071004101349", "b": "Leo 4.4.4 beta 3                            October 23, 2007\n\nLeo 4.4.4 beta 3 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.4 contains many important features originally planned for later releases.\nIt's been a good month :-)\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.4:\n----------------------------\n\n- The Great Graph Aha (tm): simple scripts allow Leo outlines to represent\n  arbitrary directed graphs. There is no need for a separate 'graph world'. The\n  graphed.py plugin is a direct result of this Aha. The graphed.py plugin allows\n  you to create general graphs from Leo outlines.\n\n- @menus trees in settings files create all of Leo's menus.  It is now dead\n  easy to make Leo's menus look the way you want.\n\n- @buttons trees in settings files create common @button nodes created in all\n  Leo outlines.\n\n- @auto nodes eliminate sentinels in external files, thereby allowing people to\n  collaborate using Leo more easily.\n\n- New commands for resolving cvs conflicts.\n\n- A threading_colorizer plugin replaces the __jEdit_colorizer__ plugin.\n  This plugin features much better performance and a new, elegant algorithm.\n\n- Leo is now compatible with jython.\n\n- The usual assortment of bug fixes and other minor improvements.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071004101443.1", "ekr.20071004101443.29"]}, {"h": "Bugs fixed", "gnx": "ekr.20071004101443.1", "b": "", "children": ["ekr.20071004101443.18", "ekr.20071004101443.26", "ekr.20071021111856.20", "ekr.20071021111856.83", "ekr.20071021111856.124", "ekr.20071021111856.127", "ekr.20071021111856.252", "ekr.20071021111856.437", "ekr.20071021111856.461", "ekr.20071023080957"]}, {"h": "Greatly improved speed of unmark-all", "gnx": "ekr.20071004101443.18", "b": "", "children": []}, {"h": "Made sure dirty bits get updated in xemacs plugin", "gnx": "ekr.20071004101443.26", "b": "http://sourceforge.net/forum/message.php?msg_id=4543844\n", "children": []}, {"h": "Fixed backward find bug", "gnx": "ekr.20071021111856.20", "b": "In some cases the find-previous command did not work.\n\nAfter much investigation, the cause of the bug was found to be a blunder in backwardsHelper.  Changed:\n\npattern.lower()\n\nto:\n\npattern = pattern.lower()\n", "children": []}, {"h": "Fixed cursor up/down problem", "gnx": "ekr.20071021111856.83", "b": "There were at least 3 bugs:\n\nAt least three bugs.\n\n- Place cursor on last (blank) line.  Cursor up goes one line too far.\n- Place cursor at end of line 1.  Second cursor down does nothing.\n- Place cursor at end of xxxx line.  Second cursor down goes one line too far.\n\nxxxxxxxxx\nline 1\nline 2\n\nThe fix was to g.getLine--potentially a major change.\n", "children": []}, {"h": "Fixed unicode bug in trace", "gnx": "ekr.20071021111856.124", "b": "This should have been done long ago.\n", "children": []}, {"h": "Fixed chapter crasher", "gnx": "ekr.20071021111856.127", "b": "http://sourceforge.net/forum/message.php?msg_id=4573990\n", "children": []}, {"h": "Installed patch to fix Fedora Tk.Text bug", "gnx": "ekr.20071021111856.252", "b": "https://sourceforge.net/forum/message.php?msg_id=4576436\n", "children": []}, {"h": "Fixed bug in rst3 plugin", "gnx": "ekr.20071021111856.437", "b": "Suppressed doc-part-delims when show_doc_parts_as_paragraphs is True.\n", "children": []}, {"h": "Allow unicode characters in Leo file names", "gnx": "ekr.20071021111856.461", "b": "", "children": []}, {"h": "Fixed bugs when running unit tests externally", "gnx": "ekr.20071023080957", "b": "The run-unit-tests command runs tests using the bridge, which uses a nullGui and a stringTextWidget.\n\nAdded a hack to g.getScript so it always gets the script from p.bodyString when\ng.app.gui.inBridge is True.\n", "children": []}, {"h": "New Features", "gnx": "ekr.20071004101443.29", "b": "", "children": ["ekr.20071004103659", "ekr.20071021111856.441", "ekr.20070806090226.15", "ekr.20071004101443.52", "ekr.20071004101443.105", "ekr.20070920092716", "ekr.20071004105000", "ekr.20071004101443.178", "ekr.20071004101443.30", "ekr.20071005095907", "ekr.20071006093614", "ekr.20071006155647", "ekr.20071021111856.412", "ekr.20071021111856.458", "ekr.20071021111856.459", "ekr.20071021111856.476", "ekr.20071021111856.477"]}, {"h": "Rewrote threading colorizer", "gnx": "ekr.20071021111856.441", "b": "The new code is simple and elegant.  Almost all flash is gone.\n", "children": []}, {"h": "Added @buttons trees in @settings trees", "gnx": "ekr.20071004101443.52", "b": "@button nodes in the @buttons tree in settings file define **global buttons** that appear in all Leo outlines.\n", "children": []}, {"h": "Added @menus trees in @settings trees", "gnx": "ekr.20071004101443.105", "b": "Leo creates its menus using @menus trees. Within @menus trees,\n@menu nodes create menus and @item nodes create menu items.\n\nNotes:\n\n- The menu name always follows @menu. If the menu name is 'Plugins', Leo will\n  create the Plugins menu and populate the menu by calling the\n  'create-optional-menus' hook. This creates the Plugins menu as usual.\n\n- Nested @menu nodes contain submenus.\n\n- The command name follows @item. If the body text of an @item node exists, this\n  body text is the menu name. Otherwise, the menu name is the command name.\n  However, if the command name starts with a '*', hyphens are removed from the\n  menu name.\n\n- Menu names and command names may contain a single ampersand (&). If present,\n  the following character is underlined in the name.\n\n- If the command name in an @item node is just a hyphen (-), the item represents\n  a menu separator.\n\n- Unicode characters, e.g., Chinese characters *are* allowed.\n", "children": []}, {"h": "Added the graphed plugin", "gnx": "ekr.20071004105000", "b": "The graphed plugin allows users to manipulate parts of Leo outlines as if\nthey were general graphs. It is still early days for this exciting plugin.\n", "children": []}, {"h": "New convenience methods", "gnx": "ekr.20071004101443.178", "b": "The c.frame.logcreateCanvas convenience method create a canvas tab in the log pane.\nHere is a sample script:\n\nlog = c.frame.log ; tag = 'my-canvas'\n\nw = log.canvasDict.get(tag)\nif not w:\n..w = log.createCanvas(tag)\n..w.configure(bg='yellow')\n\nlog.selectTab(tag)\n", "children": []}, {"h": "Added button font settings", "gnx": "ekr.20071004101443.30", "b": "See the node:\n\n@settings-->Fonts-->@font button font\n\nin leoSettings.leo.\n", "children": []}, {"h": "Leo's core is now compatible with jython", "gnx": "ekr.20071005095907", "b": "- Replaced all 'yield' statements with iterators.\n\n- Added 'jyLeo' keyword to leo.run.\n\n- All of Leo's startup code works with the swing gui enabled (jyLeo = True in leo.run).\n", "children": []}, {"h": "Added the insert-child command", "gnx": "ekr.20071006093614", "b": "This inserts a child node.\n", "children": []}, {"h": "@bool add_ws_to_kill_ring setting", "gnx": "ekr.20071006155647", "b": "", "children": []}, {"h": "Improved yank and yank-pop commands", "gnx": "ekr.20071021111856.412", "b": "Optimized yank, by using yanked leading whitespace if it exists\n\nNew default bindings: Alt-Y: yank-pop.  Alt-Ctrl-Y: cycle-all-focus.\n\nNew option: add-ws-to-kill-ring (or kill-ws-adds-to-kill-ring)\n", "children": []}, {"h": "Improved debug command", "gnx": "ekr.20071021111856.458", "b": "http://sourceforge.net/forum/message.php?msg_id=4568499\n", "children": []}, {"h": "Added the @bool rst3 strip_at_file_prefixes setting", "gnx": "ekr.20071021111856.459", "b": "From the documentation at: http://webpages.charter.net/edreamleo/rstplugin3.html#options\n\nstrip_at_file_prefixes (default: True)\n\nTrue: remove @auto, @file, @nosent and @thin from the start of headlines.\n", "children": []}, {"h": "Added g.app.inBridge ivar", "gnx": "ekr.20071021111856.476", "b": "This is used, at present, by g.getScript.  It is a natural status ivar in any case.\n", "children": []}, {"h": "Improved the scripting and plugins chapters of Leo's Users Guide", "gnx": "ekr.20071021111856.477", "b": "- Use the term 'event handler' for hook.  This is much better terminology.\n\n- Move the discussion of event handlers to the scripting chapter.\n\n- Removed the discussion of all menu convenience routines: they are not needed now that Leo supports @menus nodes.\n\n- The 'writing plugins' chapter is now very simple.\n", "children": []}, {"h": "4.4.4 b4", "gnx": "ekr.20071026053825", "b": "Leo 4.4.4 beta 4                            October 27, 2007\n\nLeo 4.4.4 beta 4 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis beta 4 version fixes all bugs reported against Leo 4.4.4 beta 3.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.4.4 contains many important features originally planned for later releases.\n\nThe highlights of Leo 4.4.4:\n----------------------------\n\n- The Great Graph Aha (tm): simple scripts allow Leo outlines to represent\n  arbitrary directed graphs. There is no need for a separate 'graph world'. The\n  graphed.py plugin is a direct result of this Aha. The graphed.py plugin allows\n  you to create general graphs from Leo outlines.\n\n- @menus trees in settings files create all of Leo's menus.  It is now dead\n  easy to make Leo's menus look the way you want.\n\n- @buttons trees in settings files create common @button nodes created in all\n  Leo outlines.\n\n- @auto nodes eliminate sentinels in external files, thereby allowing people to\n  collaborate using Leo more easily. **Warning**: for now, please make backup\n  copies of files imported with @auto.\n\n- New commands for resolving cvs conflicts.\n\n- A threading_colorizer plugin replaces the __jEdit_colorizer__ plugin.\n  This plugin features much better performance and a new, elegant algorithm.\n\n- Leo is now compatible with jython.\n\n- Better support for icons in headlines.\n\n- The usual assortment of bug fixes and other minor improvements.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071026053931.1", "ekr.20071026182824"]}, {"h": "Fixed bugs", "gnx": "ekr.20071026053931.1", "b": "", "children": ["ekr.20071026053931.13", "ekr.20071026053931.156", "ekr.20071026053931.157", "ekr.20071026053931.219", "ekr.20071026053931.220", "ekr.20071026075016", "ekr.20071026092552"]}, {"h": "Fixed bug: utf-8 files now get imported properly", "gnx": "ekr.20071026053931.13", "b": "http://sourceforge.net/forum/message.php?msg_id=4574271\n", "children": []}, {"h": "Replaced c.frame.body with c.frame.body.bodyCtrl", "gnx": "ekr.20071026053931.156", "b": "This should have been done a long time ago.\n", "children": []}, {"h": "Fixed (maybe) multi-editor bug", "gnx": "ekr.20071026053931.157", "b": "http://sourceforge.net/forum/message.php?msg_id=4585396\n\nThe threading colorizer must be run with interruptible=False when there are multiple body editors.\n", "children": []}, {"h": "Made sure proper node is visible when deleting a body editor", "gnx": "ekr.20071026053931.219", "b": "", "children": []}, {"h": "Fixed colorizer end-of-text bug", "gnx": "ekr.20071026053931.220", "b": "", "children": []}, {"h": "Added support for fastGotoNode plugin to leoKeyEvent classes", "gnx": "ekr.20071026075016", "b": "This fixes a fairly old crasher in the fastGotoNode plugin.\n", "children": []}, {"h": "Fixed bug that disabled multiple occurances of the same user icon", "gnx": "ekr.20071026092552", "b": "", "children": []}, {"h": "Added features", "gnx": "ekr.20071026182824", "b": "", "children": ["ekr.20071026053931.221", "ekr.20071026053931.234", "ekr.20071026180804.1"]}, {"h": "Added @bool big_outline_pane setting", "gnx": "ekr.20071026053931.221", "b": "False (legacy): Top pane contains outline and log panes.\nTrue: Top pane contains only the outline pane.  Bottom pane contains body and log panes.\n", "children": []}, {"h": "Can print *can* handle unicode", "gnx": "ekr.20071026053931.234", "b": "To allow Python's print statement to print unicode characters properly, you must\nchange Python's default encoding to something other than 'ascii'. To do this,\nput the following in your sitecustomize.py file in Python's Lib folder::\n\n    import sys \n    sys.setdefaultencoding('utf-8') # 'iso-8859-1' is another choice.\n\nYou must restart Python after doing this: sys.setdefaultencoding can not be\ncalled after Python starts up.\n\nLeo's g.es_print function attempts to convert incoming arguments to unicode\nusing the default encoding. For example, the following Leo script always prints\nLa Pe\u00f1a::\n\n    @first # -*- coding: utf-8 -*-\n    # The line above is required for Python 2.5\n\n    for s in (u'La Pe\\xf1a','La Pe\u00f1a',u'La Pe\u00f1a'): \n        g.es_print(s)\n\nFor still more details, see:\n\nhttp://www.diveintopython.org/xml_processing/unicode.html \n", "children": []}, {"h": "Improved the prototype of icon handling", "gnx": "ekr.20071026180804.1", "b": "The prototype in test.leo now uses PIL (Python Imaging Library) if available,\nso many more kinds of icons can be used.\n\nButtons now exist to add icons to do the following:\n\n- Add any icon to any node.\n- Delete all icons from a single node or the entire tree.\n- Print the icon files associated with a node.\n- Print the sizes of icons in a directory.\n\nIn addition, fixed a bug in the icon handling in the outline widget that caused\nduplicate icons not to be drawn properly.\n", "children": []}, {"h": "4.4.4 Final", "gnx": "ekr.20071101162646", "b": "Leo 4.4.4 Final                           November 2, 2007\n\nLeo 4.4.4 Final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.4.4 contains many important features originally planned for later releases.\n\nThe highlights of Leo 4.4.4:\n----------------------------\n\n- The Great Graph Aha (tm): simple scripts allow Leo outlines to represent\n  arbitrary directed graphs. There is no need for a separate 'graph world'. The\n  graphed.py plugin is a direct result of this Aha. The graphed.py plugin allows\n  you to create general graphs from Leo outlines.\n\n- @menus trees in settings files create all of Leo's menus.  It is now dead\n  easy to make Leo's menus look the way you want.\n\n- @buttons trees in settings files create common @button nodes created in all\n  Leo outlines.\n\n- @auto nodes eliminate sentinels in external files, thereby allowing people to\n  collaborate using Leo more easily. **Warning**: for now, please make backup\n  copies of files imported with @auto.\n\n- New commands for resolving cvs conflicts.\n\n- A threading_colorizer plugin replaces the __jEdit_colorizer__ plugin.\n  This plugin features much better performance and a new, elegant algorithm.\n\n- Leo is now compatible with jython.\n\n- Better support for icons in headlines.\n\n- Many bug fixes and other minor improvements.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071101162751"]}, {"h": "Fixed bugs", "gnx": "ekr.20071101162751", "b": "", "children": ["ekr.20071101162751.2", "ekr.20071101162751.4", "ekr.20071101162751.19", "ekr.20071101162751.28", "ekr.20071101162751.32", "ekr.20071101162751.33", "ekr.20071101162751.34", "ekr.20071101162751.97", "ekr.20071101162751.149", "ekr.20071101162751.150", "ekr.20071101162751.178", "ekr.20071101162751.184", "ekr.20071101163257"]}, {"h": "Fixed bug that caused rClick plugin to crash", "gnx": "ekr.20071101162751.2", "b": "http://sourceforge.net/forum/message.php?msg_id=4591494\n", "children": []}, {"h": "Fixed scrolling problem with chapters", "gnx": "ekr.20071101162751.4", "b": "", "children": []}, {"h": "Fixed bug: select a chapter containing the initially selected node", "gnx": "ekr.20071101162751.19", "b": "The fix doesn't actually remember which chapter was previously selected; it\npicks some chapter containing the initially selected node. This works exactly\nfor non-cloned nodes, but can select the 'wrong' chapter for cloned nodes.\nStill, this is a big improvement over the previous code, which would not select\nany node if the selected node was not in the main chapters.\n", "children": []}, {"h": "Fixed Apple help menu reversion", "gnx": "ekr.20071101162751.28", "b": "", "children": []}, {"h": "Disabled the plugins manage plugin", "gnx": "ekr.20071101162751.32", "b": "It is too confusing at present, because it doesn't support @enabled-plugins nodes.\n", "children": []}, {"h": "Made sure plugins work if frame.iconFrame is None", "gnx": "ekr.20071101162751.33", "b": "", "children": []}, {"h": "Fixed @auto java bug", "gnx": "ekr.20071101162751.34", "b": "", "children": []}, {"h": "Fixed spell-check problem on Linux", "gnx": "ekr.20071101162751.97", "b": "http://sourceforge.net/forum/forum.php?thread_id=1853660&forum_id=10228\n", "children": []}, {"h": "Use the default spell tab", "gnx": "ekr.20071101162751.149", "b": "The spell tab now uses the same font as the find tab.\n", "children": []}, {"h": "Fixed long-standing and important body editor bug", "gnx": "ekr.20071101162751.150", "b": "http://sourceforge.net/forum/message.php?msg_id=4596477\n", "children": []}, {"h": "Non-ignored @auto trees do not get saved to the .leo file", "gnx": "ekr.20071101162751.178", "b": "", "children": []}, {"h": "Fixed bug that cause the import of PyParse.py to fail", "gnx": "ekr.20071101162751.184", "b": "", "children": []}, {"h": "Improved error reporting in rst3 plugins for code_block directive", "gnx": "ekr.20071101163257", "b": "", "children": []}, {"h": "4.4.5 bug fixes", "gnx": "ekr.20071115102421", "b": "", "children": ["ekr.20071115102156", "ekr.20071206093346", "ekr.20071211083251"]}, {"h": "Leo 4.4.5 b1", "gnx": "ekr.20071115102156", "b": "Leo 4.4.5 beta 1                          November 16, 2007\n\nLeo 4.4.5 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.4.5 fixes several long-delayed bug fixes and adds several new features.\n\nThe highlights of Leo 4.4.5:\n----------------------------\n\n- Fixes all known bugs.\n- Leo now recognizes directives in headlines.\n- Adds 3 new sort-lines commands.\n- Adds commands to insert and delete icons from headlines.\n- Adds all the Tango 16x16 icons to Leo's icon library.\n- Adds support for @rst-preformat nodes to the rst3 plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071115102156.5", "ekr.20071116081521", "ekr.20071115102156.148", "ekr.20071116081521.1"]}, {"h": "Fixed bugs", "gnx": "ekr.20071115102156.5", "b": "", "children": ["ekr.20071115102156.2", "ekr.20071115102156.6", "ekr.20071115102156.11", "ekr.20071115102156.21", "ekr.20071115102156.78", "ekr.20071115102156.79", "ekr.20071115102156.81", "ekr.20071115102156.123", "ekr.20071115102156.124", "ekr.20071115102156.141", "ekr.20071115102156.146"]}, {"h": "Removed all references to pluginsManager.txt", "gnx": "ekr.20071115102156.2", "b": "", "children": []}, {"h": "Fixed hung windows", "gnx": "ekr.20071115102156.6", "b": "@nocolor\n\nhttps://sourceforge.net/forum/message.php?msg_id=3768494\nBy: ktenney\n\nI'm using current CVS, W2k\n\n1 open a Leo file (I'm using a batch file / console)\n\n2 click Edit->Open   <-- Having this dialog open is the problem.\n\n3 return focus to the Leo window\n\n4 click Help->Open leoDocs.leo\n\nZombie!\n\n@color\n", "children": []}, {"h": "Warn on resurrected (vampire) nodes", "gnx": "ekr.20071115102156.11", "b": "http://sourceforge.net/forum/message.php?msg_id=3525277\n\nThe atFile read logic only **adds** nodes, it never deletes nodes. Thus,\nthe 'changed2' node 'survived' the atFile read logic. The 'changed2' node became\na 'vampire' node that couldn't be killed.\n\nThe fix will require some care. The present atFile.read logic is robust because\nit *doesn't* delete nodes. I suspect the solutions will be as follows:\n\nA. The atFile.read code can not delete the subtree of @thin nodes initially,\nbecause it doesn't know whether there will be read errors later. If there are\nread errors absolutely nothing must change. This ensures that read errors never\ndestroy information.\n\nB. A new post-pass will look for vampire nodes: nodes that were not actually\nread from the external file. I think (but haven't proven) that all descendants of\nvampire nodes are also vampire nodes. If that is so the post-pass will simply\ndelete vampire nodes without worrying about whether they have descendants.\n", "children": []}, {"h": "Fixed new @auto bug (python)", "gnx": "ekr.20071115102156.21", "b": "@nocolor\n\nFrom: Terry Brown <terry_n_brown@yahoo.com>\n\n** Also, no ignore inserted.\n\nCurrent CVS, ubuntu\n\nFrom the code below I get:\n\nreading: /mnt/removable/bkup_proj/Mammals/mammaldb/mammaldb.leo\n*** first mismatch at line 119\noriginal line:      def provide(self, what):\ngenerated line: def provide(self, what):\n@auto did not import the file perfectly\nfirst mismatched line: 119\nu'def provide(self, what):\\n'\ninserting @ignore\nErrors inhibited read\n@auto /mnt/removable/bkup_proj/Mammals/mammaldb/mammalShow.py\n\nIn the code below line 119 is not the first \"def provide(self, what):\"\nbut the second, the one in class mainPages - I've included the preceding\nclass def because context seems to be important.\n\n@color\n", "children": []}, {"h": "Fixed new @auto bug: c++", "gnx": "ekr.20071115102156.78", "b": "@nocolor\n\nIn the following code:\n\nextern  \"C\"\n{\n#include \"stuff.h\"\nvoid    init(void);\n#include \"that.h\"\n}\n\nproduces the following in the log window:\n\nLeo Log Window...\nLeo 4.4.4 final, build  1.216 , November 2, 2007\nPython 2.5.1, Tk 8.4.14, Pmw 1.2\nWindows 5, 1, 2600, 2, Service Pack 2\n\nleoID = rshanley (in C:\\)\nglobal config dir: C:\\Program Files\\Leo\\config\nhome dir: C:\\\nreading settings in C:\\Program Files\\Leo\\config\\leoSettings.leo\n*** first mismatch at line 2\noriginal line:  {\ngenerated line:\nimport command did not import the file perfectly\nfirst mismatched line: 2\nu'\\n'\ninput...\n  0 extern  \"C\"\n  1 {\n  2 #include \"stuff.h\"\n  3 void    init(void);\n  4 #include \"that.h\"\n  5 }\noutput...\n  0 extern  \"C\"\n  1\ninserting @ignore\nimported C:/test/aa.cc\n\n@color\n", "children": []}, {"h": "Fixed various @auto comparison problems", "gnx": "ekr.20071115102156.79", "b": "@bool at_auto_warns_about_leading_whitespace\n", "children": []}, {"h": "Retain relative paths in recent files menu", "gnx": "ekr.20071115102156.81", "b": "http://sourceforge.net/forum/message.php?msg_id=4464649\nBy: terry_n_brown\n\nAn argument I'm always having with leo has to do with its conversion of file\npaths to 'absolute' forms.\n\nIn the file browser I select '/home/tbrown/misc/foo.leo'.\nLeo reinterprets this as '/media/hda2/usr1/home/tbrown/misc/foo.leo'\n\nThen I switch machines, and while\n'/home/tbrown/misc/foo.leo' would still be valid,\n'/media/hda2/usr1/home/tbrown/misc/foo.leo' isn't - on the other machine it\nwould be '/media/hdb1/home/tbrown/misc/foo.leo'.\n\nI end up with the two entries in recent files, having to identify the right one.\n\nIf the Tk dialog is returning '/home/tbrown/misc/foo.leo', which I assume it is\nbecause that's what it's displaying, I wish leo would use and store that.\n", "children": []}, {"h": "Fixed windows registry problem", "gnx": "ekr.20071115102156.123", "b": "http://sourceforge.net/forum/message.php?msg_id=4615931\n", "children": []}, {"h": "Fixed paste node as clone crasher", "gnx": "ekr.20071115102156.124", "b": "http://sourceforge.net/forum/message.php?msg_id=4618014\n", "children": []}, {"h": "Fixed hoist crasher", "gnx": "ekr.20071115102156.141", "b": "http://sourceforge.net/forum/message.php?msg_id=4620890\n", "children": []}, {"h": "Ignore unpickling problems in getUa", "gnx": "ekr.20071115102156.146", "b": "From email from Terry Brown\n\npython /home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leo.py /home/tbrown/.tnb.leo\n\n(should be all on one line, i.e. run and open /home/tbrown/.tnb.leo)\n\ngives the traceback below.  Opening the file from within Leo works fine.\n\nBah - I just now looked at it closely enough to realize it's the evil\npickled Tk classes in cleo uAs.  So I don't know whether you want to\nfix that or not, it makes sense Leo would read the file specified on\nthe command line before Tk is initialized - if it's just scanning for\nsettings maybe it could catch and ignore failed uA reads at that time?\n\nAt some point I want to take pickled Tk vars out of cleo, I was\nthinking when that guy was working on the wx gui would be a good time,\ntoo bad he got sick.\n\nreading settings in /mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/config/leoSettings.leo\nreading settings in /home/tbrown/leoSettings.leo\nreading settings in /home/tbrown/myLeoSettings.leo\nreading settings in /home/tbrown/.tnb.leo\nTraceback (most recent call last):\n  File \"/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leo.py\", line 398, in <module>\n    run(fileName)\n  File \"/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leo.py\", line 118, in run\n    g.app.config.readSettingsFiles(fileName,verbose)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoConfig.py\", line 1649, in readSettingsFiles\n    c = self.openSettingsFile(path)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoConfig.py\", line 1674, in openSettingsFile\n    theFile,path,readAtFileNodesFlag=False,silent=True) # closes theFile.\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 892, in open\n    silent=silent)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 779, in getLeoFile\n    self.getAllLeoElements(fileName,silent)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1317, in getAllLeoElements\n    self.getVnodes()\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1898, in getVnodes\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1781, in getVnode\n    appendToCurrentStack=append1,appendToTopStack=append2)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1738, in getVnode\n    attr,val = self.getUa(\"vnode\")\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/src/leoFileCommands.py\", line 1658, in getUa\n    val2 = pickle.loads(binString)\n  File \"/usr/lib/python2.5/pickle.py\", line 1374, in loads\n    return Unpickler(file).load()\n  File \"/usr/lib/python2.5/pickle.py\", line 858, in load\n    dispatch[key](self)\n  File \"/usr/lib/python2.5/pickle.py\", line 1217, in load_build\n    setstate(state)\n  File \"/mnt/removable/bkup_usr1/home/tbrown/.gnome-desktop/Package/leo/cvs/leo/plugins/cleo.py\", line 130, in __setstate__\n    Tk.Variable.__init__(self)\n  File \"/usr/lib/python2.5/lib-tk/Tkinter.py\", line 188, in __init__\n    self._tk = master.tk\nAttributeError: 'NoneType' object has no attribute 'tk'\nException exceptions.AttributeError: \"TkPickleVar instance has no attribute '_tk'\" in <bound method TkPickleVar.__del__ of <cleo.TkPickleVar instance at 0xb73a876c>> ignored\n", "children": []}, {"h": "New commaneds", "gnx": "ekr.20071116081521", "b": "", "children": ["ekr.20071115102156.238", "ekr.20071115102156.256", "ekr.20071115102156.303"]}, {"h": "toggle-collapse_nodes_during_finds", "gnx": "ekr.20071115102156.238", "b": "", "children": []}, {"h": "3 new sort-lines commands", "gnx": "ekr.20071115102156.256", "b": "Added sort-lines-ignoring-case, reverse-sort-lines and reverse-sort-lines-ignoring-case.\n", "children": []}, {"h": "Added Cmd:Icons menu and commands", "gnx": "ekr.20071115102156.303", "b": "The code now remembers the relative file name as well as the full path name.\nThis allows Leo to find the icon when multiple machines are involved.\n", "children": []}, {"h": "New features", "gnx": "ekr.20071115102156.148", "b": "", "children": ["ekr.20071115102156.149", "ekr.20071115102156.301", "ekr.20071115102156.320", "ekr.20071115102156.321"]}, {"h": "Leo now recognizes directives in headlines", "gnx": "ekr.20071115102156.149", "b": "", "children": []}, {"h": "Moved all unit tests to unitTest.leo", "gnx": "ekr.20071115102156.301", "b": "And reorganized the unit tests by Leo source file.\n", "children": []}, {"h": "Added @rst-preformat", "gnx": "ekr.20071115102156.320", "b": "http://sourceforge.net/forum/message.php?msg_id=4614081\n", "children": []}, {"h": "Installed small icon set from Tango library", "gnx": "ekr.20071115102156.321", "b": "http://tango.freedesktop.org/Tango_Icon_Library\n\nThese icons are now part of Leo's distribution.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20071116081521.1", "b": "", "children": ["ekr.20071115102156.237", "ekr.20071115102156.302", "ekr.20071115102156.289"]}, {"h": "@bool at_auto_warns_about_leading_whitespace", "gnx": "ekr.20071115102156.237", "b": "This option has effect only when importing so-called non-strict languages,\nfor which leading whitespace is not terribly significant.\n\nTrue: @auto warns about mismatches that occur solely in leading whitespace.\n", "children": []}, {"h": "@bool vim_plugin_opens_url_nodes", "gnx": "ekr.20071115102156.302", "b": "http://sourceforge.net/forum/message.php?msg_id=4622384\n\nvim.py does not open url nodes if the new setting: \n\n@bool vim_plugin_opens_url_nodes \n\nis False (or does not exist). \n", "children": []}, {"h": "@bool warn_when_plugins_fail_to_load", "gnx": "ekr.20071115102156.289", "b": "There is also an @bool trace_plugins setting.\n", "children": []}, {"h": "Leo 4.4.5 b2", "gnx": "ekr.20071206093346", "b": "Leo 4.4.5 beta 2                          December 7, 2007\n\nLeo 4.4.5 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis beta 2 release fixes several recently reported bugs.  A final release\nis due in about a week.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.4.5 fixes several long-delayed bug fixes and adds several new features.\n\nThe highlights of Leo 4.4.5:\n----------------------------\n\n- Fixes all known bugs.\n- Leo now recognizes directives in headlines.\n- Adds 3 new sort-lines commands.\n- Adds commands to insert and delete icons from headlines.\n- Adds all the Tango 16x16 icons to Leo's icon library.\n- Adds support for @rst-preformat nodes to the rst3 plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071206093323.1"]}, {"h": "Fixed bugs", "gnx": "ekr.20071206093323.1", "b": "", "children": ["ekr.20071206093323.2", "ekr.20071206093323.3", "ekr.20071206093323.4", "ekr.20071206093323.29", "ekr.20071206093323.30", "ekr.20071206093323.31", "ekr.20071206093323.59", "ekr.20071206093323.72", "ekr.20071206093323.76", "ekr.20071206093323.80", "ekr.20071206093323.87", "ekr.20071206093323.96"]}, {"h": "Fixed two crashers in the @noref logic", "gnx": "ekr.20071206093323.2", "b": "pylint reported the following errors:\n\nE1101:1877:atFile.readEndNode: Instance of 'atFile' has no 'correctedLines' member\nE1101:2725:atFile.norefWrite:  Instance of 'atFile' has no 'putBuffered' member\n", "children": []}, {"h": "Fixed crasher in regularizeWhitespace", "gnx": "ekr.20071206093323.3", "b": "", "children": []}, {"h": "Fixed paste-node-as-clone", "gnx": "ekr.20071206093323.4", "b": "http://sourceforge.net/forum/message.php?msg_id=4632695\n", "children": []}, {"h": "Fixed threading colorizer hang with perl", "gnx": "ekr.20071206093323.29", "b": "http://sourceforge.net/forum/message.php?msg_id=4646055\n", "children": []}, {"h": "Fixed C++ importer crash", "gnx": "ekr.20071206093323.30", "b": "https://sourceforge.net/forum/message.php?msg_id=4643992\n", "children": []}, {"h": "Reorganized leoImport.py", "gnx": "ekr.20071206093323.31", "b": "The init base classes can now be inited in a more standard way.\n", "children": []}, {"h": "Fixed command lockout problem", "gnx": "ekr.20071206093323.59", "b": "http://sourceforge.net/forum/message.php?msg_id=4639872\n", "children": []}, {"h": "Improved @auto code", "gnx": "ekr.20071206093323.72", "b": "Several problems still remain:\n\n- Files that contain what look like section references.\n\n- Underindented docstrings.\n", "children": []}, {"h": "Simplified perl colorizer and added progress checks", "gnx": "ekr.20071206093323.76", "b": "", "children": []}, {"h": "Fixed problem with decorators", "gnx": "ekr.20071206093323.80", "b": "http://sourceforge.net/forum/message.php?msg_id=4652514\n", "children": []}, {"h": "Fixed @auto bug", "gnx": "ekr.20071206093323.87", "b": "http://sourceforge.net/forum/message.php?msg_id=4654762\n", "children": []}, {"h": "Fixed  focus problem with goto-next clone command", "gnx": "ekr.20071206093323.96", "b": "@nocolor\n\nI have clones that traverse chapters.\n\nGiven the following Chapters:\n\n> Main\n> Big Picture\n> Smaller Chunk\n\nI have in Main, my organization, with my group in it.  It's also cloned around\nall the other views (really, everything starts in the Big Picture).\n\nThis is the layout of my clone:\n\n1:  Chapter:Main > me\n2:  Chapter:Main > MyOrg > me\n3:  Chapter:Big Picture > CEO > Some Big Honcho > MyOrg > me\n4:  Chapter:Smaller Chunk > Some Big Honcho > MyOrg > me\n\nIf I Go-To-Next-Clone  (ALT-N) from (1), focus will move to the selected node\nin Chapter:Main, namely (2).\n\nSo here's the issue: \n\nLet each successive line below represent a starting focus, and the next line\nthe node that ALT-N selects.  If focus changes in the Outline pane (including\nChapter pane change) to match the Node, that case is marked with [f] - a successful\nfocus transition.\n\nThe issue are the lines w/o [f];  Here's a couple of test runs.\n\n1: [f] (starting node / focus)\n2: [f]\n3:\n4:\n1: [f]\n\nNext test:\n\n3: [f]\n1: [f]\n1: [f]\n4:\n3:\n1: [f]\n\nNext test:\n\n4: [f]\n3:\n1: [f]\n2: [f]\n4:\n3:\n1: [f]\n2: [f]\n... and so on...\n\nIn cases with NO [f], the outline pane seems moved to the \"end\", but no node\nselected.\n\nNot a show stopper, but a bug nonetheless.\n\n@color\n", "children": []}, {"h": "Leo 4.4.5 final", "gnx": "ekr.20071211083251", "b": "Leo 4.4.5 final                               December 11, 2007\n\nLeo 4.4.5 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.5 fixes several long-delayed bug fixes and adds several new features.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.5:\n----------------------------\n\n- Fixes all known bugs.\n- Leo now recognizes directives in headlines.\n- Adds 3 new sort-lines commands.\n- Adds commands to insert and delete icons from headlines.\n- Adds all the Tango 16x16 icons to Leo's icon library.\n- Adds support for @rst-preformat nodes to the rst3 plugin.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.4.6 bug fixes", "gnx": "ekr.20080106114331", "b": "", "children": ["ekr.20071217092250", "ekr.20080106114225", "ekr.20080126090039"]}, {"h": "leo 4.4.6 b1", "gnx": "ekr.20071217092250", "b": "Leo 4.4.6 beta 1                           December 17, 2007\n\nLeo 4.4.6 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.6 fixes several recently reported bugs, all minor.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.6:\n----------------------------\n- Fixes all known bugs.\n- Added @auto importers for javascript and xml files.\n- Added find-next-clone and toggle-sparse-move commands.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20071217092203.1", "ekr.20071217092203.137"]}, {"h": "Bugs fixed", "gnx": "ekr.20071217092203.1", "b": "", "children": ["ekr.20071217092203.2", "ekr.20071217092203.30", "ekr.20071217092203.31", "ekr.20071217092203.45", "ekr.20071217092203.51", "ekr.20071217092203.52", "ekr.20071217092203.64", "ekr.20071217092203.127", "ekr.20071217092203.128", "ekr.20071217092203.130", "ekr.20071217092203.131", "ekr.20071217092203.161", "ekr.20071217092203.136"]}, {"h": "Fixed undo (dirty bit) problem)", "gnx": "ekr.20071217092203.2", "b": "http://sourceforge.net/forum/message.php?msg_id=4668960\n\nIt seems in external files you can delete some text and save, causing the derived\nfile to be written and all dirty flags cleared.  But then undo makes the text\ncome back, as expected, but save only saves the outline, because the dirty flag\nwasn't set on the node in which the text was restored by undo.\n", "children": []}, {"h": "Fixed cursesGui  plugin", "gnx": "ekr.20071217092203.30", "b": "", "children": []}, {"h": "Fixed script_io_to_body plugin", "gnx": "ekr.20071217092203.31", "b": "Added k.overrideCommand.\n", "children": []}, {"h": "Make Import to @file create @file nodes", "gnx": "ekr.20071217092203.45", "b": "http://sourceforge.net/forum/message.php?msg_id=4671771\n", "children": []}, {"h": "Fixed bug: rst3 plugin now finds default.css file correctly", "gnx": "ekr.20071217092203.51", "b": "http://sourceforge.net/forum/message.php?msg_id=4667105\n", "children": []}, {"h": "Fixed bug with clear-recent-files", "gnx": "ekr.20071217092203.52", "b": "The command now clears all .leoRecentFiles.txt files and write a message.\n", "children": []}, {"h": "Fixed bug: replace didn't always start in the correct place", "gnx": "ekr.20071217092203.64", "b": "This was a very long-standing bug: the most annoying in all of Leo.\n", "children": []}, {"h": "fixed colorizer bug", "gnx": "ekr.20071217092203.127", "b": "The last char was not colored in the following doc part:\n\n@\n\n<tag />\n", "children": []}, {"h": "Fixed clone focus bug", "gnx": "ekr.20071217092203.128", "b": "http://sourceforge.net/forum/message.php?msg_id=4676037\n", "children": []}, {"h": "Removed call to printLine in change-all logic", "gnx": "ekr.20071217092203.130", "b": "This prevents over-long traces.\n", "children": []}, {"h": "Fixed crash when copying or cloning to non-exisitent chapter", "gnx": "ekr.20071217092203.131", "b": "", "children": []}, {"h": "Added text bindings to status area", "gnx": "ekr.20071217092203.161", "b": "This fixes a focus problem.\n", "children": []}, {"h": "Repaired damaged minusnode.gif icon", "gnx": "ekr.20071217092203.136", "b": "", "children": []}, {"h": "New features", "gnx": "ekr.20071217092203.137", "b": "", "children": ["ekr.20071217092203.138", "ekr.20071217092203.145", "ekr.20071217092203.146", "ekr.20071217092203.147", "ekr.20071217092203.149", "ekr.20071217092203.152", "ekr.20071217092203.154", "ekr.20071217092203.163"]}, {"h": "Applied Terry Brown's config patch", "gnx": "ekr.20071217092203.138", "b": "The patch attached against leoConfig.py (current CVS) adds a machine\nspecific config file to the config files Leo loads.\n\nI synchronize files between multiple (3) machines. This means I can't\nuse different myLeoSettings files on each.\n\nTk fonts are screen dpi sensitive.  But (in Linux at least)\nTk's attempts to switch a font you picked to something equivalent at a\ndifferent dpi always result in a font that looks terrible.\n\nSo every time I switch machines I edit ~/myLeoSettings.leo to move the\nfont defs I picked for the current machine to the bottom of the body\ntext for the appropriate settings node, and then restart Leo.\n\nThis patch means I don't have to do that any more.  I'm sure there are\nother uses for it.  Python doesn't seem to have a generic machine name\nfinding function, hence the sequence of alternatives.\n", "children": []}, {"h": "Applied plumloco's patch to plugins_menu.py", "gnx": "ekr.20071217092203.145", "b": "The version of plugins_menu.py at http://leo.zwiki.org/Plumloco separates out\nthe gui dependent dialogs (the menus are already gui independent) and made them\ngeneral purpose dialogs available to all plugins.\n\nI have also slightly enhanced the dialogs to provide user defined buttons. \n", "children": []}, {"h": "Upgraded to Pmw 1.3", "gnx": "ekr.20071217092203.146", "b": "", "children": []}, {"h": "Added find-next-clone command", "gnx": "ekr.20071217092203.147", "b": "The finds the next cloned node, regardless of whether the presently selected node is a clone or not.\n", "children": []}, {"h": "Added toggle-sparse-move command", "gnx": "ekr.20071217092203.149", "b": "The command toggles whether moving a node left collapses the outline.\n", "children": []}, {"h": "Added support for @data nodes in @settings trees", "gnx": "ekr.20071217092203.152", "b": "", "children": []}, {"h": "Added @auto xml script", "gnx": "ekr.20071217092203.154", "b": "Use @data import_xml_tags setting to specify the xml tags that act as organizers.\n", "children": []}, {"h": "Added @import scanners for javascript and xml files", "gnx": "ekr.20071217092203.163", "b": "Javascript regexps that look like section references cause problems, but that can not be helped.\n", "children": []}, {"h": "leo 4.4.6 b2", "gnx": "ekr.20080106114225", "b": "Leo 4.4.6 beta 2                           January 15, 2008\n\nLeo 4.4.6 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.6 fixes several recently reported bugs, all minor.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.6:\n----------------------------\n- Fixes all known bugs.\n- Added @auto importers for javascript and xml files.\n- Added find-next-clone and toggle-sparse-move commands.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080106114648"]}, {"h": "Fixed bugs", "gnx": "ekr.20080106114648", "b": "", "children": ["ekr.20080106114203.1", "ekr.20080106114203.2", "ekr.20080106114203.3", "ekr.20080106114203.4", "ekr.20080115093848.18", "ekr.20080115093848.19", "ekr.20080115093848.23"]}, {"h": "Fixed bug in nav_buttons plugin", "gnx": "ekr.20080106114203.1", "b": "http://sourceforge.net/forum/message.php?msg_id=4682598\n", "children": []}, {"h": "Fixed problems with modes/rest.py", "gnx": "ekr.20080106114203.2", "b": "http://sourceforge.net/forum/message.php?msg_id=4681175\n\n- There was a horrendous bug in the match_seq_regexp matcher which could cause the colorizer to loop.\n- There was another horrendous bug in match_regexp_helper that cause spurious matches.\n- Added some more defensive code to have the colorizer recover more gracefully in this case. \n- The jedit2py script was not associating regexp rules whose regex starts with\n  '\\' with the proper character. The proper character is the hash_char\n  character, not the '\\' character. As a result, regexp's that start with '\\'\n  never got matched.\n\nThe following colorizers are affected by the change:\n\nmodes/apacheconf.py\nmodes/erlang.py\nmodes/moin.py\nmodes/perl.py\nmodes/php.py\nmodes/pl1.py\nmodes/rest.py\nmodes/shell.py\nmodes/shellscript.py\n", "children": []}, {"h": "Replaced delete-all-icons command with a script in script.leo", "gnx": "ekr.20080106114203.3", "b": "", "children": []}, {"h": "Leo issues better messages if Image can not be imported", "gnx": "ekr.20080106114203.4", "b": "http://sourceforge.net/forum/message.php?msg_id=4687706\n", "children": []}, {"h": "Added convenience methods for icons", "gnx": "ekr.20080115093848.18", "b": "See http://webpages.charter.net/edreamleo/scripting.html#inserting-and-deleting-icons\n", "children": []}, {"h": "Fixed undo bug", "gnx": "ekr.20080115093848.19", "b": "http://sourceforge.net/forum/message.php?msg_id=4712329\n", "children": []}, {"h": "Don't mark nodes dirty if insert-icon is cancelled", "gnx": "ekr.20080115093848.23", "b": "http://sourceforge.net/forum/message.php?msg_id=4714779\n", "children": []}, {"h": "leo 4.4.6 final", "gnx": "ekr.20080126090039", "b": "Leo 4.4.6 final                           January 26, 2008\n\nLeo 4.4.6 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.4.6 fixes several recently reported bugs, all minor.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.6:\n----------------------------\n- Fixes all known bugs.\n- Added @auto importers for javascript and xml files.\n- Added find-next-clone and toggle-sparse-move commands.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nHome:     http://sourceforge.net/projects/leo/\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.4.7 ipython plugin", "gnx": "ekr.20080218154129", "b": "", "children": ["ekr.20080212221734", "ekr.20080218153931"]}, {"h": "leo 4.4.7 b1", "gnx": "ekr.20080212221734", "b": "Leo 4.4.7 beta 1                           February 12, 2008\n\nLeo 4.4.7 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features the ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo's main discussion is now at: http://groups.google.com/group/leo-editor\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.7:\n----------------------------\n- The ipython plugin creates a simple, powerful, effective bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Improved handling of unicode encodings in @auto files.\n- All import commands now support @path directives in ancestor nodes.\n- Fixed several minor bugs.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080212221711.1", "ekr.20080212221711.32"]}, {"h": "Fixed bugs", "gnx": "ekr.20080212221711.1", "b": "", "children": ["ekr.20080212221711.2", "ekr.20080212221711.4", "ekr.20080212221711.15", "ekr.20080212221711.35", "ekr.20080213094948.1", "ekr.20080213094948.4"]}, {"h": "Fixed perl syntax coloring bug", "gnx": "ekr.20080212221711.2", "b": "", "children": []}, {"h": "Removed warnings while typing @language directives", "gnx": "ekr.20080212221711.4", "b": "", "children": []}, {"h": "Fixed pascal import bug", "gnx": "ekr.20080212221711.15", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/4fa4709969fc04d\n", "children": []}, {"h": "write-outline-only command now prints a 'done' message", "gnx": "ekr.20080212221711.35", "b": "", "children": []}, {"h": "Worked around problems with winpdb", "gnx": "ekr.20080213094948.1", "b": "There appear to be problems with Python's subprocess module on Ubuntu.\n", "children": []}, {"h": "Fixed new problem with image.py", "gnx": "ekr.20080213094948.4", "b": "The version of PIL that ships with Ubuntu (and presumably Debian and maybe some\nother distributions) no longer includes the ImageTk module. ImageTk is now\nlocated in the python- imaging-tk package.\n", "children": []}, {"h": "New features", "gnx": "ekr.20080212221711.32", "b": "", "children": ["ekr.20080212221711.33", "ekr.20080212221711.34", "ekr.20080212221711.47", "ekr.20080212221711.26"]}, {"h": "All import commands now honor @path", "gnx": "ekr.20080212221711.33", "b": "", "children": []}, {"h": "Added ipython plugin", "gnx": "ekr.20080212221711.34", "b": "", "children": []}, {"h": "Added support for @bool open_with_save_on_update setting", "gnx": "ekr.20080212221711.47", "b": "If the @bool open_with_save_on_update setting is True,\nLeo will automatically save the outline whenever an external editor\nchanges the outline.\n", "children": []}, {"h": "Improved handling of unicode for @auto files", "gnx": "ekr.20080212221711.26", "b": "When reading an @auto tree, createOutline now does the following:\n\n1. When importing Python files, createOutline uses the encoding implied by\nPython's # -*- coding line. This line must be the first line of the imported file.\n\n2. Otherwise, createOutline scans the @auto node and its ancestors for Leo's @encoding directive.\n\n3. If no such @encoding directive is found, createOutline uses the encoding specified by the setting: @string default_at_auto_file_encoding = utf-8\n\n4. If this setting does not exist, the utf-8 encoding is used.\n", "children": []}, {"h": "leo 4.4.7 final", "gnx": "ekr.20080218153931", "b": "Leo 4.4.7 final                           February 18, 2008\n\nLeo 4.4.7 final is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.7:\n----------------------------\n- The ipython plugin creates a simple, powerful, effective bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Improved handling of unicode encodings in @auto files.\n- All import commands now support @path directives in ancestor nodes.\n- Fixed several minor bugs.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nCVS:      http://leo.tigris.org/source/browse/leo/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080218153931.1", "ekr.20080218153931.8"]}, {"h": "Fixed bugs", "gnx": "ekr.20080218153931.1", "b": "", "children": ["ekr.20080218153931.2", "ekr.20080218153931.3", "ekr.20080218153931.4", "ekr.20080218153931.5", "ekr.20080218153931.6", "ekr.20080218153931.7", "ekr.20080218154129.1"]}, {"h": "Fixed perl syntax coloring bug", "gnx": "ekr.20080218153931.2", "b": "", "children": []}, {"h": "Removed warnings while typing @language directives", "gnx": "ekr.20080218153931.3", "b": "", "children": []}, {"h": "Fixed pascal import bug", "gnx": "ekr.20080218153931.4", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/4fa4709969fc04d\n", "children": []}, {"h": "write-outline-only command now prints a 'done' message", "gnx": "ekr.20080218153931.5", "b": "", "children": []}, {"h": "Worked around problems with winpdb", "gnx": "ekr.20080218153931.6", "b": "There appear to be problems with Python's subprocess module on Ubuntu.\n", "children": []}, {"h": "Fixed new problem with image.py", "gnx": "ekr.20080218153931.7", "b": "The version of PIL that ships with Ubuntu (and presumably Debian and maybe some\nother distributions) no longer includes the ImageTk module. ImageTk is now\nlocated in the python- imaging-tk package.\n", "children": []}, {"h": "Leo's old colorizer now colorizes Leo directives properly", "gnx": "ekr.20080218154129.1", "b": "", "children": []}, {"h": "New features", "gnx": "ekr.20080218153931.8", "b": "", "children": ["ekr.20080218153931.9", "ekr.20080218153931.10", "ekr.20080218153931.11", "ekr.20080218153931.12"]}, {"h": "All import commands now honor @path", "gnx": "ekr.20080218153931.9", "b": "", "children": []}, {"h": "Added ipython plugin", "gnx": "ekr.20080218153931.10", "b": "", "children": []}, {"h": "Added support for @bool open_with_save_on_update setting", "gnx": "ekr.20080218153931.11", "b": "If the @bool open_with_save_on_update setting is True,\nLeo will automatically save the outline whenever an external editor\nchanges the outline.\n", "children": []}, {"h": "Improved handling of unicode for @auto files", "gnx": "ekr.20080218153931.12", "b": "When reading an @auto tree, createOutline now does the following:\n\n1. When importing Python files, createOutline uses the encoding implied by\nPython's # -*- coding line. This line must be the first line of the imported file.\n\n2. Otherwise, createOutline scans the @auto node and its ancestors for Leo's @encoding directive.\n\n3. If no such @encoding directive is found, createOutline uses the encoding specified by the setting: @string default_at_auto_file_encoding = utf-8\n\n4. If this setting does not exist, the utf-8 encoding is used.\n", "children": []}, {"h": "4.4.8 translating args to g.es and g.es_print", "gnx": "ekr.20080311060457.215", "b": "", "children": ["ekr.20080304112808", "ekr.20080311060457.1", "ekr.20080328074117.340", "ekr.20080403065258.10"]}, {"h": "4.4.8 b1", "gnx": "ekr.20080304112808", "b": "Leo 4.4.8 beta 1                           March 5, 2008\n\nLeo 4.4.8 beta 1 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.8:\n----------------------------\n- Leo's source code is now managed by bzr.\n  See the Bzr link below.\n- Leo's discussion is now hosted by Google Groups:\n  See the Forum link below.\n- The first, third, fifth etc. arguments to g.es and g.es_print\n  can now be translated using Python's gettext.gettext function.\n- Completed ILeo: a bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Added support for arguments to minibuffer commands.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080304112802.1", "ekr.20080304112802.25"]}, {"h": "Allow arguments to minibuffer commands", "gnx": "ekr.20080304112802.1", "b": "http://mail.google.com/mail/#inbox/1184b70ea10f5aa3\n\nLeo now contains minimal support for arguments to minibuffer commands.\n\n- k.simulateCommand now puts arguments following the command name in k.givenArgs.\n  Whitespace separates arguments.\n\n- k.simulateCommand knows nothing about what the arguments mean. That is up to\n  the individual commands.\n\n- At present, only the following minibuffer commands now support k.givenArgs:\n  open-outline, open-outline-by-name, save-file, save-file-as,\n  save-file-as-unzipped and save-file-as-zipped.\n\n  These commands use ''.join(k.givenArgs) to get the file name,\n  which may cause problems if the file name contains whitespace.\n\n- At present, the repeat-complex-command command does not support arguments.\n", "children": []}, {"h": "Added translation services", "gnx": "ekr.20080304112802.25", "b": "@language rest\n@color\n", "children": ["ekr.20080310093038.4"]}, {"h": "4.4.8 b2", "gnx": "ekr.20080311060457.1", "b": "Leo 4.4.8 beta 2                           March 14, 2008\n\nLeo 4.4.8 beta 2 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.8:\n----------------------------\n- Leo's source code is now managed by bzr.\n  See the Bzr link below.\n- Leo's discussion is now hosted by Google Groups:\n  See the Forum link below.\n- The first, third, fifth etc. arguments to g.es and g.es_print\n  can now be translated using Python's gettext.gettext function.\n- Completed ILeo: a bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Added support for arguments to minibuffer commands.\n- @menu trees can now refer to commands created by\n  @command and @button nodes\n- Added support for common @commands nodes in settings files.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080311060457.210", "ekr.20080311060457.216"]}, {"h": "b1", "gnx": "ekr.20080311060457.210", "b": "", "children": ["ekr.20080311060457.211", "ekr.20080311060457.212"]}, {"h": "Allow arguments to minibuffer commands", "gnx": "ekr.20080311060457.211", "b": "http://mail.google.com/mail/#inbox/1184b70ea10f5aa3\n\nLeo now contains minimal support for arguments to minibuffer commands.\n\n- k.simulateCommand now puts arguments following the command name in k.givenArgs.\n  Whitespace separates arguments.\n\n- k.simulateCommand knows nothing about what the arguments mean. That is up to\n  the individual commands.\n\n- At present, only the following minibuffer commands now support k.givenArgs:\n  open-outline, open-outline-by-name, save-file, save-file-as,\n  save-file-as-unzipped and save-file-as-zipped.\n\n  These commands use ''.join(k.givenArgs) to get the file name,\n  which may cause problems if the file name contains whitespace.\n\n- At present, the repeat-complex-command command does not support arguments.\n", "children": []}, {"h": "Added translation services", "gnx": "ekr.20080311060457.212", "b": "@language rest\n@color\n", "children": ["ekr.20080311060457.213"]}, {"h": "Translating Leo's menus and messages", "gnx": "ekr.20080311060457.213", "b": ".. _gettext: http://docs.python.org/lib/module-gettext.html\n\nIt is easy to translate Leo's menu strings: simply create an @menus tree in\nleoSettings.leo or myLeoSettings.leo that contains the translated menu names.\n\n**New in Leo 4.4.8**:\nLeo now contains support for translating messages sent to Leo's log:\n\n- Rather than using an '_' function to denote strings to be translated, Leo's\n  g.es and g.es_print functions translate \"odd\" (first, third, fifth) arguments,\n  leaving \"even\" arguments untranslated. Keyword arguments, color, newline, etc.\n  are never translated.\n\n- All calls to g.es and g.es_print in Leo's core follow this convention.\n\n- g.translateString does the actual translation using Python's `gettext`_ module.\n\n- You can use the script in the node \"@button print g.es stats\" in scripts.leo\n  to create catalogs of all scripts that need to be translated. Such catalogs\n  are used by Python's gettext module. (This script was also used to check that\n  the proper arguments to g.es and g.es_print were translated.)\n", "children": []}, {"h": "b2", "gnx": "ekr.20080311060457.216", "b": "", "children": ["ekr.20080311060457.2", "ekr.20080311060457.128"]}, {"h": "Bug fixes", "gnx": "ekr.20080311060457.2", "b": "", "children": ["ekr.20080311060457.3", "ekr.20080311060457.28", "ekr.20080311060457.38", "ekr.20080311060457.125"]}, {"h": "Assigned g.fileIndex on the fly", "gnx": "ekr.20080311060457.3", "b": "@nocolor\n\nEureka! I have just discovered an elegant solution to this problem!\n\nThe Aha is this:  we can create a \"base\" timestamp just *once*, when\nthe commander (i.e. the nodeIndices class) is created.  Thereafter,\ncode that writes gnx's simply calls nodeIndices.getIndex if the node\ndoesn't already have an index (or if indices are being reassigned in a\ncopied tree).\n\nIn other words, there is no need to be picky about timestamps, the\nbase timestamp will do, so there is no need to assign indices before\nwriting nodes!\n\nI didn't see this before because computing timestamps is quite time\nconsuming.  In fact, we can't do so \"on the fly\".  That being so, the\nold code computed the \"new\" timestamp once in assignFileIndices, which\nlead me away from getting gnx's as needed.  But if there is only *one*\ntimestamp everything becomes easy.  There is no need to \"batch\" the\ncomputation of gnx's.  In other words, timestamps don't have to be up-\nto-the-second accurate.  They simply guarantee that two nodes (in a\nparticular outline) created by the *same* person can't collide.\n\nThis is the way it is written in \"The Book\". All calls to\nassignFileIndices disappear!  All the code I wrote this morning that\nremembers whether indices have been assigned disappears.  I'll keep a\ndo-nothing assignFileIndices around for compatibility with old\nscripts.\n\nThis is *so* important.  It eliminates forever a source of serious\nfile write problems.  Furthermore, nodeIndices.getIndex becomes\nsubstantially simpler. Even though the code was short, it implied some\nvery tricky assumptions.  Every time I read it I had to recreate why\nit worked.  Those mental gymnastics should disappear.\n\nA great day for Leo. \n\n@color\n", "children": []}, {"h": "Allow tkFrame to complete before killing it", "gnx": "ekr.20080311060457.28", "b": "", "children": []}, {"h": "Renamed self.fileIndex to  readBufferIndex in file read logic", "gnx": "ekr.20080311060457.38", "b": "# This should have been done long ago.\n", "children": []}, {"h": "Made sure that all fileIndex fields get converted on read", "gnx": "ekr.20080311060457.125", "b": "", "children": []}, {"h": "Features", "gnx": "ekr.20080311060457.128", "b": "", "children": ["ekr.20080311060457.188", "ekr.20080311060457.198", "ekr.20080314081157.1", "ekr.20080314081157.2"]}, {"h": "Compile regexp's once in findNextMatch", "gnx": "ekr.20080311060457.188", "b": "http://sourceforge.net/forum/message.php?msg_id=4677335\n", "children": []}, {"h": "Created menus very late in the creation process", "gnx": "ekr.20080311060457.198", "b": "This allows @menu items to refer to commands created by @button.\n", "children": []}, {"h": "Improved marks/recent buttons plugin", "gnx": "ekr.20080314081157.1", "b": "- Added show-marks-dialog and show-recent-sections-dialog commands.\n- Select an item initially.\n- Added bindings for up and down arrows.\n", "children": []}, {"h": "Added support for @commands trees in settings files", "gnx": "ekr.20080314081157.2", "b": "", "children": []}, {"h": "4.4.8 b3", "gnx": "ekr.20080328074117.340", "b": "Leo 4.4.8 beta 3                           March 28, 2008\n\nLeo 4.4.8 beta 3 is available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.8:\n----------------------------\n- Leo's source code is now managed by bzr: see link below.\n- Leo's discussion is now hosted by Google Groups: see link below.\n- Arguments to g.es and g.es_print can be translated using gettext.\n- Completed ILeo: a bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Minibuffer commands may have arguments.\n- @menu trees can now refer to commands created by\n  @command and @button nodes.\n- Added support for common @commands nodes in settings files.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080328074117.2", "ekr.20080328074117.216"]}, {"h": "Fixed bugs", "gnx": "ekr.20080328074117.2", "b": "", "children": ["ekr.20080328074117.3", "ekr.20080328074117.4", "ekr.20080328074117.12", "ekr.20080328074117.30", "ekr.20080328074117.76", "ekr.20080328074117.77", "ekr.20080328074117.135", "ekr.20080328074117.215"]}, {"h": "Corrected docs: unit tests are in test/unitTest.leo", "gnx": "ekr.20080328074117.3", "b": "", "children": []}, {"h": "Removed '.' from leoID", "gnx": "ekr.20080328074117.4", "b": "This fixes a bug that can corrupt .leo files.\n", "children": []}, {"h": "Fixed Open With menu", "gnx": "ekr.20080328074117.12", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/62fe73901d14f6c3\n", "children": []}, {"h": "Fixed @lineending botch", "gnx": "ekr.20080328074117.30", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f802b083dee96312\n", "children": []}, {"h": "Fixed undo problem with mutliple editors", "gnx": "ekr.20080328074117.76", "b": "http://mail.google.com/mail/#inbox/11899019a43f74ca\n\nWhen you have two editors open on the same node most actions show up in both\neditors, however, if you do an undo the change only show up in the selected\neditor. (The change shows up in the other editor when you select it).\n", "children": []}, {"h": "Write dirty bit if write fails", "gnx": "ekr.20080328074117.77", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/71822f48720e71bc/6e0fd1c72fa39817#6e0fd1c72fa39817\n", "children": []}, {"h": "Fixed bug involving default_target_language", "gnx": "ekr.20080328074117.135", "b": "The new setting is @string target_language, not @language default_target_language.\n", "children": []}, {"h": "Fixed plugins that create new menu items", "gnx": "ekr.20080328074117.215", "b": "@nocolor\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/6a5087a59d6d23\n\n- Changed menu1 to menu2 in several plugins.\n- Changed menu2 to menu-update.\n- Moved after-create-leo-frame to after menu2.\n", "children": []}, {"h": "Features", "gnx": "ekr.20080328074117.216", "b": "", "children": ["ekr.20080328074117.217", "ekr.20080328074117.220", "ekr.20080328074117.262", "ekr.20080328074117.297"]}, {"h": "Added @bool collapse_nodes_while_spelling setting", "gnx": "ekr.20080328074117.217", "b": "This hugely speeds up spelling when there are lots of misspelled words.\n", "children": []}, {"h": "Errors reading external files give line numbers", "gnx": "ekr.20080328074117.220", "b": "", "children": []}, {"h": "Added @bool allow_middle_button_paste", "gnx": "ekr.20080328074117.262", "b": "@nocolor\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/62fe73901d14f6c3\n\nAnd, while you're looking at the editor code :-) - in linux when you paste in\ntext to a body editor with a middle mouse button click, it's not stored unless\nyou follow that with a key stroke or some other action in the body editor. If\nyou instead middle button paste to the editor and then click on another node in\nthe tree, the text's forgotten.\n\nTo do-->@thin ../doc/leoToDoLater.txt-->Can't or won't-->Known Bugs: can't be fixed or can wait-->Bug: can't be fixed-->Cut/paste bug on X windows (waiting for help)\n\n@color\n", "children": []}, {"h": "Added support for @popup settings", "gnx": "ekr.20080328074117.297", "b": "", "children": []}, {"h": "4.4.8 rc1", "gnx": "ekr.20080403065258.10", "b": "Leo 4.4.8 rc1                        April 3, 2008\n\nLeo 4.4.8 rc1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.8:\n----------------------------\n- Leo's source code is now managed by bzr: see link below.\n- Leo's discussion is now hosted by Google Groups: see link below.\n- Arguments to g.es and g.es_print can be translated using gettext.\n- Completed ILeo: a bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Minibuffer commands may have arguments.\n- @menu trees can now refer to commands created by\n  @command and @button nodes.\n- Added support for common @commands nodes in settings files.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080403065258.6"]}, {"h": "Fixed delete-editor problem", "gnx": "ekr.20080403065258.6", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/ed5d82429e1ec821\n\nThe following sequence of commands caused problems:\n\nadd-editor\nadd-editor\ndelete-editor\ndelete-editor\nadd-editor\n", "children": []}, {"h": "4.4.8 final", "gnx": "ekr.20080405074410.4", "b": "Leo 4.4.8 final                        April 6, 2008\n\nLeo 4.4.8 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nThis version features a new ipython plugin that provides a two-way bridge\nbetween Leo and IPython.  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.4.8:\n----------------------------\n- Leo's source code is now managed by bzr: see link below.\n- Leo's discussion is now hosted by Google Groups: see link below.\n- Arguments to g.es and g.es_print can be translated using gettext.\n- Completed ILeo: a bridge between IPython and Leo.\n  See http://webpages.charter.net/edreamleo/IPythonBridge.html\n- Minibuffer commands may have arguments.\n- @menu trees can now refer to commands created by\n  @command and @button nodes.\n- Added support for common @commands nodes in settings files.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080405074410.7", "ekr.20080405074410.9", "ekr.20080405074410.38"]}, {"h": "Open leoPluginsRef.leo in help menu if leoPlugins.leo does not exist", "gnx": "ekr.20080405074410.7", "b": "", "children": []}, {"h": "Fixed big performance bug in find/spell commands.", "gnx": "ekr.20080405074410.9", "b": "", "children": []}, {"h": "Fixed several unit testing bugs relating to doTests(all=True)", "gnx": "ekr.20080405074410.38", "b": "", "children": []}, {"h": "4.5 code reorgs, vim bindings, @shadow", "gnx": "ekr.20080730095710.1", "b": "", "children": ["ekr.20080624093059.1", "ekr.20080730095710.2", "ekr.20080815093141.89", "ekr.20080827175609.55", "ekr.20080830082008.1", "ekr.20080902080930.2", "ekr.20080912143702.137"]}, {"h": "4.5 b1", "gnx": "ekr.20080624093059.1", "b": "Leo 4.5 beta 1                      June 28, 2008\n\nLeo 4.5 beta 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n- A major revision of Leo's node structures, compatible with so-called unified nodes.\n- A major revision of Leo's key-handling code.  Most per-pane key bindings have been eliminated.\n- A major revision of Leo's outline drawing and focus handling code.\n  Calls to c.beginUpdate and c.endUpdate simply request later redrawing in c.outerUpdate.\n- The beginning of usable vim-like bindings.  More support is coming.\n- Many small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080624093059.2", "ekr.20080624093059.32"]}, {"h": "Bug fixes", "gnx": "ekr.20080624093059.2", "b": "", "children": ["ekr.20080624093059.3", "ekr.20080624093059.4", "ekr.20080624093059.5", "ekr.20080624093059.6", "ekr.20080624093059.7", "ekr.20080624093059.8", "ekr.20080624093059.9", "ekr.20080624093059.10", "ekr.20080624093059.11", "ekr.20080624093059.12", "ekr.20080624093059.14", "ekr.20080624093059.15", "ekr.20080624093059.16", "ekr.20080624093059.17", "ekr.20080624093059.18", "ekr.20080624093059.19", "ekr.20080624093059.20", "ekr.20080624093059.21", "ekr.20080624093059.22", "ekr.20080624093059.23", "ekr.20080624093059.24", "ekr.20080624093059.25", "ekr.20080624093059.26", "ekr.20080624093059.27", "ekr.20080624093059.28", "ekr.20080624093059.29", "ekr.20080624093059.30", "ekr.20080624093059.31", "ekr.20080628062747.69", "ekr.20080628062747.70", "ekr.20080628062747.71", "ekr.20080628062747.72"]}, {"h": "Fixed bug in appendToRecentFiles", "gnx": "ekr.20080624093059.3", "b": "", "children": []}, {"h": "Fixed bug in install script", "gnx": "ekr.20080624093059.4", "b": "On Mon, Apr 7, 2008 at 7:07 PM, SegundoBob <bhossley@ieee.org> wrote:\n\nI installed Leo 4.4..8 final on Ubuntu.  The installation failed\nbecause the installation put files in /usr/lib/leo/leo.  The\nduplicated leo is a mistake.\nOn line 13 of install I changed:\nLEO_LIB_DIR=\"${LEO_PREFIX}/lib/leo\"\nto\nLEO_LIB_DIR=\"${LEO_PREFIX}/lib\"\n\nWith the change the installation worked.\n", "children": []}, {"h": "Fixed bug: no focus after save-as and save-to commands", "gnx": "ekr.20080624093059.5", "b": "", "children": []}, {"h": "Fixed find bug", "gnx": "ekr.20080624093059.6", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/294866696257802e\n", "children": []}, {"h": "Fixed find completion bug", "gnx": "ekr.20080624093059.7", "b": "Trying to edit the minibuffer, when I backspace to a character and\npress delete the cursor moves to the end of the buffer and deletes the\nlast character instead.\n", "children": []}, {"h": "Fixed how-many, find-word and goto-character commands", "gnx": "ekr.20080624093059.8", "b": "find-word\n=========\nThis command is supposed to:\n\n\"Put the cursor at the next word (on a line) that starts with a\ncharacter\"\n\nIt does not. You have to type in a whole word to get any result and\neven then\nit only selects the word it does not move the cursor to it.\n\n\ngoto-character\n==============\n'''Put the cursor at the n'th character of the buffer.'''\n\nDoesn't do anything.\n", "children": []}, {"h": "Fixed import PHP bug", "gnx": "ekr.20080624093059.9", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b068e88a577a0547\n", "children": []}, {"h": "Fixed keyword handling in g.es and g.es_print", "gnx": "ekr.20080624093059.10", "b": "", "children": []}, {"h": "Fixed new @auto bug", "gnx": "ekr.20080624093059.11", "b": "Leo's running, so I create a new outline with File->New\n\nThen I save as in a location where foo.py exists.\n\nThe I create a node '@auto foo.py'\n\nThen I use File->Read/Write->Read @auto (with that node selected)\n\nLeo says it can't read it.\n\nI close the leo file, re-open in from the recent files menu of the\noutline that spawned it, and the @auto file is read no problems.\n", "children": []}, {"h": "Fixed recent files bug", "gnx": "ekr.20080624093059.12", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c6c4faf6fdead672\n", "children": []}, {"h": "Greatly increased speed of undo clone-find-all", "gnx": "ekr.20080624093059.14", "b": "findAll now just creates undo info for clone-find-all for one inserted node.\n", "children": []}, {"h": "Temporary fix for php import bug", "gnx": "ekr.20080624093059.15", "b": "", "children": []}, {"h": "Fixed unbounded loop in autocompleter.findAnchor", "gnx": "ekr.20080624093059.16", "b": "", "children": []}, {"h": "Fixed insert-newline bug", "gnx": "ekr.20080624093059.17", "b": "exception executing command\nTraceback (most recent call last):\n File \"C:\\_Proj\\Leo\\key-handling\\leo\\src\\leoCommands.py\", line 298, in doCommand\n   val = command(event)\n File \"C:\\_Proj\\Leo\\key-handling\\leo\\src\\leoEditCommands.py\", line 2946, in insertNewLine\n   self.insertNewlineHelper(w=w,oldSel=oldSel,undoType=None)\n File \"C:\\_Proj\\Leo\\key-handling\\leo\\src\\leoEditCommands.py\", line 3104, in insertNewlineHelper\n   w.setInsertPoint(i+1)\nTypeError: unsupported operand type(s) for +: 'NoneType' and 'int'\ntruncating headline to one line\n", "children": []}, {"h": "Single click did not color body correctly", "gnx": "ekr.20080624093059.18", "b": "", "children": []}, {"h": "Body not colored correctly after find", "gnx": "ekr.20080624093059.19", "b": "", "children": []}, {"h": "Fixed big performance bug in contract-all command", "gnx": "ekr.20080624093059.20", "b": "", "children": []}, {"h": "Changed bindings so Home and end keys work as expected when editing a headline", "gnx": "ekr.20080624093059.21", "b": "", "children": []}, {"h": "Fixed bug: myLeoSettings.leo sometimes read twice", "gnx": "ekr.20080624093059.22", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/35a8ea2024036623s\n", "children": []}, {"h": "Compute menus list for each c", "gnx": "ekr.20080624093059.23", "b": "http://sourceforge.net/forum/forum.php?thread_id=1858451&forum_id=10228\n", "children": []}, {"h": "Fixed minor spelling bug", "gnx": "ekr.20080624093059.24", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d2a9aeac0d0082f6\n", "children": []}, {"h": "Fixed spell bug: words containing unicode characters aren't saved properly", "gnx": "ekr.20080624093059.25", "b": "", "children": []}, {"h": "Fixed coloring bugs in reformatParagraph and c.redraw", "gnx": "ekr.20080624093059.26", "b": "", "children": []}, {"h": "Fixed missing redraw problem", "gnx": "ekr.20080624093059.27", "b": "Changed c.outerUpdate and added c.bind and c.bind2.\n", "children": []}, {"h": "Fixed new-headline problem", "gnx": "ekr.20080624093059.28", "b": "", "children": []}, {"h": "Fixed recent crasher", "gnx": "ekr.20080624093059.29", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoCommands.py\", line 311, in doCommand\n    val = command(event)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoEditCommands.py\", line 4781, in selectAllText\n    return w.selectAllText()\nAttributeError: Canvas instance has no attribute 'selectAllText'\n", "children": []}, {"h": "Fixed encoding problems with paste from clipboard", "gnx": "ekr.20080624093059.30", "b": "", "children": []}, {"h": "Changed installer to support leo-as-a-package", "gnx": "ekr.20080624093059.31", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/8edc4e7b809189cf\n", "children": []}, {"h": "Fixed undo problem", "gnx": "ekr.20080628062747.69", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/794ca596f7c58ae5\n\nThe fix was to call c.redraw_now in undo() and redo().  This allows the undo interlock to work.\n", "children": []}, {"h": "Fixed insert-file bug", "gnx": "ekr.20080628062747.70", "b": "Minor nit - insert-file to load a file into a node, text appears in the\nbody pane.  Without doing anything else to the body pane click on\nanother node.  Inserted text is lost - body for node is empty.  As long\nas you move the cursor into the body frame and press a key after\ninserting the contents, it's retained.\n", "children": []}, {"h": "Fixed script button bug", "gnx": "ekr.20080628062747.71", "b": "@nocolor\n\nc.beginUpdate()\ntry:\n add / change icons on some nodes\n c.setChanged(True)\nfinally:\n c.endUpdate()\n\nseems not to give a redraw *after* a script button is pressed.\n\nIt does give one before the action is taken, so pressing the button\ntwice shows the change.\n\nEKR: The fix was to mod_scripting.py.\n\n@color\n", "children": []}, {"h": "Fixed dragging bug", "gnx": "ekr.20080628062747.72", "b": "The fix was a major addition to p._adjustPositionBeforeUnlink.\n\nReport:\n\nRun this script:\n\nt = p.insertAfter()\nc.setHeadString(t, 'test node 1')\nt = t.insertAfter()\nc.setHeadString(t, 'test node 2')\nt = t.insertAfter()\nc.setHeadString(t, 'test area')\nfor i in range(200):\n   n = t.insertAsLastChild()\n   c.setHeadString(n, str(i))\n   if i == 3: x = n\n\nfor i in range(100):\n   n = x.insertAsLastChild()\n   c.setHeadString(n, str(i+500))\n\nt.expand()\n\nIt creates an outline, you might need to click on the node from which\nthe script was run to see what was added.  It should look like this:\n\ntest node 1\ntest node 2\ntest area\n   1\n   2\n  +3\n   4\n   5\n   etc.\n\nNow, use the mouse to drag test node 1 down to a position after node\n4... for me at least this results in the outline view leaping to the\nbottom of the tree, which it shouldn't do.\n\nScroll back up to the top, and drag test node 2 down to a position\nafter node 4, this time no leap.\n\nIt appears that the first time you drag something into the test area it\nreacts as if 3 is expanded and repositions to allow for all those\nactually not visible lines, but the second time you drag something in\nit's ok, as if it has an accurate count on visible lines now.\n", "children": []}, {"h": "Features", "gnx": "ekr.20080624093059.32", "b": "", "children": ["ekr.20080624093059.33", "ekr.20080624093059.34", "ekr.20080624093059.35", "ekr.20080624093059.36", "ekr.20080624093059.37", "ekr.20080624093059.38", "ekr.20080624093059.39", "ekr.20080624093059.40", "ekr.20080624093059.41", "ekr.20080624093059.42", "ekr.20080624093059.43", "ekr.20080624093059.44", "ekr.20080624093059.45", "ekr.20080624093059.46", "ekr.20080624093059.47", "ekr.20080624093059.48", "ekr.20080624093059.52", "ekr.20080624093059.53"]}, {"h": "Remove useTextWidget option from leoKeys.py", "gnx": "ekr.20080624093059.33", "b": "", "children": []}, {"h": "Set use_sax = True always", "gnx": "ekr.20080624093059.34", "b": "", "children": []}, {"h": "Added g.unified_nodes", "gnx": "ekr.20080624093059.35", "b": "- Made t arg optional in vnode ctor.\n\n- Removed the t arg from insertAsX.  Affects these plugins:\n\nwrote:     base64Packager.py\nwrote:     macros.py\nwrote:     table.py\nwrote:     templates.py\nwrote:     xsltWithNodes.py\n\nSearch for tnode.\n", "children": []}, {"h": "Added install nodes re Leo's home directory", "gnx": "ekr.20080624093059.36", "b": "Leo puts several files in the home directory: .leoID.txt,\n.leoRecentFiles.txt, and myLeoSettings.leo.  There are various fallback directories if there is no home directory.\n\nIf you want more details, you can do what I did: do a clone-find-all for homeDir.\n\nAs for how the home directory is set, the code to do this is g.computeHomeDir.  We get the home directory with\n\nhome = os.getenv('HOME',default=None)\n\nThere are some mind-numbing details to be handled if there os.getenv does, in fact, return a directory.\n", "children": []}, {"h": "Added support for @bool fixedWindow option", "gnx": "ekr.20080624093059.37", "b": "Leo suppresses marks, expansion state, orphan bits and current\nposition bits when writing fixed .leo files.  As a result, all nodes\nwill be collapsed and the root node will always be selected when Leo\nopens a fixed .leo file.\n\nWhen writing fixed .leo files, Leo writes fixed, immutable, reasonable\ndefaults for window size, position and body-outline ratio.\nSpecifically, width,height,left,top = 700,500,50,50 and the ratio is\n0.5. These values are written so older versions of Leo can read fixed\nfiles.\n\nYou make a file fixed by putting '@bool fixedWindow = True' in the\n@settings tree of a particular .leo file.  The file will be fixed\nafter you save the file, reload the file, and save the file again.\nYes, this is clumsy, but it only has to be done once.  A toggle-fixed\nfile command doesn't seem that useful: using an @bool node is simple\nand clear.\n\nYou can optionally specify the size and position on the screen of\nfixed .leo files by putting an '@data fixedWindowPosition' node in the\n@settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n**not** put such a node in the fixed .leo file itself--everyone who\nopens the file would get that fixed position.\n\nThe body of the '@data fixedWindowPosition' node should contain\nsomething like this:\n\n# Must be four entries: width,height,left,top.\n# Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n1200\n800\n50\n50\n\nLeo uses reasonable defaults for fixed .leo files if this node does\nnot exist, or contains something other than 4 numbers, one per line. \n", "children": []}, {"h": "Added new key-handling", "gnx": "ekr.20080624093059.38", "b": "This allows substantially simpler key bindings. Indeed, most per-pane bindings\nhave been eliminate.\n", "children": []}, {"h": "New drawing/focus code", "gnx": "ekr.20080624093059.39", "b": "", "children": []}, {"h": "Improved end of calltips", "gnx": "ekr.20080624093059.40", "b": "# Added ')' at end.\n", "children": []}, {"h": "Find character crosses lines", "gnx": "ekr.20080624093059.41", "b": "", "children": []}, {"h": "Added os.curdir to sys.path if possible", "gnx": "ekr.20080624093059.42", "b": "This is necessary to simulate operation as a package.\n", "children": []}, {"h": "Added support for single-config option", "gnx": "ekr.20080624093059.43", "b": "This code appears to have been reverted in such a way that it never got pushed to launchpad.\n", "children": []}, {"h": "Finished Tracer class", "gnx": "ekr.20080624093059.44", "b": "This is a Python 'debugger' that computes a call graph.\n\nTo trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n", "children": []}, {"h": "Rewrote option-parsing code using optparse", "gnx": "ekr.20080624093059.45", "b": "", "children": []}, {"h": "Added @bool cleo_color_ignore = True", "gnx": "ekr.20080624093059.46", "b": "This determines whether cleo colors @ignore headlines. The default is True.\n", "children": []}, {"h": "Set cwd in read/write commands", "gnx": "ekr.20080624093059.47", "b": "This affect the following commands:\n\nopen, save, save-as, save-to, read-outline-only, read-file-into-node, write-file-from-node and all the import/export commands.\n", "children": []}, {"h": "Added  vim patches", "gnx": "ekr.20080624093059.48", "b": "Headline pane:\n\n- Prevented \"--> exit-named-modes\" from switching focus to the Body pane.\n    Removed 'c.frame.log.deleteTab('Mode') from endMode\n\nBody pane:\n\n- Enabled search for 'space' character in text\n    Removed 'if ch.isspace(): return' in zapToCharacter:\n\n- Eliminated delete-word from removing trailing white space\n    Removed 'self.killWs(event)' in killWord and backwardKillWord\n\n- Put zapped text to clipboard\n    Added 'g.app.gui.replaceClipboardWith(s[ins:i])' after 'sel.addToKillBuffer(s[ins:i])' in zapToCharacter\n\n@nocolor\n", "children": ["ekr.20080624093059.49", "ekr.20080624093059.50", "ekr.20080624093059.51"]}, {"h": "Realization", "gnx": "ekr.20080624093059.49", "b": "Leo Configuration:\n    | The following configuration was used for all testing:\n        @strings  top_level_unbound_key_action = command\n        @bool stayInTreeAfterEditHeadline = True\n        @bool stayInTreeAfterSelect = True\n        @bool outline_pane_has_initial_focus = True\n\nLeo's Panes:\n    | A \"pane\" is a area of the screen containing a user interface\n    | dedicated to supporting a common set of tasks.  Vi key mappings are\n    | associated with the Outline pane, the Body pane, or to the Leo\n    | program.  See the no pane (see \"General Commands\" below). (Outline\n    | pane, Body pane)\n\nLeo's Command/Insert States:\n    Command state - Denoted by a blue background color (Outline,Body pane)\n        | Keys are mapped to commands.\n    Insert state - Denoted by a red background color (Outline,Body pane)\n        | Keys pressed are inserted into the text.\n    Grayed state - Denoted by a gray background color (Outline pane)\n        | Keys pressed will cause the next node with a headline starting\n        | with that key to be selected.  This \"select node by first\n        | character\" feature is built into Leo. It is not part of the vi\n        | support.\n        | \n        | This state is intentionally avoided in the vi based outline key\n        | mappings. If in the \"Grayed\" state, enter Ctrl-i to switch to the\n        | \"Command\" state.  The \"Grayed\" state can be entered from the\n        | outline's \"Command\" state by pressing the Ctrl-] key.\n\nLeo's modes:\n| Most vi commands are implemented using Leo's \"mode\" functionality.\n| Modes beginning with \"vi-\" denote a vi command for the body pane.\n| Modes beginning with \"tree-\" denote a vi-like command for the outline.\n| Modes beginning with \"body-\" denote outline commands that can be called\n| from the body pane (and return focus back to the body pane)\n| \n| Modes are used both for managing multi-key vi commands and for defining\n| macros.\n\n    Multi-key command modes:\n    | Vi has many commands that require multiple keys to invoke.  Each key\n    | accept the last in the command are assigned to a mode that, when\n    | executed, maps the subsequent allowed keys in the command sequence.\n    | The last key in the sequence is mapped directly to a Leo command or\n    | to a \"Macro\" mode (see below). Any modes mapped to a key by another\n    | mode are located in a child node of the mode node doing the mapping.\n    | \n    | Example:\n    |     dtw = Delete To the 'W' character (note the capital letters)\n    |   The 'd' key is mapped to vi-delete-object\n    |   vi-delete-object maps the 't' key to vi-delete-to-char\n    |   vi-delete-to-char contains Leo commands to perform the vi command.\n\n    Macros modes:\n    | Most vi commands do not have an equivalent Leo command.  Instead, a\n    | series of Leo commands must be issued to emulate the vi command.\n    | The Leo commands needed to emulate a vi command are placed in a\n    | single @mode node.\n\nCode limitations:\n    Current character:\n    | Vi implementation normally use two different \"current character\"\n    | designators depending on the current state.\n\n        Insert state:\n        | In the Insert state, a vertical bar is placed between two\n        | characters to indicate where the next key will be inserted.\n        | Leo's cursor is of this type.\n\n        Command state: \n        | In the Command state, vi expects that the cursor is highlighting\n        | a current character and provides commands to enter the insert\n        | state or paste text either before or after that current\n        | character.  Leo's vi emulation currently does not support a\n        | \"current character\" cursor. As a result, inserting and pasting\n        | before or after is replaced by inserting or pasting \"at\" the\n        | current cursor location.  For example, the 'i' and 'a' command\n        | are both mapped to enter the insert state at the current cursor\n        | location.\n\n    Conditional code execution:\n    | No conditional command invocation exits.  Instead, conditional\n    | branching is replace by setup commands that insure that, regardless\n    | of current state, the command performs correctly.  For example,\n    | Beginning-of-line command will go to previous line if called when\n    | cursor is at beginning of line.  Vi requires that '|' always goes to\n    | beginning of current line.  Problme is solved by issueing\n    | forward-char command to insure cursor is moved off of the beginning\n    | of the line before beginning-of-line command is issued.\n\n    Commands requesting user input:\n    | Commands getting user input must be the last command within the\n    | mode.  See \"Commands getting user input\" in Problems section below.\n\n    Edit headings using modes:\n    | Commands modifying or selecting headline text do not work correctly\n    | within a mode.  See \"Editing headlines within modes\" in Problems\n    | section below.  This eliminates accurate implementation of vi's\n    | delete/change/substitute/yank object commands.  Instead, the\n    | commands are modified to only select text.\n", "children": []}, {"h": "Problems", "gnx": "ekr.20080624093059.50", "b": "Binding numeric keys:\n| Mapping a number to a command or mode prevents the number from being\n| entered as text while in the insert state.\n\nBinding '?' key:\n| No response when key pressed.\n\nBinding 'bksp' key:\n| Binding 'bksp' key to back-char to move back a character in command mode\n| prevents 'bksp' from deleting characters in text edit mode.\n\nCommands getting user input:\n| Commands requesting user input must be the last command executed.  These\n| commands include: find-character and zap-to-character.\n\nEditing headlines within modes:\n| Text editing commands do not work within modes assigned to outline key\n| mappings.\n\nUndo command:\n| The 'undo' command sometimes does not work when returning to a node's\n| command mode.  Moving to another node fixes the problem.(i.e. delete-char, set-insert-state, ...)\n\nMatching bracket command:\n| Performs bracket matching on Body text when in node's headline command\n| state.\n\nWord definition:\n| \"Word\" related commands determine boundries of a word differently.\n\nToggle case:\n| Leo provides support for switching to upper or lower case but no method |\n| exists to toggle between cases.\n\nFind settings\n| Leo commands only allow toggling of search settings.  If specific \"set\"\n| and \"clear\" search setting commands were available then searches from the\n| body pane could be restricted to the body pane and searches from the\n| outline could be restricted to the outline.\nForward and backward sentences:\n| Leo's forwardSentenceHelper and backSentenceHelper functions do not stop\n| at empty lines nor do they skip over periods within words nor do they stop\n| at sentences ending in non-periods nor do they stop at the end or\n| beginning of the buffer.\n\nFocus to Body pane:\n| Leo functions exist which unconditionally set focus to the body pane\n| regardless of the active pane.\n    deleteTab() function:\n        | Issuing \"--> exit-named-mode\" calls \"endMode\" function which calls\n        | \"c.frame.log.deleteTab('Mode')\" function which sets the focus to the\n        | body pane.  \n\nDisplaying mode help:\n| The \"--> mode-help\" command displays all mapped keys using a capitol\n| letter regardless of the actual binding.\n    Recommendations:\n    | To better support narrow tab cards, display the mode's label without\n    | the \"enter-\" and \"-mode\" text and place key label before mode label.\n    | Results in change from:\n    |                enter-vi-delete-line-mode D\n    |    enter-vi-delete-to-begin-of-word-mode B \n    | to:\n    |    D : vi-delete-line\n    |    B : vi-delete-to-begin-of-word\n", "children": []}, {"h": "Notes", "gnx": "ekr.20080624093059.51", "b": "Yank vs. Yank\n| A vi \"yank\" operation copies the selected text TO the clipboard.\n| A Leo \"yank\" operation inserts text FROM the clipboard.\n\ncopy-text in modes:\n| Leo's copy-text does not work within a mode.  As a result, all \"copy to\n| clipboard\" capability is being implemented using kill-<object> command\n| followed by a \"yank\" command.\n\npaste-text in modes:\n| paste-text in modes does not work.  Use Leo's \"yank\" instead.\n\ndelete-node does not copy node to clipboard:\n| Issue copy-node command followed by delete-node\n", "children": []}, {"h": "Added 'kill' bindings", "gnx": "ekr.20080624093059.52", "b": "", "children": []}, {"h": "Added check for empty @nosent nodes", "gnx": "ekr.20080624093059.53", "b": "These are now treated much like empty @auto nodes\n", "children": []}, {"h": "4.5 b2", "gnx": "ekr.20080730095710.2", "b": "Leo 4.5 beta 2                      August 7, 2008\n\nLeo 4.5 beta 2 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.5 contains many important new features.  See below for details.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080806211440.188", "ekr.20080806211440.253", "ekr.20080806211440.256", "ekr.20080806211440.189"]}, {"h": "4.5 b3", "gnx": "ekr.20080815093141.89", "b": "Leo 4.5 beta 3                      August 15, 2008\n\nLeo 4.5 beta 3 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.5 contains many important new features.  See below for details.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080815093141.90", "ekr.20080815093141.91", "ekr.20080815093141.92", "ekr.20080815093141.93"]}, {"h": "Major new features", "gnx": "ekr.20080815093141.90", "b": "- Added support for @shadow files.\n  This is a major breakthrough.\n  See `Chapter 23`_ for full details.\n\n- Added much improved support for vim bindings.\n\n- Allow v.uA's in @thin and @shadow nodes.\n  See http://groups.google.com/group/leo-editor/browse_thread/thread/750bb3099090f5b\n", "children": []}, {"h": "Major code reorganizations", "gnx": "ekr.20080815093141.91", "b": "- Leo now uses a sax-based parser to read .leo files.\n  This makes it possible to extend Leo's file format without invalidating previous versions of Leo.\n\n- Leo now supports the so-called 'Graph World'.\n  When g.unified_nodes is True, Leo moves all information from tnodes into vnodes.\n\n- Leo now uses a new key binding scheme.\n  This allows substantially simpler key bindings. Indeed, most per-pane bindings\n  have been eliminated.\n  Added support for kill bindings.\n\n- Leo is now an installable package.\n  To make this work, Leo adds os.curdir to sys.path if needed on startup.\n\n- Reorganized Leo's drawing and focus code.\n  As a result, calls to c.beginUpdate and c.endUpdate are no longer needed.\n\n- Leo is now ready for Python 3.x:\n  Change most print statements to calls to g.pr.\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20080815093141.92", "b": "- Added g.Tracer class.  This is a Python 'debugger' that computes a call graph.\n  To trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n\n- The find-character command now finds characters across line boundaries.\n\n- Set cwd in read/write commands. This affect the following commands:\n  open, save, save-as, save-to, read-outline-only, read-file-into-node,\n  write-file-from-node and all the import/export commands.\n\n- Create myLeoSettings.leo if it does not exist.\n  Leo create a simple template myLeoSettings.leo in the home directory if no other\n  copy of myLeoSettings.leo exists.\n\n- Added support for @args list for @button nodes.\n  See the docstring for the mod_scripting plugin for details.\n\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080815093141.93", "b": "- The default settings for @shadow files are now located in leoSettings.leo in the node::\n\n    @settings-->File options-->Shadow files\n\n  The defaults for these settings are::\n\n    @string shadow_prefix = x\n    @string shadow_subdir = .leo_shadow\n\n- Added support for @bool fixedWindow option. Leo suppresses marks, expansion\n  state, orphan bits and current position bits when writing fixed .leo files. As\n  a result, all nodes will be collapsed and the root node will always be\n  selected when Leo opens a fixed .leo file.\n\n  You can optionally specify the size and position on the screen of fixed .leo\n  files by putting an '@data fixedWindowPosition' node in the\n  @settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n  **not** put such a node in the fixed .leo file itself--everyone who\n  opens the file would get that fixed position.\n\n  The body of the '@data fixedWindowPosition' node should contain\n  something like this::\n\n    # Must be four entries: width,height,left,top.\n    # Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n    1200\n    800\n    50\n    50\n\n- Added @bool cleo_color_ignore = True\n  This determines whether cleo colors @ignore headlines. The default is True.\n\n- Added @bool suppress_import_parsing setting\n  When True, @auto and @shadow import the entire file into a single node.\n", "children": []}, {"h": "4.5 rc1", "gnx": "ekr.20080827175609.55", "b": "Leo 4.5 release candidate 1                      August 28, 2008\n\nLeo 4.5 rc1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.5 contains many important new features.  See below for details.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  and simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080827175609.56", "ekr.20080827175609.57", "ekr.20080827175609.58", "ekr.20080827175609.59"]}, {"h": "Major new features", "gnx": "ekr.20080827175609.56", "b": "- Added support for @shadow files.\n  This is a major breakthrough.\n  See `Chapter 23`_ for full details.\n\n- Added much improved support for vim bindings.\n\n- Allow v.uA's in @thin and @shadow nodes.\n  See http://groups.google.com/group/leo-editor/browse_thread/thread/750bb3099090f5b\n", "children": []}, {"h": "Major code reorganizations", "gnx": "ekr.20080827175609.57", "b": "- Leo now uses a sax-based parser to read .leo files.\n  This makes it possible to extend Leo's file format without invalidating previous versions of Leo.\n\n- Leo now supports the so-called 'Graph World'.\n  When g.unified_nodes is True, Leo moves all information from tnodes into vnodes.\n\n- Leo now uses a new key binding scheme.\n  This allows substantially simpler key bindings. Indeed, most per-pane bindings\n  have been eliminated.\n  Added support for kill bindings.\n\n- Leo is now an installable package.\n  To make this work, Leo adds os.curdir to sys.path if needed on startup.\n\n- Reorganized Leo's drawing and focus code.\n  As a result, calls to c.beginUpdate and c.endUpdate are no longer needed.\n\n- Leo is now ready for Python 3.x:\n  Change most print statements to calls to g.pr.\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20080827175609.58", "b": "- Added g.Tracer class.  This is a Python 'debugger' that computes a call graph.\n  To trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n\n- The find-character command now finds characters across line boundaries.\n\n- Set cwd in read/write commands. This affect the following commands:\n  open, save, save-as, save-to, read-outline-only, read-file-into-node,\n  write-file-from-node and all the import/export commands.\n\n- Added support for @args list for @button nodes.\n  See the docstring for the mod_scripting plugin for details.\n\n- Leo creates the .leo folder in the user's HOME directory, and puts several configuration files there.\n  Leo looks for myLeoSettings.leo in HOME/.leo.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080827175609.59", "b": "- The default settings for @shadow files are now located in leoSettings.leo in the node::\n\n    @settings-->File options-->Shadow files\n\n  The defaults for these settings are::\n\n    @string shadow_prefix = x\n    @string shadow_subdir = .leo_shadow\n\n- Added support for @bool fixedWindow option. Leo suppresses marks, expansion\n  state, orphan bits and current position bits when writing fixed .leo files. As\n  a result, all nodes will be collapsed and the root node will always be\n  selected when Leo opens a fixed .leo file.\n\n  You can optionally specify the size and position on the screen of fixed .leo\n  files by putting an '@data fixedWindowPosition' node in the\n  @settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n  **not** put such a node in the fixed .leo file itself--everyone who\n  opens the file would get that fixed position.\n\n  The body of the '@data fixedWindowPosition' node should contain\n  something like this::\n\n    # Must be four entries: width,height,left,top.\n    # Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n    1200\n    800\n    50\n    50\n\n- Added @bool cleo_color_ignore = True\n  This determines whether cleo colors @ignore headlines. The default is True.\n\n- Added @bool suppress_import_parsing setting\n  When True, @auto and @shadow import the entire file into a single node.\n", "children": []}, {"h": "4.5 rc2", "gnx": "ekr.20080830082008.1", "b": "Leo 4.5 release candidate 2                     August 30, 2008\n\nLeo 4.5 rc2 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.5 contains many important new features.  See below for details.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  and simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080830082008.2", "ekr.20080830082008.3", "ekr.20080830082008.4", "ekr.20080830082008.5"]}, {"h": "Major new features", "gnx": "ekr.20080830082008.2", "b": "- Added support for @shadow files.\n  This is a major breakthrough.\n  See `Chapter 23`_ for full details.\n\n- Added much improved support for vim bindings.\n\n- Allow v.uA's in @thin and @shadow nodes.\n  See http://groups.google.com/group/leo-editor/browse_thread/thread/750bb3099090f5b\n", "children": []}, {"h": "Major code reorganizations", "gnx": "ekr.20080830082008.3", "b": "- Leo now uses a sax-based parser to read .leo files.\n  This makes it possible to extend Leo's file format without invalidating previous versions of Leo.\n\n- Leo now supports the so-called 'Graph World'.\n  When g.unified_nodes is True, Leo moves all information from tnodes into vnodes.\n\n- Leo now uses a new key binding scheme.\n  This allows substantially simpler key bindings. Indeed, most per-pane bindings\n  have been eliminated.\n  Added support for kill bindings.\n\n- Leo is now an installable package.\n  To make this work, Leo adds os.curdir to sys.path if needed on startup.\n\n- Reorganized Leo's drawing and focus code.\n  As a result, calls to c.beginUpdate and c.endUpdate are no longer needed.\n\n- Leo is now ready for Python 3.x:\n  Change most print statements to calls to g.pr.\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20080830082008.4", "b": "- Added g.Tracer class.  This is a Python 'debugger' that computes a call graph.\n  To trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n\n- The find-character command now finds characters across line boundaries.\n\n- Set cwd in read/write commands. This affect the following commands:\n  open, save, save-as, save-to, read-outline-only, read-file-into-node,\n  write-file-from-node and all the import/export commands.\n\n- Added support for @args list for @button nodes.\n  See the docstring for the mod_scripting plugin for details.\n\n- Leo creates the .leo folder in the user's HOME directory, and puts several configuration files there.\n  Leo looks for myLeoSettings.leo in HOME/.leo.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080830082008.5", "b": "- The default settings for @shadow files are now located in leoSettings.leo in the node::\n\n    @settings-->File options-->Shadow files\n\n  The defaults for these settings are::\n\n    @string shadow_prefix = x\n    @string shadow_subdir = .leo_shadow\n\n- Added support for @bool fixedWindow option. Leo suppresses marks, expansion\n  state, orphan bits and current position bits when writing fixed .leo files. As\n  a result, all nodes will be collapsed and the root node will always be\n  selected when Leo opens a fixed .leo file.\n\n  You can optionally specify the size and position on the screen of fixed .leo\n  files by putting an '@data fixedWindowPosition' node in the\n  @settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n  **not** put such a node in the fixed .leo file itself--everyone who\n  opens the file would get that fixed position.\n\n  The body of the '@data fixedWindowPosition' node should contain\n  something like this::\n\n    # Must be four entries: width,height,left,top.\n    # Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n    1200\n    800\n    50\n    50\n\n- Added @bool cleo_color_ignore = True\n  This determines whether cleo colors @ignore headlines. The default is True.\n\n- Added @bool suppress_import_parsing setting\n  When True, @auto and @shadow import the entire file into a single node.\n", "children": []}, {"h": "4.5 final", "gnx": "ekr.20080902080930.2", "b": "Leo 4.5 final                                  September 2, 2008\n\nLeo 4.5 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  and simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nQuote of the month:\n-------------------\nSqueak and Leo have been two of the most significant technologies to\nredefine my personal computer experience and the ideas behind computing.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080902080930.3", "ekr.20080902080930.4", "ekr.20080902080930.5", "ekr.20080902080930.6"]}, {"h": "Major new features", "gnx": "ekr.20080902080930.3", "b": "- Added support for @shadow files.\n  This is a major breakthrough.\n  See `Chapter 23`_ for full details.\n\n- Added much improved support for vim bindings.\n\n- Allow v.uA's in @thin and @shadow nodes.\n  See http://groups.google.com/group/leo-editor/browse_thread/thread/750bb3099090f5b\n", "children": []}, {"h": "Major code reorganizations", "gnx": "ekr.20080902080930.4", "b": "- Leo now uses a sax-based parser to read .leo files.\n  This makes it possible to extend Leo's file format without invalidating previous versions of Leo.\n\n- Leo now supports the so-called 'Graph World'.\n  When g.unified_nodes is True, Leo moves all information from tnodes into vnodes.\n\n- Leo now uses a new key binding scheme.\n  This allows substantially simpler key bindings. Indeed, most per-pane bindings\n  have been eliminated.\n  Added support for kill bindings.\n\n- Leo is now an installable package.\n  To make this work, Leo adds os.curdir to sys.path if needed on startup.\n\n- Reorganized Leo's drawing and focus code.\n  As a result, calls to c.beginUpdate and c.endUpdate are no longer needed.\n\n- Leo is now ready for Python 3.x:\n  Change most print statements to calls to g.pr.\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20080902080930.5", "b": "- Added g.Tracer class.  This is a Python 'debugger' that computes a call graph.\n  To trace a function and its callers, put the following at the function's start::\n\n    g.startTracer()\n\n- The find-character command now finds characters across line boundaries.\n\n- Set cwd in read/write commands. This affect the following commands:\n  open, save, save-as, save-to, read-outline-only, read-file-into-node,\n  write-file-from-node and all the import/export commands.\n\n- Added support for @args list for @button nodes.\n  See the docstring for the mod_scripting plugin for details.\n\n- Leo creates the .leo folder in the user's HOME directory, and puts several configuration files there.\n  Leo looks for myLeoSettings.leo in HOME/.leo.\n", "children": []}, {"h": "New settings", "gnx": "ekr.20080902080930.6", "b": "- The default settings for @shadow files are now located in leoSettings.leo in the node::\n\n    @settings-->File options-->Shadow files\n\n  The defaults for these settings are::\n\n    @string shadow_prefix = x\n    @string shadow_subdir = .leo_shadow\n\n- Added support for @bool fixedWindow option. Leo suppresses marks, expansion\n  state, orphan bits and current position bits when writing fixed .leo files. As\n  a result, all nodes will be collapsed and the root node will always be\n  selected when Leo opens a fixed .leo file.\n\n  You can optionally specify the size and position on the screen of fixed .leo\n  files by putting an '@data fixedWindowPosition' node in the\n  @settings tree of myLeoSettings.leo or leoSettings.leo.  You should\n  **not** put such a node in the fixed .leo file itself--everyone who\n  opens the file would get that fixed position.\n\n  The body of the '@data fixedWindowPosition' node should contain\n  something like this::\n\n    # Must be four entries: width,height,left,top.\n    # Put this in myLeoSettings.leo, **not** in individual .leo files.\n\n    1200\n    800\n    50\n    50\n\n- Added @bool cleo_color_ignore = True\n  This determines whether cleo colors @ignore headlines. The default is True.\n\n- Added @bool suppress_import_parsing setting\n  When True, @auto and @shadow import the entire file into a single node.\n", "children": []}, {"h": "4.5.1 final", "gnx": "ekr.20080912143702.137", "b": "Leo 4.5.1 final                                  September 14, 2008\n\nLeo 4.5.1 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.5.1 final fixes several important bugs in Leo 4.5 final:\n\n- Eliminated spurious error messages in the goto-global-line command.\n- @shadow files with unknown file extensions now work properly.\n- Improved Leo's installer.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.5:\n--------------------------\n\n- Full support for @shadow files in Leo's core.\n- Major improvements to Leo's key binding code.\n- The beginning of usable vim-like bindings.\n- uA's may now be associated with vnodes in @thin and @shadow files.\n- Several major reorganizations of Leo's code:\n  including sax-based parsing, support for the Graph world (unified nodes),\n  and simplified drawing code.\n- Leo is now an installable package.\n- Prepared code to be ready for Python 3.0.\n- Many small improvements and bug fixes.\n\nQuote of the month:\n-------------------\nSqueak and Leo have been two of the most significant technologies to\nredefine my personal computer experience and the ideas behind computing.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20080912143702.138", "ekr.20080912143702.139", "ekr.20080912143702.140"]}, {"h": "Fixed line number problems", "gnx": "ekr.20080912143702.138", "b": "# goToLineNumber was always complaining about a missing private shadow file.\n", "children": []}, {"h": "Fixed problems with @shadow files with unknown file extensions", "gnx": "ekr.20080912143702.139", "b": "@\n\nadjustTargetLanguage, a helper of writeOneAtShadowNode, no longer sets\nc.target_language to 'unknown_language' when the file extension is unknown.\n", "children": []}, {"h": "Fixed bug in Leo's pre-install script", "gnx": "ekr.20080912143702.140", "b": "The script failed for paths such as c:\\xp\\python25\\python.exe\nfor which python was not the top-most directory.\n", "children": []}, {"h": "4.6 file caching, qt gui, @edit, @auto-rst", "gnx": "ekr.20090717084250.10704", "b": "", "children": ["ekr.20090324085713.2", "ekr.20090620073906.11072", "ekr.20090709084001.5944", "ekr.20090717084250.10808", "ekr.20090718092032.10405", "ekr.20090802162204.5798", "ekr.20091006093902.6558"]}, {"h": "4.6 b1", "gnx": "ekr.20090324085713.2", "b": "Leo 4.6 beta 1                                       March 23, 2009\n\nLeo 4.6 b1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.6:\n--------------------------\n\n- Leo now requires Python 2.4 or later.\n- Leo now features a modern Qt interface;\n  Leo's legacy Tk interface can also be used.\n- New --config --file and --gui command-line options.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090324085713.285", "ekr.20090324085713.690", "ekr.20090324085713.661", "ekr.20090324105223.15", "ekr.20090324105223.9", "ekr.20090324105223.10", "ekr.20090324085713.848", "ekr.20090324085713.868"]}, {"h": "Bugs fixed", "gnx": "ekr.20090324085713.285", "b": "", "children": ["ekr.20090324085713.292", "ekr.20090324085713.326", "ekr.20090324085713.350", "ekr.20090324085713.358", "ekr.20090324085713.395", "ekr.20090324085713.404", "ekr.20090324085713.513", "ekr.20090324085713.605", "ekr.20090324085713.327", "ekr.20090324085713.289", "ekr.20090324085713.318", "ekr.20090324085713.320"]}, {"h": "Fixed goto-global-line crasher", "gnx": "ekr.20090324085713.292", "b": "", "children": []}, {"h": "Fixed bug that prevented Leo from opening files on the XP desktop", "gnx": "ekr.20090324085713.326", "b": "", "children": []}, {"h": "Save/restore tnodeList in atFile.write", "gnx": "ekr.20090324085713.350", "b": "The code should save/restore, just as in the clean_file function (from scripts.leo)\n", "children": []}, {"h": "Paste outline problem", "gnx": "ekr.20090324085713.358", "b": "The problem was missing calls to initAfterLoad in c.new.\n", "children": []}, {"h": "Made sure $Home works for @nosent", "gnx": "ekr.20090324085713.395", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f27e3514310a5c90\n", "children": []}, {"h": "Fixed atFile unicode bug", "gnx": "ekr.20090324085713.404", "b": "", "children": []}, {"h": "Fixed Mark Edgington's @shadow bug", "gnx": "ekr.20090324085713.513", "b": "", "children": []}, {"h": "Fixed whitespace problems with @auto/@shadow", "gnx": "ekr.20090324085713.605", "b": "Pulled trunk, got r1599\n\npython launchLeo.py leo/plugins/leoPlugins.leo\n\ngo to\n\nPlugins-->Graph world-->@shadow backlink.py-->backlink declarations\n\nAll I did was add the full stop at the end of the docstring, but see\nthe diff:\n\n=== modified file 'leo/plugins/backlink.py'\n--- leo/plugins/backlink.py     2009-02-19 18:16:01 +0000\n+++ leo/plugins/backlink.py     2009-02-25 22:14:46 +0000\n@@ -1,4 +1,4 @@\n-'''Backlink - allow arbitrary links between nodes\n+'''Backlink - allow arbitrary links between nodes.\n '''\n\n # Notes\n@@ -296,7 +296,7 @@\n                break\n        else:\n            self.showMessage(\"Error: no such link\")\n-\n+\n        gcc = getattr(self.c, 'graphcanvasController')\n        if gcc:\n            gcc.update()\n", "children": []}, {"h": "Fixed nested @path problem", "gnx": "ekr.20090324085713.327", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/7d8325d055cbef30\n", "children": []}, {"h": "Fixed encoding problems with rst3 plugin", "gnx": "ekr.20090324085713.289", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/5f5219fedd977ec2\n", "children": []}, {"h": "Fixed new rst3 crash", "gnx": "ekr.20090324085713.318", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/414137b93c7e4b90\n\nCalls g.makeAllNonExistentDirectories instead of os.mkdir.\n", "children": []}, {"h": "Fixed two c syntax-coloring bugs", "gnx": "ekr.20090324085713.320", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/707a910f975f3715\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/74c6ab4809bde980\n\nThere were two separate bugs:\n\n1. The eol_span and eol_span_regex now honor the mode's escape character.\n\n2. colorRangeWithTag now colors delegates with the default tag color.\n\nNo changes were made in modes/c.py or modes/c.xml.\n", "children": []}, {"h": "Improved file handling", "gnx": "ekr.20090324085713.690", "b": "", "children": ["ekr.20090324085713.726", "ekr.20090324085713.748", "ekr.20090324085713.792"]}, {"h": "Open a default .leo file if no other is specified", "gnx": "ekr.20090324085713.726", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d6449236bc140713#\n\nAdded support for @string default_leo_file = ~/.leo/workbook.leo\n", "children": []}, {"h": "Added escapes for underindented lines", "gnx": "ekr.20090324085713.748", "b": "@string underindent-escape-string = \\-\n", "children": []}, {"h": "Warn when writing an externally changed file", "gnx": "ekr.20090324085713.792", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c80fd8375534afdf\n", "children": []}, {"h": "New code features", "gnx": "ekr.20090324085713.661", "b": "", "children": ["ekr.20090324085713.662", "ekr.20090324085713.663", "ekr.20090324085713.666", "ekr.20090324085713.672", "ekr.20090324085713.688", "ekr.20090324085713.689", "ekr.20090324085713.272", "ekr.20090324085713.745"]}, {"h": "Added autoCompleter.getExternalCompletions", "gnx": "ekr.20090324085713.662", "b": "@nocolor\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/4ad91984a6d0acac\n\n> As I said, all I need would be is for leo to call callback/hook with\n> signature like\n> def complete(line-up-to-cursor, current_node) => list of strings\n\nThe actual signature is:\n\ntheObject,completionList = getExternalCompletions (self,s,p=None,language='python')\n\np is used only to get the language, or you can set the language by hand.\n\n@color\n", "children": []}, {"h": "Added g.posList", "gnx": "ekr.20090324085713.663", "b": "", "children": []}, {"h": "Better plugin info", "gnx": "ekr.20090324085713.666", "b": "c.config.doEnabledPlugins sets g.app.config.enabledPluginsFileName\n", "children": []}, {"h": "Added properties to leoNodes.py", "gnx": "ekr.20090324085713.672", "b": "p.b, p.h and p.gnx\nt.b, t.h, t.gnx and t.u\nv.b, v.h, v.gnx, and v.u\n", "children": []}, {"h": "Added script to leoSettings.leo to ensure all menu items are valid", "gnx": "ekr.20090324085713.688", "b": "", "children": []}, {"h": "Added c.config.getSettingSource", "gnx": "ekr.20090324085713.689", "b": "c.config.getSettingSource('show_full_tracebacks_in_scripts')\nreturns the name of the file which Leo used to determine the setting\n\n- D indicates default settings.\n- F indicates the file being loaded\n- L indicates leoSettings.leo\n- M indicates myLeoSettings.leo\n", "children": []}, {"h": "Predefined 'self' in @test/@suite nodes", "gnx": "ekr.20090324085713.272", "b": "", "children": []}, {"h": "Added c.getNodePath and c.getNodeFileName", "gnx": "ekr.20090324085713.745", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3b5f1232ecc6bba7\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20090324105223.15", "b": "", "children": ["ekr.20090324085713.849", "ekr.20090324085713.835", "ekr.20090324085713.867"]}, {"h": "Added -c option to specify config files", "gnx": "ekr.20090324085713.849", "b": "@nocolor\n\nThe setting is called -c or --config.  The one-config-file arg no longer exists.\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/f3f95d93bcd93b94\n\nPersonally, I'd like to see another config file available via -c on\nthe command line:\n(a common idiom)\n\nleo myproject.leo -c /usr/lib/myproject/myLeoSettings.leo\n\nor better yet:\n\nleo myproject.leo -c /etc/leo/style01.leo\nleo myotherproject.leo -c /etc/leo/style02.leo\nleo anotherproject.leo -c /etc/leo/style23.leo\n\nEach file opens in an editor with the shortcuts, buttons, commands,\nplugins, appearance etc.  that has been tuned for that data management task.\n\nor best yet:\n\nleo myproject.leo -c /usr/lib/python2.5/site-packages/leo/config/style94.leo\n\n==================\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/b5a736089079acaf#\n\nPlease, I think each file has a distinct and required role.\n\n- config/leoSettings.leo = Edward's base, required for a sane starting point\n\n- home/.leo/myLeoSettings.leo = adjust Edwards suggestions to taste\n\n- cwd/myLeoSettings.leo = provide a customized working environment in\nthis folder\n\n- leo -c /usr/lib/leo-editor/src/config/zope3_ide.leo =\n  - open this file in a specialized environments, mine or community contributed\n  - ...\n\n- currentfile/@settings =\n  - I'm working on some customization ideas\n  - Here, try out this Leo file I sent you, check out all the spiffy\nmodifications \n\n@color\n", "children": []}, {"h": "Added support for --file=fileName command-line option", "gnx": "ekr.20090324085713.835", "b": "Only .zip and .leo extensions are allowed at present.\n", "children": []}, {"h": "Added support for --gui option", "gnx": "ekr.20090324085713.867", "b": "", "children": []}, {"h": "New commands", "gnx": "ekr.20090324105223.9", "b": "", "children": ["ekr.20090324085713.747", "ekr.20090324085713.817", "ekr.20090324085713.836", "ekr.20090324085713.837", "ekr.20090324085713.847"]}, {"h": "Added smart home (back-to-home) command", "gnx": "ekr.20090324085713.747", "b": "", "children": []}, {"h": "The open command creates @edit nodes when opening non-.leo files", "gnx": "ekr.20090324085713.817", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3417ff5e9c02c626\n\nThe open file dialog now shows all files by default.\nSelecting a non-.leo file will load that file into a new node in the present outline.\n\nThis plugs what may have been the biggest hole in Leo's history.\n", "children": []}, {"h": "added pdb minibuffer command", "gnx": "ekr.20090324085713.836", "b": "This works, but stops Leo in the middle of the command-handling logic.\n\nHowever, it is possible to pick up the commander by stepping out into\nk.masterKeyHandler or k.masterCommandHandler. Using c, one can then get all\nother info.\n", "children": []}, {"h": "Added support for smart_tab setting", "gnx": "ekr.20090324085713.837", "b": "- Tab = indent when there is a text selection\n- Shift-Tab unindents always\n", "children": []}, {"h": "Improved isearch commands", "gnx": "ekr.20090324085713.847", "b": "Escape now ends isearch\n", "children": []}, {"h": "New and improved directives", "gnx": "ekr.20090324105223.10", "b": "", "children": ["ekr.20090324085713.740", "ekr.20090324085713.691"]}, {"h": "Added @nocolor-node directive", "gnx": "ekr.20090324085713.740", "b": "# Useful: we don't need a closing @color to enable coloring in descendants.\n", "children": []}, {"h": "Improved @path handling", "gnx": "ekr.20090324085713.691", "b": "", "children": []}, {"h": "New settings", "gnx": "ekr.20090324085713.848", "b": "", "children": ["ekr.20090324085713.732", "ekr.20090324085713.850", "ekr.20090324085713.746", "ekr.20090324085713.814"]}, {"h": "Added better default fonts for Leo on Linux", "gnx": "ekr.20090324085713.732", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f1c7c5134b95c77e\n", "children": []}, {"h": "Added support for @int icon_bar_widgets_per_row setting", "gnx": "ekr.20090324085713.850", "b": "", "children": []}, {"h": "Added support for meta keys", "gnx": "ekr.20090324085713.746", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b6a39ed672a28c65?pli=1\n", "children": []}, {"h": "Use myLeoSettings when opening leoSettings.leo", "gnx": "ekr.20090324085713.814", "b": "Changed config.get so that settings in leoSettings.leo are read *last*.\nThis means that myLeoSettings.leo will override leoSettings.leo,\neven when leoSettings.leo is the local file.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20090324085713.868", "b": "", "children": ["ekr.20090324085713.869", "ekr.20090324085713.881", "ekr.20090324085713.890"]}, {"h": "Improved nav_buttons plugin and corresponding nodeHistory class", "gnx": "ekr.20090324085713.869", "b": "", "children": []}, {"h": "Created qtGui and tkGui plugins", "gnx": "ekr.20090324085713.881", "b": "", "children": []}, {"h": "Created leoGuiPluginsRef.leo", "gnx": "ekr.20090324085713.890", "b": "This contains all gui plugins.\n", "children": []}, {"h": "4.6 b2", "gnx": "ekr.20090620073906.11072", "b": "Leo 4.6 beta 2                                  June 22, 2009\n\nLeo 4.6 b2 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.6:\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes support \"round-tripping\" of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090620073906.11073", "ekr.20090620073906.11870"]}, {"h": "Bugs", "gnx": "ekr.20090620073906.11073", "b": "", "children": ["ekr.20090620073906.11083", "ekr.20090620073906.11087", "ekr.20090620073906.11960", "ekr.20090620073906.11590", "ekr.20090620073906.11376", "ekr.20090620073906.11981", "ekr.20090620073906.12044", "ekr.20090620073906.11865", "ekr.20090620073906.11850", "ekr.20090620073906.11564", "ekr.20090620073906.11296", "ekr.20090620073906.11081", "ekr.20090620103431.5601", "ekr.20090620073906.11833", "ekr.20090620073906.11374", "ekr.20090620073906.11521", "ekr.20090620073906.11091", "ekr.20090620073906.11380", "ekr.20090620073906.11074", "ekr.20090620073906.11137", "ekr.20090620073906.11387", "ekr.20090620073906.11776", "ekr.20090620073906.11707", "ekr.20090620073906.11377", "ekr.20090620073906.11864", "ekr.20090620073906.11352", "ekr.20090620073906.11740", "ekr.20090620073906.11818", "ekr.20090620073906.11390", "ekr.20090620073906.11086", "ekr.20090620073906.11760", "ekr.20090620073906.11666", "ekr.20090620073906.11866", "ekr.20090620073906.11349", "ekr.20090620073906.11107", "ekr.20090620073906.11378", "ekr.20090620073906.11759", "ekr.20090620073906.11094", "ekr.20090620073906.11612", "ekr.20090620073906.11620", "ekr.20090620073906.11824", "ekr.20090620073906.11771", "ekr.20090620073906.11973"]}, {"h": "Added patch for startup logic", "gnx": "ekr.20090620073906.11083", "b": "A patch at the start of loadOnePlugin prevents leo from crashing and allows the\ngui prompt for a leoID to come up.\n", "children": []}, {"h": "Allocate gnx's when nodes are created", "gnx": "ekr.20090620073906.11087", "b": "This is reasonable now that old-style file indices are rare.\n", "children": []}, {"h": "Allow block comments in private shadow files", "gnx": "ekr.20090620073906.11960", "b": "Html files are a good test case.\n", "children": []}, {"h": "Compute delims from private shadow file as needed", "gnx": "ekr.20090620073906.11590", "b": "", "children": []}, {"h": "Don't copy @edit trees to outline", "gnx": "ekr.20090620073906.11376", "b": "http://bugs.launchpad.net/leo-editor/+bug/376634\n\nThe fix was to putVnodes.\n", "children": []}, {"h": "Don't expand ancestors of @chapter node when selecting chapter", "gnx": "ekr.20090620073906.11981", "b": "", "children": []}, {"h": "Entries in recent files menu now have absolute paths", "gnx": "ekr.20090620073906.12044", "b": "http://bugs.launchpad.net/leo-editor/+bug/383204\n", "children": []}, {"h": "Fixed (worked around) tk chapters bug", "gnx": "ekr.20090620073906.11865", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/981c27d5c24c90f8\n", "children": []}, {"h": "Fixed @edit bug", "gnx": "ekr.20090620073906.11850", "b": "The generated @nocolor line now ends with a newline.\n", "children": []}, {"h": "Fixed @shadow crasher", "gnx": "ekr.20090620073906.11564", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/6cab5e676d4d75a0\n", "children": []}, {"h": "Fixed @thin bug", "gnx": "ekr.20090620073906.11296", "b": "- Removed forceGnxOnPosition from leoImport.py and leoAtFile.py.\n\n- readStartNode now always uses root.v for the first node\n  instead of calling createThinChild4\n", "children": []}, {"h": "Fixed back-to-home so it works as expected", "gnx": "ekr.20090620073906.11081", "b": "https://bugs.launchpad.net/leo-editor/+bug/367462\n\nThe expected/customary behavior (one you get used to in almost every editor) is:\n\nEnd: always move to end of line\nHome: Move to first visible character on the line. When pressing home again, move to column zero. If Home is pressed one more time, move to first visible character again.\n\nThis is also the way emacs behaves, though ctrl+a always moves to column zero.\n", "children": []}, {"h": "Fixed bad @verbatim bug", "gnx": "ekr.20090620103431.5601", "b": "The @verbatim was being inserted into the outline.\n", "children": []}, {"h": "Fixed binding problem with notebook", "gnx": "ekr.20090620073906.11833", "b": "", "children": []}, {"h": "Fixed bug: sorting could revert headline changes", "gnx": "ekr.20090620073906.11374", "b": "", "children": []}, {"h": "Fixed crash when reading .zip files", "gnx": "ekr.20090620073906.11521", "b": "The problem arose when reading a zipped file:\n\n File \"C:\\Programme\\Leo-4-6-b1\\leo\\core\\leoFileCommands.py\", line\n1265, in parse_leo_file\n   s = theFile.read()\nTypeError: read() takes at least 2 arguments (1 given)\nsaved: [zipped] Dive-into-Python-3.leo\n", "children": []}, {"h": "Fixed crasher when creating .leoID.txt", "gnx": "ekr.20090620073906.11091", "b": "exception loading plugin\nTraceback (most recent call last):\n\n  File \"C:\\leo.repo\\trunk\\leo\\core\\leoPlugins.py\", line 429, in loadOnePlugin\n    loadedModulesFilesDict[moduleName] = g.app.config.enabledPluginsFileName\n\nAttributeError: StubConfig instance has no attribute 'enabledPluginsFileName'\n\nleoID='ekr'\n.leoID.txt created in C:\\Documents and Settings\\HP_Administrator\\My Documents\\Edward\\.leo\nload \n", "children": []}, {"h": "Fixed dabbrev-expands bug", "gnx": "ekr.20090620073906.11380", "b": "http://bugs.launchpad.net/leo-editor/+bug/362048\n\nI have 'dabbrev-expands' bound to the F4 key. When I press F4 after\nthe word \"freq\" in a body pane containing the word \"frequency\" then\nLeo 4.5.1 shows a hour-glass for a while before giving an empty\ndabbrev-expand: prompt in the minibuffer.\n\nIf I back up one character, putting point between the e and q and then\ntype F4, I get the expected behavior: the word \"frequency\" is inserted\nimmediately.\n\nWhat I did:\n\n- Removed \"not ready messages\".\n- Made the code undoable.\n- Added wimpy unit test.\n", "children": []}, {"h": "Fixed elisp importer problem", "gnx": "ekr.20090620073906.11074", "b": "", "children": []}, {"h": "Fixed F10/11/12 key bug", "gnx": "ekr.20090620073906.11137", "b": "Added call to isFKey in k.handleUnboundKeys.\n", "children": []}, {"h": "Fixed file bug re unicode characters", "gnx": "ekr.20090620073906.11387", "b": "http://bugs.launchpad.net/leo-editor/+bug/376189\n", "children": []}, {"h": "Fixed hoist problems", "gnx": "ekr.20090620073906.11776", "b": "http://bugs.launchpad.net/leo-editor/+bug/382221\n", "children": []}, {"h": "Fixed lost anchor bug page up/down", "gnx": "ekr.20090620073906.11707", "b": "http://bugs.launchpad.net/leo-editor/+bug/363403\n\nWith a long body text you might place the cursor on a line, hold down Shift, and\nPgDn several pages to select a large block of text. The last PgDn may overshoot\nthe range you want selected, so you should be able to use UpArrow to bring the\nbottom of the range back up to where you want it. However, on the first UpArrow\nthe selection is lost and restarted from the current cursor position. I.e. you\nend up with just one line selected, instead of trimming one line of the\nselection of several pages, as intended.\n", "children": []}, {"h": "Fixed minor @auto bug", "gnx": "ekr.20090620073906.11377", "b": "http://bugs.launchpad.net/leo-editor/+bug/306671\n\nIf a Leo editor window is opened, and the \"NewHeadline\" node is renamed to\n\"@auto <path to some valid file>\", and then the \"File->Read/Write->Read @auto\nnodes\" menu option is selected, the renamed node reverts to its previous name\n(\"NewHeadline\"), and nothing is loaded into the node.\n", "children": []}, {"h": "Fixed multiple-editor focus problems", "gnx": "ekr.20090620073906.11864", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/21bddd50f3400bdc?hl=en\n", "children": []}, {"h": "Fixed new command", "gnx": "ekr.20090620073906.11352", "b": "The outline wasn't being redrawn properly.\n", "children": []}, {"h": "Fixed problems with change-all command", "gnx": "ekr.20090620073906.11740", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/430287018f9d773d\n\nThe fix to minibufferFind.changeAll fixes a bug that is several years old.\nThe fix to findNextMatch fixes a bug that is likely much older than that.\n", "children": []}, {"h": "Fixed read clone bug", "gnx": "ekr.20090620073906.11818", "b": "", "children": []}, {"h": "Fixed rst import bug", "gnx": "ekr.20090620073906.11390", "b": "", "children": []}, {"h": "Fixed rst3 problem", "gnx": "ekr.20090620073906.11086", "b": "http://mail.google.com/mail/#inbox/11ef0076a3f4d866\n", "children": []}, {"h": "Fixed seg-fault bug", "gnx": "ekr.20090620073906.11760", "b": "The crash happened inside the call to::\n\n    c.widgetWantsFocusNow(event.widget)\n\nin callAltXFunction. Actually, the crash happened later, in c.outerUpdate.\n\nA better fix would be to use wrappers for all edit widgets, and recalculate the\nedit widget any it needs to be used.\n", "children": []}, {"h": "Fixed Shift-Arrow in headlines", "gnx": "ekr.20090620073906.11666", "b": "", "children": []}, {"h": "Fixed startup problem", "gnx": "ekr.20090620073906.11866", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/606277d73b193037\n", "children": []}, {"h": "Fixed stubConfig problems", "gnx": "ekr.20090620073906.11349", "b": "", "children": []}, {"h": "Fixed undo bug", "gnx": "ekr.20090620073906.11107", "b": "onTextChanged in the qt gui was calling setUndoTypingParams, in many case\nredundantly and with bad params.\n\nIt remains to be seen whether onTextChanged is ever needed. If it is, it may be\ndifficult to set the old selection properly.\n", "children": []}, {"h": "Fixed vim bindings (dd) bug", "gnx": "ekr.20090620073906.11378", "b": "http://bugs.launchpad.net/leo-editor/+bug/353925\n\nThe \"kill-region\" function did nothing when using the qt gui.\n\nThe fix was to replace tag_ranges with w.getSelectionRange, etc.\nThis was the only call to tag_ranges in the core.\n", "children": []}, {"h": "Investigated bug: File->Export->write failed due to incorrect path", "gnx": "ekr.20090620073906.11759", "b": "http://bugs.launchpad.net/leo-editor/+bug/377907\n\nI'm going to mark this invalid, although the behavior is way too confusing.\n\nI added the following to the plugin's docstring:\n\nConfiguration\n~~~~~~~~~~~~~\n\nAt present, the file leo/plugins/leo_to_html.ini contains configuration settings.\nIn particular, the default export path, \"c:\\\" must be changed for *nix systems.\n", "children": []}, {"h": "Investigated speed of external unit tests", "gnx": "ekr.20090620073906.11094", "b": "The problem is imports in the Commands ctor. When executed the first time from\nthe bridge the imports take about 3/4 sec. on my machine. There is nothing that\ncan or should be done. Ctrl-5 is still hugely faster than opening unitTest.leo!\n", "children": []}, {"h": "Made @url nodes work with qt gui", "gnx": "ekr.20090620073906.11612", "b": "", "children": []}, {"h": "Mark @<file> nodes dirty when @path nodes change", "gnx": "ekr.20090620073906.11620", "b": "", "children": []}, {"h": "Removed duplicate messages when opening non-existent .leo file", "gnx": "ekr.20090620073906.11824", "b": "", "children": []}, {"h": "Reversed messages about redefined keys", "gnx": "ekr.20090620073906.11771", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a04dcefbb672078f\n", "children": []}, {"h": "Scroll commands now affect only scrollbars", "gnx": "ekr.20090620073906.11973", "b": "", "children": []}, {"h": "New features", "gnx": "ekr.20090620073906.11870", "b": "", "children": ["ekr.20090620073906.11923", "ekr.20090620073906.11873", "ekr.20090620073906.11898", "ekr.20090620073906.12061", "ekr.20090620073906.11935"]}, {"h": "Allow Leo to open any file", "gnx": "ekr.20090620073906.11923", "b": "Leo can now open, for example, any .py file.\nIt will be put in an @edit node in an otherwise-empty outline.\n\nThis allows Leo to be associated with the edit action of .py files.\nSomething like this::\n\nC:\\Python26\\python.exe \"c:\\leo.repo\\trunk\\launchLeo.py\" --gui=qt %1 %2\n", "children": []}, {"h": "Improved unit testing", "gnx": "ekr.20090620073906.11873", "b": "- leoDynamicTest.py now supports a --path argument giving the .leo file.\n  This is so useful!\n\n- leoDynamicTest.py now honors the --silent argument.\n\n- leoTest.runUnitTestLeoFile runs all unit tests in a given .leo file\n  in a separate process.\n\n- leoTest.runTestsExternally calls runUnitTestLeoFile after creating\n  dynamicUnitTest.leo.\n\n- When reporting that no unit tests were found, all unit tests commands tell\n  whether the entire outline or just the selected outline was searched.\n  This fixes sometimes-misleading error messages.\n\n- test.leo contains a 'run-test.leo-tests' button.\n\n- leoPy.leo contains a 'run-all-core-tests' button.\n", "children": []}, {"h": "Leo tests syntax of .py files when saving them", "gnx": "ekr.20090620073906.11898", "b": "", "children": []}, {"h": "Made qt gui the default", "gnx": "ekr.20090620073906.12061", "b": "", "children": []}, {"h": "Support @auto-rst", "gnx": "ekr.20090620073906.11935", "b": "", "children": []}, {"h": "4.6 rc1", "gnx": "ekr.20090709084001.5944", "b": "Leo 4.6 release candidate 1                             July 9, 2009\n\nLeo 4.6 rc1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.6:\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes allow easy editing of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090709084001.5945", "ekr.20090709084001.6296"]}, {"h": "Bugs", "gnx": "ekr.20090709084001.5945", "b": "", "children": ["ekr.20090709084001.5968", "ekr.20090709084001.6086", "ekr.20090709084001.6096", "ekr.20090709084001.6119", "ekr.20090709084001.6138", "ekr.20090709084001.6140", "ekr.20090709084001.6144", "ekr.20090709084001.6149", "ekr.20090709084001.6153", "ekr.20090709084001.6156", "ekr.20090709084001.6164", "ekr.20090709084001.6192", "ekr.20090709084001.6204", "ekr.20090709084001.6238", "ekr.20090709084001.6241", "ekr.20090709084001.6254", "ekr.20090709084001.6283", "ekr.20090709084001.6291"]}, {"h": "Fixed unicode problem with spell checker", "gnx": "ekr.20090709084001.5968", "b": "", "children": []}, {"h": "Ensure newline at end of each @auto node", "gnx": "ekr.20090709084001.6086", "b": "", "children": []}, {"h": "Fixed bugs with goto-global-line and @auto", "gnx": "ekr.20090709084001.6096", "b": "", "children": []}, {"h": "Added key bindings in log pane", "gnx": "ekr.20090709084001.6119", "b": "", "children": []}, {"h": "Honor split ratios", "gnx": "ekr.20090709084001.6138", "b": "", "children": []}, {"h": "Click in body after editing activates body", "gnx": "ekr.20090709084001.6140", "b": "", "children": []}, {"h": "Rewrote string-rectangle command for speed", "gnx": "ekr.20090709084001.6144", "b": "", "children": []}, {"h": "Fixed read-at-auto-nodes bug", "gnx": "ekr.20090709084001.6149", "b": "", "children": []}, {"h": "Fixed major focus problems", "gnx": "ekr.20090709084001.6153", "b": "Various get-focus methods must translate from wrapped widget to wrapper widget.\nThis happens in g.app.gui.get_focus, which needs a c arg to work properly in some cases!\n", "children": []}, {"h": "Fixed problem with read-at-file/shadow-nodes", "gnx": "ekr.20090709084001.6156", "b": "", "children": []}, {"h": "Fixed major icon/t.uA bug", "gnx": "ekr.20090709084001.6164", "b": "https://bugs.launchpad.net/leo-editor/+bug/345917\n", "children": []}, {"h": "Fixed rst bug", "gnx": "ekr.20090709084001.6192", "b": "Exact repro steps (using trunk):\n\nHelp -> open quickstart.leo\n\nGo to Programming-->External files-->reStructuredText (@auto-\nrst)-->@path ~-->@@auto-rst myfile_rst.txt\n\nRemove first @ from @auto-rst\n\nSave => exception occurs.\n", "children": []}, {"h": "Made alt-6 run all unit tests", "gnx": "ekr.20090709084001.6204", "b": "@test nodes in the generated file were being run when modules were imported.\n\nThe fix was to set g.unitTesting = False while importing in safeImportModule.\n", "children": []}, {"h": "Fixed crasher in dynamicExpanderHelper", "gnx": "ekr.20090709084001.6238", "b": "", "children": []}, {"h": "Don't collapse initial node automatically", "gnx": "ekr.20090709084001.6241", "b": "", "children": []}, {"h": "Fixed bug: don't duplicate standard buttons", "gnx": "ekr.20090709084001.6254", "b": "@nocolor-node\n\nhttps://bugs.launchpad.net/leo-editor/+bug/394965\n\nSeveral changes:\n\n- Fixed bug in runLeo.py.completeFileName.\n  Do not add \".leo\" suffix if the file exists without it!\n\n- Fixed (???) the bug by not calling g.doHook(\"new\"...) in g.openWrapperFile.\n  This **might** be a perfect fix, but maybe not.\n  But if a bug remains, it might be less bad than the duplicated buttons bug :-)\n", "children": []}, {"h": "Fixed critical @file data-loss problem", "gnx": "ekr.20090709084001.6283", "b": "The culprit was the code in atFile.read that deleted all children.\n\nAdded several important new unit tests.\n", "children": []}, {"h": "Added hasSelection to leoQtBody", "gnx": "ekr.20090709084001.6291", "b": "Also added test for leoQtBody to existing test.\n", "children": []}, {"h": "Features", "gnx": "ekr.20090709084001.6296", "b": "", "children": ["ekr.20090709084001.6297", "ekr.20090709084001.6300", "ekr.20090709084001.6301", "ekr.20090709084001.6304", "ekr.20090709084001.6307"]}, {"h": "Added open-quickstart-leo command", "gnx": "ekr.20090709084001.6297", "b": "", "children": []}, {"h": "Added tree bindings for page-up/down commands", "gnx": "ekr.20090709084001.6300", "b": "This was a binding issue. Leo has a full range of scrolling commands. They work.\n\nThe old bindings bound the PageUp/Down keys to back/forward page commands, and\nthese commands work only for text.\n\nThe new default bindings in leoSettings.leo: @keys EKR bindings are:\n\nback-page                       ! text = PageUp\nback-page-extend-selection      ! text = Shift-PageUp\nforward-page                    ! text = PageDn\nforward-page-extend-selection   ! text = Shift-PageDn\n\nscroll-down-half-page   ! tree = Shift-PageDn\nscroll-down-page        ! tree = PageDn\nscroll-up-half-page     ! tree = Shift-PageUp\nscroll-up-page          ! tree = PageUp         \n", "children": []}, {"h": "Issue error message re non-existent plugins", "gnx": "ekr.20090709084001.6301", "b": "Leo now prints an error message when @enabled-plugins node contains a plugin\nthat does not exist.\n", "children": []}, {"h": "Expanded Alt-lt/rt arrows", "gnx": "ekr.20090709084001.6304", "b": "", "children": []}, {"h": "Added important @auto warning", "gnx": "ekr.20090709084001.6307", "b": "Warn if the file exists and has never been read. This prevents a newly-created\n@auto node from overwriting an existing file.\n", "children": []}, {"h": "4.6 final", "gnx": "ekr.20090717084250.10808", "b": "Leo 4.6 final                             July 15, 2009\n\nLeo 4.6 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.6:\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes allow easy editing of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090717084250.10809", "ekr.20090717084250.10867"]}, {"h": "Bug fixes", "gnx": "ekr.20090717084250.10809", "b": "", "children": ["ekr.20090717084250.10810", "ekr.20090717084250.10854"]}, {"h": "Bugs fixed in 4.6 b2", "gnx": "ekr.20090717084250.10810", "b": "", "children": ["ekr.20090717084250.10811", "ekr.20090717084250.10812", "ekr.20090717084250.10813", "ekr.20090717084250.10814", "ekr.20090717084250.10815", "ekr.20090717084250.10816", "ekr.20090717084250.10817", "ekr.20090717084250.10818", "ekr.20090717084250.10819", "ekr.20090717084250.10820", "ekr.20090717084250.10821", "ekr.20090717084250.10822", "ekr.20090717084250.10823", "ekr.20090717084250.10824", "ekr.20090717084250.10825", "ekr.20090717084250.10826", "ekr.20090717084250.10827", "ekr.20090717084250.10828", "ekr.20090717084250.10829", "ekr.20090717084250.10830", "ekr.20090717084250.10831", "ekr.20090717084250.10832", "ekr.20090717084250.10833", "ekr.20090717084250.10834", "ekr.20090717084250.10835", "ekr.20090717084250.10836", "ekr.20090717084250.10837", "ekr.20090717084250.10838", "ekr.20090717084250.10839", "ekr.20090717084250.10840", "ekr.20090717084250.10841", "ekr.20090717084250.10842", "ekr.20090717084250.10843", "ekr.20090717084250.10844", "ekr.20090717084250.10845", "ekr.20090717084250.10846", "ekr.20090717084250.10847", "ekr.20090717084250.10848", "ekr.20090717084250.10849", "ekr.20090717084250.10850", "ekr.20090717084250.10851", "ekr.20090717084250.10852", "ekr.20090717084250.10853"]}, {"h": "Added patch for startup logic", "gnx": "ekr.20090717084250.10811", "b": "A patch at the start of loadOnePlugin prevents leo from crashing and allows the\ngui prompt for a leoID to come up.\n", "children": []}, {"h": "Allocate gnx's when nodes are created", "gnx": "ekr.20090717084250.10812", "b": "This is reasonable now that old-style file indices are rare.\n", "children": []}, {"h": "Allow block comments in private shadow files", "gnx": "ekr.20090717084250.10813", "b": "Html files are a good test case.\n", "children": []}, {"h": "Compute delims from private shadow file as needed", "gnx": "ekr.20090717084250.10814", "b": "", "children": []}, {"h": "Don't copy @edit trees to outline", "gnx": "ekr.20090717084250.10815", "b": "http://bugs.launchpad.net/leo-editor/+bug/376634\n\nThe fix was to putVnodes.\n", "children": []}, {"h": "Don't expand ancestors of @chapter node when selecting chapter", "gnx": "ekr.20090717084250.10816", "b": "", "children": []}, {"h": "Entries in recent files menu now have absolute paths", "gnx": "ekr.20090717084250.10817", "b": "http://bugs.launchpad.net/leo-editor/+bug/383204\n", "children": []}, {"h": "Fixed (worked around) tk chapters bug", "gnx": "ekr.20090717084250.10818", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/981c27d5c24c90f8\n", "children": []}, {"h": "Fixed @edit bug", "gnx": "ekr.20090717084250.10819", "b": "The generated @nocolor line now ends with a newline.\n", "children": []}, {"h": "Fixed @shadow crasher", "gnx": "ekr.20090717084250.10820", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/6cab5e676d4d75a0\n", "children": []}, {"h": "Fixed @thin bug", "gnx": "ekr.20090717084250.10821", "b": "- Removed forceGnxOnPosition from leoImport.py and leoAtFile.py.\n\n- readStartNode now always uses root.v for the first node\n  instead of calling createThinChild4\n", "children": []}, {"h": "Fixed back-to-home so it works as expected", "gnx": "ekr.20090717084250.10822", "b": "https://bugs.launchpad.net/leo-editor/+bug/367462\n\nThe expected/customary behavior (one you get used to in almost every editor) is:\n\nEnd: always move to end of line\nHome: Move to first visible character on the line. When pressing home again, move to column zero. If Home is pressed one more time, move to first visible character again.\n\nThis is also the way emacs behaves, though ctrl+a always moves to column zero.\n", "children": []}, {"h": "Fixed bad @verbatim bug", "gnx": "ekr.20090717084250.10823", "b": "The @verbatim was being inserted into the outline.\n", "children": []}, {"h": "Fixed binding problem with notebook", "gnx": "ekr.20090717084250.10824", "b": "", "children": []}, {"h": "Fixed bug: sorting could revert headline changes", "gnx": "ekr.20090717084250.10825", "b": "", "children": []}, {"h": "Fixed crash when reading .zip files", "gnx": "ekr.20090717084250.10826", "b": "The problem arose when reading a zipped file:\n\n File \"C:\\Programme\\Leo-4-6-b1\\leo\\core\\leoFileCommands.py\", line\n1265, in parse_leo_file\n   s = theFile.read()\nTypeError: read() takes at least 2 arguments (1 given)\nsaved: [zipped] Dive-into-Python-3.leo\n", "children": []}, {"h": "Fixed crasher when creating .leoID.txt", "gnx": "ekr.20090717084250.10827", "b": "exception loading plugin\nTraceback (most recent call last):\n\n  File \"C:\\leo.repo\\trunk\\leo\\core\\leoPlugins.py\", line 429, in loadOnePlugin\n    loadedModulesFilesDict[moduleName] = g.app.config.enabledPluginsFileName\n\nAttributeError: StubConfig instance has no attribute 'enabledPluginsFileName'\n\nleoID='ekr'\n.leoID.txt created in C:\\Documents and Settings\\HP_Administrator\\My Documents\\Edward\\.leo\nload \n", "children": []}, {"h": "Fixed dabbrev-expands bug", "gnx": "ekr.20090717084250.10828", "b": "http://bugs.launchpad.net/leo-editor/+bug/362048\n\nI have 'dabbrev-expands' bound to the F4 key. When I press F4 after\nthe word \"freq\" in a body pane containing the word \"frequency\" then\nLeo 4.5.1 shows a hour-glass for a while before giving an empty\ndabbrev-expand: prompt in the minibuffer.\n\nIf I back up one character, putting point between the e and q and then\ntype F4, I get the expected behavior: the word \"frequency\" is inserted\nimmediately.\n\nWhat I did:\n\n- Removed \"not ready messages\".\n- Made the code undoable.\n- Added wimpy unit test.\n", "children": []}, {"h": "Fixed elisp importer problem", "gnx": "ekr.20090717084250.10829", "b": "", "children": []}, {"h": "Fixed F10/11/12 key bug", "gnx": "ekr.20090717084250.10830", "b": "Added call to isFKey in k.handleUnboundKeys.\n", "children": []}, {"h": "Fixed file bug re unicode characters", "gnx": "ekr.20090717084250.10831", "b": "http://bugs.launchpad.net/leo-editor/+bug/376189\n", "children": []}, {"h": "Fixed hoist problems", "gnx": "ekr.20090717084250.10832", "b": "http://bugs.launchpad.net/leo-editor/+bug/382221\n", "children": []}, {"h": "Fixed lost anchor bug page up/down", "gnx": "ekr.20090717084250.10833", "b": "http://bugs.launchpad.net/leo-editor/+bug/363403\n\nWith a long body text you might place the cursor on a line, hold down Shift, and\nPgDn several pages to select a large block of text. The last PgDn may overshoot\nthe range you want selected, so you should be able to use UpArrow to bring the\nbottom of the range back up to where you want it. However, on the first UpArrow\nthe selection is lost and restarted from the current cursor position. I.e. you\nend up with just one line selected, instead of trimming one line of the\nselection of several pages, as intended.\n", "children": []}, {"h": "Fixed minor @auto bug", "gnx": "ekr.20090717084250.10834", "b": "http://bugs.launchpad.net/leo-editor/+bug/306671\n\nIf a Leo editor window is opened, and the \"NewHeadline\" node is renamed to\n\"@auto <path to some valid file>\", and then the \"File->Read/Write->Read @auto\nnodes\" menu option is selected, the renamed node reverts to its previous name\n(\"NewHeadline\"), and nothing is loaded into the node.\n", "children": []}, {"h": "Fixed multiple-editor focus problems", "gnx": "ekr.20090717084250.10835", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/21bddd50f3400bdc?hl=en\n", "children": []}, {"h": "Fixed new command", "gnx": "ekr.20090717084250.10836", "b": "The outline wasn't being redrawn properly.\n", "children": []}, {"h": "Fixed problems with change-all command", "gnx": "ekr.20090717084250.10837", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/430287018f9d773d\n\nThe fix to minibufferFind.changeAll fixes a bug that is several years old.\nThe fix to findNextMatch fixes a bug that is likely much older than that.\n", "children": []}, {"h": "Fixed read clone bug", "gnx": "ekr.20090717084250.10838", "b": "", "children": []}, {"h": "Fixed rst import bug", "gnx": "ekr.20090717084250.10839", "b": "", "children": []}, {"h": "Fixed rst3 problem", "gnx": "ekr.20090717084250.10840", "b": "http://mail.google.com/mail/#inbox/11ef0076a3f4d866\n", "children": []}, {"h": "Fixed seg-fault bug", "gnx": "ekr.20090717084250.10841", "b": "The crash happened inside the call to::\n\n    c.widgetWantsFocusNow(event.widget)\n\nin callAltXFunction. Actually, the crash happened later, in c.outerUpdate.\n\nA better fix would be to use wrappers for all edit widgets, and recalculate the\nedit widget any it needs to be used.\n", "children": []}, {"h": "Fixed Shift-Arrow in headlines", "gnx": "ekr.20090717084250.10842", "b": "", "children": []}, {"h": "Fixed startup problem", "gnx": "ekr.20090717084250.10843", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/606277d73b193037\n", "children": []}, {"h": "Fixed stubConfig problems", "gnx": "ekr.20090717084250.10844", "b": "", "children": []}, {"h": "Fixed undo bug", "gnx": "ekr.20090717084250.10845", "b": "onTextChanged in the qt gui was calling setUndoTypingParams, in many case\nredundantly and with bad params.\n\nIt remains to be seen whether onTextChanged is ever needed. If it is, it may be\ndifficult to set the old selection properly.\n", "children": []}, {"h": "Fixed vim bindings (dd) bug", "gnx": "ekr.20090717084250.10846", "b": "http://bugs.launchpad.net/leo-editor/+bug/353925\n\nThe \"kill-region\" function did nothing when using the qt gui.\n\nThe fix was to replace tag_ranges with w.getSelectionRange, etc.\nThis was the only call to tag_ranges in the core.\n", "children": []}, {"h": "Investigated bug: File->Export->write failed due to incorrect path", "gnx": "ekr.20090717084250.10847", "b": "http://bugs.launchpad.net/leo-editor/+bug/377907\n\nI'm going to mark this invalid, although the behavior is way too confusing.\n\nI added the following to the plugin's docstring:\n\nConfiguration\n~~~~~~~~~~~~~\n\nAt present, the file leo/plugins/leo_to_html.ini contains configuration settings.\nIn particular, the default export path, \"c:\\\" must be changed for *nix systems.\n", "children": []}, {"h": "Investigated speed of external unit tests", "gnx": "ekr.20090717084250.10848", "b": "The problem is imports in the Commands ctor. When executed the first time from\nthe bridge the imports take about 3/4 sec. on my machine. There is nothing that\ncan or should be done. Ctrl-5 is still hugely faster than opening unitTest.leo!\n", "children": []}, {"h": "Made @url nodes work with qt gui", "gnx": "ekr.20090717084250.10849", "b": "", "children": []}, {"h": "Mark @<file> nodes dirty when @path nodes change", "gnx": "ekr.20090717084250.10850", "b": "", "children": []}, {"h": "Removed duplicate messages when opening non-existent .leo file", "gnx": "ekr.20090717084250.10851", "b": "", "children": []}, {"h": "Reversed messages about redefined keys", "gnx": "ekr.20090717084250.10852", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a04dcefbb672078f\n", "children": []}, {"h": "Scroll commands now affect only scrollbars", "gnx": "ekr.20090717084250.10853", "b": "", "children": []}, {"h": "Bugs fixed in 4.6 b1", "gnx": "ekr.20090717084250.10854", "b": "", "children": ["ekr.20090717084250.10855", "ekr.20090717084250.10856", "ekr.20090717084250.10857", "ekr.20090717084250.10858", "ekr.20090717084250.10859", "ekr.20090717084250.10860", "ekr.20090717084250.10861", "ekr.20090717084250.10862", "ekr.20090717084250.10863", "ekr.20090717084250.10864", "ekr.20090717084250.10865", "ekr.20090717084250.10866"]}, {"h": "Fixed goto-global-line crasher", "gnx": "ekr.20090717084250.10855", "b": "", "children": []}, {"h": "Fixed bug that prevented Leo from opening files on the XP desktop", "gnx": "ekr.20090717084250.10856", "b": "", "children": []}, {"h": "Save/restore tnodeList in atFile.write", "gnx": "ekr.20090717084250.10857", "b": "The code should save/restore, just as in the clean_file function (from scripts.leo)\n", "children": []}, {"h": "Paste outline problem", "gnx": "ekr.20090717084250.10858", "b": "The problem was missing calls to initAfterLoad in c.new.\n", "children": []}, {"h": "Made sure $Home works for @nosent", "gnx": "ekr.20090717084250.10859", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f27e3514310a5c90\n", "children": []}, {"h": "Fixed atFile unicode bug", "gnx": "ekr.20090717084250.10860", "b": "", "children": []}, {"h": "Fixed Mark Edgington's @shadow bug", "gnx": "ekr.20090717084250.10861", "b": "", "children": []}, {"h": "Fixed whitespace problems with @auto/@shadow", "gnx": "ekr.20090717084250.10862", "b": "Pulled trunk, got r1599\n\npython launchLeo.py leo/plugins/leoPlugins.leo\n\ngo to\n\nPlugins-->Graph world-->@shadow backlink.py-->backlink declarations\n\nAll I did was add the full stop at the end of the docstring, but see\nthe diff:\n\n=== modified file 'leo/plugins/backlink.py'\n--- leo/plugins/backlink.py     2009-02-19 18:16:01 +0000\n+++ leo/plugins/backlink.py     2009-02-25 22:14:46 +0000\n@@ -1,4 +1,4 @@\n-'''Backlink - allow arbitrary links between nodes\n+'''Backlink - allow arbitrary links between nodes.\n '''\n\n # Notes\n@@ -296,7 +296,7 @@\n                break\n        else:\n            self.showMessage(\"Error: no such link\")\n-\n+\n        gcc = getattr(self.c, 'graphcanvasController')\n        if gcc:\n            gcc.update()\n", "children": []}, {"h": "Fixed nested @path problem", "gnx": "ekr.20090717084250.10863", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/7d8325d055cbef30\n", "children": []}, {"h": "Fixed encoding problems with rst3 plugin", "gnx": "ekr.20090717084250.10864", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/5f5219fedd977ec2\n", "children": []}, {"h": "Fixed new rst3 crash", "gnx": "ekr.20090717084250.10865", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/414137b93c7e4b90\n\nCalls g.makeAllNonExistentDirectories instead of os.mkdir.\n", "children": []}, {"h": "Fixed two c syntax-coloring bugs", "gnx": "ekr.20090717084250.10866", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/707a910f975f3715\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/74c6ab4809bde980\n\nThere were two separate bugs:\n\n1. The eol_span and eol_span_regex now honor the mode's escape character.\n\n2. colorRangeWithTag now colors delegates with the default tag color.\n\nNo changes were made in modes/c.py or modes/c.xml.\n", "children": []}, {"h": "New features", "gnx": "ekr.20090717084250.10867", "b": "", "children": ["ekr.20090717084250.10868", "ekr.20090717084250.10904", "ekr.20090717084250.10910"]}, {"h": "New features in 4.6 b1", "gnx": "ekr.20090717084250.10868", "b": "", "children": ["ekr.20090717084250.10869", "ekr.20090717084250.10873", "ekr.20090717084250.10882", "ekr.20090717084250.10886", "ekr.20090717084250.10892", "ekr.20090717084250.10895", "ekr.20090717084250.10900"]}, {"h": "Improved file handling", "gnx": "ekr.20090717084250.10869", "b": "", "children": ["ekr.20090717084250.10870", "ekr.20090717084250.10871", "ekr.20090717084250.10872"]}, {"h": "Open a default .leo file if no other is specified", "gnx": "ekr.20090717084250.10870", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d6449236bc140713#\n\nAdded support for @string default_leo_file = ~/.leo/workbook.leo\n", "children": []}, {"h": "Added escapes for underindented lines", "gnx": "ekr.20090717084250.10871", "b": "@string underindent-escape-string = \\-\n", "children": []}, {"h": "Warn when writing an externally changed file", "gnx": "ekr.20090717084250.10872", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c80fd8375534afdf\n", "children": []}, {"h": "New code features", "gnx": "ekr.20090717084250.10873", "b": "", "children": ["ekr.20090717084250.10874", "ekr.20090717084250.10875", "ekr.20090717084250.10876", "ekr.20090717084250.10877", "ekr.20090717084250.10878", "ekr.20090717084250.10879", "ekr.20090717084250.10880", "ekr.20090717084250.10881"]}, {"h": "Added autoCompleter.getExternalCompletions", "gnx": "ekr.20090717084250.10874", "b": "@nocolor\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/4ad91984a6d0acac\n\n> As I said, all I need would be is for leo to call callback/hook with\n> signature like\n> def complete(line-up-to-cursor, current_node) => list of strings\n\nThe actual signature is:\n\ntheObject,completionList = getExternalCompletions (self,s,p=None,language='python')\n\np is used only to get the language, or you can set the language by hand.\n\n@color\n", "children": []}, {"h": "Added g.posList", "gnx": "ekr.20090717084250.10875", "b": "", "children": []}, {"h": "Better plugin info", "gnx": "ekr.20090717084250.10876", "b": "c.config.doEnabledPlugins sets g.app.config.enabledPluginsFileName\n", "children": []}, {"h": "Added properties to leoNodes.py", "gnx": "ekr.20090717084250.10877", "b": "p.b, p.h and p.gnx\nt.b, t.h, t.gnx and t.u\nv.b, v.h, v.gnx, and v.u\n", "children": []}, {"h": "Added script to leoSettings.leo to ensure all menu items are valid", "gnx": "ekr.20090717084250.10878", "b": "", "children": []}, {"h": "Added c.config.getSettingSource", "gnx": "ekr.20090717084250.10879", "b": "c.config.getSettingSource('show_full_tracebacks_in_scripts')\nreturns the name of the file which Leo used to determine the setting\n\n- D indicates default settings.\n- F indicates the file being loaded\n- L indicates leoSettings.leo\n- M indicates myLeoSettings.leo\n", "children": []}, {"h": "Predefined 'self' in @test/@suite nodes", "gnx": "ekr.20090717084250.10880", "b": "", "children": []}, {"h": "Added c.getNodePath and c.getNodeFileName", "gnx": "ekr.20090717084250.10881", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3b5f1232ecc6bba7\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20090717084250.10882", "b": "", "children": ["ekr.20090717084250.10883", "ekr.20090717084250.10884", "ekr.20090717084250.10885"]}, {"h": "Added -c option to specify config files", "gnx": "ekr.20090717084250.10883", "b": "@nocolor\n\nThe setting is called -c or --config.  The one-config-file arg no longer exists.\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/f3f95d93bcd93b94\n\nPersonally, I'd like to see another config file available via -c on\nthe command line:\n(a common idiom)\n\nleo myproject.leo -c /usr/lib/myproject/myLeoSettings.leo\n\nor better yet:\n\nleo myproject.leo -c /etc/leo/style01.leo\nleo myotherproject.leo -c /etc/leo/style02.leo\nleo anotherproject.leo -c /etc/leo/style23.leo\n\nEach file opens in an editor with the shortcuts, buttons, commands,\nplugins, appearance etc.  that has been tuned for that data management task.\n\nor best yet:\n\nleo myproject.leo -c /usr/lib/python2.5/site-packages/leo/config/style94.leo\n\n==================\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/b5a736089079acaf#\n\nPlease, I think each file has a distinct and required role.\n\n- config/leoSettings.leo = Edward's base, required for a sane starting point\n\n- home/.leo/myLeoSettings.leo = adjust Edwards suggestions to taste\n\n- cwd/myLeoSettings.leo = provide a customized working environment in\nthis folder\n\n- leo -c /usr/lib/leo-editor/src/config/zope3_ide.leo =\n  - open this file in a specialized environments, mine or community contributed\n  - ...\n\n- currentfile/@settings =\n  - I'm working on some customization ideas\n  - Here, try out this Leo file I sent you, check out all the spiffy\nmodifications \n\n@color\n", "children": []}, {"h": "Added support for --file=fileName command-line option", "gnx": "ekr.20090717084250.10884", "b": "Only .zip and .leo extensions are allowed at present.\n", "children": []}, {"h": "Added support for --gui option", "gnx": "ekr.20090717084250.10885", "b": "", "children": []}, {"h": "New commands", "gnx": "ekr.20090717084250.10886", "b": "", "children": ["ekr.20090717084250.10887", "ekr.20090717084250.10888", "ekr.20090717084250.10889", "ekr.20090717084250.10890", "ekr.20090717084250.10891"]}, {"h": "Added smart home (back-to-home) command", "gnx": "ekr.20090717084250.10887", "b": "", "children": []}, {"h": "The open command creates @edit nodes when opening non-.leo files", "gnx": "ekr.20090717084250.10888", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3417ff5e9c02c626\n\nThe open file dialog now shows all files by default.\nSelecting a non-.leo file will load that file into a new node in the present outline.\n\nThis plugs what may have been the biggest hole in Leo's history.\n", "children": []}, {"h": "added pdb minibuffer command", "gnx": "ekr.20090717084250.10889", "b": "This works, but stops Leo in the middle of the command-handling logic.\n\nHowever, it is possible to pick up the commander by stepping out into\nk.masterKeyHandler or k.masterCommandHandler. Using c, one can then get all\nother info.\n", "children": []}, {"h": "Added support for smart_tab setting", "gnx": "ekr.20090717084250.10890", "b": "- Tab = indent when there is a text selection\n- Shift-Tab unindents always\n", "children": []}, {"h": "Improved isearch commands", "gnx": "ekr.20090717084250.10891", "b": "Escape now ends isearch\n", "children": []}, {"h": "New and improved directives", "gnx": "ekr.20090717084250.10892", "b": "", "children": ["ekr.20090717084250.10893", "ekr.20090717084250.10894"]}, {"h": "Added @nocolor-node directive", "gnx": "ekr.20090717084250.10893", "b": "# Useful: we don't need a closing @color to enable coloring in descendants.\n", "children": []}, {"h": "Improved @path handling", "gnx": "ekr.20090717084250.10894", "b": "", "children": []}, {"h": "New settings", "gnx": "ekr.20090717084250.10895", "b": "", "children": ["ekr.20090717084250.10896", "ekr.20090717084250.10897", "ekr.20090717084250.10898", "ekr.20090717084250.10899"]}, {"h": "Added better default fonts for Leo on Linux", "gnx": "ekr.20090717084250.10896", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f1c7c5134b95c77e\n", "children": []}, {"h": "Added support for @int icon_bar_widgets_per_row setting", "gnx": "ekr.20090717084250.10897", "b": "", "children": []}, {"h": "Added support for meta keys", "gnx": "ekr.20090717084250.10898", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b6a39ed672a28c65?pli=1\n", "children": []}, {"h": "Use myLeoSettings when opening leoSettings.leo", "gnx": "ekr.20090717084250.10899", "b": "Changed config.get so that settings in leoSettings.leo are read *last*.\nThis means that myLeoSettings.leo will override leoSettings.leo,\neven when leoSettings.leo is the local file.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20090717084250.10900", "b": "", "children": ["ekr.20090717084250.10901", "ekr.20090717084250.10902", "ekr.20090717084250.10903"]}, {"h": "Improved nav_buttons plugin and corresponding nodeHistory class", "gnx": "ekr.20090717084250.10901", "b": "", "children": []}, {"h": "Created qtGui and tkGui plugins", "gnx": "ekr.20090717084250.10902", "b": "", "children": []}, {"h": "Created leoGuiPluginsRef.leo", "gnx": "ekr.20090717084250.10903", "b": "This contains all gui plugins.\n", "children": []}, {"h": "New features in 4.6 b2", "gnx": "ekr.20090717084250.10904", "b": "", "children": ["ekr.20090717084250.10905", "ekr.20090717084250.10906", "ekr.20090717084250.10907", "ekr.20090717084250.10908", "ekr.20090717084250.10909"]}, {"h": "Allow Leo to open any file", "gnx": "ekr.20090717084250.10905", "b": "Leo can now open, for example, any .py file.\nIt will be put in an @edit node in an otherwise-empty outline.\n\nThis allows Leo to be associated with the edit action of .py files.\nSomething like this::\n\nC:\\Python26\\python.exe \"c:\\leo.repo\\trunk\\launchLeo.py\" --gui=qt %1 %2\n", "children": []}, {"h": "Improved unit testing", "gnx": "ekr.20090717084250.10906", "b": "- leoDynamicTest.py now supports a --path argument giving the .leo file.\n  This is so useful!\n\n- leoDynamicTest.py now honors the --silent argument.\n\n- leoTest.runUnitTestLeoFile runs all unit tests in a given .leo file\n  in a separate process.\n\n- leoTest.runTestsExternally calls runUnitTestLeoFile after creating\n  dynamicUnitTest.leo.\n\n- When reporting that no unit tests were found, all unit tests commands tell\n  whether the entire outline or just the selected outline was searched.\n  This fixes sometimes-misleading error messages.\n\n- test.leo contains a 'run-test.leo-tests' button.\n\n- leoPy.leo contains a 'run-all-core-tests' button.\n", "children": []}, {"h": "Leo tests syntax of .py files when saving them", "gnx": "ekr.20090717084250.10907", "b": "", "children": []}, {"h": "Made qt gui the default", "gnx": "ekr.20090717084250.10908", "b": "", "children": []}, {"h": "Support @auto-rst", "gnx": "ekr.20090717084250.10909", "b": "", "children": []}, {"h": "New features in 4.6 final", "gnx": "ekr.20090717084250.10910", "b": "Leo now warns on dangerous writes to @thin and @file nodes.\n", "children": []}, {"h": "4.6.1 final", "gnx": "ekr.20090718092032.10405", "b": "Leo 4.6.1 final                             July 30, 2009\n\nLeo 4.6.1 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.6.1 fixes several minor bugs in Leo 4.6.\n\n\nThe highlights of Leo 4.6\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes allow easy editing of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090718092032.10406", "ekr.20090718092032.10464"]}, {"h": "Bug fixes", "gnx": "ekr.20090718092032.10406", "b": "", "children": ["ekr.20090718092032.10407", "ekr.20090718092032.10451"]}, {"h": "Bugs fixed in 4.6 b2", "gnx": "ekr.20090718092032.10407", "b": "", "children": ["ekr.20090718092032.10408", "ekr.20090718092032.10409", "ekr.20090718092032.10410", "ekr.20090718092032.10411", "ekr.20090718092032.10412", "ekr.20090718092032.10413", "ekr.20090718092032.10414", "ekr.20090718092032.10415", "ekr.20090718092032.10416", "ekr.20090718092032.10417", "ekr.20090718092032.10418", "ekr.20090718092032.10419", "ekr.20090718092032.10420", "ekr.20090718092032.10421", "ekr.20090718092032.10422", "ekr.20090718092032.10423", "ekr.20090718092032.10424", "ekr.20090718092032.10425", "ekr.20090718092032.10426", "ekr.20090718092032.10427", "ekr.20090718092032.10428", "ekr.20090718092032.10429", "ekr.20090718092032.10430", "ekr.20090718092032.10431", "ekr.20090718092032.10432", "ekr.20090718092032.10433", "ekr.20090718092032.10434", "ekr.20090718092032.10435", "ekr.20090718092032.10436", "ekr.20090718092032.10437", "ekr.20090718092032.10438", "ekr.20090718092032.10439", "ekr.20090718092032.10440", "ekr.20090718092032.10441", "ekr.20090718092032.10442", "ekr.20090718092032.10443", "ekr.20090718092032.10444", "ekr.20090718092032.10445", "ekr.20090718092032.10446", "ekr.20090718092032.10447", "ekr.20090718092032.10448", "ekr.20090718092032.10449", "ekr.20090718092032.10450"]}, {"h": "Added patch for startup logic", "gnx": "ekr.20090718092032.10408", "b": "A patch at the start of loadOnePlugin prevents leo from crashing and allows the\ngui prompt for a leoID to come up.\n", "children": []}, {"h": "Allocate gnx's when nodes are created", "gnx": "ekr.20090718092032.10409", "b": "This is reasonable now that old-style file indices are rare.\n", "children": []}, {"h": "Allow block comments in private shadow files", "gnx": "ekr.20090718092032.10410", "b": "Html files are a good test case.\n", "children": []}, {"h": "Compute delims from private shadow file as needed", "gnx": "ekr.20090718092032.10411", "b": "", "children": []}, {"h": "Don't copy @edit trees to outline", "gnx": "ekr.20090718092032.10412", "b": "http://bugs.launchpad.net/leo-editor/+bug/376634\n\nThe fix was to putVnodes.\n", "children": []}, {"h": "Don't expand ancestors of @chapter node when selecting chapter", "gnx": "ekr.20090718092032.10413", "b": "", "children": []}, {"h": "Entries in recent files menu now have absolute paths", "gnx": "ekr.20090718092032.10414", "b": "http://bugs.launchpad.net/leo-editor/+bug/383204\n", "children": []}, {"h": "Fixed (worked around) tk chapters bug", "gnx": "ekr.20090718092032.10415", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/981c27d5c24c90f8\n", "children": []}, {"h": "Fixed @edit bug", "gnx": "ekr.20090718092032.10416", "b": "The generated @nocolor line now ends with a newline.\n", "children": []}, {"h": "Fixed @shadow crasher", "gnx": "ekr.20090718092032.10417", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/6cab5e676d4d75a0\n", "children": []}, {"h": "Fixed @thin bug", "gnx": "ekr.20090718092032.10418", "b": "- Removed forceGnxOnPosition from leoImport.py and leoAtFile.py.\n\n- readStartNode now always uses root.v for the first node\n  instead of calling createThinChild4\n", "children": []}, {"h": "Fixed back-to-home so it works as expected", "gnx": "ekr.20090718092032.10419", "b": "https://bugs.launchpad.net/leo-editor/+bug/367462\n\nThe expected/customary behavior (one you get used to in almost every editor) is:\n\nEnd: always move to end of line\nHome: Move to first visible character on the line. When pressing home again, move to column zero. If Home is pressed one more time, move to first visible character again.\n\nThis is also the way emacs behaves, though ctrl+a always moves to column zero.\n", "children": []}, {"h": "Fixed bad @verbatim bug", "gnx": "ekr.20090718092032.10420", "b": "The @verbatim was being inserted into the outline.\n", "children": []}, {"h": "Fixed binding problem with notebook", "gnx": "ekr.20090718092032.10421", "b": "", "children": []}, {"h": "Fixed bug: sorting could revert headline changes", "gnx": "ekr.20090718092032.10422", "b": "", "children": []}, {"h": "Fixed crash when reading .zip files", "gnx": "ekr.20090718092032.10423", "b": "The problem arose when reading a zipped file:\n\n File \"C:\\Programme\\Leo-4-6-b1\\leo\\core\\leoFileCommands.py\", line\n1265, in parse_leo_file\n   s = theFile.read()\nTypeError: read() takes at least 2 arguments (1 given)\nsaved: [zipped] Dive-into-Python-3.leo\n", "children": []}, {"h": "Fixed crasher when creating .leoID.txt", "gnx": "ekr.20090718092032.10424", "b": "exception loading plugin\nTraceback (most recent call last):\n\n  File \"C:\\leo.repo\\trunk\\leo\\core\\leoPlugins.py\", line 429, in loadOnePlugin\n    loadedModulesFilesDict[moduleName] = g.app.config.enabledPluginsFileName\n\nAttributeError: StubConfig instance has no attribute 'enabledPluginsFileName'\n\nleoID='ekr'\n.leoID.txt created in C:\\Documents and Settings\\HP_Administrator\\My Documents\\Edward\\.leo\nload \n", "children": []}, {"h": "Fixed dabbrev-expands bug", "gnx": "ekr.20090718092032.10425", "b": "http://bugs.launchpad.net/leo-editor/+bug/362048\n\nI have 'dabbrev-expands' bound to the F4 key. When I press F4 after\nthe word \"freq\" in a body pane containing the word \"frequency\" then\nLeo 4.5.1 shows a hour-glass for a while before giving an empty\ndabbrev-expand: prompt in the minibuffer.\n\nIf I back up one character, putting point between the e and q and then\ntype F4, I get the expected behavior: the word \"frequency\" is inserted\nimmediately.\n\nWhat I did:\n\n- Removed \"not ready messages\".\n- Made the code undoable.\n- Added wimpy unit test.\n", "children": []}, {"h": "Fixed elisp importer problem", "gnx": "ekr.20090718092032.10426", "b": "", "children": []}, {"h": "Fixed F10/11/12 key bug", "gnx": "ekr.20090718092032.10427", "b": "Added call to isFKey in k.handleUnboundKeys.\n", "children": []}, {"h": "Fixed file bug re unicode characters", "gnx": "ekr.20090718092032.10428", "b": "http://bugs.launchpad.net/leo-editor/+bug/376189\n", "children": []}, {"h": "Fixed hoist problems", "gnx": "ekr.20090718092032.10429", "b": "http://bugs.launchpad.net/leo-editor/+bug/382221\n", "children": []}, {"h": "Fixed lost anchor bug page up/down", "gnx": "ekr.20090718092032.10430", "b": "http://bugs.launchpad.net/leo-editor/+bug/363403\n\nWith a long body text you might place the cursor on a line, hold down Shift, and\nPgDn several pages to select a large block of text. The last PgDn may overshoot\nthe range you want selected, so you should be able to use UpArrow to bring the\nbottom of the range back up to where you want it. However, on the first UpArrow\nthe selection is lost and restarted from the current cursor position. I.e. you\nend up with just one line selected, instead of trimming one line of the\nselection of several pages, as intended.\n", "children": []}, {"h": "Fixed minor @auto bug", "gnx": "ekr.20090718092032.10431", "b": "http://bugs.launchpad.net/leo-editor/+bug/306671\n\nIf a Leo editor window is opened, and the \"NewHeadline\" node is renamed to\n\"@auto <path to some valid file>\", and then the \"File->Read/Write->Read @auto\nnodes\" menu option is selected, the renamed node reverts to its previous name\n(\"NewHeadline\"), and nothing is loaded into the node.\n", "children": []}, {"h": "Fixed multiple-editor focus problems", "gnx": "ekr.20090718092032.10432", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/21bddd50f3400bdc?hl=en\n", "children": []}, {"h": "Fixed new command", "gnx": "ekr.20090718092032.10433", "b": "The outline wasn't being redrawn properly.\n", "children": []}, {"h": "Fixed problems with change-all command", "gnx": "ekr.20090718092032.10434", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/430287018f9d773d\n\nThe fix to minibufferFind.changeAll fixes a bug that is several years old.\nThe fix to findNextMatch fixes a bug that is likely much older than that.\n", "children": []}, {"h": "Fixed read clone bug", "gnx": "ekr.20090718092032.10435", "b": "", "children": []}, {"h": "Fixed rst import bug", "gnx": "ekr.20090718092032.10436", "b": "", "children": []}, {"h": "Fixed rst3 problem", "gnx": "ekr.20090718092032.10437", "b": "http://mail.google.com/mail/#inbox/11ef0076a3f4d866\n", "children": []}, {"h": "Fixed seg-fault bug", "gnx": "ekr.20090718092032.10438", "b": "The crash happened inside the call to::\n\n    c.widgetWantsFocusNow(event.widget)\n\nin callAltXFunction. Actually, the crash happened later, in c.outerUpdate.\n\nA better fix would be to use wrappers for all edit widgets, and recalculate the\nedit widget any it needs to be used.\n", "children": []}, {"h": "Fixed Shift-Arrow in headlines", "gnx": "ekr.20090718092032.10439", "b": "", "children": []}, {"h": "Fixed startup problem", "gnx": "ekr.20090718092032.10440", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/606277d73b193037\n", "children": []}, {"h": "Fixed stubConfig problems", "gnx": "ekr.20090718092032.10441", "b": "", "children": []}, {"h": "Fixed undo bug", "gnx": "ekr.20090718092032.10442", "b": "onTextChanged in the qt gui was calling setUndoTypingParams, in many case\nredundantly and with bad params.\n\nIt remains to be seen whether onTextChanged is ever needed. If it is, it may be\ndifficult to set the old selection properly.\n", "children": []}, {"h": "Fixed vim bindings (dd) bug", "gnx": "ekr.20090718092032.10443", "b": "http://bugs.launchpad.net/leo-editor/+bug/353925\n\nThe \"kill-region\" function did nothing when using the qt gui.\n\nThe fix was to replace tag_ranges with w.getSelectionRange, etc.\nThis was the only call to tag_ranges in the core.\n", "children": []}, {"h": "Investigated bug: File->Export->write failed due to incorrect path", "gnx": "ekr.20090718092032.10444", "b": "http://bugs.launchpad.net/leo-editor/+bug/377907\n\nI'm going to mark this invalid, although the behavior is way too confusing.\n\nI added the following to the plugin's docstring:\n\nConfiguration\n~~~~~~~~~~~~~\n\nAt present, the file leo/plugins/leo_to_html.ini contains configuration settings.\nIn particular, the default export path, \"c:\\\" must be changed for *nix systems.\n", "children": []}, {"h": "Investigated speed of external unit tests", "gnx": "ekr.20090718092032.10445", "b": "The problem is imports in the Commands ctor. When executed the first time from\nthe bridge the imports take about 3/4 sec. on my machine. There is nothing that\ncan or should be done. Ctrl-5 is still hugely faster than opening unitTest.leo!\n", "children": []}, {"h": "Made @url nodes work with qt gui", "gnx": "ekr.20090718092032.10446", "b": "", "children": []}, {"h": "Mark @<file> nodes dirty when @path nodes change", "gnx": "ekr.20090718092032.10447", "b": "", "children": []}, {"h": "Removed duplicate messages when opening non-existent .leo file", "gnx": "ekr.20090718092032.10448", "b": "", "children": []}, {"h": "Reversed messages about redefined keys", "gnx": "ekr.20090718092032.10449", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a04dcefbb672078f\n", "children": []}, {"h": "Scroll commands now affect only scrollbars", "gnx": "ekr.20090718092032.10450", "b": "", "children": []}, {"h": "Bugs fixed in 4.6 b1", "gnx": "ekr.20090718092032.10451", "b": "", "children": ["ekr.20090718092032.10452", "ekr.20090718092032.10453", "ekr.20090718092032.10454", "ekr.20090718092032.10455", "ekr.20090718092032.10456", "ekr.20090718092032.10457", "ekr.20090718092032.10458", "ekr.20090718092032.10459", "ekr.20090718092032.10460", "ekr.20090718092032.10461", "ekr.20090718092032.10462", "ekr.20090718092032.10463"]}, {"h": "Fixed goto-global-line crasher", "gnx": "ekr.20090718092032.10452", "b": "", "children": []}, {"h": "Fixed bug that prevented Leo from opening files on the XP desktop", "gnx": "ekr.20090718092032.10453", "b": "", "children": []}, {"h": "Save/restore tnodeList in atFile.write", "gnx": "ekr.20090718092032.10454", "b": "The code should save/restore, just as in the clean_file function (from scripts.leo)\n", "children": []}, {"h": "Paste outline problem", "gnx": "ekr.20090718092032.10455", "b": "The problem was missing calls to initAfterLoad in c.new.\n", "children": []}, {"h": "Made sure $Home works for @nosent", "gnx": "ekr.20090718092032.10456", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f27e3514310a5c90\n", "children": []}, {"h": "Fixed atFile unicode bug", "gnx": "ekr.20090718092032.10457", "b": "", "children": []}, {"h": "Fixed Mark Edgington's @shadow bug", "gnx": "ekr.20090718092032.10458", "b": "", "children": []}, {"h": "Fixed whitespace problems with @auto/@shadow", "gnx": "ekr.20090718092032.10459", "b": "Pulled trunk, got r1599\n\npython launchLeo.py leo/plugins/leoPlugins.leo\n\ngo to\n\nPlugins-->Graph world-->@shadow backlink.py-->backlink declarations\n\nAll I did was add the full stop at the end of the docstring, but see\nthe diff:\n\n=== modified file 'leo/plugins/backlink.py'\n--- leo/plugins/backlink.py     2009-02-19 18:16:01 +0000\n+++ leo/plugins/backlink.py     2009-02-25 22:14:46 +0000\n@@ -1,4 +1,4 @@\n-'''Backlink - allow arbitrary links between nodes\n+'''Backlink - allow arbitrary links between nodes.\n '''\n\n # Notes\n@@ -296,7 +296,7 @@\n                break\n        else:\n            self.showMessage(\"Error: no such link\")\n-\n+\n        gcc = getattr(self.c, 'graphcanvasController')\n        if gcc:\n            gcc.update()\n", "children": []}, {"h": "Fixed nested @path problem", "gnx": "ekr.20090718092032.10460", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/7d8325d055cbef30\n", "children": []}, {"h": "Fixed encoding problems with rst3 plugin", "gnx": "ekr.20090718092032.10461", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/5f5219fedd977ec2\n", "children": []}, {"h": "Fixed new rst3 crash", "gnx": "ekr.20090718092032.10462", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/414137b93c7e4b90\n\nCalls g.makeAllNonExistentDirectories instead of os.mkdir.\n", "children": []}, {"h": "Fixed two c syntax-coloring bugs", "gnx": "ekr.20090718092032.10463", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/707a910f975f3715\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/74c6ab4809bde980\n\nThere were two separate bugs:\n\n1. The eol_span and eol_span_regex now honor the mode's escape character.\n\n2. colorRangeWithTag now colors delegates with the default tag color.\n\nNo changes were made in modes/c.py or modes/c.xml.\n", "children": []}, {"h": "New features", "gnx": "ekr.20090718092032.10464", "b": "", "children": ["ekr.20090718092032.10465", "ekr.20090718092032.10501", "ekr.20090718092032.10507"]}, {"h": "New features in 4.6 b1", "gnx": "ekr.20090718092032.10465", "b": "", "children": ["ekr.20090718092032.10466", "ekr.20090718092032.10470", "ekr.20090718092032.10479", "ekr.20090718092032.10483", "ekr.20090718092032.10489", "ekr.20090718092032.10492", "ekr.20090718092032.10497"]}, {"h": "Improved file handling", "gnx": "ekr.20090718092032.10466", "b": "", "children": ["ekr.20090718092032.10467", "ekr.20090718092032.10468", "ekr.20090718092032.10469"]}, {"h": "Open a default .leo file if no other is specified", "gnx": "ekr.20090718092032.10467", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d6449236bc140713#\n\nAdded support for @string default_leo_file = ~/.leo/workbook.leo\n", "children": []}, {"h": "Added escapes for underindented lines", "gnx": "ekr.20090718092032.10468", "b": "@string underindent-escape-string = \\-\n", "children": []}, {"h": "Warn when writing an externally changed file", "gnx": "ekr.20090718092032.10469", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c80fd8375534afdf\n", "children": []}, {"h": "New code features", "gnx": "ekr.20090718092032.10470", "b": "", "children": ["ekr.20090718092032.10471", "ekr.20090718092032.10472", "ekr.20090718092032.10473", "ekr.20090718092032.10474", "ekr.20090718092032.10475", "ekr.20090718092032.10476", "ekr.20090718092032.10477", "ekr.20090718092032.10478"]}, {"h": "Added autoCompleter.getExternalCompletions", "gnx": "ekr.20090718092032.10471", "b": "@nocolor\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/4ad91984a6d0acac\n\n> As I said, all I need would be is for leo to call callback/hook with\n> signature like\n> def complete(line-up-to-cursor, current_node) => list of strings\n\nThe actual signature is:\n\ntheObject,completionList = getExternalCompletions (self,s,p=None,language='python')\n\np is used only to get the language, or you can set the language by hand.\n\n@color\n", "children": []}, {"h": "Added g.posList", "gnx": "ekr.20090718092032.10472", "b": "", "children": []}, {"h": "Better plugin info", "gnx": "ekr.20090718092032.10473", "b": "c.config.doEnabledPlugins sets g.app.config.enabledPluginsFileName\n", "children": []}, {"h": "Added properties to leoNodes.py", "gnx": "ekr.20090718092032.10474", "b": "p.b, p.h and p.gnx\nt.b, t.h, t.gnx and t.u\nv.b, v.h, v.gnx, and v.u\n", "children": []}, {"h": "Added script to leoSettings.leo to ensure all menu items are valid", "gnx": "ekr.20090718092032.10475", "b": "", "children": []}, {"h": "Added c.config.getSettingSource", "gnx": "ekr.20090718092032.10476", "b": "c.config.getSettingSource('show_full_tracebacks_in_scripts')\nreturns the name of the file which Leo used to determine the setting\n\n- D indicates default settings.\n- F indicates the file being loaded\n- L indicates leoSettings.leo\n- M indicates myLeoSettings.leo\n", "children": []}, {"h": "Predefined 'self' in @test/@suite nodes", "gnx": "ekr.20090718092032.10477", "b": "", "children": []}, {"h": "Added c.getNodePath and c.getNodeFileName", "gnx": "ekr.20090718092032.10478", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3b5f1232ecc6bba7\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20090718092032.10479", "b": "", "children": ["ekr.20090718092032.10480", "ekr.20090718092032.10481", "ekr.20090718092032.10482"]}, {"h": "Added -c option to specify config files", "gnx": "ekr.20090718092032.10480", "b": "@nocolor\n\nThe setting is called -c or --config.  The one-config-file arg no longer exists.\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/f3f95d93bcd93b94\n\nPersonally, I'd like to see another config file available via -c on\nthe command line:\n(a common idiom)\n\nleo myproject.leo -c /usr/lib/myproject/myLeoSettings.leo\n\nor better yet:\n\nleo myproject.leo -c /etc/leo/style01.leo\nleo myotherproject.leo -c /etc/leo/style02.leo\nleo anotherproject.leo -c /etc/leo/style23.leo\n\nEach file opens in an editor with the shortcuts, buttons, commands,\nplugins, appearance etc.  that has been tuned for that data management task.\n\nor best yet:\n\nleo myproject.leo -c /usr/lib/python2.5/site-packages/leo/config/style94.leo\n\n==================\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/b5a736089079acaf#\n\nPlease, I think each file has a distinct and required role.\n\n- config/leoSettings.leo = Edward's base, required for a sane starting point\n\n- home/.leo/myLeoSettings.leo = adjust Edwards suggestions to taste\n\n- cwd/myLeoSettings.leo = provide a customized working environment in\nthis folder\n\n- leo -c /usr/lib/leo-editor/src/config/zope3_ide.leo =\n  - open this file in a specialized environments, mine or community contributed\n  - ...\n\n- currentfile/@settings =\n  - I'm working on some customization ideas\n  - Here, try out this Leo file I sent you, check out all the spiffy\nmodifications \n\n@color\n", "children": []}, {"h": "Added support for --file=fileName command-line option", "gnx": "ekr.20090718092032.10481", "b": "Only .zip and .leo extensions are allowed at present.\n", "children": []}, {"h": "Added support for --gui option", "gnx": "ekr.20090718092032.10482", "b": "", "children": []}, {"h": "New commands", "gnx": "ekr.20090718092032.10483", "b": "", "children": ["ekr.20090718092032.10484", "ekr.20090718092032.10485", "ekr.20090718092032.10486", "ekr.20090718092032.10487", "ekr.20090718092032.10488"]}, {"h": "Added smart home (back-to-home) command", "gnx": "ekr.20090718092032.10484", "b": "", "children": []}, {"h": "The open command creates @edit nodes when opening non-.leo files", "gnx": "ekr.20090718092032.10485", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3417ff5e9c02c626\n\nThe open file dialog now shows all files by default.\nSelecting a non-.leo file will load that file into a new node in the present outline.\n\nThis plugs what may have been the biggest hole in Leo's history.\n", "children": []}, {"h": "added pdb minibuffer command", "gnx": "ekr.20090718092032.10486", "b": "This works, but stops Leo in the middle of the command-handling logic.\n\nHowever, it is possible to pick up the commander by stepping out into\nk.masterKeyHandler or k.masterCommandHandler. Using c, one can then get all\nother info.\n", "children": []}, {"h": "Added support for smart_tab setting", "gnx": "ekr.20090718092032.10487", "b": "- Tab = indent when there is a text selection\n- Shift-Tab unindents always\n", "children": []}, {"h": "Improved isearch commands", "gnx": "ekr.20090718092032.10488", "b": "Escape now ends isearch\n", "children": []}, {"h": "New and improved directives", "gnx": "ekr.20090718092032.10489", "b": "", "children": ["ekr.20090718092032.10490", "ekr.20090718092032.10491"]}, {"h": "Added @nocolor-node directive", "gnx": "ekr.20090718092032.10490", "b": "# Useful: we don't need a closing @color to enable coloring in descendants.\n", "children": []}, {"h": "Improved @path handling", "gnx": "ekr.20090718092032.10491", "b": "", "children": []}, {"h": "New settings", "gnx": "ekr.20090718092032.10492", "b": "", "children": ["ekr.20090718092032.10493", "ekr.20090718092032.10494", "ekr.20090718092032.10495", "ekr.20090718092032.10496"]}, {"h": "Added better default fonts for Leo on Linux", "gnx": "ekr.20090718092032.10493", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f1c7c5134b95c77e\n", "children": []}, {"h": "Added support for @int icon_bar_widgets_per_row setting", "gnx": "ekr.20090718092032.10494", "b": "", "children": []}, {"h": "Added support for meta keys", "gnx": "ekr.20090718092032.10495", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b6a39ed672a28c65?pli=1\n", "children": []}, {"h": "Use myLeoSettings when opening leoSettings.leo", "gnx": "ekr.20090718092032.10496", "b": "Changed config.get so that settings in leoSettings.leo are read *last*.\nThis means that myLeoSettings.leo will override leoSettings.leo,\neven when leoSettings.leo is the local file.\n", "children": []}, {"h": "Plugins", "gnx": "ekr.20090718092032.10497", "b": "", "children": ["ekr.20090718092032.10498", "ekr.20090718092032.10499", "ekr.20090718092032.10500"]}, {"h": "Improved nav_buttons plugin and corresponding nodeHistory class", "gnx": "ekr.20090718092032.10498", "b": "", "children": []}, {"h": "Created qtGui and tkGui plugins", "gnx": "ekr.20090718092032.10499", "b": "", "children": []}, {"h": "Created leoGuiPluginsRef.leo", "gnx": "ekr.20090718092032.10500", "b": "This contains all gui plugins.\n", "children": []}, {"h": "New features in 4.6 b2", "gnx": "ekr.20090718092032.10501", "b": "", "children": ["ekr.20090718092032.10502", "ekr.20090718092032.10503", "ekr.20090718092032.10504", "ekr.20090718092032.10505", "ekr.20090718092032.10506"]}, {"h": "Allow Leo to open any file", "gnx": "ekr.20090718092032.10502", "b": "Leo can now open, for example, any .py file.\nIt will be put in an @edit node in an otherwise-empty outline.\n\nThis allows Leo to be associated with the edit action of .py files.\nSomething like this::\n\nC:\\Python26\\python.exe \"c:\\leo.repo\\trunk\\launchLeo.py\" --gui=qt %1 %2\n", "children": []}, {"h": "Improved unit testing", "gnx": "ekr.20090718092032.10503", "b": "- leoDynamicTest.py now supports a --path argument giving the .leo file.\n  This is so useful!\n\n- leoDynamicTest.py now honors the --silent argument.\n\n- leoTest.runUnitTestLeoFile runs all unit tests in a given .leo file\n  in a separate process.\n\n- leoTest.runTestsExternally calls runUnitTestLeoFile after creating\n  dynamicUnitTest.leo.\n\n- When reporting that no unit tests were found, all unit tests commands tell\n  whether the entire outline or just the selected outline was searched.\n  This fixes sometimes-misleading error messages.\n\n- test.leo contains a 'run-test.leo-tests' button.\n\n- leoPy.leo contains a 'run-all-core-tests' button.\n", "children": []}, {"h": "Leo tests syntax of .py files when saving them", "gnx": "ekr.20090718092032.10504", "b": "", "children": []}, {"h": "Made qt gui the default", "gnx": "ekr.20090718092032.10505", "b": "", "children": []}, {"h": "Support @auto-rst", "gnx": "ekr.20090718092032.10506", "b": "", "children": []}, {"h": "New features in 4.6 final", "gnx": "ekr.20090718092032.10507", "b": "Leo now warns on dangerous writes to @thin and @file nodes.\n", "children": []}, {"h": "4.6.2 final", "gnx": "ekr.20090802162204.5798", "b": "Leo 4.6.2 final                             August 3, 2009\n\nLeo 4.6.2 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.6.2 fixes several bugs reported since Leo 4.6 was released.\n\nThe highlights of Leo 4.6\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes allow easy editing of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090803084828.5800"]}, {"h": "Bugs fixed", "gnx": "ekr.20090803084828.5800", "b": "- AltGr properly handled as Alt+Ctrl.\n  Created a setting: @bool enable_alt_ctrl_bindings.\n  The default is False, needed for AltGr functionality on Windows.\n\n- Fixed unpickling problems in getDescendentUnknownAttributes\n\n- Plugins that fail to import Pmw no longer prevent Leo from launching.\n\n- Fixed bug 397433, tk chapter menu crash, on all platforms.\n", "children": []}, {"h": "4.6.3 final", "gnx": "ekr.20091006093902.6558", "b": "Leo 4.6.3 final                             September 4, 2009\n\nLeo 4.6.3 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.6.3 fixes a significant caching bug in Leo 4.6.2.\nLeo 4.6.3 also comes with an executable installer for Windows.\nLeo 3.6.3 adds several new plugins.\n\nThe highlights of Leo 4.6\n--------------------------\n\n- Cached external files *greatly* reduces the time to load .leo files.\n- Leo now features a modern Qt interface by default.\n  Leo's legacy Tk interface can also be used.\n- New --config, --file and --gui command-line options.\n- Leo tests syntax of .py files when saving them.\n- Leo can now open any kind of file into @edit nodes.\n- @auto-rst nodes allow easy editing of reStructuredText files.\n- Properties of commanders, positions and nodes simplify programming.\n- Improved Leo's unit testing framework.\n- Leo now requires Python 2.5 or later.\n- Dozens of small improvements and bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20091006093902.6559", "ekr.20091006093902.6560"]}, {"h": "Bugs fixed", "gnx": "ekr.20091006093902.6559", "b": "- Leo marks nodes dirty if the nodes changed during read.\n\n- Fixed a bug in g.adjustTripleString.\n", "children": []}, {"h": "New features", "gnx": "ekr.20091006093902.6560", "b": "- Added --gui=qttabs command-line option\n\n- Added new plugins: spydershell.py, qtframecommands.py, and mod_framesize.py.\n\n- Added \"show folder\" in rclick menu.\n", "children": []}, {"h": "4.7 One-node world, Leo-3k, @auto-rst, convert @file", "gnx": "ekr.20100118181428.8827", "b": "", "children": ["ekr.20090909083000.6547", "ekr.20100118181428.8813", "ekr.20100201192329.7018", "ekr.20100205152016.14053", "ekr.20100223063657.7262", "ekr.20100225102026.7139"]}, {"h": "4.7 beta 1", "gnx": "ekr.20090909083000.6547", "b": "Leo 4.7 beta 1                          September 9, 2009\n\nLeo 4.7 beta 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThis version of Leo is labeled a beta version because it contains some new,\nrelatively untested plugins.  However, Leo's core should be quite reliable.\n\nIn particular, Leo 4.7 beta 1 fixes a bug that caused Leo 4.6 releases to crash\nif .leoID.txt did not exist. Usually this file does exist, but Leo will prompt\nfor the contents of this file (a user id) the very first time somebody uses Leo.\nAlas, an unfortunate reversion of code caused Leo to crash. Not exactly the best\nintroduction to Leo!\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- A major simplification of internal data model: the so-called\n  one-node world. Note: this is **disabled** in the beta 1 release.\n- A new executable Windows installer, whose manifest is created from\n  the files that bzr actively manages.\n- Leo no longer adds directories to sys.path on startup.\n- New plugins.\n- The usual assortment of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20090909083000.6556", "ekr.20090909083000.6555", "ekr.20090909083000.6552", "ekr.20090909083000.6553"]}, {"h": "Added new Windows installer", "gnx": "ekr.20090909083000.6556", "b": "Unlike previous installers, the manifest is created from the\n@button make leo.nsi script in dist.leo.\n", "children": []}, {"h": "Added new plugins", "gnx": "ekr.20090909083000.6555", "b": "@nocolor-node\n\nNew command-line option\n    --gui=qttabs\n\nnew plugins:\n    spydershell,\n    qtframecommands\n    mod_framesize.\n\nImproved plugin:  \"show folder\" in rclick menu.\n\nImproved plugin: contextmenu.py\n\n    If you rclick on @thin / whatever item, you should see \"open\n    /home/ville/foo\" (or equivalent) menu entry. It open up the file manager on\n    that folder (using xdg-open on linux, os.startfile on windows). I have no\n    idea what to do with mac, now it runs xdg-open and probably fails.\n", "children": []}, {"h": "Added options to vim plugin", "gnx": "ekr.20090909083000.6552", "b": "The setting::\n\n    @string vim_trigger_event = icondclick2\n\nis the default.  It opens vim when the user double-clicks the icon box.\n\nAlternatives are::\n\n    @string vim_trigger_event = iconclick2\n    @string vim_trigger_event = select2\n\nThe former opens vim on single clicks in the icon bar.\nThe latter opens vim whenever a new node is selected in Leo.\n", "children": []}, {"h": "Leo no longer adds directories to sys.path", "gnx": "ekr.20090909083000.6553", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b868abd65fb57759\n\nLeo no longer adds directories to sys.path on startup.\n\n(Merged the clean-sys-path branch into the trunk.)_\n", "children": []}, {"h": "4.7 beta 2", "gnx": "ekr.20100118181428.8813", "b": "Leo 4.7 beta 1                January 28, 2009\n\nLeo 4.7 release beta 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.7 beta 1 fixes all known serious bugs in Leo.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- Leo now uses the simplest possible internal data model.\n  This is the so-called \"one-node\" world.\n- Leo supports Python 3.x.\n- Leo requires Python 2.6 or above.\n- Several important improvements in file handling.\n    - Leo converts @file nodes to @thin nodes automatically.\n    - Leo creates a 'Recovered Nodes' node to hold data that\n      otherwise might be lost due to clone conflicts.\n    - @auto-rst now works much more reliably reliably.\n    - Leo no longer @noref trees.  Such trees are not\n      reliable in cooperative environments.\n- A new Windows installer.\n- Many other features, including new command line options and new plugins.\n- Dozens of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20100118181428.7557", "ekr.20100118181428.8525"]}, {"h": "Bugs", "gnx": "ekr.20100118181428.7557", "b": "", "children": ["ekr.20100118181428.7559", "ekr.20100118181428.7570", "ekr.20100118181428.7571", "ekr.20100118181428.7614", "ekr.20100118181428.7712", "ekr.20100118181428.7715", "ekr.20100118181428.7830", "ekr.20100118181428.7831", "ekr.20100118181428.8070", "ekr.20100118181428.8077", "ekr.20100118181428.8090", "ekr.20100118181428.8109", "ekr.20100118181428.8236", "ekr.20100118181428.8239", "ekr.20100118181428.8240", "ekr.20100118181428.8242", "ekr.20100118181428.8248", "ekr.20100118181428.8252", "ekr.20100118181428.8257", "ekr.20100118181428.8262", "ekr.20100118181428.8275", "ekr.20100118181428.8278", "ekr.20100118181428.8281", "ekr.20100118181428.8294", "ekr.20100118181428.8297", "ekr.20100118181428.8298", "ekr.20100118181428.8299", "ekr.20100118181428.8302", "ekr.20100118181428.8306", "ekr.20100118181428.8307", "ekr.20100118181428.8334", "ekr.20100118181428.8358", "ekr.20100118181428.8362", "ekr.20100118181428.8363", "ekr.20100118181428.8365", "ekr.20100118181428.8413", "ekr.20100118181428.8447", "ekr.20100118181428.8449", "ekr.20100118181428.8473", "ekr.20100118181428.8481", "ekr.20100118181428.8485", "ekr.20100118181428.8486", "ekr.20100118181428.8497", "ekr.20100118181428.8502", "ekr.20100118181428.8514", "ekr.20100118181428.8517", "ekr.20100118181428.8518", "ekr.20100118181428.8522", "ekr.20100118181428.8523", "ekr.20100118181428.8524", "ekr.20100119145003.7319", "ekr.20100124164700.11919", "ekr.20100124164700.11920", "ekr.20100124164700.11921", "ekr.20100124164700.11922", "ekr.20100124164700.11923", "ekr.20100124164700.11924", "ekr.20100124164700.11925", "ekr.20100124164700.11926", "ekr.20100124164700.11927", "ekr.20100124164700.11928", "ekr.20100124164700.11938", "ekr.20100124164700.11944", "ekr.20100124164700.11946", "ekr.20100124164700.11951", "ekr.20100124164700.11965", "ekr.20100124164700.12027", "ekr.20100128094926.12524", "ekr.20100128094926.12739", "ekr.20100128094926.12756"]}, {"h": "Fixed calltips on leo3k", "gnx": "ekr.20100118181428.7559", "b": "They wiped out the newly-inserted selection range.\n", "children": []}, {"h": "Fixed headline scrolling", "gnx": "ekr.20100118181428.7570", "b": "My biggest annoyance is the invalid bug 409442, I have to use the tk\nGUI because of it.\n\nI've also complained about it in this thread:\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/07cdbb... \n\n----- Ville +1\nI feel your pain.\n\nPlease try this workaround (run with ctrl+b):\n\ntree = c.frame.tree.treeWidget\ntree.setColumnCount(2)\n\n-----\n> Isn't it possible to stick this tree.setColumnCount(2) into some\n> constructor in the leo qt GUI plugin so the outline pane would have\n> the horizontal scrollbar by default?\n\nYes, but it's not sure we want to have 2 columns in the tree widget -\nand it would create scrollbar on many occasions when it's not\nnecessary.\n\nSo this is not a simple fix for your problem, it has implications\nbeyond your problem. \n", "children": []}, {"h": "Fixed bug 498692: Undo renames headline", "gnx": "ekr.20100118181428.7571", "b": "", "children": []}, {"h": "Fixed bug 498688: Undo back to last saved content...", "gnx": "ekr.20100118181428.7614", "b": "Fixed bug Bug 498688: Undo back to last saved content still shows file as\nmodified (\"*\" in title)\n", "children": []}, {"h": "Fixed bug: no log when notebook does not exist", "gnx": "ekr.20100118181428.7712", "b": "", "children": []}, {"h": "Fixed bug 362950: during body text undo selection goes nuts...", "gnx": "ekr.20100118181428.7715", "b": "Bug 362950: during body text undo selection goes nuts and view moves\n", "children": []}, {"h": "Removed unsettling @auto warning", "gnx": "ekr.20100118181428.7830", "b": "", "children": []}, {"h": "Fixed at-auto-rst problems", "gnx": "ekr.20100118181428.7831", "b": "", "children": []}, {"h": "Fixed bug: at-nosent nodes were not being dirty when headline changes", "gnx": "ekr.20100118181428.8070", "b": "", "children": []}, {"h": "Allow hyphens in xml tags", "gnx": "ekr.20100118181428.8077", "b": "Fixes bug 497332: importing xml via @data import_xml_tags does not allow dashes in tag.\n\nFor characters valid in names see:\nwww.w3.org/TR/2008/REC-xml-20081126/#NT-Name\n", "children": []}, {"h": "Fixed Alt-u bug and refactored k.masterKeyHandler", "gnx": "ekr.20100118181428.8090", "b": "Bug 404993: alt+U (universal argument) \"freezes\" leo state\n\nPress alt+U displays \"Universal argument:\" in minibuffer, and there is no\nobvious way to get out of this state. It seems ctrl+G gets you out of it, but\nthat's not really obvious. ESC should do it.\n", "children": []}, {"h": "Fixed at-shadow error", "gnx": "ekr.20100118181428.8109", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/81f7bb5060ed8b01\n", "children": []}, {"h": "Fixed bug 408886: qttabs gui doesn't mark commanders dirty properly", "gnx": "ekr.20100118181428.8236", "b": "", "children": []}, {"h": "Fixed bug 476653: @nowrap isn't working for qt / @edit nodes", "gnx": "ekr.20100118181428.8239", "b": "", "children": []}, {"h": "Fixed bug 480422: string-rectangle kills syntax highlighting", "gnx": "ekr.20100118181428.8240", "b": "", "children": []}, {"h": "Fixed bug in g.adjustTripleString", "gnx": "ekr.20100118181428.8242", "b": "", "children": []}, {"h": "Fixed bug in writeNodeToString", "gnx": "ekr.20100118181428.8248", "b": "Leo now adds a leading period if needed.\n", "children": []}, {"h": "Fixed bug: @nosent should warn about orphan nodes", "gnx": "ekr.20100118181428.8252", "b": "", "children": []}, {"h": "Fixed bug: Sometimes 'redefining shortcut' message is backwards", "gnx": "ekr.20100118181428.8257", "b": "", "children": []}, {"h": "Fixed contract-or-go-right", "gnx": "ekr.20100118181428.8262", "b": "", "children": []}, {"h": "Fixed crasher when writing to a newly-deleted file", "gnx": "ekr.20100118181428.8275", "b": "", "children": []}, {"h": "Fixed double prompt in c.close()", "gnx": "ekr.20100118181428.8278", "b": "", "children": []}, {"h": "Fixed elisp parsing bug", "gnx": "ekr.20100118181428.8281", "b": "", "children": []}, {"h": "Fixed publish-argv-for-missing-stylesheets", "gnx": "ekr.20100118181428.8294", "b": "", "children": []}, {"h": "Fixed registerHandler bug", "gnx": "ekr.20100118181428.8297", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/8616f4e171e1a24b\n", "children": []}, {"h": "Fixed scrolling problem with multiple editors", "gnx": "ekr.20100118181428.8298", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/33e87adbff5d69d9\n", "children": []}, {"h": "Fixed startup reversion when .leoID.txt does not exist", "gnx": "ekr.20100118181428.8299", "b": "", "children": []}, {"h": "Handle Insert key properly", "gnx": "ekr.20100118181428.8302", "b": "This is now bound in the EKR bindings to insert-node.\n", "children": []}, {"h": "Improved the install docs", "gnx": "ekr.20100118181428.8306", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/add6242d6f4fc476\n", "children": []}, {"h": "Made add-comments and delete-comments commands work with shortcuts", "gnx": "ekr.20100118181428.8307", "b": "", "children": []}, {"h": "Marked @<file> nodes dirty if nodes change during read.", "gnx": "ekr.20100118181428.8334", "b": "", "children": []}, {"h": "Recover from bad chars in .leo files", "gnx": "ekr.20100118181428.8358", "b": "Form-feed characters were causing problems with Python 3k.\n", "children": []}, {"h": "Select main chapter initially", "gnx": "ekr.20100118181428.8362", "b": "It can be alarming to select a small chapter in a large outline.\n", "children": []}, {"h": "Suppressed dangerous write prompt for clones", "gnx": "ekr.20100118181428.8363", "b": "", "children": []}, {"h": "Use w.leoMoveCursorHelper if it exists", "gnx": "ekr.20100118181428.8365", "b": "This fixes the following two bugs:\n\n- 421957 When body_pane_wraps is set to true, Previous-Line and Next-Line do not\n  work as expected.\n\n- 489917 Cursor placement defect \n", "children": []}, {"h": "Fixed bug 452303 @auto-rst can be dangerous", "gnx": "ekr.20100118181428.8413", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b84659e608ba44d5\n", "children": []}, {"h": "Fixed underlining problem in rst", "gnx": "ekr.20100118181428.8447", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/cdf78cbca5c526be\n", "children": []}, {"h": "Fixed qt key problems", "gnx": "ekr.20100118181428.8449", "b": "Shift-PageUp/Down were not working.\n", "children": []}, {"h": "Fixed bug: 381895 qtGui Split ratio is not saved in .leo file", "gnx": "ekr.20100118181428.8473", "b": "http://bugs.launchpad.net/leo-editor/+bug/381895\n", "children": []}, {"h": "Applied patches to fix bug: 451377 Make Leo frienly to mac apps", "gnx": "ekr.20100118181428.8481", "b": "https://bugs.launchpad.net/leo-editor/+bug/451377\n", "children": []}, {"h": "Fixed bug: 394445 Chapters selection button: in qt, missing, in Tk, only one option", "gnx": "ekr.20100118181428.8485", "b": "The Tk part of this bug can not be fixed.\n", "children": []}, {"h": "Fixed bug: overwrite modified file message", "gnx": "ekr.20100118181428.8486", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b77b5260854ffbf6\n", "children": []}, {"h": "Fixed auto-save problem", "gnx": "ekr.20100118181428.8497", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b77b5260854ffbf6\n", "children": []}, {"h": "Fixed old at-shadow problem", "gnx": "ekr.20100118181428.8502", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c8f3edda9de05484\n", "children": []}, {"h": "Fixed ctrl-tab bug", "gnx": "ekr.20100118181428.8514", "b": "ctrl-tab (currently binded to cycle-focus) didn't work in windows with pyqt.\n", "children": []}, {"h": "Fixed 349027: body doesn't get focus after headline edit", "gnx": "ekr.20100118181428.8517", "b": "https://bugs.launchpad.net/leo-editor/+bug/349027\n", "children": []}, {"h": "Fixed bug 507559: Can't use End key while editing node headline", "gnx": "ekr.20100118181428.8518", "b": "", "children": []}, {"h": "Finished bug 486433: non-breaking space etc. are invisible", "gnx": "ekr.20100118181428.8522", "b": "https://bugs.launchpad.net/leo-editor/+bug/486433\n", "children": []}, {"h": "Fixed bug: 420988 @tabwith 8 not honored", "gnx": "ekr.20100118181428.8523", "b": "https://bugs.launchpad.net/leo-editor/+bug/420988\n", "children": []}, {"h": "Don't colorize @others and @all unless they start a line", "gnx": "ekr.20100118181428.8524", "b": "", "children": []}, {"h": "Gui bugs", "gnx": "ekr.20100119145003.7319", "b": "", "children": ["ekr.20100119145003.7320", "ekr.20100119145003.7322", "ekr.20100119145003.7324", "ekr.20100119145003.7325", "ekr.20100119145003.7327", "ekr.20100119145003.7358", "ekr.20100119145003.7531", "ekr.20100119145003.7546", "ekr.20100119145003.7612", "ekr.20100119145003.7618", "ekr.20100119145003.7625", "ekr.20100119145003.7629", "ekr.20100119145003.7632", "ekr.20100119145003.7643", "ekr.20100119145003.7718"]}, {"h": "Fixed file-open focus problem", "gnx": "ekr.20100119145003.7320", "b": "", "children": []}, {"h": "Eliminate double close prompt", "gnx": "ekr.20100119145003.7322", "b": "", "children": []}, {"h": "Fixed scrolling problem with multiple editors", "gnx": "ekr.20100119145003.7324", "b": "", "children": []}, {"h": "Fixed crash in quicksearch plugin", "gnx": "ekr.20100119145003.7325", "b": "", "children": []}, {"h": "Fixed @nosent dirty bug", "gnx": "ekr.20100119145003.7327", "b": "Note: changing a headline as *no effect* on an @nosent file!\nThe only bug was that redraw_after_head_changed must update icons.\n", "children": []}, {"h": "Allow horizontal scrolling in QtTree", "gnx": "ekr.20100119145003.7358", "b": "", "children": []}, {"h": "Correct binding of insert key", "gnx": "ekr.20100119145003.7531", "b": "", "children": []}, {"h": "Update tab names when the commander is dirty", "gnx": "ekr.20100119145003.7546", "b": "", "children": []}, {"h": "Made @nowrap work", "gnx": "ekr.20100119145003.7612", "b": "", "children": []}, {"h": "Added leoMoveCursorHelper", "gnx": "ekr.20100119145003.7618", "b": "", "children": []}, {"h": "Remember the ratios when the user moves splitters by hand.", "gnx": "ekr.20100119145003.7625", "b": "", "children": []}, {"h": "Chapter tabs require both_chapters and use_chapters_tabs", "gnx": "ekr.20100119145003.7629", "b": "", "children": []}, {"h": "Don't colorize directives unless they start a line", "gnx": "ekr.20100119145003.7632", "b": "", "children": []}, {"h": "Config coloring tags whenever the language changes", "gnx": "ekr.20100119145003.7643", "b": "", "children": []}, {"h": "Update qttabs when saving a new file", "gnx": "ekr.20100119145003.7718", "b": "", "children": []}, {"h": "Fixed colorizer bug affecting per-language @font settings", "gnx": "ekr.20100124164700.11919", "b": "@nocolor-node\n\nIt looks like you should be able to put the following in an\n@font node, and get restructured text bold to appear in bold on screen:\n\nrest_keyword2_font_size = 16\nrest_keyword2_font_family = Bitstream Charter\nrest_keyword2_font_slant = roman\nrest_keyword2_font_weight = bold\n\nHowever nothing happens when I do this. The python examples in the\ntest.leo file work fine for me, so I'm not sure what's gone wrong.\n\nI think that the following should also work, but it's also currently\nnot doing anything for me:\n\n@color rest_keyword2_color = black\n\n==================\n\nRev 2706 fixes a significant colorizer bug that caused your problem.\nPreviously, the colorizer inited the so-called configuration tags only\nonce, which is wrong. These tags are what the @font settings specify.\nNow, the colorizer inits the tags when the language changes when\nswitching nodes.  Usually the language doesn't change, so the new code\nwill be approximately as fast as the old. \n", "children": []}, {"h": "support extend-mode for several commands", "gnx": "ekr.20100124164700.11920", "b": "'backward-find-character'\n'find-character'\n", "children": []}, {"h": "Fixed qttab problem", "gnx": "ekr.20100124164700.11921", "b": "@nocolor-node\n\nOn Mon, Jan 18, 2010 at 9:25 PM, tfer <tfetherston@aol.com> wrote:\n\ncmd.exe /k C:\\PyDev\\leo-editor\\trunk\\launchLeo.py --gui=qttabs -- ipython\n\n1) (??) the button removal menu just flash on right mouse click, disappears immediately.\n\n2) Leo opens up the workbook, I open a new doc in a tab, 'untitled', save it,\n   get saved ... in log, however, tab title does not change unless I close and\n   reload it.\n", "children": []}, {"h": "<alt-x> select-all crashes python when focus is in headline", "gnx": "ekr.20100124164700.11922", "b": "@\nThe problem occurs because the QtGui.QLineEdit object goes away\nwhen the minibuffer gets focus and the QTreeWidget loses focus.\n\nThe fix: add a 'permanent' ivar to leoQtTextWidgets, and set\nthis ivar to False for headline widgets.\n", "children": []}, {"h": "Allow saving .leo files with undefined-sections", "gnx": "ekr.20100124164700.11923", "b": "@nocolor-node\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/db797dd1d4dddffb\n\n1) Create an @thin file based outline.\n2) In the @thin file, create an unreferenced section (something like a\n  header <<This Section Is Bogus>>).\n3) Now, File->Exit\n4) A dialog box pops up\n  (Save changes to leo_file.leo before quitting? Yes/No/Cancel)\n5) Click \"Yes\"\n6) In the log pane, you will see: \"undefined section\" and \"saved: leo_file.leo\"\n  and in the console window, you see \"undefined section: ...\"\n\nThe point is that I can't kill Leo if I keep saying \"Yes\" to the\n\"Save change before quitting\" dialog. This is definitely not the\nintended behavior. The correct behavior would be to save the file,\ngive me the warning about the undefined section, and exit.\n\nEKR: The fix was simple: write_leo_file ignores the status returned from\nc.atFileCommands.writeAll.\n\nNote that Leo writes the write error to the console as well as the log pane,\nso this should be safe enough.\n", "children": []}, {"h": "Refactored write_Leo_file", "gnx": "ekr.20100124164700.11924", "b": "", "children": []}, {"h": "Fixed print-bindings crasher w/ leo3k", "gnx": "ekr.20100124164700.11925", "b": "", "children": []}, {"h": "Fixed problem with already-existing .leo.bak files", "gnx": "ekr.20100124164700.11926", "b": "@nocolor-node\n\nI also unhappily discovered that any file named somedoc.leo.bak will\nget deleted whenever you save a file named somedoc.leo.\n\n===========\n\nThis turned into a major refactoring of write_Leo_file.\n", "children": []}, {"h": "Fixed sort children bug", "gnx": "ekr.20100124164700.11927", "b": "https://bugs.launchpad.net/leo-editor/+bug/510148\n\nThe fix was in sortSiblings.\n", "children": []}, {"h": "Fixed unicode problems", "gnx": "ekr.20100124164700.11928", "b": "@nocolor-node\n\n- 'encoding' arg removed from appendStringToBody, setBodyString\n\n- There are too many usages of _bodyString !!\n\n- There is no way to give an encoding to setBodyString:\n    It should give an internal error if the s arg is not unicode.\n", "children": []}, {"h": "Fixed crash in writeToFileHelper", "gnx": "ekr.20100124164700.11938", "b": "", "children": []}, {"h": "Add warnings when @file logic happens", "gnx": "ekr.20100124164700.11944", "b": "", "children": []}, {"h": "Fixed mkstemp bug", "gnx": "ekr.20100124164700.11946", "b": "@nocolor-node\n\nhttps://bugs.launchpad.net/leo-editor/+bug/510145\n\nCurrent leo trunk, r2732, Slackware Linux\n\n- I go to /tmp in terminal\n- there is no aaa.leo there (this is important, see below why)\n- I launch leo (the current working directory is /tmp)\n- I select \"File->Save as\" menu item\n- the save file dialog opens in /tmp, this is correct\n- I type in the file name \"aaa\" then hit \"Save\" button\n- leo dumps an error in the log pane:\n\nexception renaming /tmp/aaa.leo to /tmp/tmpbNydoS\nIOError: [Errno 2] No such file or directory: u'/tmp/aaa.leo'\n\n=============\n\nThe solution was to create the backup file only if fileName exists.\n", "children": []}, {"h": "Removed most usage of _bodyString & _headString", "gnx": "ekr.20100124164700.11951", "b": "@nocolor-node\n\nMade sure _bodyString _headString used only in leoNodes.py.\n\nWe allow setting this vars in file reading code.\n\n*** p.b/p.h setters call c.setBody/HeadString,\n    which are very slow!\n", "children": []}, {"h": "Don't use tnodeList to separate old/new @file nodes", "gnx": "ekr.20100124164700.11965", "b": "@nocolor-node\n\n- Removed thinFile arg from atFile.read.\n  atFile.read can uncache *any* cached file.\n- Removed thinFile arg from initReadIvars.\n- self.thinFile ivar set only in readOpenFile.\n- atFile.read no longer calls scanHeaderForThin:\n  we simply use the thinFile value returned by scanHeader.\n- atFile.readOpenFile deletes children as needed.\n", "children": []}, {"h": "Eliminated warning re orphan nodes", "gnx": "ekr.20100124164700.12027", "b": "", "children": []}, {"h": "Eliminated node-changed marks", "gnx": "ekr.20100128094926.12524", "b": "These marks were just annoying.\n", "children": []}, {"h": "Suppress path changed message in save-as and save-to", "gnx": "ekr.20100128094926.12739", "b": "", "children": []}, {"h": "Fixed Terry's unicode problem", "gnx": "ekr.20100128094926.12756", "b": "Deleting a range of line containing unicode characters deletes too much.\n", "children": []}, {"h": "Features", "gnx": "ekr.20100118181428.8525", "b": "", "children": ["ekr.20100118181428.8815", "ekr.20100129054823.11928", "ekr.20100129054823.17683", "ekr.20100129054823.11935", "ekr.20100129054823.17685"]}, {"h": "Leo supports Python 3.x", "gnx": "ekr.20100118181428.8815", "b": "Leo requires Python 2.6 or above, including Python 3.0 and above.\n", "children": []}, {"h": "New command-line options", "gnx": "ekr.20100129054823.17683", "b": "- The --debug command-line option sets g.debug.\n\n- The --version command-line option causes Leo\n  to print it's version and exit.\n\n", "children": []}, {"h": "New settings", "gnx": "ekr.20100129054823.17685", "b": "The qt colorizer now supports font specifications in @font nodes.\n", "children": []}, {"h": "4.7 beta 3", "gnx": "ekr.20100201192329.7018", "b": "Leo 4.7 beta 3                       February 2, 2009\n\nLeo 4.7 beta 3 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.7 beta 3 fixes all known serious bugs in Leo.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- Leo now uses the simplest possible internal data model.\n  This is the so-called \"one-node\" world.\n- Leo supports Python 3.x.\n- Leo requires Python 2.6 or above.\n- Several important improvements in file handling.\n    - Leo converts @file nodes to @thin nodes automatically.\n    - @auto-rst now works much more reliably reliably.\n    - Leo no longer @noref trees.  Such trees are not\n      reliable in cooperative environments.\n- A new Windows installer.\n- Many other features, including new command line options and new plugins.\n- Dozens of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20100201192329.7095"]}, {"h": "Bugs fixed in Leo 4.7 b3", "gnx": "ekr.20100201192329.7095", "b": "", "children": ["ekr.20100201192329.7141", "ekr.20100201192329.7101", "ekr.20100201192329.7106", "ekr.20100201192329.7108", "ekr.20100201192329.7113", "ekr.20100201192329.7116"]}, {"h": "Fixed unicode problems", "gnx": "ekr.20100201192329.7141", "b": "'utf-8' is now the official, explicit unicode encoding unless overridden when\nreading files.\n\nThis simplifies the code in several ways. In particular, the 'mbcs' encoding is\nnever used by default, and there is no g.app.defaultEncoding argument.\n\nThe rst3 command now uses 'utf-8' for all encodings unless explicitly overridden.\n", "children": []}, {"h": "paste-node-as-clone now sets dirty bits properly", "gnx": "ekr.20100201192329.7101", "b": "This was a serious error.  It could cause clone clashes on later reloads.\n", "children": []}, {"h": "Fixed crasher in sort-siblings", "gnx": "ekr.20100201192329.7106", "b": "This only happened if two nodes had the same headline.\n", "children": []}, {"h": "Fixed bug 515164: a crasher in p.positionExists", "gnx": "ekr.20100201192329.7108", "b": "", "children": []}, {"h": "Fixed problem with colon following @path", "gnx": "ekr.20100201192329.7113", "b": "@nocolor-node\n\nThe problem arises because an @path directive ended with ':':\n\n    @path: aPath\n\nWhat I did:\n\n- g.get_directives_dict now carefully checks for non-whitespace following a directive.\n- The qt colorizer does the same.\n- Added unit test to check for this.\n", "children": []}, {"h": "Code cleanup", "gnx": "ekr.20100201192329.7116", "b": "Eliminated most imports from the leo/extensions folder.\n\n", "children": []}, {"h": "4.7 rc 1", "gnx": "ekr.20100205152016.14053", "b": "Leo 4.7 rc 1                    February 12, 2009\n\nLeo 4.7 release candidate 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.7 rc 1 fixes all known bugs in Leo, serious or minor.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- Leo now uses the simplest possible internal data model.\n  This is the so-called \"one-node\" world.\n- Leo supports Python 3.x.\n- Leo requires Python 2.6 or above.\n- Several important improvements in file handling.\n    - Leo converts @file nodes to @thin nodes automatically.\n    - Leo creates a 'Recovered Nodes' node to hold data that\n      otherwise might be lost due to clone conflicts.\n    - @auto-rst now works much more reliably reliably.\n    - Leo no longer supports @noref trees.  Such trees are not\n      reliable in cooperative environments.\n- A new Windows installer.\n- Many other features, including new command line options and new plugins.\n- Dozens of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20100205152016.14054", "ekr.20100209160132.11690", "ekr.20100211125418.11611"]}, {"h": "Recovering from clone conflicts", "gnx": "ekr.20100205152016.14054", "b": "Leo now has a simple, robust, and extremely useful scheme to recover from clone\nbattles, no matter how they may arise. This removes all the dread from \"node\nchanged\" messages. It is easy to see what the changes were, and it is easy to\nchoose what, if anything to do.\n\nIt is easy to test the code to see how it works:\n\n1. Put a clone in an external file, and put another clone in Leo\noutside of any external file.\n\n2. Change the clone outside of Leo using an external editor.\n\n3. Reload Leo.\n\nWhen a clone conflict occurs, you will see a red message in the log pane and a\n\"Recovered Nodes\" node as the last top-level node. This node has one child per\nred message. Each of these children contains two nodes: an \"old\" node and a\n\"new\" node. Unless there are multiple conflicts for a single node, the \"new\"\nnode will have \"won\": every clone contains the new node's headline and body\ntext. All these nodes are plain nodes, *not* clones. It is up to you to change\nthe corresponding clone nodes if you choose to do so.\n", "children": []}, {"h": "Bugs fixed", "gnx": "ekr.20100209160132.11690", "b": "", "children": ["ekr.20100209160132.11691", "ekr.20100209160132.11692", "ekr.20100209160132.11694", "ekr.20100209160132.11700", "ekr.20100209160132.11701", "ekr.20100209160132.11711", "ekr.20100209160132.11712", "ekr.20100209160132.11718", "ekr.20100209160132.11736", "ekr.20100209160132.11742", "ekr.20100209160132.11751", "ekr.20100209160132.11755", "ekr.20100209160132.11756", "ekr.20100209160132.11765", "ekr.20100209160132.11767", "ekr.20100209160132.11770", "ekr.20100209160132.11773", "ekr.20100211125418.11596", "ekr.20100211125418.11599", "ekr.20100211125418.11602"]}, {"h": "Fixed unicode bug in setSelectionRangeHelper", "gnx": "ekr.20100209160132.11691", "b": "", "children": []}, {"h": "Home key no longer clears the minibuffer", "gnx": "ekr.20100209160132.11692", "b": "@nocolor-node\n\nThe fix: back-to-home is now included in k.singleLineCommandList.\n", "children": []}, {"h": "Fixed bug in c.pasteOutline when run from unit tests", "gnx": "ekr.20100209160132.11694", "b": "There was code in tnodeAttributes that did something brain-dead when unit\ntesting, just to support a unit test!\n", "children": []}, {"h": "Removed all references to isAtNorefFileNode", "gnx": "ekr.20100209160132.11700", "b": "", "children": []}, {"h": "Fixed inconsistency in how @path works", "gnx": "ekr.20100209160132.11701", "b": "@nocolor-node\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/6d87d95ecbc3b986\n\nIf a @path directive is within the body text of an @thin node then the\nfile write uses the @path directive but the file read does not.  Since\nthe file read cannot know of the @path directive until after it has\nread the file it has no choice but to not use it.  The @thin file\nwrite code should not use any @path declarations found in its body\ntext.\n\nWhat I did:\n\n- Defined g.app.atPathInBodyWarning, set by g.get_directives_dict to p.h\n- g.get_directives_dict also sets d['@path_in_body'] = p.h\n- c.scanAtPathDirectives doesn't set the path if d['@path_in_body'] is true.\n- atFile.scanAllDirectives issues a warning if g.app.atPathInBodyWarning is true,\n  but only if the issuePathWarning keyword arg is true.\n", "children": []}, {"h": "Fixed crasher in path.py", "gnx": "ekr.20100209160132.11711", "b": "@nocolor-node\n\nTraceback (most recent call last):\n  File \"launchLeo.py\", line 8, in <module>\n    leo.core.runLeo.run()\n  File \"c:\\leo.repo\\trunk\\leo\\core\\runLeo.py\", line 95, in run\n    ok = doPostPluginsInit(args,fn,relFn,script,versionFlag)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\runLeo.py\", line 354, in doPostPluginsInit\n    c,frame = createFrame(fileName,relativeFileName,script)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\runLeo.py\", line 383, in createFrame\n    ok, frame = g.openWithFileName(relativeFileName or fileName,None)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoGlobals.py\", line 2439, in openWithFileName\n    ok = g.handleOpenHooks(c,old_c,gui,fn,f,readAtFileNodesFlag)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoGlobals.py\", line 2502, in handleOpenHooks\n    readAtFileNodesFlag=readAtFileNodesFlag) # closes file.\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoFileCommands.py\", line 911, in open\n    silent=silent)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoFileCommands.py\", line 811, in getLeoFile\n    c.atFileCommands.readAll(c.rootVnode(),partialFlag=False)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoAtFile.py\", line 659, in readAll\n    at.readOneAtAutoNode (fileName,p)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoAtFile.py\", line 732, in readOneAtAutoNode\n    self.writeCachedTree(p, cachefile)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoAtFile.py\", line 593, in writeCachedTree\n    elif cachefile in c.db:\n  File \"c:\\leo.repo\\trunk\\leo\\external\\pickleshare.py\", line 138, in __contains__\n    return self.has_key(key)\n  File \"c:\\leo.repo\\trunk\\leo\\external\\pickleshare.py\", line 234, in has_key\n    value = self[key]\n  File \"c:\\leo.repo\\trunk\\leo\\external\\pickleshare.py\", line 160, in __getitem__\n    fil = self.root / key\n  File \"c:\\leo.repo\\trunk\\leo\\external\\path.py\", line 102, in __div__\n    return path(os.path.join(self, rel))\n  File \"c:\\python31\\lib\\ntpath.py\", line 111, in join\n    elif isabs(b):\n  File \"c:\\python31\\lib\\ntpath.py\", line 92, in isabs\n    s = splitdrive(s)[1]\n  File \"c:\\python31\\lib\\ntpath.py\", line 198, in splitdrive\n    if len(p) > 1:\nTypeError: object of type 'NoneType' has no len()\n\nc:\\leo.repo\\trunk>\n", "children": []}, {"h": "Fixed at-auto write bug", "gnx": "ekr.20100209160132.11712", "b": "@nocolor-node\n\nAdding a blank line did not change the file!\n\nThe culprit was the ignoreLineEndings logic in compareFiles.\nA new unit test is needed.\n", "children": []}, {"h": "Fixed the critical 'file used by another process' bug", "gnx": "ekr.20100209160132.11718", "b": "@nocolor-node\n\nWhat I did:\n\n- fc.createBackupFile now calls shutils.move directly,\n  avoiding g.utils_rename which does way too much:\n  it calls g.makeAllNonExistentDirectories(!!)\n\n- Simplified g.utils_rename.  We can assume shutils exists.\n\n- Removed an unwise call to g.utils_remove in g.utils_rename.\n  This could cause havoc with the following call to\n  shutils_move!!\n", "children": []}, {"h": "Alt-right should *not* go down", "gnx": "ekr.20100209160132.11736", "b": "", "children": []}, {"h": "Big change: simplified g.utils_rename", "gnx": "ekr.20100209160132.11742", "b": "Removed call to g.makeAllNonExistentDirectories in g.utils_rename.\n\nThis has global effects. Happily, there were only three callers of g.utils_rename:\n\n- handleWriteLeoFileException: should *not* create directories.\n\n- x.rename: no longer used!\n", "children": []}, {"h": "Fixed cursor hangnail", "gnx": "ekr.20100209160132.11751", "b": "Non-extending cursor moves now always clear the selection.\n", "children": []}, {"h": "Do a full redraw when contracting a cloned node", "gnx": "ekr.20100209160132.11755", "b": "", "children": []}, {"h": "Bug 399720: (fixed) goto-global-line doesn't work with @edit nodes", "gnx": "ekr.20100209160132.11756", "b": "The title says it all.\n\nThis was likely fixed at rev 2438 of the trunk, in early October, 2009.\n", "children": []}, {"h": "Fixed unit test for leo_interface.py", "gnx": "ekr.20100209160132.11765", "b": "@nocolor-node\n\nThe module imported correctly, but leoTest.checkFileSyntax was failing.\n\nIt was a whitespace problem--the fix was stripping '\\r' characters in checkFileSyntax.\n", "children": []}, {"h": "Fixed g.getLastTracebackFileAndLineNubmer", "gnx": "ekr.20100209160132.11767", "b": "", "children": []}, {"h": "Fixed open-with crash", "gnx": "ekr.20100209160132.11770", "b": "@nocolor-node\n\nThere may have been a bug in the open_with plugin that allowed it to be active\nwhen it shouldn't have been.\n", "children": ["ekr.20100209160132.11771"]}, {"h": "Report", "gnx": "ekr.20100209160132.11771", "b": "@nocolor-node\n\nI am getting an exception when double-clicking to rename a node. The\nexception does not occur when I rename a new node immediately\nfollowing creation while it is highlighted.\n\n#---#\nLeo Log Window\nLeo 4.7 beta 3, build 2835, February 2, 2010\nPython 3.1.1, qt version 4.6.1\nWindows 6, 1, 7600, 2,\nreading: C:\\Users\\skrivsm\\Documents\\toolbox\\scratch\\ruby_scratch.leo\ncreating:   newHeadline_LeoTemp_63898064.py\nexception creating temp file\nTraceback (most recent call last):\n File \"C:\\leo-editor\\trunk\\leo\\core\\leoCommands.py\", line 1164, in\ncreateOpenWithTempFile\n   f.write(s)\nTypeError: must be str, not bytes\nrecreating:   newHeadline_LeoTemp_63898064.py\nexception creating temp file\nTraceback (most recent call last):\n File \"C:\\leo-editor\\trunk\\leo\\core\\leoCommands.py\", line 1164, in\ncreateOpenWithTempFile\n   f.write(s)\nTypeError: must be str, not bytes\n#---#\n", "children": []}, {"h": "Fixed bug 518823: clone headline updates", "gnx": "ekr.20100209160132.11773", "b": "https://bugs.launchpad.net/leo-editor/+bug/518823\n\nClone headline modification not propagated after edit\n", "children": []}, {"h": "Removed duplicate can not open message for @auto file", "gnx": "ekr.20100211125418.11596", "b": "", "children": []}, {"h": "Fixed minor bug involving insertion point", "gnx": "ekr.20100211125418.11599", "b": "This bug was highly annoying: it caused the newly-selected node to have the\ninsert point of a just-deleted node. This bug made it difficult, for example, to\ndelete nodes while examining the nodes created by clone-find-all.\n", "children": []}, {"h": "Fixed unicode crasher in write-recent-files logic", "gnx": "ekr.20100211125418.11602", "b": "", "children": []}, {"h": "New commands", "gnx": "ekr.20100211125418.11611", "b": "", "children": ["ekr.20100209160132.11888"]}, {"h": "Created clear-cache and clear-all-caches commands", "gnx": "ekr.20100209160132.11888", "b": "@nocolor-node\n\nGlobal entries are in g.app.leoHomeDir/db/global\n\nPer-leo-files entries are in g.app.homeLeoDir/db/<filename>_<hash>\n", "children": []}, {"h": "4.7 final", "gnx": "ekr.20100223063657.7262", "b": "Leo 4.7 final                    February 23, 2010\n\nLeo 4.7 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.7 final fixes all known bugs in Leo.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- Leo now uses the simplest possible internal data model.\n  This is the so-called \"one-node\" world.\n- Leo supports Python 3.x.\n- Leo requires Python 2.6 or above.\n- Several important improvements in file handling.\n    - Leo converts @file nodes to @thin nodes automatically.\n    - Leo creates a 'Recovered Nodes' node to hold data that\n      otherwise might be lost due to clone conflicts.\n    - @auto-rst now works much more reliably reliably.\n    - Leo no longer supports @noref trees.  Such trees are not\n      reliable in cooperative environments.\n- A new Windows installer.\n- Many other features, including new command line options and new plugins.\n- Dozens of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20100223063657.7264"]}, {"h": "Bug fixed", "gnx": "ekr.20100223063657.7264", "b": "", "children": ["ekr.20100223063657.7182", "ekr.20100223063657.7192", "ekr.20100223063657.7212", "ekr.20100223063657.7232", "ekr.20100223063657.7238", "ekr.20100223063657.7245", "ekr.20100223063657.7246", "ekr.20100223063657.7249", "ekr.20100223063657.7263"]}, {"h": "Fixed calls to sort in 6 places", "gnx": "ekr.20100223063657.7182", "b": "# This fixed a Python 3.x compatibility problem.\n", "children": []}, {"h": "Fix bug 363406: goto-global-line works with @auto files", "gnx": "ekr.20100223063657.7192", "b": "", "children": []}, {"h": "Put focus in a standard place after save commands", "gnx": "ekr.20100223063657.7212", "b": "The edit pane lost focus after save commands.\n", "children": []}, {"h": "Fixed internal Leo error in atFile.read method", "gnx": "ekr.20100223063657.7232", "b": "fileKey is needed even if force is True.\n", "children": []}, {"h": "Fixed wish-list bug 508108: No methods sub-nodes in PHP class import", "gnx": "ekr.20100223063657.7238", "b": "https://bugs.launchpad.net/leo-editor/+bug/508108\n", "children": []}, {"h": "Fixed qt colorizer bug", "gnx": "ekr.20100223063657.7245", "b": "Default fonts were not being properly restored after being overridden in another language.\n\nFor example, after colorizing php, python keywords looked like php keywords.\n", "children": []}, {"h": "Fixed ancient minibuffer bug", "gnx": "ekr.20100223063657.7246", "b": "The bug: Find/change prompts were not fully protected after the user hit the\n<home> key.\n", "children": []}, {"h": "Improved support for wrapping in the log pane", "gnx": "ekr.20100223063657.7249", "b": "", "children": []}, {"h": "Reformatted the output of the apropos commands", "gnx": "ekr.20100223063657.7263", "b": "", "children": []}, {"h": "4.7.1 final", "gnx": "ekr.20100225102026.7139", "b": "Leo 4.7.1 final                    February 26, 2010\n\nLeo 4.7.1 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo 4.7.1 fixes a dangerous bug in Leo 4.7. When converting file-like sentinels\nto thin-like sentinels in an external file, Leo now issues a warning and sets\nthe corresponding @file node dirty. This ensures that Leo will write the\nconverted external file and .leo file together, making it impossible to lose\ndata.\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.7:\n--------------------------\n\n- Leo now uses the simplest possible internal data model.\n  This is the so-called \"one-node\" world.\n- Leo supports Python 3.x.\n- Leo requires Python 2.6 or above.\n- Several important improvements in file handling.\n    - Leo converts @file nodes to @thin nodes automatically.\n    - Leo creates a 'Recovered Nodes' node to hold data that\n      otherwise might be lost due to clone conflicts.\n    - @auto-rst now works much more reliably reliably.\n    - Leo no longer supports @noref trees.  Such trees are not\n      reliable in cooperative environments.\n- A new Windows installer.\n- Many other features, including new command line options and new plugins.\n- Dozens of bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20100225102026.7140"]}, {"h": "Changes made to Leo 4.7.1", "gnx": "ekr.20100225102026.7140", "b": "- Fixed a dangerous bug that could cause data loss when converting @file nodes\n  from file-like to thin-like sentinels. The problem arose because it was too\n  easy to save the .leo file (thus deleting the tnodeList) without forcing the\n  converted external files to be saved. The next time Leo attempted to read the\n  external files, the tnodeList would be missing and data would be lost.\n\n  Leo's read logic now determines whether the file has file-like sentinels by\n  reading the *uncached* contents of the file. When converting file-like\n  sentinels to thin-like sentinels, Leo warns that it is converting the file and\n  sets the @file node dirty. This ensures that Leo will write the converted\n  external file whenever Leo writes the .leo file. This will make it impossible\n  for a naive user to lose data. A sophisticated user might cause problems by\n  using the write-outline-only command...\n\n- Fixed expand/contract-pane commands.\n\n- Fixed Python 3.x problems in delete-editor and cycle-editor-focus.\n\n- Added a log message for show-colors saying the color picker does not exist for qt.\n\n- Corrected date in trunk/license.txt.\n", "children": []}, {"h": "4.8 Simpler sentinels, better installer, recovery nodes", "gnx": "ekr.20101104091058.5045", "b": "", "children": ["ekr.20101024234254.5433", "ekr.20101114081049.5004", "ekr.20101104091058.4975", "ekr.20101124102457.5135"]}, {"h": "4.8 a1", "gnx": "ekr.20101024234254.5433", "b": "@nocolor\n\nLeo 4.8 alpha 1                    October 29, 2010\n\nLeo 4.8 alpha 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.8:\n--------------------------\n\n- Leo now uses the simplest possible sentinel lines in external files.\n  External files with sentinels now look like Emacs org-mode files.\n- Leo Qt gui now supports Drag and Drop.\n  This was one of the most frequently requested features.\n- Improved abbreviation commands.\n  You now define abbreviations in Leo settings nodes, not external files.\n- @url nodes may contain url's in body text.\n  This allows headlines to contain summaries: very useful.\n- Leo now uses PyEnchant to check spelling.\n- Leo can now open multiple files from the command line.\n- Leo's ancient Tangle and Untangle commands are now deprecated.\n  This will help newbies how to learn Leo.\n- Leo now shows \"Resurrected\" and \"Recovered\" nodes.\n  These protect data and show how data have changed.\n  These fix several long-standing data-related problems.\n- A new \"screenshots\" plugin for creating slide shows with Leo.\n  I used this plugin to create Leo's introductory slide shows.\n- A better installer.\n- Many bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.8 b1", "gnx": "ekr.20101114081049.5004", "b": "@nocolor\n\nLeo 4.8 beta 1                               November 5, 2010\n\nLeo 4.8 beta 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.8:\n--------------------------\n\n- Leo now uses the simplest possible sentinel lines in external files.\n  External files with sentinels now look like Emacs org-mode files.\n- Leo Qt gui now supports Drag and Drop.\n  This was one of the most frequently requested features.\n- Improved abbreviation commands.\n  You now define abbreviations in Leo settings nodes, not external files.\n- @url nodes may contain url's in body text.\n  This allows headlines to contain summaries: very useful.\n- Leo now uses PyEnchant to check spelling.\n- Leo can now open multiple files from the command line.\n- Leo's ancient Tangle and Untangle commands are now deprecated.\n  This will help newbies how to learn Leo.\n- Leo now shows \"Resurrected\" and \"Recovered\" nodes.\n  These protect data and show how data have changed.\n  These fix several long-standing data-related problems.\n- A new \"screenshots\" plugin for creating slide shows with Leo.\n  I used this plugin to create Leo's introductory slide shows.\n- Improved autocompletion: Ctrl-space starts a one-time completion.\n- A better installer.\n- Many bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": []}, {"h": "4.8 rc1", "gnx": "ekr.20101104091058.4975", "b": "@nocolor\n\nLeo 4.8 rc 1                               November 15, 2010\n\nLeo 4.8 release candidate 1 is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.8:\n--------------------------\n\n- Leo now uses the simplest possible sentinel lines in external files.\n  External files with sentinels now look like Emacs org-mode files.\n- Leo Qt gui now supports Drag and Drop.\n  This was one of the most frequently requested features.\n- Improved abbreviation commands.\n  You now define abbreviations in Leo settings nodes, not external files.\n- @url nodes may contain url's in body text.\n  This allows headlines to contain summaries: very useful.\n- Leo now uses PyEnchant to check spelling.\n- Leo can now open multiple files from the command line.\n- Leo's ancient Tangle and Untangle commands are now deprecated.\n  This will help newbies how to learn Leo.\n- Leo now shows \"Resurrected\" and \"Recovered\" nodes.\n  These protect data and show how data have changed.\n  These fix several long-standing data-related problems.\n- A new \"screenshots\" plugin for creating slide shows with Leo.\n  I used this plugin to create Leo's introductory slide shows.\n- Improved autocompletion: Ctrl-space starts a one-time completion.\n- A better installer.\n- Many bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20101104091058.4976", "ekr.20101104173324.5140", "ekr.20101104173324.5021", "ekr.20101114081049.5090"]}, {"h": "Known problems", "gnx": "ekr.20101104091058.4976", "b": "There are at least 2 installer issues outstanding:\n\n1. Installing to the \"Program Files\" folder or the \"Program Files\n(x86)\" folder can cause some unit tests to fail due to permission\nissues.  I don't think this is too serious.\n\n2. Installing to the \"Program Files (x86)\" folder can cause PyEnchant\nnot to find the spellpyx.txt folder.  This looks like a bug in\nPyEnchant.\n", "children": []}, {"h": "New in 4.8 a1", "gnx": "ekr.20101104173324.5140", "b": "", "children": ["ekr.20101104091058.4977", "ekr.20101104091058.5016", "ekr.20101104091058.5019", "ekr.20101104091058.5024", "ekr.20101104091058.5027", "ekr.20101104091058.5037"]}, {"h": "Bugs", "gnx": "ekr.20101104091058.4977", "b": "", "children": ["ekr.20101104091058.4978", "ekr.20101104091058.4988"]}, {"h": "Significant bugs", "gnx": "ekr.20101104091058.4978", "b": "", "children": ["ekr.20101104091058.4979", "ekr.20101104091058.4981", "ekr.20101104091058.4986", "ekr.20101104173324.4924"]}, {"h": "Fixed vampire nodes and created p.deletePositionsInList", "gnx": "ekr.20101104091058.4979", "b": "# Also, created a \"Resurrected Nodes\" node to handle such nodes cleanly and safely.\n", "children": ["ekr.20101104091058.4980"]}, {"h": "Post re vampire nodes", "gnx": "ekr.20101104091058.4980", "b": "@language rest\n\nVampire nodes from cvs\n\nI've just discovered a major problem with cvs updates.  It is a subtle\nconsequence of how Leo writes outlines and reads derived files.  This\nis a big bug in Leo, not cvs.  The effect of the bug is that nodes can\nappear in derived files that were never written to them!\n\nThe discovery of this 'big bug' came about as the result of the\nfollowing Aha:\n\n**@thin files that contain @all directives should be a cvs binary (-kb) files.**\n\nThe reason is straightforward:  cvs doesn't know enough to merge such\nfiles.  Maybe all @thin derived files should be -kb files, but Leo's\nusers will never agree to that!\n\nAnyway, leoProjects.txt is now a binary file as far as cvs is\nconcerned.  Other .txt files, like leoScripts.txt, should also be\nbinary files.  As we shall see, the fact that leoProjects.txt is now a\n-kb file means that we can not possibly blame the cvs merge algorithm\nfor what is about to happen.\n\nOk, back to the 'big bug'.  Here is how I got bitten:\n\n- I changed leoProjects.txt in two sandboxes 1 and 2.  In sandbox 1 I\nadded a node called 'changed in the main line'.  In sandbox 2 I added\na node called 'changed2'.\n\n- I changed LeoPyRef.leo in sandbox 2, but *not* in sandbox 1.\n\n- I did a update in sandbox 2.\n\nAs expected (now that leoProjects.txt is a binary file) I got the\nfollowing from cvs:\n\nM src/LeoPyRef.leo\n...\ncvs update: nonmergeable file needs merge\ncvs update: revision 1.448 from repository is now in src/\nleoProjects.txt\ncvs update: file from working directory is now in .#leoProjects.txt.\n1.447\n\nTo summarize the update:\n\n- LeoPyRef.leo has been marked as modified (M), but it has **not**\nbeen changed by cvs.\n\n- As expected, leoProjects.txt contains the version from sandbox **1**.\n\nSo far, so good.  But when I opened LeoPyRef.leo I got a huge\nsurprise: the outline contains **both** the node 'changed in main-\nline' and the node 'changed2'!\n\nHow did this happen?  Well, obviously the 'changed in main-line' node\ncame from the cvs update.  I expected that.  The 'changed2' line must\nhave come from the local copy of LeoPyRef.leo.\n\nOnce I knew what to look for it wasn't too hard to discover what had\nhappened.  The 'changed2' is a descendant of a cloned node called '4.4\nprojects'.\n\n- One clone of '4.4 projects' node is a descendant of the @thin\nleoProjects.txt node.\n\n- Another clone of the '4.4 project' is in the LeoPyRef.leo file but\noutside of any @thin node.\n\nSo the 'resurrection' of the 'changed2' node happened while Leo was\nreading leoProjects.txt into LeoPyRef.leo.  The '4.4 projects' node\n**already existed in the outline** before Leo read leoProjects.txt,\nand the present atFile read logic only **adds** nodes, it never\ndeletes nodes.  Thus, the 'changed2' node 'survived' the atFile read\nlogic.  The 'changed2' node became a 'vampire' node that couldn't be\nkilled.\n\nThe problem is far from benign.  Because of clones, the vampire node\nbecame an orphan node in **another** file, namely leoKeys.py.  I tried\ntwo or three times to remove the vampire/orphan node before realizing\nwhat had happened.\n\nThe fix (there is *always* a fix) will require some care.  The present\natFile.read logic is robust because it *doesn't* delete nodes.  It is\nessential that the read logic remain robust.  I suspect the solutions\nwill be as follows:\n\nA. The atFile.read code can not delete the subtree of @thin nodes\ninitially, because it doesn't know whether there will be read errors\nlater.  If there are read errors absolutely nothing must change.  This\nensures that read errors never destroy information.\n\nB. A new post-pass will look for vampire nodes: nodes that were not\nactually read from the derived file.  I think (but haven't proven)\nthat all descendants of vampire nodes are also vampire nodes.  If that\nis so the post-pass will simply delete vampire nodes without worrying\nabout whether they have descendants.\n\nWarning: the new scheme will mean that cvs update can destroy\ninformation that previously existed in the outline.  I believe this is\ncorrect: we assume that derived files are the 'truly meaningful'\nfiles.  Hey, if we are wrong we can always get the old info from\ncvs :-)\nQQQ\n\nAt present, atFile.read contains code to warn of \"resurrected\" nodes,\nand I did indeed get such a warning when the recent problem arose.\n\nAfter a quick look at atFile.read, I strongly suspect that the problem\nremains today pretty much exactly as it was in 2003.  The only\ndifference is that the caching code (the call to\nroot.v.createOutlineFromCacheList(c,aList)) doesn't do the check:\n\\<\\< advise user to delete all unvisited nodes \\>\\>\nthat is done later in read(). That probably should be fixed.\n\nFinding a better solution to vampire nodes has been on the list since\n2003.  It's not easy because it involves the dreaded \"multiple delete\"\nproblem.\n\nHmm.  The present read code *does* delete the tree before reading thin\nexternal files.  So it appears that vampire nodes could only be\nexpected in external files derived from @file nodes.  It may be that\npart of the problem is that somehow Leo thinks that it is reading an\n@file node?? That's pretty weird, but messages about resurrected nodes\nand missing tnode lists did happen.  It's quite a puzzle.\n\nEdward\n", "children": []}, {"h": "Fixed bug 577047: Invalid @path directory does not warn user", "gnx": "ekr.20101104091058.4981", "b": "Specifying a @path directory causes Leo to save an \"@thin file.ext\" node below\nit in Leo's home directory without any warning. The next time Leo is opened it\nissues an error that it can not find the file.\n\nIt should instead issue a warning that the @path directory does not exist.\n\nIf this occurs when the saving of @thin nodes to files is performed as part of\nthe user closing Leo, the closing of Leo should be aborted to prevent the loss\nof data.\n\n===== The Aha\n\nThe computation of at./ic.default_directory **must not** attempt to create\ndirectories! It's too early for that!\n\nThis simplifies all aspects of the code:\n\n- No need to report errors & no need to recover from errors.\n- at.scanAllDirectives can call c.\n\n===== The actual fix:\n\nDue to a previous fix, at.writeAllAtFileNodesHelper does *not* report errors.\nThis causes Leo to clear all dirty bits.\n\nThe proper fix, therefore, is to force a write of the entire @edit tree in\nputVnode if it is orphaned.\n\nSimilarly, putVnode now forces writes of @auto and @shadow trees.\n\n", "children": []}, {"h": "Fixed @shadow problem", "gnx": "ekr.20101104091058.4986", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/dbe098206376ec8d\n\nThe fixes are marked # 2010/10/22 in << handle the opcode >>.\n", "children": []}, {"h": "Don't write tnodes of @file nodes!", "gnx": "ekr.20101104173324.4924", "b": "putVnode must test for @file just like @thin.\n", "children": []}, {"h": "Minor bugs", "gnx": "ekr.20101104091058.4988", "b": "", "children": ["ekr.20101104091058.4989", "ekr.20101104091058.4990", "ekr.20101104091058.4991", "ekr.20101104091058.4992", "ekr.20101104091058.4993", "ekr.20101104091058.4994", "ekr.20101104091058.4995", "ekr.20101104091058.4996", "ekr.20101104091058.4997", "ekr.20101104091058.4999", "ekr.20101104091058.5000", "ekr.20101104091058.5001", "ekr.20101104091058.5002", "ekr.20101104091058.5003", "ekr.20101104091058.5004", "ekr.20101104091058.5005", "ekr.20101104091058.5006", "ekr.20101104091058.5007", "ekr.20101104091058.5008", "ekr.20101104091058.5009", "ekr.20101104091058.5010", "ekr.20101104091058.5011", "ekr.20101104091058.5012", "ekr.20101104091058.5013", "ekr.20101104091058.5014", "ekr.20101104091058.5015"]}, {"h": "Fixed the @test logic for external files", "gnx": "ekr.20101104091058.4989", "b": "", "children": []}, {"h": "Fixed save scrolling bug", "gnx": "ekr.20101104091058.4990", "b": "- Open a node with long (multi-page) body text\n- Move cursor towards the end of the node\n- Save (ctrl+s)\n- Observe how window is scrolled, cursor is moved\n", "children": []}, {"h": "Fixed at-auto-rst crash", "gnx": "ekr.20101104091058.4991", "b": "", "children": []}, {"h": "Don't put &nbsp; in redirected log", "gnx": "ekr.20101104091058.4992", "b": "https://bugs.launchpad.net/leo-editor/+bug/549319\n\nLeo 4.7.1 final, build 3005, February 26, 2010\nPython 2.6.2, qt version 4.5.2\nWindows 5, 1, 2600, 2, Service Pack 3\n\nWhen redirecting the output to the Log pane using g.redirectStderr() and\ng.redirectStdout(), the output displays non-breaking space characters (&nbsp;)\neverywhere there is supposed to be a space.\n\nFor example, if I run print 'Hello World' I get Hello&nbsp;World in the Log\npane. This is really hard to read when you have 50 or 100 lines of numbers from\nthe output of a program.\n", "children": []}, {"h": "Fixed crash in log pane", "gnx": "ekr.20101104091058.4993", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoCommands.py\", line 366, in doCommand\n    val = command(event)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 284, in autoComplete\n    k.masterCommand(event,func=None,stroke=None,commandName=None)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 2606, in masterCommand\n    val = k.handleDefaultChar(event,stroke)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 2664, in handleDefaultChar\n    if stroke.lower() == 'return': stroke = '\\n'\nAttributeError: 'NoneType' object has no attribute 'lower'\n", "children": []}, {"h": "Fixed at-auto-rst bug", "gnx": "ekr.20101104091058.4994", "b": "", "children": []}, {"h": "Fixed erroneous error message in at-auto-rst read logic", "gnx": "ekr.20101104091058.4995", "b": "", "children": []}, {"h": "Fixed crasher in openFileForReading", "gnx": "ekr.20101104091058.4996", "b": "", "children": []}, {"h": "Fixed Java import problem", "gnx": "ekr.20101104091058.4997", "b": "On Windows, using Leo trunk from a few days ago, I get \"error: class\nclass does not end in a newline; one will be added [nl]\" on what seems\nto be every imported java chunk.\n\nThis issue seems to be line-ending related and I duplicated it with a\nsimple test.  When I run the following code from within a Leo node, I\nget the same error as when I tried to import the file.\n", "children": []}, {"h": "Fixed gloto-global-line", "gnx": "ekr.20101104091058.4999", "b": "", "children": []}, {"h": "Fixed rst3 bug with docutils on py3k", "gnx": "ekr.20101104091058.5000", "b": "", "children": []}, {"h": "fixed bug 618474: show_leo_directives", "gnx": "ekr.20101104091058.5001", "b": "https://bugs.launchpad.net/leo-editor/+bug/618474\n\nin core/leoRst the method removeLeoDirectives seems not to remove the leo directives.\nwhich results in @leo directives inside generated rst code.\n\nThe problematic code line is the statement \"g.match_word(s, 0,key)\" in the following block:\n\n                for key in self.leoDirectivesList:\n                    if g.match_word(s, 0,key):\n                        #g.trace('removing %s' % s)\n                        break\n\nAs far as I understand the function match_word, it returns 1 if s contains key at index 0,\nThe self.leoDirectivesList contains all directive like color, language, ... (without @) but\ns is a complete body line that looks like:\n@language rest\n\nThat means language starts at index 1 not at 0.\nchanging the line to\n  g.match_word(s, 1,key)\n\nlet it work correctly in my installation (4.7.1)\n", "children": []}, {"h": "fixed bug 618482: code-mode line feeds", "gnx": "ekr.20101104091058.5002", "b": "https://bugs.launchpad.net/leo-editor/+bug/618482\n\nin leoRst.py:\n\nthe method \"handleCodeMode\" does not preserve line linefeeds of the original code. While this is only annoying for code\nparts it is fatal for doc parts, because rst directives does not work anymore.\n\nThe problem is in the line \"elif not z.rstrip(): pass\" of the following code block at the end of the method\n        for z in result:\n            if z == '': result2.append('\\n\\n')\n            elif not z.rstrip(): pass\n            elif z.endswith('\\n\\n'): result2.append(z) # Leave alone.\n            else: result2.append('%s\\n' % z.rstrip())\n\nCommenting this line out, preserves the linefeeds in the doc part but doubles them in the code part.\n\nThe method \"rstripList\" is responsible for the doubling linefeeds:\n   The lines arguments is a list of lines with (!) trailing linefeeds (\\n),\n\n   The statement s = '\\n'.join(theList).rstrip() doubles therefore the linefeeds\n    replacing the line with s = ''.join(theList).rstrip() works.\n", "children": []}, {"h": "Fixed weave (and many similar) commands", "gnx": "ekr.20101104091058.5003", "b": "", "children": []}, {"h": "Shorter warnings about incompatible gui type", "gnx": "ekr.20101104091058.5004", "b": "", "children": []}, {"h": "Improved @enabled-plugins: ignore lines starting with '@'", "gnx": "ekr.20101104091058.5005", "b": "Also give calmer messages for non-existent plugins.\n", "children": []}, {"h": "Fixed bug in runUnitTestLeoFile", "gnx": "ekr.20101104091058.5006", "b": "Replace ';' by os.pathsep.\n", "children": []}, {"h": "Fixed crasher with del in minibuffer", "gnx": "ekr.20101104091058.5007", "b": "Changed w to self in leoQLineEditWidget.setInsertPoint.\n", "children": []}, {"h": "Ignore F-Keys & Ins in the minibuffer.", "gnx": "ekr.20101104091058.5008", "b": "k.fullCommand now ignores fkeys and Ins.\n", "children": []}, {"h": "Fixed bug 618570: leoRst: option strip_at_file_prefixes...", "gnx": "ekr.20101104091058.5009", "b": "leoRst: option strip_at_file_prefixes does not strip file prefixes in leo 4.7.1\n\nThe problematic code is in method underline of class rstCommands.\nThe last statement:\n\n  return '%s\\n%s\\n\\n' % (p.h.strip(),ch*n)\n\nreturns the full heading and not stripped one, (in the s parameter)\n", "children": []}, {"h": "Fixed bug 622802: Go to clone\" switches to the first chapter", "gnx": "ekr.20101104091058.5010", "b": "If one or more chapters exist (other than main), \"Go to clone\" switches to the\nfirst chapter, whether or not the clone is in that chapter.\n\nThe new code always selects the main chapter.\nThis is the simplest thing that could possibly work.\nOther approaches are fraught with difficulties.\n", "children": []}, {"h": "Fixed unicode bug in files", "gnx": "ekr.20101104091058.5011", "b": "I created a file time.leo. When it's in the dir d:/Dmitry it's being\nopened fine. But when I put it into the dir with Russian characters:\nD:/\u041b\u0438\u0447\u043d\u043e\u0435/\u0412\u0440\u0435\u043c\u044f leo prints squares at the window header and doesn't\nopen the file correctly. This problem existed in one of the revisions,\nthen it was fixed in the last official release. Now it emerged again\nin my Leo 4.8 devel, build 3005\n\nTraceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoGlobals.py\", line 3307, in pr\n    sys.stdout.write(s2)\n  File \"c:\\python31\\lib\\encodings\\cp437.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_map)[0]\n\nUnicodeEncodeError: 'charmap' codec can't encode character '\\xc2' in position\n31: character maps to <undefined> path changed for @thin\nUnicode-\u00c2-folder/unicode-\u00c2-test2.txt created:\nC:\\Users\\edreamleo\\Unicode-\u00c2-folder\\unicode-\u00c2-test2.txt\n", "children": []}, {"h": "Eliminated check python syntax commands, but retained code", "gnx": "ekr.20101104091058.5012", "b": "@nocolor-node\n\nRemoved the check-all-python-code and check-python code commands\n(and removed the references to these commands in menus.)\n\n- Retained the actual code for scripts.\n- Retained automatic syntax checking of python files on saves\n\nThe problem with separate commands is that they don't necessarily check an\nentire file: things like 'return' in a node that doesn't look it is in a\nfunction.\n\nDirectives and section references are not the problem:\nthey get translated to comments before the check.\n", "children": []}, {"h": "Improved handling of history", "gnx": "ekr.20101104091058.5013", "b": "nav_qt.py just uses these:\n\n    c.goPrevVisitedNode()\n    c.goNextVisitedNode()\n\nand these subsequently use leoCommand.py / class nodeHistory.\n\nThe fix would have to happen in leoFrame.py / selectHelper() which does this:\n\n    c.nodeHistory.update(p) # Remember this position.\n\nIt shouldn't call update() there. Rather, the call should be moved to\nwherever body focus code is.\n\nThe fix was to leoTree.selectHelper and qtBody.onFocusIn.\n\n", "children": []}, {"h": "Remember whether @asis/@nosent existed at read time", "gnx": "ekr.20101104091058.5014", "b": "Removed all traces of the \"significant change\" logic. The read code remembers\nwhether a node existed when Leo loaded the outline.\n\nLeo will warn when writing a node that didn't previously exist. This is a nice\nsimplification of the code.\n", "children": []}, {"h": "Added g.app.config.config_iter", "gnx": "ekr.20101104091058.5015", "b": "This simplifies the print-settings command.\n", "children": []}, {"h": "Code features", "gnx": "ekr.20101104091058.5016", "b": "", "children": ["ekr.20101104091058.5017", "ekr.20101104091058.5018", "ekr.20101104173324.4920", "ekr.20101104173324.4921", "ekr.20101104173324.4923"]}, {"h": "Added g.findTestScript", "gnx": "ekr.20101104091058.5017", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a108d70400b28dc9#\n\ng.findTestScript is an important new pattern for sharing code in Leo scripts,\nincluding scripts in @test nodes.\n\nSuppose there is common code that I want to include in several unit tests::\n\n    class Hello():\n        def __init__(self,name='john'):\n            self.name=name\n            print('hello %s' % name)\n\nI put this in a node called 'Common test code'.\n\nThe unit tests can \"import\" the code as follows::\n\n    exec(g.findTestScript('Common test code'))\n\nNow class Hello is available the test code!\n\nThis is something that I've wanted to do forever.  It's almost too\neasy.  I suppose it's a small security problem, but so is every other\n@test node!\n", "children": []}, {"h": "Added p.deletePositionsInList", "gnx": "ekr.20101104091058.5018", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e3c736bc9f545b7e#\n\nThis is an important new helper.\n", "children": []}, {"h": "Leo is more clever in putting up the Leo id dialog", "gnx": "ekr.20101104173324.4920", "b": "g.app.setLeoID now calls createDefaultGui instead of createTkGui.\n\nWe can *not* put up the LeoID dialog later: it is needed to set\ng.app.nodeIndices, which is used in the read logic for outlines, so it *must* be\nset before we load any Leo file!\n\n", "children": []}, {"h": "Simplified leoPlugins code", "gnx": "ekr.20101104173324.4921", "b": "There are some tricky issues here:\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/4da36f0d897a25e8\n\nImportant: g.loadOnePlugin calls the plugins onCreate method to make up for\nevents that have already been generated. pc.loadOnePlugin does not.\n", "children": []}, {"h": "Patched @test logic", "gnx": "ekr.20101104173324.4923", "b": "# Begin patch\n\n=== modified file 'leo/core/leoTest.py'\n@@ -697,9 +696,10 @@\n\n     # 2010/03/05: set the current directory so that importing leo.core.whatever works.\n     leoDir = g.os_path_finalize_join(g.app.loadDir,'..','..')\n-    os.chdir(leoDir)\n-\n-    os.spawnve(os.P_NOWAIT,sys.executable,args,os.environ)\n\n+    #os.chdir(leoDir)\n+    env = dict(os.environ)\n+    env['PYTHONPATH'] = env.get('PYTHONPATH', '')+';'+leoDir\n+    os.spawnve(os.P_NOWAIT,sys.executable,args,env)\n", "children": []}, {"h": "Commands", "gnx": "ekr.20101104091058.5019", "b": "", "children": ["ekr.20101104091058.5020", "ekr.20101104091058.5021", "ekr.20101104091058.5022", "ekr.20101104091058.5023", "ekr.20101104091058.5150", "ekr.20101104091058.5252"]}, {"h": "Added legend for print-settings command", "gnx": "ekr.20101104091058.5020", "b": "", "children": []}, {"h": "Added code-to-rst command", "gnx": "ekr.20101104091058.5021", "b": "# And deprecated code mode.\n", "children": []}, {"h": "Removed mark-clones command", "gnx": "ekr.20101104091058.5022", "b": "It is useless in the one-node world.\n", "children": []}, {"h": "Improved abbreviation commands", "gnx": "ekr.20101104091058.5023", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/24cb88a8c2a20a07#\n\n- Space activates abbreviations.\n- Multi-line abbreviations handled properly.\n- add-global-abbrev command uses entire selected text as the value of the abbreviation.\n- Inserted abbreviations are undoable.\n- Added support for @data abbreviations and @data global-abbreviations.\n- Added support for @bool enable-abbreviations.\n\napropos-abbreviations\n=====================\n\nWhen abbreviation mode is on (abbrev-mode toggles this mode) Leo will expand\nabbreviations as you type. Type the name of an abbreviation, followed by a\nspace. As soon as you type the space, Leo will replace the name by the\nabbreviations value. You can undo the replacement as usual.\n\nNote that defining any abbreviation automatically turns on abbreviation mode.\n\nThe add-global-abbreviation command (<alt-x>add-gl<tab><return>) takes the\nselected text as the replacement value of the abbreviation. The minibuffer\nprompts you for the name of the abbreviation.\n", "children": []}, {"h": "Completed cascade-windows and minimize-all-windows commands", "gnx": "ekr.20101104091058.5150", "b": "", "children": []}, {"h": "Created head-to-prev-node and tail-to-next-node commands", "gnx": "ekr.20101104091058.5252", "b": "@nocolor-node\n\nhttps://bugs.launchpad.net/leo-editor/+bug/611413\n\nThese work around the lack of AI in Python's importer.\n\nAdded leoImport.findClass helper.\n\nThe head-to-prev-node command moves non-empty text preceding a class, method or\nfunction definition to the end of the previous sibling node.\n\nThe tail-to-next-node command moves non-empty text following a class, method or\nfunction definition to the start of the next sibling node.\n", "children": []}, {"h": "Documentation", "gnx": "ekr.20101104091058.5024", "b": "", "children": ["ekr.20101104091058.5025", "ekr.20101104091058.5026"]}, {"h": "Created introductory slide shows", "gnx": "ekr.20101104091058.5025", "b": "", "children": []}, {"h": "Reorganized Users Guide", "gnx": "ekr.20101104091058.5026", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d02df89c0b831a7c\n\nI created my own copy of the home page:\n\n    Files-->@edit leo_toc.html\n\nThis allows me to group items without creating special pages.\n", "children": []}, {"h": "Features", "gnx": "ekr.20101104091058.5027", "b": "", "children": ["ekr.20101104091058.5028", "ekr.20101104091058.5029", "ekr.20101104091058.5030", "ekr.20101104091058.5031", "ekr.20101104091058.5032", "ekr.20101104091058.5033", "ekr.20101104091058.5034", "ekr.20101104091058.5035", "ekr.20101104091058.5036"]}, {"h": "New sentinels", "gnx": "ekr.20101104091058.5028", "b": "", "children": []}, {"h": "Don't create @chapter node for new file", "gnx": "ekr.20101104091058.5029", "b": "I think @chapters node shouldn't be in a new leo file, but it should\nbe created when the first chapter is created.\n\nDitto for the chapter selector toolbar button.\n", "children": []}, {"h": "Improved install instructions & logic", "gnx": "ekr.20101104091058.5030", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a5a47afa65af9a37\n\nThe following changes are on the trunk, and also on Leo's web site:\n\n- In home page, added link to Install page, just above the Beginner's Guide.\n\n- Added more explicit instructions for installing Tk and Qt.\n\n- In step 6 of the Windows install steps, the \"assoc .leo=LeoFile\"\n  is on a line by itself.\n\n- Updated home page to indicate that Leo requires Python and PyQt.\n  I also revised and simplified the introduction in other ways.\n  Ditto for description of Leo on SourceForge.\n\n- Changed \"%1\" to \"%*\" throughout the installation instructions.\n\n- Made batch files given in Installing Leo and Running Leo the same.\n\n- The dialogs that ask for the Leo ID now tells why Leo needs it.\n\n- Just before raising the dialog that asks for the Leo ID, Leo attempts\n  to create the Qt Gui first, and then the Tk Gui if Qt does not exist.\n  This should make it much less likely that a prompt for the id\n  will be sent to the console.\n\n\n2. The readme.txt file for 4.7.1-final does not mention that Python and PyQt is\n   required.\n\nreadme.txt does say it has a new Windows installer. This\nled me to believe -- erroneously -- that the Windows installer is all\nI would need to download and install, since it's typical for most open\nsource programs I've used to have everything needed for the install\n(for example. .NET) in the single Windows download.\n\n2b. And perhaps the readme.txt file as well?\n\nCan the [install] page be updated to make this clearer?\n\n4. When I first went to the Install page, I clicked on the link for\n\"Installing Leo on Windows\", got to the end of the steps and saw the\nnext section was \"Tracking the development version\" which I wasn't\ninterested in doing so I didn't read any further.\n\nClicking on the installer-created Windows link for Leo on the Start\nMenu did nothing. Eventually I found the Windows section under\n\"Running Leo\" and learned it was required to run Leo the first time\nfrom a console window and not by launching it from Windows.\n", "children": []}, {"h": "DnD outline nodes", "gnx": "ekr.20101104091058.5031", "b": "DnD creates @file or @auto nodes if appropriate\n", "children": []}, {"h": "write @edit nodes like @nosent nodes", "gnx": "ekr.20101104091058.5032", "b": "", "children": []}, {"h": "Leo now uses PyEnchant to check spelling", "gnx": "ekr.20101104091058.5033", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/62ac1977b3704590#\n\n", "children": []}, {"h": "Improved @url nodes", "gnx": "ekr.20101104091058.5034", "b": "Having to type the url after @url in headline is annoying.\n\nThe @url handler should look into the first line of body for url, if the text in\nthe headline is not an url. This way, the headline could actually be\ndescriptive.\n\nI know some plugin does this, but there is no reason why this couldn't be the\ndefault behavior.\n", "children": []}, {"h": "Made sure that all @auto nodes end with a newline", "gnx": "ekr.20101104091058.5035", "b": "The fix was to the \"if not trailingNewlineFlag:\" code at the end of at.putBody.\n", "children": []}, {"h": "Improved language support", "gnx": "ekr.20101104091058.5036", "b": "- improved support for elisp.\n\n    - Use @language lisp instead of @language elisp.\n\n- added importer for .ini files.\n", "children": []}, {"h": "Settings", "gnx": "ekr.20101104091058.5037", "b": "", "children": ["ekr.20101104091058.5038", "ekr.20101104091058.5039", "ekr.20101104091058.5040", "ekr.20101104091058.5041", "ekr.20101104091058.5042", "ekr.20101104091058.5043", "ekr.20101104091058.5044"]}, {"h": "Allow multiple files on the command line", "gnx": "ekr.20101104091058.5038", "b": "Refactored g.app.config.readSettingsFiles.\n\nSettings now honored in workbook.\n\n* Window size not honored when opened from menu.\n", "children": []}, {"h": "Allow proportional fonts in plain text", "gnx": "ekr.20101104091058.5039", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e6075a699909db53\n\nYou can now set a proportional font to use in all \"@language plain\" nodes\n\nSpecify fonts in @font nodes:\n\n@font plain null font\n\nplain_null_font_family = Times New Roman\nplain_null_font_size = 16\nplain_null_font_slant = roman\nplain_null_font_weight = bold\n\nThat is, the actual font specs are in the body text.  Everything\nexcept @font is ignored in the headline.\n\nSpecify colors in @color nodes:\n\n@color plain null color = black\n", "children": []}, {"h": "Allow changing minibuffer colors", "gnx": "ekr.20101104091058.5040", "b": "Added the following options with the indicated defaults.\n\n\\@color minibuffer_background_color = lightblue\n\\@color minibuffer_warning_color = lightgrey\n", "children": []}, {"h": "Added support for @string qt-toolbar-location", "gnx": "ekr.20101104091058.5041", "b": "Valid values are top,bottom,left,right\n", "children": []}, {"h": "Support @bool write_expansion_bits_in_leo_files", "gnx": "ekr.20101104091058.5042", "b": "", "children": []}, {"h": "Added support for slideshow plugin", "gnx": "ekr.20101104091058.5043", "b": "Command-line args\n", "children": []}, {"h": "New settings for abbreviations", "gnx": "ekr.20101104091058.5044", "b": "@bool enable-abbreviations (default: False)\n\n  When true, enables substitution of abbreviations.\n\n@data global-abbreviations\n@data abbreviations\n\n  In both cases, body text contains lines of\n  the form::\n\n   name=value\n\n  name is the abbreviation name, value is the substituted text. Whitespace is\n  ignore around the name, but is significant in the value. Abbreviation names\n  may contain only alphabetic characters, but may start with the '@' sign.\n\n  By *convention* @data global-abbreviations setting should be defined in\n  myLeoSettings.leo, while @data abbreviations should be defined in other .leo\n  files. Regardless of where they are defined, abbreviations in @data\n  abbreviation nodes will override settings (with the same name) in @data\n  global-abbreviations nodes.\n", "children": []}, {"h": "New in 4.8 b1", "gnx": "ekr.20101104173324.5021", "b": "", "children": ["ekr.20101104173324.5142", "ekr.20101104173324.5031", "ekr.20101104173324.5032", "ekr.20101104173324.5133", "ekr.20101105082829.4917"]}, {"h": "Bugs", "gnx": "ekr.20101104173324.5142", "b": "", "children": ["ekr.20101104173324.5023", "ekr.20101104173324.5028", "ekr.20101104173324.5102", "ekr.20101104173324.5138"]}, {"h": "Fixed bug 603720: @auto parsing error on dedented triple quote string", "gnx": "ekr.20101104173324.5023", "b": "The code that calculates the end of a block of indented Python code now takes\ntake more care with backslashes.\n", "children": []}, {"h": "Fixed bug 597757: c.frame.body.getSelectedText() doesn't work in added editors", "gnx": "ekr.20101104173324.5028", "b": "", "children": []}, {"h": "Fixed bug 604115: chapter-{clone,copy}-node-to broken", "gnx": "ekr.20101104173324.5102", "b": "- Added better prompts for move/copy/clone commands.\n\n- Undo/redo of these commands select the main chapter.\n", "children": []}, {"h": "Made sure proper install.txt appears", "gnx": "ekr.20101104173324.5138", "b": "@nocolor-node\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/dea95cd8ab976cac\n\n\n> > * The file 'INSTALL.TXT' contains the outline text with sentinels from\n> > 'Chapter 1: Installing Leo'\n\nThere are *two* files called install.txt: the one that should\ncontain installation instructions and the one that contains the\n\"Installing Leo\" chapter.\n\nThe solution was to change install.txt to installing.txt in the users guide.\n", "children": []}, {"h": "Completed cascade-windows and minimize-all-windows commands", "gnx": "ekr.20101104173324.5031", "b": "", "children": []}, {"h": "Improved present autocompleter", "gnx": "ekr.20101104173324.5032", "b": "Allow \"always on\" operation:\n\n- Ctrl-space is now bound to force-auto-completion\n\n- Remove Alt-1 and Alt-2 default bindings.\n", "children": []}, {"h": "Created head-to-prev-node and tail-to-next-node commands", "gnx": "ekr.20101104173324.5133", "b": "http://bugs.launchpad.net/leo-editor/+bug/611413\n\nThese work around the lack of AI in Python's importer.\n\nThe head-to-prev-node command moves non-empty text preceding a class, method or\nfunction definition to the end of the previous sibling node.\n\nThe tail-to-next-node command moves non-empty text following a class, method or\nfunction definition to the start of the next sibling node.\n", "children": []}, {"h": "Put non-def code in their own node", "gnx": "ekr.20101105082829.4917", "b": "Fixed wishlist bug 670744: add a setting to put inter-def code in its own node\n\nAdded support for @bool at_auto_separate_non_def_nodes option.\nThe default (legacy mode) is False.\n", "children": []}, {"h": "New in 4.8 rc1", "gnx": "ekr.20101114081049.5090", "b": "", "children": ["ekr.20101114081049.5101", "ekr.20101114081049.5102", "ekr.20101114081049.5103", "ekr.20101114081049.5108", "ekr.20101115085632.4928", "ekr.20101115085632.4930"]}, {"h": "Revised many plugins", "gnx": "ekr.20101114081049.5101", "b": "@nocolor-node\n\nRemoved the keybindings.py plugin.  The print-bindings command should suffice.\n\nThe plugins_menu.py has been renamed old_plugin_menu.py to indicate that it\nneeds a lot of work to become functional.\n\nThe following plugins are now gui-independent (the used to be Tk only):\n\nat_produce.py\nchapter_hoist.py\nimport_cisco_config.py\nmacros.py\nmod_read_dir_outline.py\nmultifile.py\nread_only_nodes.py\nword_count.py\nxsltWithNodes.py\n\nI also registered the menu2 event instead of the open2 event in all plugins that\nuse this event to create menus. This is required because a relatively recent\nchange creates menus *after* the open2 event happens.\n", "children": []}, {"h": "Fixed crasher in UNL.py: recursiveUNLSearch", "gnx": "ekr.20101114081049.5102", "b": "", "children": []}, {"h": "Big improvement to execute-script command", "gnx": "ekr.20101114081049.5103", "b": "execute-script now calls execfile (or its equivalent when using Python 3k)\nwhen @bool write_script_file = True.\n\nThis allows pdb to show the text of scripts!\n", "children": []}, {"h": "Added extract-python-method command", "gnx": "ekr.20101114081049.5108", "b": "This should have been done *ages* ago. The command makes it easy to put python\nmethods in separate nodes.\n\nSelect a range of text, the first line of which starts with 'def foo (...)'\n\nDo alt-x extract-python-method (or ctrl-p if you are repeating the command).\n\nWhat happens:\n\n- Creates a new child node whose headline is 'foo'.\n\n- The body of foo contains all the selected text, properly indented.\n\nThe command is undoable.\n", "children": []}, {"h": "Open the default leo file if possible", "gnx": "ekr.20101115085632.4928", "b": "Leo opens the file specified by the default_leo_file setting if it exists.\n\nNew in 4.8 rc1: if default (workbook) file does not exist Leo will\nopen an empty file and name is to be the default file.\n", "children": []}, {"h": "Fixed problems with installer", "gnx": "ekr.20101115085632.4930", "b": "The installer now makes proper entries in the Windows start menu.\n", "children": []}, {"h": "4.8 final", "gnx": "ekr.20101124102457.5135", "b": "@nocolor\n\nLeo 4.8 final                               November 26, 2010\n\nLeo 4.8 final is now available at:\nhttp://sourceforge.net/project/showfiles.php?group_id=3458&package_id=29106\n\nLeo is a text editor, data organizer, project manager and much more. See:\nhttp://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.8:\n--------------------------\n\n- Leo now uses the simplest possible sentinel lines in external files.\n  External files with sentinels now look like Emacs org-mode files.\n- Leo Qt gui now supports Drag and Drop.\n  This was one of the most frequently requested features.\n- Improved abbreviation commands.\n  You now define abbreviations in Leo settings nodes, not external files.\n- @url nodes may contain url's in body text.\n  This allows headlines to contain summaries: very useful.\n- Leo now uses PyEnchant to check spelling.\n- Leo can now open multiple files from the command line.\n- Leo's ancient Tangle and Untangle commands are now deprecated.\n  This will help newbies how to learn Leo.\n- Leo now shows \"Resurrected\" and \"Recovered\" nodes.\n  These protect data and show how data have changed.\n  These fix several long-standing data-related problems.\n- A new \"screenshots\" plugin for creating slide shows with Leo.\n  I used this plugin to create Leo's introductory slide shows.\n- Improved autocompletion: Ctrl-space starts a one-time completion.\n- A better installer.\n- Many bug fixes.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/project/showfiles.php?group_id=3458\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20101124102457.5136", "ekr.20101124102457.5137", "ekr.20101124102457.5210", "ekr.20101124102457.5220", "ekr.20101124102457.5227"]}, {"h": "Known problems", "gnx": "ekr.20101124102457.5136", "b": "There are at least 2 installer issues outstanding:\n\n1. Installing to the \"Program Files\" folder or the \"Program Files\n(x86)\" folder can cause some unit tests to fail due to permission\nissues.  I don't think this is too serious.\n\n2. Installing to the \"Program Files (x86)\" folder can cause PyEnchant\nnot to find the spellpyx.txt folder.  This looks like a bug in\nPyEnchant.\n", "children": []}, {"h": "New in 4.8 a1", "gnx": "ekr.20101124102457.5137", "b": "", "children": ["ekr.20101124102457.5138", "ekr.20101124102457.5172", "ekr.20101124102457.5178", "ekr.20101124102457.5189", "ekr.20101124102457.5192", "ekr.20101124102457.5202"]}, {"h": "Bugs", "gnx": "ekr.20101124102457.5138", "b": "", "children": ["ekr.20101124102457.5139", "ekr.20101124102457.5145"]}, {"h": "Significant bugs", "gnx": "ekr.20101124102457.5139", "b": "", "children": ["ekr.20101124102457.5140", "ekr.20101124102457.5142", "ekr.20101124102457.5143", "ekr.20101124102457.5144"]}, {"h": "Fixed vampire nodes and created p.deletePositionsInList", "gnx": "ekr.20101124102457.5140", "b": "# Also, created a \"Resurrected Nodes\" node to handle such nodes cleanly and safely.\n", "children": ["ekr.20101124102457.5141"]}, {"h": "Post re vampire nodes", "gnx": "ekr.20101124102457.5141", "b": "@language rest\n\nVampire nodes from cvs\n\nI've just discovered a major problem with cvs updates.  It is a subtle\nconsequence of how Leo writes outlines and reads derived files.  This\nis a big bug in Leo, not cvs.  The effect of the bug is that nodes can\nappear in derived files that were never written to them!\n\nThe discovery of this 'big bug' came about as the result of the\nfollowing Aha:\n\n**@thin files that contain @all directives should be a cvs binary (-kb) files.**\n\nThe reason is straightforward:  cvs doesn't know enough to merge such\nfiles.  Maybe all @thin derived files should be -kb files, but Leo's\nusers will never agree to that!\n\nAnyway, leoProjects.txt is now a binary file as far as cvs is\nconcerned.  Other .txt files, like leoScripts.txt, should also be\nbinary files.  As we shall see, the fact that leoProjects.txt is now a\n-kb file means that we can not possibly blame the cvs merge algorithm\nfor what is about to happen.\n\nOk, back to the 'big bug'.  Here is how I got bitten:\n\n- I changed leoProjects.txt in two sandboxes 1 and 2.  In sandbox 1 I\nadded a node called 'changed in the main line'.  In sandbox 2 I added\na node called 'changed2'.\n\n- I changed LeoPyRef.leo in sandbox 2, but *not* in sandbox 1.\n\n- I did a update in sandbox 2.\n\nAs expected (now that leoProjects.txt is a binary file) I got the\nfollowing from cvs:\n\nM src/LeoPyRef.leo\n...\ncvs update: nonmergeable file needs merge\ncvs update: revision 1.448 from repository is now in src/\nleoProjects.txt\ncvs update: file from working directory is now in .#leoProjects.txt.\n1.447\n\nTo summarize the update:\n\n- LeoPyRef.leo has been marked as modified (M), but it has **not**\nbeen changed by cvs.\n\n- As expected, leoProjects.txt contains the version from sandbox **1**.\n\nSo far, so good.  But when I opened LeoPyRef.leo I got a huge\nsurprise: the outline contains **both** the node 'changed in main-\nline' and the node 'changed2'!\n\nHow did this happen?  Well, obviously the 'changed in main-line' node\ncame from the cvs update.  I expected that.  The 'changed2' line must\nhave come from the local copy of LeoPyRef.leo.\n\nOnce I knew what to look for it wasn't too hard to discover what had\nhappened.  The 'changed2' is a descendant of a cloned node called '4.4\nprojects'.\n\n- One clone of '4.4 projects' node is a descendant of the @thin\nleoProjects.txt node.\n\n- Another clone of the '4.4 project' is in the LeoPyRef.leo file but\noutside of any @thin node.\n\nSo the 'resurrection' of the 'changed2' node happened while Leo was\nreading leoProjects.txt into LeoPyRef.leo.  The '4.4 projects' node\n**already existed in the outline** before Leo read leoProjects.txt,\nand the present atFile read logic only **adds** nodes, it never\ndeletes nodes.  Thus, the 'changed2' node 'survived' the atFile read\nlogic.  The 'changed2' node became a 'vampire' node that couldn't be\nkilled.\n\nThe problem is far from benign.  Because of clones, the vampire node\nbecame an orphan node in **another** file, namely leoKeys.py.  I tried\ntwo or three times to remove the vampire/orphan node before realizing\nwhat had happened.\n\nThe fix (there is *always* a fix) will require some care.  The present\natFile.read logic is robust because it *doesn't* delete nodes.  It is\nessential that the read logic remain robust.  I suspect the solutions\nwill be as follows:\n\nA. The atFile.read code can not delete the subtree of @thin nodes\ninitially, because it doesn't know whether there will be read errors\nlater.  If there are read errors absolutely nothing must change.  This\nensures that read errors never destroy information.\n\nB. A new post-pass will look for vampire nodes: nodes that were not\nactually read from the derived file.  I think (but haven't proven)\nthat all descendants of vampire nodes are also vampire nodes.  If that\nis so the post-pass will simply delete vampire nodes without worrying\nabout whether they have descendants.\n\nWarning: the new scheme will mean that cvs update can destroy\ninformation that previously existed in the outline.  I believe this is\ncorrect: we assume that derived files are the 'truly meaningful'\nfiles.  Hey, if we are wrong we can always get the old info from\ncvs :-)\nQQQ\n\nAt present, atFile.read contains code to warn of \"resurrected\" nodes,\nand I did indeed get such a warning when the recent problem arose.\n\nAfter a quick look at atFile.read, I strongly suspect that the problem\nremains today pretty much exactly as it was in 2003.  The only\ndifference is that the caching code (the call to\nroot.v.createOutlineFromCacheList(c,aList)) doesn't do the check:\n\\<\\< advise user to delete all unvisited nodes \\>\\>\nthat is done later in read(). That probably should be fixed.\n\nFinding a better solution to vampire nodes has been on the list since\n2003.  It's not easy because it involves the dreaded \"multiple delete\"\nproblem.\n\nHmm.  The present read code *does* delete the tree before reading thin\nexternal files.  So it appears that vampire nodes could only be\nexpected in external files derived from @file nodes.  It may be that\npart of the problem is that somehow Leo thinks that it is reading an\n@file node?? That's pretty weird, but messages about resurrected nodes\nand missing tnode lists did happen.  It's quite a puzzle.\n\nEdward\n", "children": []}, {"h": "Fixed bug 577047: Invalid @path directory does not warn user", "gnx": "ekr.20101124102457.5142", "b": "Specifying a @path directory causes Leo to save an \"@thin file.ext\" node below\nit in Leo's home directory without any warning. The next time Leo is opened it\nissues an error that it can not find the file.\n\nIt should instead issue a warning that the @path directory does not exist.\n\nIf this occurs when the saving of @thin nodes to files is performed as part of\nthe user closing Leo, the closing of Leo should be aborted to prevent the loss\nof data.\n\n===== The Aha\n\nThe computation of at./ic.default_directory **must not** attempt to create\ndirectories! It's too early for that!\n\nThis simplifies all aspects of the code:\n\n- No need to report errors & no need to recover from errors.\n- at.scanAllDirectives can call c.\n\n===== The actual fix:\n\nDue to a previous fix, at.writeAllAtFileNodesHelper does *not* report errors.\nThis causes Leo to clear all dirty bits.\n\nThe proper fix, therefore, is to force a write of the entire @edit tree in\nputVnode if it is orphaned.\n\nSimilarly, putVnode now forces writes of @auto and @shadow trees.\n\n", "children": []}, {"h": "Fixed @shadow problem", "gnx": "ekr.20101124102457.5143", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/dbe098206376ec8d\n\nThe fixes are marked # 2010/10/22 in << handle the opcode >>.\n", "children": []}, {"h": "Don't write tnodes of @file nodes!", "gnx": "ekr.20101124102457.5144", "b": "putVnode must test for @file just like @thin.\n", "children": []}, {"h": "Minor bugs", "gnx": "ekr.20101124102457.5145", "b": "", "children": ["ekr.20101124102457.5146", "ekr.20101124102457.5147", "ekr.20101124102457.5148", "ekr.20101124102457.5149", "ekr.20101124102457.5150", "ekr.20101124102457.5151", "ekr.20101124102457.5152", "ekr.20101124102457.5153", "ekr.20101124102457.5154", "ekr.20101124102457.5155", "ekr.20101124102457.5156", "ekr.20101124102457.5157", "ekr.20101124102457.5158", "ekr.20101124102457.5159", "ekr.20101124102457.5160", "ekr.20101124102457.5161", "ekr.20101124102457.5162", "ekr.20101124102457.5163", "ekr.20101124102457.5164", "ekr.20101124102457.5165", "ekr.20101124102457.5166", "ekr.20101124102457.5167", "ekr.20101124102457.5168", "ekr.20101124102457.5169", "ekr.20101124102457.5170", "ekr.20101124102457.5171"]}, {"h": "Fixed the @test logic for external files", "gnx": "ekr.20101124102457.5146", "b": "", "children": []}, {"h": "Fixed save scrolling bug", "gnx": "ekr.20101124102457.5147", "b": "- Open a node with long (multi-page) body text\n- Move cursor towards the end of the node\n- Save (ctrl+s)\n- Observe how window is scrolled, cursor is moved\n", "children": []}, {"h": "Fixed at-auto-rst crash", "gnx": "ekr.20101124102457.5148", "b": "", "children": []}, {"h": "Don't put &nbsp; in redirected log", "gnx": "ekr.20101124102457.5149", "b": "https://bugs.launchpad.net/leo-editor/+bug/549319\n\nLeo 4.7.1 final, build 3005, February 26, 2010\nPython 2.6.2, qt version 4.5.2\nWindows 5, 1, 2600, 2, Service Pack 3\n\nWhen redirecting the output to the Log pane using g.redirectStderr() and\ng.redirectStdout(), the output displays non-breaking space characters (&nbsp;)\neverywhere there is supposed to be a space.\n\nFor example, if I run print 'Hello World' I get Hello&nbsp;World in the Log\npane. This is really hard to read when you have 50 or 100 lines of numbers from\nthe output of a program.\n", "children": []}, {"h": "Fixed crash in log pane", "gnx": "ekr.20101124102457.5150", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoCommands.py\", line 366, in doCommand\n    val = command(event)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 284, in autoComplete\n    k.masterCommand(event,func=None,stroke=None,commandName=None)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 2606, in masterCommand\n    val = k.handleDefaultChar(event,stroke)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoKeys.py\", line 2664, in handleDefaultChar\n    if stroke.lower() == 'return': stroke = '\\n'\nAttributeError: 'NoneType' object has no attribute 'lower'\n", "children": []}, {"h": "Fixed at-auto-rst bug", "gnx": "ekr.20101124102457.5151", "b": "", "children": []}, {"h": "Fixed erroneous error message in at-auto-rst read logic", "gnx": "ekr.20101124102457.5152", "b": "", "children": []}, {"h": "Fixed crasher in openFileForReading", "gnx": "ekr.20101124102457.5153", "b": "", "children": []}, {"h": "Fixed Java import problem", "gnx": "ekr.20101124102457.5154", "b": "On Windows, using Leo trunk from a few days ago, I get \"error: class\nclass does not end in a newline; one will be added [nl]\" on what seems\nto be every imported java chunk.\n\nThis issue seems to be line-ending related and I duplicated it with a\nsimple test.  When I run the following code from within a Leo node, I\nget the same error as when I tried to import the file.\n", "children": []}, {"h": "Fixed gloto-global-line", "gnx": "ekr.20101124102457.5155", "b": "", "children": []}, {"h": "Fixed rst3 bug with docutils on py3k", "gnx": "ekr.20101124102457.5156", "b": "", "children": []}, {"h": "fixed bug 618474: show_leo_directives", "gnx": "ekr.20101124102457.5157", "b": "https://bugs.launchpad.net/leo-editor/+bug/618474\n\nin core/leoRst the method removeLeoDirectives seems not to remove the leo directives.\nwhich results in @leo directives inside generated rst code.\n\nThe problematic code line is the statement \"g.match_word(s, 0,key)\" in the following block:\n\n                for key in self.leoDirectivesList:\n                    if g.match_word(s, 0,key):\n                        #g.trace('removing %s' % s)\n                        break\n\nAs far as I understand the function match_word, it returns 1 if s contains key at index 0,\nThe self.leoDirectivesList contains all directive like color, language, ... (without @) but\ns is a complete body line that looks like:\n@language rest\n\nThat means language starts at index 1 not at 0.\nchanging the line to\n  g.match_word(s, 1,key)\n\nlet it work correctly in my installation (4.7.1)\n", "children": []}, {"h": "fixed bug 618482: code-mode line feeds", "gnx": "ekr.20101124102457.5158", "b": "https://bugs.launchpad.net/leo-editor/+bug/618482\n\nin leoRst.py:\n\nthe method \"handleCodeMode\" does not preserve line linefeeds of the original code. While this is only annoying for code\nparts it is fatal for doc parts, because rst directives does not work anymore.\n\nThe problem is in the line \"elif not z.rstrip(): pass\" of the following code block at the end of the method\n        for z in result:\n            if z == '': result2.append('\\n\\n')\n            elif not z.rstrip(): pass\n            elif z.endswith('\\n\\n'): result2.append(z) # Leave alone.\n            else: result2.append('%s\\n' % z.rstrip())\n\nCommenting this line out, preserves the linefeeds in the doc part but doubles them in the code part.\n\nThe method \"rstripList\" is responsible for the doubling linefeeds:\n   The lines arguments is a list of lines with (!) trailing linefeeds (\\n),\n\n   The statement s = '\\n'.join(theList).rstrip() doubles therefore the linefeeds\n    replacing the line with s = ''.join(theList).rstrip() works.\n", "children": []}, {"h": "Fixed weave (and many similar) commands", "gnx": "ekr.20101124102457.5159", "b": "", "children": []}, {"h": "Shorter warnings about incompatible gui type", "gnx": "ekr.20101124102457.5160", "b": "", "children": []}, {"h": "Improved @enabled-plugins: ignore lines starting with '@'", "gnx": "ekr.20101124102457.5161", "b": "Also give calmer messages for non-existent plugins.\n", "children": []}, {"h": "Fixed bug in runUnitTestLeoFile", "gnx": "ekr.20101124102457.5162", "b": "Replace ';' by os.pathsep.\n", "children": []}, {"h": "Fixed crasher with del in minibuffer", "gnx": "ekr.20101124102457.5163", "b": "Changed w to self in leoQLineEditWidget.setInsertPoint.\n", "children": []}, {"h": "Ignore F-Keys & Ins in the minibuffer.", "gnx": "ekr.20101124102457.5164", "b": "k.fullCommand now ignores fkeys and Ins.\n", "children": []}, {"h": "Fixed bug 618570: leoRst: option strip_at_file_prefixes...", "gnx": "ekr.20101124102457.5165", "b": "leoRst: option strip_at_file_prefixes does not strip file prefixes in leo 4.7.1\n\nThe problematic code is in method underline of class rstCommands.\nThe last statement:\n\n  return '%s\\n%s\\n\\n' % (p.h.strip(),ch*n)\n\nreturns the full heading and not stripped one, (in the s parameter)\n", "children": []}, {"h": "Fixed bug 622802: Go to clone\" switches to the first chapter", "gnx": "ekr.20101124102457.5166", "b": "If one or more chapters exist (other than main), \"Go to clone\" switches to the\nfirst chapter, whether or not the clone is in that chapter.\n\nThe new code always selects the main chapter.\nThis is the simplest thing that could possibly work.\nOther approaches are fraught with difficulties.\n", "children": []}, {"h": "Fixed unicode bug in files", "gnx": "ekr.20101124102457.5167", "b": "I created a file time.leo. When it's in the dir d:/Dmitry it's being\nopened fine. But when I put it into the dir with Russian characters:\nD:/\u041b\u0438\u0447\u043d\u043e\u0435/\u0412\u0440\u0435\u043c\u044f leo prints squares at the window header and doesn't\nopen the file correctly. This problem existed in one of the revisions,\nthen it was fixed in the last official release. Now it emerged again\nin my Leo 4.8 devel, build 3005\n\nTraceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoGlobals.py\", line 3307, in pr\n    sys.stdout.write(s2)\n  File \"c:\\python31\\lib\\encodings\\cp437.py\", line 19, in encode\n    return codecs.charmap_encode(input,self.errors,encoding_map)[0]\n\nUnicodeEncodeError: 'charmap' codec can't encode character '\\xc2' in position\n31: character maps to <undefined> path changed for @thin\nUnicode-\u00c2-folder/unicode-\u00c2-test2.txt created:\nC:\\Users\\edreamleo\\Unicode-\u00c2-folder\\unicode-\u00c2-test2.txt\n", "children": []}, {"h": "Eliminated check python syntax commands, but retained code", "gnx": "ekr.20101124102457.5168", "b": "@nocolor-node\n\nRemoved the check-all-python-code and check-python code commands\n(and removed the references to these commands in menus.)\n\n- Retained the actual code for scripts.\n- Retained automatic syntax checking of python files on saves\n\nThe problem with separate commands is that they don't necessarily check an\nentire file: things like 'return' in a node that doesn't look it is in a\nfunction.\n\nDirectives and section references are not the problem:\nthey get translated to comments before the check.\n", "children": []}, {"h": "Improved handling of history", "gnx": "ekr.20101124102457.5169", "b": "nav_qt.py just uses these:\n\n    c.goPrevVisitedNode()\n    c.goNextVisitedNode()\n\nand these subsequently use leoCommand.py / class nodeHistory.\n\nThe fix would have to happen in leoFrame.py / selectHelper() which does this:\n\n    c.nodeHistory.update(p) # Remember this position.\n\nIt shouldn't call update() there. Rather, the call should be moved to\nwherever body focus code is.\n\nThe fix was to leoTree.selectHelper and qtBody.onFocusIn.\n\n", "children": []}, {"h": "Remember whether @asis/@nosent existed at read time", "gnx": "ekr.20101124102457.5170", "b": "Removed all traces of the \"significant change\" logic. The read code remembers\nwhether a node existed when Leo loaded the outline.\n\nLeo will warn when writing a node that didn't previously exist. This is a nice\nsimplification of the code.\n", "children": []}, {"h": "Added g.app.config.config_iter", "gnx": "ekr.20101124102457.5171", "b": "This simplifies the print-settings command.\n", "children": []}, {"h": "Code features", "gnx": "ekr.20101124102457.5172", "b": "", "children": ["ekr.20101124102457.5173", "ekr.20101124102457.5174", "ekr.20101124102457.5175", "ekr.20101124102457.5176", "ekr.20101124102457.5177"]}, {"h": "Added g.findTestScript", "gnx": "ekr.20101124102457.5173", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a108d70400b28dc9#\n\ng.findTestScript is an important new pattern for sharing code in Leo scripts,\nincluding scripts in @test nodes.\n\nSuppose there is common code that I want to include in several unit tests::\n\n    class Hello():\n        def __init__(self,name='john'):\n            self.name=name\n            print('hello %s' % name)\n\nI put this in a node called 'Common test code'.\n\nThe unit tests can \"import\" the code as follows::\n\n    exec(g.findTestScript('Common test code'))\n\nNow class Hello is available the test code!\n\nThis is something that I've wanted to do forever.  It's almost too\neasy.  I suppose it's a small security problem, but so is every other\n@test node!\n", "children": []}, {"h": "Added p.deletePositionsInList", "gnx": "ekr.20101124102457.5174", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e3c736bc9f545b7e#\n\nThis is an important new helper.\n", "children": []}, {"h": "Leo is more clever in putting up the Leo id dialog", "gnx": "ekr.20101124102457.5175", "b": "g.app.setLeoID now calls createDefaultGui instead of createTkGui.\n\nWe can *not* put up the LeoID dialog later: it is needed to set\ng.app.nodeIndices, which is used in the read logic for outlines, so it *must* be\nset before we load any Leo file!\n\n", "children": []}, {"h": "Simplified leoPlugins code", "gnx": "ekr.20101124102457.5176", "b": "There are some tricky issues here:\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/4da36f0d897a25e8\n\nImportant: g.loadOnePlugin calls the plugins onCreate method to make up for\nevents that have already been generated. pc.loadOnePlugin does not.\n", "children": []}, {"h": "Patched @test logic", "gnx": "ekr.20101124102457.5177", "b": "# Begin patch\n\n=== modified file 'leo/core/leoTest.py'\n@@ -697,9 +696,10 @@\n\n     # 2010/03/05: set the current directory so that importing leo.core.whatever works.\n     leoDir = g.os_path_finalize_join(g.app.loadDir,'..','..')\n-    os.chdir(leoDir)\n-\n-    os.spawnve(os.P_NOWAIT,sys.executable,args,os.environ)\n\n+    #os.chdir(leoDir)\n+    env = dict(os.environ)\n+    env['PYTHONPATH'] = env.get('PYTHONPATH', '')+';'+leoDir\n+    os.spawnve(os.P_NOWAIT,sys.executable,args,env)\n", "children": []}, {"h": "Commands", "gnx": "ekr.20101124102457.5178", "b": "", "children": ["ekr.20101124102457.5179", "ekr.20101124102457.5180", "ekr.20101124102457.5181", "ekr.20101124102457.5182", "ekr.20101124102457.5183", "ekr.20101124102457.5184"]}, {"h": "Added legend for print-settings command", "gnx": "ekr.20101124102457.5179", "b": "", "children": []}, {"h": "Added code-to-rst command", "gnx": "ekr.20101124102457.5180", "b": "# And deprecated code mode.\n", "children": []}, {"h": "Removed mark-clones command", "gnx": "ekr.20101124102457.5181", "b": "It is useless in the one-node world.\n", "children": []}, {"h": "Improved abbreviation commands", "gnx": "ekr.20101124102457.5182", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/24cb88a8c2a20a07#\n\n- Space activates abbreviations.\n- Multi-line abbreviations handled properly.\n- add-global-abbrev command uses entire selected text as the value of the abbreviation.\n- Inserted abbreviations are undoable.\n- Added support for @data abbreviations and @data global-abbreviations.\n- Added support for @bool enable-abbreviations.\n\napropos-abbreviations\n=====================\n\nWhen abbreviation mode is on (abbrev-mode toggles this mode) Leo will expand\nabbreviations as you type. Type the name of an abbreviation, followed by a\nspace. As soon as you type the space, Leo will replace the name by the\nabbreviations value. You can undo the replacement as usual.\n\nNote that defining any abbreviation automatically turns on abbreviation mode.\n\nThe add-global-abbreviation command (<alt-x>add-gl<tab><return>) takes the\nselected text as the replacement value of the abbreviation. The minibuffer\nprompts you for the name of the abbreviation.\n", "children": []}, {"h": "Completed cascade-windows and minimize-all-windows commands", "gnx": "ekr.20101124102457.5183", "b": "", "children": []}, {"h": "Created head-to-prev-node and tail-to-next-node commands", "gnx": "ekr.20101124102457.5184", "b": "@nocolor-node\n\nhttps://bugs.launchpad.net/leo-editor/+bug/611413\n\nThese work around the lack of AI in Python's importer.\n\nAdded leoImport.findClass helper.\n\nThe head-to-prev-node command moves non-empty text preceding a class, method or\nfunction definition to the end of the previous sibling node.\n\nThe tail-to-next-node command moves non-empty text following a class, method or\nfunction definition to the start of the next sibling node.\n", "children": []}, {"h": "Documentation", "gnx": "ekr.20101124102457.5189", "b": "", "children": ["ekr.20101124102457.5190", "ekr.20101124102457.5191"]}, {"h": "Created introductory slide shows", "gnx": "ekr.20101124102457.5190", "b": "", "children": []}, {"h": "Reorganized Users Guide", "gnx": "ekr.20101124102457.5191", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d02df89c0b831a7c\n\nI created my own copy of the home page:\n\n    Files-->@edit leo_toc.html\n\nThis allows me to group items without creating special pages.\n", "children": []}, {"h": "Features", "gnx": "ekr.20101124102457.5192", "b": "", "children": ["ekr.20101124102457.5193", "ekr.20101124102457.5194", "ekr.20101124102457.5195", "ekr.20101124102457.5196", "ekr.20101124102457.5197", "ekr.20101124102457.5198", "ekr.20101124102457.5199", "ekr.20101124102457.5200", "ekr.20101124102457.5201"]}, {"h": "New sentinels", "gnx": "ekr.20101124102457.5193", "b": "", "children": []}, {"h": "Don't create @chapter node for new file", "gnx": "ekr.20101124102457.5194", "b": "I think @chapters node shouldn't be in a new leo file, but it should\nbe created when the first chapter is created.\n\nDitto for the chapter selector toolbar button.\n", "children": []}, {"h": "Improved install instructions & logic", "gnx": "ekr.20101124102457.5195", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/a5a47afa65af9a37\n\nThe following changes are on the trunk, and also on Leo's web site:\n\n- In home page, added link to Install page, just above the Beginner's Guide.\n\n- Added more explicit instructions for installing Tk and Qt.\n\n- In step 6 of the Windows install steps, the \"assoc .leo=LeoFile\"\n  is on a line by itself.\n\n- Updated home page to indicate that Leo requires Python and PyQt.\n  I also revised and simplified the introduction in other ways.\n  Ditto for description of Leo on SourceForge.\n\n- Changed \"%1\" to \"%*\" throughout the installation instructions.\n\n- Made batch files given in Installing Leo and Running Leo the same.\n\n- The dialogs that ask for the Leo ID now tells why Leo needs it.\n\n- Just before raising the dialog that asks for the Leo ID, Leo attempts\n  to create the Qt Gui first, and then the Tk Gui if Qt does not exist.\n  This should make it much less likely that a prompt for the id\n  will be sent to the console.\n\n\n2. The readme.txt file for 4.7.1-final does not mention that Python and PyQt is\n   required.\n\nreadme.txt does say it has a new Windows installer. This\nled me to believe -- erroneously -- that the Windows installer is all\nI would need to download and install, since it's typical for most open\nsource programs I've used to have everything needed for the install\n(for example. .NET) in the single Windows download.\n\n2b. And perhaps the readme.txt file as well?\n\nCan the [install] page be updated to make this clearer?\n\n4. When I first went to the Install page, I clicked on the link for\n\"Installing Leo on Windows\", got to the end of the steps and saw the\nnext section was \"Tracking the development version\" which I wasn't\ninterested in doing so I didn't read any further.\n\nClicking on the installer-created Windows link for Leo on the Start\nMenu did nothing. Eventually I found the Windows section under\n\"Running Leo\" and learned it was required to run Leo the first time\nfrom a console window and not by launching it from Windows.\n", "children": []}, {"h": "DnD outline nodes", "gnx": "ekr.20101124102457.5196", "b": "DnD creates @file or @auto nodes if appropriate\n", "children": []}, {"h": "write @edit nodes like @nosent nodes", "gnx": "ekr.20101124102457.5197", "b": "", "children": []}, {"h": "Leo now uses PyEnchant to check spelling", "gnx": "ekr.20101124102457.5198", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/62ac1977b3704590#\n\n", "children": []}, {"h": "Improved @url nodes", "gnx": "ekr.20101124102457.5199", "b": "Having to type the url after @url in headline is annoying.\n\nThe @url handler should look into the first line of body for url, if the text in\nthe headline is not an url. This way, the headline could actually be\ndescriptive.\n\nI know some plugin does this, but there is no reason why this couldn't be the\ndefault behavior.\n", "children": []}, {"h": "Made sure that all @auto nodes end with a newline", "gnx": "ekr.20101124102457.5200", "b": "The fix was to the \"if not trailingNewlineFlag:\" code at the end of at.putBody.\n", "children": []}, {"h": "Improved language support", "gnx": "ekr.20101124102457.5201", "b": "- improved support for elisp.\n\n    - Use @language lisp instead of @language elisp.\n\n- added importer for .ini files.\n", "children": []}, {"h": "Settings", "gnx": "ekr.20101124102457.5202", "b": "", "children": ["ekr.20101124102457.5203", "ekr.20101124102457.5204", "ekr.20101124102457.5205", "ekr.20101124102457.5206", "ekr.20101124102457.5207", "ekr.20101124102457.5208", "ekr.20101124102457.5209"]}, {"h": "Allow multiple files on the command line", "gnx": "ekr.20101124102457.5203", "b": "Refactored g.app.config.readSettingsFiles.\n\nSettings now honored in workbook.\n\n* Window size not honored when opened from menu.\n", "children": []}, {"h": "Allow proportional fonts in plain text", "gnx": "ekr.20101124102457.5204", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e6075a699909db53\n\nYou can now set a proportional font to use in all \"@language plain\" nodes\n\nSpecify fonts in @font nodes:\n\n@font plain null font\n\nplain_null_font_family = Times New Roman\nplain_null_font_size = 16\nplain_null_font_slant = roman\nplain_null_font_weight = bold\n\nThat is, the actual font specs are in the body text.  Everything\nexcept @font is ignored in the headline.\n\nSpecify colors in @color nodes:\n\n@color plain null color = black\n", "children": []}, {"h": "Allow changing minibuffer colors", "gnx": "ekr.20101124102457.5205", "b": "Added the following options with the indicated defaults.\n\n\\@color minibuffer_background_color = lightblue\n\\@color minibuffer_warning_color = lightgrey\n", "children": []}, {"h": "Added support for @string qt-toolbar-location", "gnx": "ekr.20101124102457.5206", "b": "Valid values are top,bottom,left,right\n", "children": []}, {"h": "Support @bool write_expansion_bits_in_leo_files", "gnx": "ekr.20101124102457.5207", "b": "", "children": []}, {"h": "Added support for slideshow plugin", "gnx": "ekr.20101124102457.5208", "b": "Command-line args\n", "children": []}, {"h": "New settings for abbreviations", "gnx": "ekr.20101124102457.5209", "b": "@bool enable-abbreviations (default: False)\n\n  When true, enables substitution of abbreviations.\n\n@data global-abbreviations\n@data abbreviations\n\n  In both cases, body text contains lines of\n  the form::\n\n   name=value\n\n  name is the abbreviation name, value is the substituted text. Whitespace is\n  ignore around the name, but is significant in the value. Abbreviation names\n  may contain only alphabetic characters, but may start with the '@' sign.\n\n  By *convention* @data global-abbreviations setting should be defined in\n  myLeoSettings.leo, while @data abbreviations should be defined in other .leo\n  files. Regardless of where they are defined, abbreviations in @data\n  abbreviation nodes will override settings (with the same name) in @data\n  global-abbreviations nodes.\n", "children": []}, {"h": "New in 4.8 b1", "gnx": "ekr.20101124102457.5210", "b": "", "children": ["ekr.20101124102457.5211", "ekr.20101124102457.5216", "ekr.20101124102457.5217", "ekr.20101124102457.5218", "ekr.20101124102457.5219"]}, {"h": "Bugs", "gnx": "ekr.20101124102457.5211", "b": "", "children": ["ekr.20101124102457.5212", "ekr.20101124102457.5213", "ekr.20101124102457.5214", "ekr.20101124102457.5215"]}, {"h": "Fixed bug 603720: @auto parsing error on dedented triple quote string", "gnx": "ekr.20101124102457.5212", "b": "The code that calculates the end of a block of indented Python code now takes\ntake more care with backslashes.\n", "children": []}, {"h": "Fixed bug 597757: c.frame.body.getSelectedText() doesn't work in added editors", "gnx": "ekr.20101124102457.5213", "b": "", "children": []}, {"h": "Fixed bug 604115: chapter-{clone,copy}-node-to broken", "gnx": "ekr.20101124102457.5214", "b": "- Added better prompts for move/copy/clone commands.\n\n- Undo/redo of these commands select the main chapter.\n", "children": []}, {"h": "Made sure proper install.txt appears", "gnx": "ekr.20101124102457.5215", "b": "@nocolor-node\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/dea95cd8ab976cac\n\n\n> > * The file 'INSTALL.TXT' contains the outline text with sentinels from\n> > 'Chapter 1: Installing Leo'\n\nThere are *two* files called install.txt: the one that should\ncontain installation instructions and the one that contains the\n\"Installing Leo\" chapter.\n\nThe solution was to change install.txt to installing.txt in the users guide.\n", "children": []}, {"h": "Completed cascade-windows and minimize-all-windows commands", "gnx": "ekr.20101124102457.5216", "b": "", "children": []}, {"h": "Improved present autocompleter", "gnx": "ekr.20101124102457.5217", "b": "Allow \"always on\" operation:\n\n- Ctrl-space is now bound to force-auto-completion\n\n- Remove Alt-1 and Alt-2 default bindings.\n", "children": []}, {"h": "Created head-to-prev-node and tail-to-next-node commands", "gnx": "ekr.20101124102457.5218", "b": "http://bugs.launchpad.net/leo-editor/+bug/611413\n\nThese work around the lack of AI in Python's importer.\n\nThe head-to-prev-node command moves non-empty text preceding a class, method or\nfunction definition to the end of the previous sibling node.\n\nThe tail-to-next-node command moves non-empty text following a class, method or\nfunction definition to the start of the next sibling node.\n", "children": []}, {"h": "Put non-def code in their own node", "gnx": "ekr.20101124102457.5219", "b": "Fixed wishlist bug 670744: add a setting to put inter-def code in its own node\n\nAdded support for @bool at_auto_separate_non_def_nodes option.\nThe default (legacy mode) is False.\n", "children": []}, {"h": "New in 4.8 rc1", "gnx": "ekr.20101124102457.5220", "b": "", "children": ["ekr.20101124102457.5221", "ekr.20101124102457.5222", "ekr.20101124102457.5223", "ekr.20101124102457.5224", "ekr.20101124102457.5225", "ekr.20101124102457.5226"]}, {"h": "Revised many plugins", "gnx": "ekr.20101124102457.5221", "b": "@nocolor-node\n\nRemoved the keybindings.py plugin.  The print-bindings command should suffice.\n\nThe plugins_menu.py has been renamed old_plugin_menu.py to indicate that it\nneeds a lot of work to become functional.\n\nThe following plugins are now gui-independent (the used to be Tk only):\n\nat_produce.py\nchapter_hoist.py\nimport_cisco_config.py\nmacros.py\nmod_read_dir_outline.py\nmultifile.py\nread_only_nodes.py\nword_count.py\nxsltWithNodes.py\n\nI also registered the menu2 event instead of the open2 event in all plugins that\nuse this event to create menus. This is required because a relatively recent\nchange creates menus *after* the open2 event happens.\n", "children": []}, {"h": "Fixed crasher in UNL.py: recursiveUNLSearch", "gnx": "ekr.20101124102457.5222", "b": "", "children": []}, {"h": "Big improvement to execute-script command", "gnx": "ekr.20101124102457.5223", "b": "execute-script now calls execfile (or its equivalent when using Python 3k)\nwhen @bool write_script_file = True.\n\nThis allows pdb to show the text of scripts!\n", "children": []}, {"h": "Added extract-python-method command", "gnx": "ekr.20101124102457.5224", "b": "This should have been done *ages* ago. The command makes it easy to put python\nmethods in separate nodes.\n\nSelect a range of text, the first line of which starts with 'def foo (...)'\n\nDo alt-x extract-python-method (or ctrl-p if you are repeating the command).\n\nWhat happens:\n\n- Creates a new child node whose headline is 'foo'.\n\n- The body of foo contains all the selected text, properly indented.\n\nThe command is undoable.\n", "children": []}, {"h": "Open the default leo file if possible", "gnx": "ekr.20101124102457.5225", "b": "Leo opens the file specified by the default_leo_file setting if it exists.\n\nNew in 4.8 rc1: if default (workbook) file does not exist Leo will\nopen an empty file and name is to be the default file.\n", "children": []}, {"h": "Fixed problems with installer", "gnx": "ekr.20101124102457.5226", "b": "The installer now makes proper entries in the Windows start menu.\n", "children": []}, {"h": "New in 4.8 final", "gnx": "ekr.20101124102457.5227", "b": "- Fixed key redefinition message.\n", "children": []}, {"h": "Latest version", "gnx": "edream.110203163054.63", "b": "", "children": ["ekr.20110531155858.19246"]}, {"h": "Leo 4.9 Release notes", "gnx": "ekr.20110531155858.19246", "b": "@language rest\n\nLeo 4.9 final              June 21, 2011\n\nLeo 4.9 final is now available at:\nhttp://sourceforge.net/projects/leo/files/\n\nLeo is a text editor, data organizer, project manager and much more.\nSee: http://webpages.charter.net/edreamleo/intro.html\n\nThe highlights of Leo 4.9:\n--------------------------\n\n- The Qt gui completely replaces the Tk gui--Qt gui now has all essential\n  features of Tk, including plugins.\n\n- Completed Leo's autocompleter.\n\n- The rendering pane can now display movies, html, svg images, etc.\n\n- Nodes may contain multiple @language directives.\n\n- Leo highlights URL's everywhere. Ctrl-click URL's opens them in your web\n  browser. \n\n- Leo uses an @file node's extension by default if there is no @language\n  directive in effect.\n  \n- Unified extract and import commands.\n\n- Leo can now colorize multiple @language directives in a single node.\n\n- Plain up/down arrow keys in headline-editing mode select a new node.\n\n- New commands to insert, delete, change or print uA's.\n\n- Added namespace directive to .leo files.\n\n- Fixed many bugs, some important, most quite minor.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/projects/leo/files/\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20110601105631.19359", "ekr.20110531155858.19830", "ekr.20110602091552.16903", "ekr.20110531155858.20246", "ekr.20110604043410.17808", "ekr.20110611055444.16617", "ekr.20110613172008.14775", "ekr.20110616100929.14794", "ekr.20110620083705.14902"]}, {"h": "Deprecated/removed features", "gnx": "ekr.20110601105631.19359", "b": "- Leo no longer supports the Tk gui. The Qt gui now does everything\n  the Tk gui did, and more, and better.\n\n- Removed show/hide/toggle minibuffer commands. The minibuffer is an essential\n  part of Leo.\n  \n- These settings are no longer used::\n    \n    @string selected-background-color\n    @string selected-command-background-color\n    \n- The import-at-root command is no longer supported.\n", "children": []}, {"h": "Bugs fixed in b1", "gnx": "ekr.20110531155858.19830", "b": "", "children": ["ekr.20110604043410.17811", "ekr.20110604043410.17812"]}, {"h": "Numbered bugs", "gnx": "ekr.20110604043410.17811", "b": "- Fixed bug 682561: pyenchant install problem.\n\n  https://bugs.launchpad.net/leo-editor/+bug/682561\n\n- Fix bug 690260: g.es sends to wrong tabbed pane.\n\n  https://bugs.launchpad.net/leo-editor/+bug/690260\n\n- Fixed bug 783617: Can't enter text directly in the Find panel\n\n  https://bugs.launchpad.net/leo-editor/+bug/783617\n\n- Fixed bug 681797: Shift-Delete not working in Qt\n\n  https://bugs.launchpad.net/leo-editor/+bug/681797\n\n- Fixed bug 622819: Ctrl-Shift movement is incorrect\n\n  https://bugs.launchpad.net/leo-editor/+bug/622819\n\n  Ctrl-Shift movement (back-word-extend-selection, forward-word-extend-selection)\n  was incorrect when there is an existing selection, which was created by some\n  method other than Ctrl-Shift movement.\n\n- Resolved bug 323967: leo overrides minibuffer background color.\n\n  https://bugs.launchpad.net/leo-editor/+bug/323967\n\n- Fixed actionscript colors for parens.\n\n  http://groups.google.com/group/leo-editor/browse_thread/thread/ee09fb2c2a5316f2/490fa7cddab36fab\n\n- Fixed Bug 760531:Spurious overwrite warnings.\n\n  https://bugs.launchpad.net/leo-editor/+bug/760531\n\n- Fixed important bug involving orphan nodes\n\n  http://groups.google.com/group/leo-editor/browse_thread/thread/861a0d156b16090f\n\n  This was an important bug. It's been around for a very long time. What I did:\n        \n    - putVnode no longer clears the orphan bit.\n    \n    - at.read issues a warning and does not read the external file if the orphan bit is set.\n\n- Fixed bug: show-invisibles now correctly shows blank lines.\n\n- Fixed bug 766747: fill-paragraph doesn't respect setting from set-fill-column.\n\n  https://bugs.launchpad.net/leo-editor/+bug/766747\n\n  The fill-paragraph, center-line and center-region now all use the fill column\n  if it has been explicitly set (and greater than zero). Otherwise, these\n  commands use the @pagewidth value. Previously, the fill-paragraph command used\n  the page width set by the @pagewidth directive, or an initial value from a\n  @setting if no @pagewidth directive was in effect.\n\n- Fixed bug 583878: Leo should warn about @comment/@delims clashes.\n\n  https://bugs.launchpad.net/leo-editor/+bug/583878\n\n  Leo now warns when a node contains both @comment and @delims directives.\n\n- Fixed bug 778204: @verbatim not forbidden in body text.\n\n  https://bugs.launchpad.net/leo-editor/+bug/778204\n\n  Leo now generates an error for sentinels that look like @verbatim.\n\n- Fixed bug 784920: @raw mode does not ignore directives.\n\n  https://bugs.launchpad.net/leo-editor/+bug/784920\n\n- Fixed bug 527717: Qt gui should enable/disable menu items.\n\n  https://bugs.launchpad.net/leo-editor/+bug/527717\n\n- Fixed bug 580328: c.frame.toggleSplitDirection() doesn't preserve existing ratio.\n\n  https://bugs.launchpad.net/leo-editor/+bug/580328\n\n- Fixed bug 581031: Scrollbar position is not preserved when\n  c.frame.toggleSplitDirection() is executed.\n\n  https://bugs.launchpad.net/leo-editor/+bug/581031\n\n  toggleSplitDirection new ensures that both the selected outline node *and* the\n  cursor in the body pane are visible.\n\n\n- Fixed bug 525004: bash code not colored properly.\n\n    https://bugs.launchpad.net/leo-editor/+bug/525004\n\n    1. Fixed an off-by-one error in getNextToken. This was causing the havoc in\n       the shell coloring.\n    \n    2. match_mark_following now does *nothing* (fails) if there is no next token.\n       This is a major change, and it allows more rules to match in the shell\n       colorer.\n       \n- Fixed bug 626587: Menus & dialogs now say \"Flatten Selected Outline\".\n\n  https://bugs.launchpad.net/leo-editor/+bug/626587\n", "children": []}, {"h": "Other bugs", "gnx": "ekr.20110604043410.17812", "b": "** Changing @language directives now forces a recoloring.\n\n  This fixed the most annoying hangnail remaining in Leo.\n\n** Removed remaining tk-isms from Leo's core.\n\n  These were real bugs: they prevent emacs commands from working.\n\n  Completely rewrote transposeWords.\n  \n** mod_autosave plugin no longer registers redundant idle-time handlers.\n\n** Fixed mod_http plugin.\n\n** Mark external file dirty when dragging node.\n\n- Disabled the rst button in the contextmenu.\n\n- Fixed horizontal scroll glitch in log pane (Python 2.x).\n  qtLog.put sets horizontal scrolling to zero.\n  This is a workaround to a glitch (Python 2.x only),\n  but in fact it's generally useful.\n\n- Fixed bug: auto-rst gives spurious overwrite message.\n\n- Added bindings to all text widgets in the tab frame.\n\n- Fixed goto-global-line problems.\n\n- Restore positions of non-tabbed windows.\n\n- Fixed Python 3.2 ua problems.\n\n- Fixed bug in p._adjustPostionBeforeUnlink and simplified code.\n\n- Fixed crash in archivedPositionToPosition.\n\n- Fixed top-level uA's. There was a misspelling of 'unknownAttributes' in\n  putVnode. This caused the uA for the first top level node in the outline to be\n  cleared on save and by some copy paste ops.\n\n- Fixed bug: Leo now ignores f-keys in find/replace patterns.\n\n- c.bringToFront now activates the window.\n\n- Fixed nav_qt plugin.\n\n- Fixed completer focus problems.\n\n- Fixed MacOS Command-C bug.\n\n- Fixed major problem with multiple body editors\n", "children": []}, {"h": "Major improvements", "gnx": "ekr.20110602091552.16903", "b": "- Leo highlights URL's everywhere. Ctrl-click URL's opens them in your web\n  browser.\n  \n- Nodes may contain multiple @language directives.\n\n- Use @file extension by default if there is no @language directive in effect.\n  This is oh so useful.\n\n- Unified extract commands.  This command creates a child node from the selected\n  body text as follows:\n    \n    1. If the selection starts with a section reference, the section name become the\n       child's headline. All following lines become the child's body text. The\n       section reference line remains in the original body text.\n       \n    2. If the selection looks like a Python class or definition line, the\n       class/function/method name becomes child's headline and all selected lines\n       become the child's body text.\n       \n    3. Otherwise, the first line becomes the child's headline, and all selected\n       lines become the child's body text.\n\n    Note that the extract-section-names command remains.\n    The extract-section and extract-python-method commands are gone.\n\n- The import-file commands replaces all the following commands::\n    \n    import-at-file                    \n    import-cweb-files         \n    import-derived-file       \n    import-flattened-outline      \n    import-noweb-files\n    \n  Leo chooses one of the above commands as follows.  First, if the file looks\n  like an external file that Leo wrote, the command works like\n  import-derived-file command.  Otherwise, the file's extension determines the\n  importer::\n        \n        .cw, .cweb:     import-cweb-files\n        .nw, .noweb:    import-noweb-files\n        .txt:           import-flattened-outline\n        all others:     import-at-file\n    \n  The import-at-root command is no longer supported.\n", "children": ["ekr.20110602091552.16904", "ekr.20110602091552.16905"]}, {"h": "Completed Leo's autocompleter", "gnx": "ekr.20110602091552.16904", "b": "Terminology: the *legacy* (aka tabbed) autocompleter shows completions in Leo's\ntabbed pane. The *new* (aka qcompleter) autocompleter shows completions in or\nnear the body pane.\n\nAppearance\n==========\n\nThere is little change to the legacy completer, except that no text is\nhighlighted in the body pane during completion. This is calmer than before.\nFurthermore, there is no longer any need for highlighting, because when the user\ntypes a backspace the legacy completer now simply deletes a single character\ninstead of the highlighted text.\n\nOne minor change: the legacy completer now *does* insert characters that do\nnot match the start of any possible completion. This is an experimental feature,\nbut it might play well with using codewise completions as a fallback to\nLeo-related completions.\n\nFunction and design\n===================\n\nBoth the legacy and new completer now work *exactly* the same way, because they\nboth use the AutoCompleterClass to compute the list of completions.\n\nThe strict \"stateless\" requirement means that the \"intermediate\" completions\nmust be entered into the body pane while completion is active. It works well as\na visual cue when using the tabbed completer: indeed, the tabbed completer would\nbe difficult to use without this cue.\n\nThe situation is slightly different with the qcompleter. Adding code before the\nuser accepts the completion might be considered an \"advanced\" feature. However,\nit does have two important advantages, especially when \"chaining\" across\nperiods: it indicates the status of the chaining and it limits what must appear\nin the qcompleter window.\n\nCodewise completions\n====================\n\nThe codewise-oriented completions appear to work well. In large part,\nthis is due to adding the global \"self.\" completions to all class-related\ncompletions (kind == 'class' in ac.get_codewise_completions). This looks like a\nreally good hack, and it eliminates the need for the ContextSniffer class.\n\nPerformance\n===========\n\nPerformance of Leo-related completions is *much* better than before. The old\ncode used Python's inspect module and was horribly complex. The new code uses\neval and is perfectly straightforward.\n\nThe present codewise-related code caches completions for all previously-seen\nprefixes. This dramatically speeds up backspacing. Global caching is possible\nbecause completions depend *only* on the present prefix, *not* on the presently\nselected node. If ContextSniffer were used, completions would depend on the\nselected node and caching would likely be impractical. Despite these\nimprovements, the performance of codewise-oriented completions is noticeably\nslower than Leo-related completions.\n\nPerformance notes\n=================\n\nThe ac.get_cached_options cuts back the prefix until it finds a cached prefix.\nac.compute_completion_list then uses this (perhaps-way-too-long-list) as a\nstarting point, and computes the final completion list by calling\ng.itemsMatchingPrefixInList.\n\nThis may not be absolutely the fastest way, but it is much simpler and more\nrobust than attempting to do \"prefix AI\" based on comparing old and new\nprefixes. Furthermore, this scheme is completely independent of the how\ncompletions are actually computed. The autocompleter now caches options lists,\nregardless of whether using eval or codewise.\n\nIn most cases the scheme is extremely fast: calls to get_completions replace\ncalls to g.itemsMatchingPrefixInList. However, for short prefixes, the list that\ng.g.itemsMatchingPrefixInList scans can have thousands of items. Scanning large\nlists can't be helped in any case for short prefixes.\n\nHappily, the new scheme is still *completely* stateless: the completionDict does\n*not* define state (it is valid everywhere) and no state variables had to be\nadded. In short, the new caching scheme is much better than before, and it\nprobably is close to optimal in most situations.\n\n", "children": []}, {"h": "Greatly improved the viewrendered plugin", "gnx": "ekr.20110602091552.16905", "b": "", "children": []}, {"h": "New and improved features", "gnx": "ekr.20110531155858.20246", "b": "", "children": ["ekr.20110602091552.16907", "ekr.20110602091552.16909", "ekr.20110602091552.16913", "ekr.20110602091552.16915", "ekr.20110602091552.16911", "ekr.20110602091552.16917"]}, {"h": "Colorizing improvements", "gnx": "ekr.20110602091552.16907", "b": "- Support multiple @language directives in a single node\n  As with @color directives, only unambiguous @language directives affect the\n  default coloring of descendant nodes.\n\n- Colorize url's in the body text. You can open url's by control-clicking on\n  them, or by using the open-url command.\n\n- Added support for cython colorizing.\n\n- Leo ignores (and does not color) @language directive for unknown languages.\n\n- Leo completely recolors nodes when you change @language directives by typing.\n", "children": []}, {"h": "New command-line arguments & settings", "gnx": "ekr.20110602091552.16909", "b": "- The --no-splash command-line option suppresses the splash screen.\n  Leo puts up no splash screen when the --silent\n  or --script command-line options are given.\n\n- Added @bool view-rendered-auto-create setting.\n    \n- Added @bool use_qcompleter setting.\n\n- Added @bool auto_tab_complete setting.\n\n- Added @bool single_click_auto_edits_headline setting.\n\n- Removed @bool use_codewise setting.\n\n- You now may set icon button colors in the Qt stylesheet.\n", "children": []}, {"h": "Gui improvements", "gnx": "ekr.20110602091552.16913", "b": "- If you type a *plain* up/down arrow key while editing a headline, Leo will act\n  as if you had typed the corresponding *alt*- arrow key. That is, Leo will end\n  editing of the headline and go to the next previous node. Leo will end editing\n  even if there is no next/ previous node, which is convenient.\n\n- A single click on an already-selected tree node edits the headline\n  Enabled only if @bool single_click_auto_edits_headline = True.\n\n- Added a splash screen\n\n  The --no-splash command-line option suppresses the splash screen. In addition,\n  Leo puts up no splash screen when the --silent or --script command-line\n  options are given. To change the splash screen, replace\n  leo\\Icons\\SplashScreen.jpg with another image.\n\n- The apropos commands now print in a separate area if possible. The commands\n  use the viewrendered plugin by default. This makes the apropos messages much\n  more visible.\n\n- Handle click events like alt-x or ctrl-g Clicking in the minibuffer now is\n  equivalent to alt-x, provided that the minibuffer is not in use. Clicking most\n  places outside the minibuffer is equivalent to ctrl-g. Catching clicks is much\n  safer than catching focus events.\n\n- The first loaded file sets tabbed gui size\n\n- Enter insert mode after ctrl-h.  This is a vim-related improvement.\n\n- Disabled find/change text areas in find panel.  This is less confusing.\n", "children": []}, {"h": "Improved commands", "gnx": "ekr.20110602091552.16915", "b": "- Improved the clone-find-all command. The descendants of previously found\n  (cloned) nodes don't get added again. The clone-find-all pattern now defaults\n  to find text.\n\n- Improved the forward and backward by sentences commands Leo's sentence related\n  functions now stop at empty lines, skip periods within words, stop at\n  sentences ending in non-periods and stop at the end or beginning of the\n  buffer.\n\n- Improved the print-bindings command; it now shows were bindings came from.\n\n- Improved the reformat-paragraph command. The command detects paragraphs more\n  reliably. The next line is now visible, which is a big improvement.\n\n- Added patch to g.wrap_lines from Jos\u00e9 Rojas Echenique\n  It regularizes the number of spaces after periods.\n\n- Improved expansion of abbreviations. Abbreviations are checked any time a\n  non-word character is typed. In particular, newlines trigger abbreviations,\n  which I find very helpful, although I did then have to remove newlines from my\n  abbreviations. Control sequences do not trigger expansions.\n\n- Improved handling of @url nodes. The new rule is simple: if the body text\n  contains any text the first line of the body text is taken to be the url.\n  There is no longer any need to put '--' in the headline. More importantly, you\n  can put anything you like in the body text following the first line. Other\n  url's, notes, even .. graphics:: directives for the viewrendered plugin.\n\n- Improved the clean-all-lines command. It is now much faster and has better\n  feedback.\n", "children": []}, {"h": "File handling improvements", "gnx": "ekr.20110602091552.16911", "b": "- Added namespace and Leo comment lines to .leo files\n\n- Leo opens leoSettings.leo only once\n\n- Fixed Bug 745824: @doc duplicates comment delims in html files\n  https://bugs.launchpad.net/leo-editor/+bug/745824e\n  \n- Leo no longer wraps @doc lines. This ensures that Leo does not change files\n  unnecessarily.\n", "children": []}, {"h": "Scripting improvements", "gnx": "ekr.20110602091552.16917", "b": ".. _`Runwith class`: http://groups.google.com/group/leo-editor/browse_thread/thread/b8e8fbf6d97fa9f2/a4537fafaf2442ba\n\n- Added namespace arg in c.executeScript\n\n- Put Kent Tenney's `Runwith class`_ in scripts.leo and contrib.\n\n  Kent writes, \"I've had endless problems with interpreter versioning, leading\n  me create the Runwith class. It writes a file to disk, makes it executable,\n  runs it, captures exitcode, err and output, removes the files, provides\n  reports. This provides complete decoupling from Leo.\"\n\n- Call os.chdir when executing scripts.\n", "children": []}, {"h": "New in 4.9 b2", "gnx": "ekr.20110604043410.17808", "b": "- Double-clicking a headline now colorizers the headline exactly the same way as\n  when editing the headline with ctrl-H. This was a serious problem for those\n  with dark window-color schemes.\n  \n- The distribution script now ensures that leo\\plugins\\spellpyx.txt contains\n  Linux-style newlines. This prevents crashes in the PyEnchant spell checker.\n  \n- Leo imports .cfg files just like .ini files.\n\n- Fixed crasher in graphcanvas plugin caused by a bug in CommandChainDispatcher.add.\n", "children": []}, {"h": "New in 4.9 b3", "gnx": "ekr.20110611055444.16617", "b": "", "children": ["ekr.20110611055444.16618", "ekr.20110611055444.16654", "ekr.20110611055444.16726", "ekr.20110611092035.16493"]}, {"h": "Bugs fixed", "gnx": "ekr.20110611055444.16618", "b": "- Fixed ancient, major bug: F3 now makes sure to save headline changes\n\n- Fixed old bug: set-find-x commands no longer abort find commands\n\n  The commands that switch find scope, set-find-xxx, no longer terminate the\n  find command, if one is active.  This is an old bug, and it's good to fix it. \n\n- Fixed recent bugs in the viewrendered plugin.\n\n  An earlier rev fixed a bug that effectively destroyed the viewrendered plugin.\n  It was caused by the new convention that alleviates the need for many\n  \\@language directives. The fix was simply to enable the update_rst method if\n  the massaged p.b is not empty.\n\n- Fixed chapters problems\n\n    http://groups.google.com/group/leo-editor/browse_thread/thread/3f15a855ca38b26e\n    \n    The new code is more relaxed about where @chapter nodes may reside.  They\n    are always *created* as the last child of the first @chapters node in the\n    outline (the @chapters, plural, node is created as needed).  However, you may\n    move them while in the \"main\" chapter, with no ill effects.  In fact, you could\n    swap @chapter nodes with the same name: when you select a chapter, Leo will use\n    (show) the first node it finds. \n    \n    The new code is now both more careful and more tolerant of @chapter nodes\n    deleted by hand.  The chapter will still appear in the dropdown list: if you\n    select it you will give a polite warning.  That's all.  In particular, the\n    deleted chapter will *remain* in the dropdown list until you use the proper\n    chapter-remove command.  That's about the only sane alternative: it allows you\n    to resurrect the chapter, by hand or with an undo. \n    \n    This is all made possible because the new code is almost completely stateless.\n    The only exception is the saved position used to select a node when selecting a\n    chapter. The old position-based findPositionInChapter method has been simplified\n    to make it work more reliably. It first looks for a \"perfect\" match using\n    positions, and then degrades to looking for a vnode match. In practice, most\n    matches are, in fact, perfect. The \"imperfect\" case typically happens when the\n    user alters nodes in @chapter trees by hand in the \"main\" chapters.\n    \n    Technical highlights:\n        \n    - The check for c.positionExists(p) in c.setCurrentPosition continues to fail\n      when deleting @chapter nodes. However, the code now simply falls back to\n      c.rootPosition, without any apparent harm.\n      \n    - The chapterController and chapter classes are now completely stateless, except\n      for chapter.p.\n      \n        A. chapter.findPositionInChapter has been simplified and generalized. It now\n           falls back to a reasonable value, based on p.v, if chapter.p does not\n           exist.\n           \n        B. All chapterController code now recomputes the location of @chapters and\n           @chapter nodes whenever those locations are needed.\n           \n        C. All chapter commands are unchanged in their actual workings, but all contain\n           a care \"preamble\" of checking code.\n           \n- Added unit test for all chapter commands.  All interactive commands now have\n  an xByName helper for use by unit tests.\n  \n- Added lockout to leoQtTreeTab.  This prevents flash during the rename chapter command.\n\n- Rewrote chapter.chapterSelectHelper.  This reduces, but does not eliminate, the\n  number of warnings given by c.setCurrentPosition.\n\n\n- Fixed recent bug: handle 'Escape' character properly\n\n  The fix was a last-minute adjustment in leoQtEventFilter.create_key_event.\n\n\n- Fixed caps-lock problem\n\n  The fix was yet another last-minute fix leoQtEventFiler.create_key_event.\n\n- Made sure all keys contribute to lossage\n", "children": []}, {"h": "Simplified Leo's key handling", "gnx": "ekr.20110611055444.16654", "b": "This was a major simplification of Leo's core.\n\n- Eliminated event.keysym from Leo's core: test only ev.char and ev.stroke.\n\n- Replaced all dummy (g.bunch) events in Leo's core and in unitTest.leo.\n    \n- Replaced w.event_generate by g.app.gui.event_generate everywhere.\n    \n- Rewrote leoGui.leoKeyEvent.\n\n- Created leoGui.create_key_event and leoQtEventFilter.create_key_event.\n\n- Removed some ugly last-minute hacks in leoQtEventFilter.create_key_event.\n", "children": []}, {"h": "Features", "gnx": "ekr.20110611055444.16726", "b": "- Changed names of commands so they have common prefixes\n\n    Any custom key bindings (none are bound by default) will have to change.\n    \n    The new prefixes are::\n    \n        abbrev-     abbreviation commands\n        buffer-     buffer command\n        directory-  director commands\n        file-       file commands\n        gc-         garbage collection\n        macro-      macro expansion\n        rectangle-  rectangle commands\n        register    register commands\n        \n    The already existing prefixes are::\n    \n        apropos-    help\n        ddabrev-    dynamic abbreviations\n        find-       find commands\n        isearch-    incremental search\n        print-      print information\n        run-        run unit tests\n        toggle-     toggle settings\n        yank-       yank\n        \n\n- Finished macros\n\n    The macro-load and macro-save are as simple as possible.\n\n    No further work will be done on macros unless somebody really wants these commands.\n\n\n- Added support for word-only option for regular expressions\n\nWhen the word-only option is in effect, Leo ensures that the search pattern\nbegins and ends with the '\\b' anchor.\n\n- Leo's startup code now forces the qt gui: it changes qttabs to qt.\n\n- Added support for expanded sections in plugin.  Added three new options:\n\n    expand_noweb_references\n    \n       True: Replace references by definitions.\n       Definitions must be descendants of the referencing node.\n    \n    ignore_noweb_definitions\n    \n        True: ignore section definition nodes.\n    \n    expand_noweb_recursively\n    \n        True: recursively expand definitions by expanding any\n        references found in definitions.\n        \nNotes:\n\n- This is an experimental feature: all aspects might changed.\n\n- The code ensures that unbounded expansions can not happen. While expanding any\n  section, the rst3 will not expand again any sections that have already\n  occurred in the expansion.\n\n- All rst3 options apply to the entire node in which they appear (and all\n  descendant nodes until over-ridden), but by splitting nodes one can change the\n  settings on an expansion-by-expansion basis. It is easy to split nodes without\n  creating new sections using @rst-no-head in the headline.\n", "children": []}, {"h": "Removed settings", "gnx": "ekr.20110611092035.16493", "b": "The following Tk settings have been removed from leoSettings.leo::\n\n    @bool center_selected_tree_node\n    @bool expanded_click_area\n    @bool idle_redraw\n    @bool initialClickExpandsOrContractsNode\n    @bool invisible_outline_navigation\n    @bool look_for_control_drag_on_mouse_down\n    @bool outline_pane_scrolls_horizontally\n    @bool use_minibuffer\n    \nThe following setting was not active, and has also been removed::\n\n    @bool ignore_caps_lock\n", "children": []}, {"h": "New in 4.9 b4", "gnx": "ekr.20110613172008.14775", "b": "Old bugs fixed\n--------------\n\n- Fixed an ancient bug: everything after @all was put in the wrong node!\n\n- Fixed an ancient bug: wrap-around search now restarts when find pattern changes\n\n- Fixed an ancient bug: F-keys end incremental searches.\n\nRecent bugs fixed\n-----------------\n\n- Fixed a recent problem with commands dispatched from menus The Shift modifier\n  was deleted from all commands executed by selecting an item in menus! A new\n  unit test checks that menus behave as expected.\n\n- Dismiss splash screen before putting up the dialog that asks for an ID.\n\nOther changes\n-------------\n\n- Running all unit tests leaves all files unchanged. This was a major annoyance.\n\n- Leo now does a keyboard-quit when deactivating a window.\n", "children": []}, {"h": "New in 4.9 rc1", "gnx": "ekr.20110616100929.14794", "b": "- When running on MacOS, Leo uses the qt gui when the qttabs gui is requested.\n\n- Leo now looks in home/.leo/Icons directory for icons before looking in the\n  leo/Icons directory.\n  http://groups.google.com/group/leo-editor/browse_thread/thread/80163aec96b8ea45/4f58418924172252\n\n- Fixed bug 797470: File data sometimes silently erased when the tangler fails.\n  https://bugs.launchpad.net/leo-editor/+bug/797470 This was a serious bug, but\n  it could happen only when saving an errorneous file twice.\n\n- Fixed bug 798194: --maximized has no effect\n  https://bugs.launchpad.net/leo-editor/+bug/798194\n  \n- Added the @bool forbid_invalid_completions setting.\n\n- Non-plain keys, such as Ctrl-s, abort auto-completion and are interpreted as\n  usual.\n\n- Don't mark the .leo file as changed when setting orphan bit. There is no need:\n  the orphan bits will ensure errors get reported if the file is saved.\n\n- Disabled the open-compare-window command. It is/was a Tk only command.\n\n- The open-python-window command fails more gracefully It issues a message\n  instead of crashing if idlelib does not exist.\n", "children": []}, {"h": "New in 4.9 final", "gnx": "ekr.20110620083705.14902", "b": "Fixed crash on mouse clicks in minibuffer.\n", "children": []}, {"h": "Leo 4.10 Release notes", "gnx": "ekr.20120229094652.14053", "b": "@language rest\n\nLeo 4.10 final                                         March 29, 2012\n\nLeo 4.10 final is now available at: http://sourceforge.net/projects/leo/files/Leo/4.10%20final/\n\nLeo is a text editor, data organizer, project manager and much more.\nhttp://webpages.charter.net/edreamleo/intro.html\n\nLeo 4.10 contains 9 months of intense work on Leo. Several very important\nfeatures are subtle; you could almost call them Easter Eggs, so please read\nthe following notes carefully.\n\nThe highlights of Leo 4.10:\n--------------------------\n\n* Dozens of new and improved features and commands, including...\n  - Tab completion now shows all @command & @button nodes.\n  - Leo tabs may be detached from the main window.\n  - The Open With menu now works.\n  - The leoInspect module answers questions about Python code.\n  - Leo can highlight the pane containing the focus.\n  - The bigdash plugin searches across multiple files.\n  - Improved abbreviation capabilities.\n  - Improved handling of URL's.\n  - Improved editing of non-Leo files.\n  - Improvements create \"weightless\" unit testing.\n  - Improved Leo's home page.\n* Easier installation on MacOS.\n* Fixed almost 70 bugs.\n\nThe Easter Eggs\n---------------\n\n1. Tab completion now shows all @command & @button nodes.\n\nPut all your common scripts in @command nodes in myLeoSettings.leo.\nTyping <Alt-X>@c<Tab> will remind you of the names of these scripts.\nYou can execute the scripts by name without the \"@command-\" prefix.\n\n2. Improved abbreviation capabilities.\n\nVirtually any kind of abbreviation is possible. For example, ~a to \u00e3.\n\n3. Improved handling of URL's.\n\nURL's can be used as links to other Leo outlines.\n\n4 Weightless unit testing.\n\nThe mantra is edit, alt-4 (run-marked-unit-tests-externally), edit,\nalt-4,... Several seemingly innocuous changes made this work without\n\"friction\". The result is a remarkable increase in productivity.\n\nLinks:\n------\nLeo:      http://webpages.charter.net/edreamleo/front.html\nForum:    http://groups.google.com/group/leo-editor\nDownload: http://sourceforge.net/projects/leo/files/\nBzr:      http://code.launchpad.net/leo-editor/\nQuotes:   http://webpages.charter.net/edreamleo/testimonials.html\n", "children": ["ekr.20120229094652.14757", "ekr.20120229094652.14518", "ekr.20120229094652.15162", "ekr.20120229094652.15163", "ekr.20120229094652.15164", "ekr.20120229094652.15165", "ekr.20120229094652.15166", "ekr.20120229094652.15168"]}, {"h": "Bugs", "gnx": "ekr.20120229094652.14757", "b": "", "children": ["ekr.20120318075211.6163", "ekr.20120318075211.6164", "ekr.20120318075211.6166"]}, {"h": "Significant bugs", "gnx": "ekr.20120318075211.6163", "b": "", "children": ["ekr.20120229094652.14758", "ekr.20120229094652.14780", "ekr.20120229094652.14934", "ekr.20120229094652.14973", "ekr.20120318075211.6165"]}, {"h": "Fixed ancient hanger in paste-retaining-clones", "gnx": "ekr.20120229094652.14758", "b": "https://bugs.launchpad.net/leo-editor/+bug/800157\n\nFixed at rev 5077.", "children": []}, {"h": "Fixed serious atFile read bug", "gnx": "ekr.20120229094652.14780", "b": "Changed at.readEndOthers and at.readEndRef so that they\nalways set at.inCode = True\n", "children": []}, {"h": "Fixed bug: @button @key=x does not override x", "gnx": "ekr.20120229094652.14934", "b": "Created k.kill_one_shortcut, called from k.remove_conflicting_definitions.\n", "children": []}, {"h": "Fixed the wretched scrolling bug", "gnx": "ekr.20120229094652.14973", "b": "The fix was to save/restore YScroll position in body.setSelectionAreas.\n\nFailure case 1:\n    - Search for something.\n    - Manually scroll the pane.\n    - Click scrolls the pane again.\n    \nFailure case 2:\n    - reformat-paragraph.\n", "children": []}, {"h": "Fixed several node-selection bugs related to hoists & chaptesr", "gnx": "ekr.20120318075211.6165", "b": "", "children": ["ekr.20120313074006.14657", "ekr.20120313074006.14771", "ekr.20120313074006.14663", "ekr.20120313074006.14740", "ekr.20120313074006.14765"]}, {"h": "Fixed bug 823267: when a tab is closed focus may go to a tab other than the visible one", "gnx": "ekr.20120313074006.14657", "b": "https://bugs.launchpad.net/leo-editor/+bug/823267\n\nWhen tabs are closed with the close tab 'X' on the tab, focus\nshould go to whichever tab becomes visible, but it does not,\nit goes to an arbitrary tab which may not be visible. If you\nthen hit Alt-X expecting to cut the highlighted node in the\nvisible tab, you cut a node you can not see in a different\ncommander.\n\nWhat I did:\n    \n- Refactored part of g.app.closeLeoWindow into g.app.selectLeoWindow.\n- Added the new_c argument to g.app.closeLeoWindow and c.close.\n- Changed several event handlers in TabbedFrameFactor so that they\n  call g.app.selectLeoWindow as appropriate.", "children": []}, {"h": "Fixed bug 875327: Positioning outside of hoisted outline\" usually causes problems", "gnx": "ekr.20120313074006.14771", "b": "https://bugs.launchpad.net/leo-editor/+bug/875327\n", "children": []}, {"h": "Fixed bug 917814: Switching Log Pane tabs is done incompletely", "gnx": "ekr.20120313074006.14663", "b": "https://bugs.launchpad.net/leo-editor/+bug/917814\n", "children": []}, {"h": "Fixed bug 875323: Hoist an @chapter node leaves a non-visible node selected", "gnx": "ekr.20120313074006.14740", "b": "https://bugs.launchpad.net/leo-editor/+bug/875323\n", "children": []}, {"h": "Fixed bug 831658: @url doesn't leave Chapter", "gnx": "ekr.20120313074006.14765", "b": "https://bugs.launchpad.net/leo-editor/+bug/831658\n", "children": []}, {"h": "Minor bugs", "gnx": "ekr.20120318075211.6164", "b": "", "children": ["ekr.20120229094652.14759", "ekr.20120229094652.14761", "ekr.20120229094652.14762", "ekr.20120229094652.14763", "ekr.20120229094652.14764", "ekr.20120229094652.14765", "ekr.20120229094652.14767", "ekr.20120229094652.14769", "ekr.20120229094652.14770", "ekr.20120229094652.14772", "ekr.20120229094652.14775", "ekr.20120229094652.14779", "ekr.20120229094652.14781", "ekr.20120229094652.14782", "ekr.20120229094652.14783", "ekr.20120229094652.14784", "ekr.20120229094652.14785", "ekr.20120229094652.14786", "ekr.20120229094652.14817", "ekr.20120229094652.14818", "ekr.20120229094652.14820", "ekr.20120229094652.14822", "ekr.20120229094652.14823", "ekr.20120229094652.14824", "ekr.20120229094652.14825", "ekr.20120229094652.14826", "ekr.20120229094652.14827", "ekr.20120229094652.14828", "ekr.20120229094652.14829", "ekr.20120229094652.14831", "ekr.20120229094652.14832", "ekr.20120229094652.14833", "ekr.20120229094652.14834", "ekr.20120229094652.14835", "ekr.20120229094652.14836", "ekr.20120229094652.14837", "ekr.20120229094652.14838", "ekr.20120229094652.14839", "ekr.20120229094652.14840", "ekr.20120229094652.14841", "ekr.20120229094652.14842", "ekr.20120229094652.14848", "ekr.20120229094652.14850", "ekr.20120229094652.14855", "ekr.20120229094652.14856", "ekr.20120229094652.14891", "ekr.20120229094652.14892", "ekr.20120229094652.14941", "ekr.20120229094652.14942", "ekr.20120229094652.15012", "ekr.20120229094652.15013", "ekr.20120229094652.14520", "ekr.20120229094652.15147", "ekr.20120229094652.15146", "ekr.20120313074006.14648", "ekr.20120313074006.14650", "ekr.20120313074006.14697", "ekr.20120313074006.14702", "ekr.20120313074006.14713", "ekr.20120313074006.14714", "ekr.20120313074006.14715", "ekr.20120313074006.14738", "ekr.20120313074006.14800", "ekr.20120313074006.14906", "ekr.20120313074006.15120", "ekr.20120313074006.15125", "ekr.20120328102352.5897", "ekr.20120328102352.5899", "ekr.20120328102352.5900", "ekr.20120328102352.5936", "ekr.20120328102352.5938"]}, {"h": "Fixed bug in p.setAllAncestorAtFileNodesDirty", "gnx": "ekr.20120229094652.14759", "b": "The code that marks descendant @<file> nodes dirty now tests\np2.isAnyAtFileNode().  The old code tested p2.isAtThinFileNode().\n", "children": []}, {"h": "Fixed double-click problem", "gnx": "ekr.20120229094652.14761", "b": "CAUTION: new double click handling code\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/dbd63b9b38911906\n\nThe problem isn't single/double, but double click not stopping the\nevent processing.  It has the correct form:\n\nif g.doHook('doubleClick1') is None:\n   do-normal-double-click-stuff\ng.doHook('doubleClick2')\n\nbut I think some other route through the code, or additional processing\nof the event means that even thought the handler registered on\ndoubleClick1 returns non-None, the node goes into headline edit mode,\nwith focus.\n\nThis is bad, because the doubleClick1 on an @url node attempts to\nselect and raise a different commander (tab), so now you're looking at\none commander but focus is in another, so what you type trashes the\nheadline in the original commander.\n\nThe timer shouldn't be needed - a 'doubleClick1' hook which returns\nnon-None should stop the headline going into edit mode.  If you can\nmake that be the case, all is well.\n", "children": []}, {"h": "Fixed url focus issues", "gnx": "ekr.20120229094652.14762", "b": "", "children": []}, {"h": "Fixed p1 > p2", "gnx": "ekr.20120229094652.14763", "b": "", "children": []}, {"h": "Fixed cacher problem", "gnx": "ekr.20120229094652.14764", "b": "- leoCommands.__init__ now sets self.db = {}\n- initGlobalDB now returns {} instead of None if there is no cacher.\n", "children": []}, {"h": "Fixed encoding problem with @shadow", "gnx": "ekr.20120229094652.14765", "b": "readOpenFile reads the private shadow file, detecting the encoding.\n", "children": []}, {"h": "Fixed a major DnD bug", "gnx": "ekr.20120229094652.14767", "b": "", "children": []}, {"h": "Regularized slashes in @edit/@file", "gnx": "ekr.20120229094652.14769", "b": "Examples:\n    \n    @edit C:/leo.repo/ipython-0.12/IPython/frontend/qt/console/pygments_highlighter.py\n        # The filename comes from g.app.gui.runOpenFileDialog\n    \n    @file C:\\leo.repo\\ipython-0.12\\IPython\\frontend\\qt\\console\\pygments_highlighter.py\n        # Created by import.\n        \nThe problem was the call to g.os_path_normpath in importDerived files:\nit converts slashes to backslashes on windows (!!)\n", "children": []}, {"h": "Made sure Leo's write code auto-detects file extension", "gnx": "ekr.20120229094652.14770", "b": "- Added getLanguageFromAncestorAtFileNode.\n\n- Revised code in at.scanAllDirectives & leoQtColorizer.scanColorDirectives.\n", "children": []}, {"h": "Fixed cycle-editor-focus bug", "gnx": "ekr.20120229094652.14772", "b": "qtBody can use the leoBody code.\n", "children": []}, {"h": "Fixed Py3k crash in quicksearch.py", "gnx": "ekr.20120229094652.14775", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\plugins\\quicksearch.py\", line 187, in returnPressed\n    self.scon.doSearch(t)\n  File \"c:\\leo.repo\\trunk\\leo\\plugins\\quicksearch.py\", line 289, in doSearch\n    self.addBodyMatches(bm)\n  File \"c:\\leo.repo\\trunk\\leo\\plugins\\quicksearch.py\", line 257, in addBodyMatches\n    self.its[it] = (p, None)\nTypeError: unhashable type: 'QListWidgetItem'\n", "children": []}, {"h": "Macro expansion now forces a full recolor", "gnx": "ekr.20120229094652.14779", "b": "", "children": []}, {"h": "Fixed unicode bugs with @shadow", "gnx": "ekr.20120229094652.14781", "b": "Fixed several encoding problems related to this thread: @shadow - @encoding windows-1250 - problem\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/a4ba80559447218a/9a37a4ed6c44d452\n\nThere were several real problems fixed.  The summary: @encoding directives were always required.\n\nIn detail:\n\n1. at.initWriteIvars now checks for a Python # -*- coding: line.\n   If present, it must be the very first line.\n   If present, it will override any @encoding directives.\n\n2. g.getPythonEncodingFromString now can deal with either of the following lines:\n\n    @first # -*- coding: utf-8 -*-\n    # -*- coding: utf-8 -*-\n\nThat is, g.getPythonEncodingFromString can strip the leading @first.\n\n3. g.readlineForceUnixNewline and x.propagate_changes now catch UnicodeDecodeError.\n   This is very important: previously decoding errors crashed Leo!.\n\nAll unit tests pass with both Python 2.x and 3.x.\n\n", "children": []}, {"h": "Recompute width of hard tabs depending on @tabwidth", "gnx": "ekr.20120229094652.14782", "b": "Added configure_hard_tab_width method.\n", "children": []}, {"h": "Applied patch for Bug 800311: Undo: Word granularity should recognize cursor movements", "gnx": "ekr.20120229094652.14783", "b": "https://bugs.launchpad.net/leo-editor/+bug/800311\n\nHaving set undo to word granularity, I often change something, move to a\ndifferent line and continue editing there. When I want to undo my last change,\nLeo also undoes the change in the other place, as word granularity currently\nonly recognizes a new undo step when a new word is started, no matter if we\nmoved to a completely different position first.\n\nThe attached patch fixes the issue by remembering the previous cursor position.\n\nSomething else about the undo code:\n\n- oldSel and newSel are never set to None in the constructor -> it's quite hard\n  to know they are there without reading the whole code\n\n- It would be cool if there could be some more comments in that section; e.g. to\n  tell that oldSel and newSel from which old_row, old_col, new_row and new_col\n  actually mean: old = \"the position right before doing the change\" and new =\n  \"the position right after doing the change\" and that old != \"the position\n  after the change before\" (which I added as prevSel) - it took me ages to\n  discover this\n\n- There are duplicate \"The new and old characters are not contiguous.\" checks.\n  Are they different/necessary?\n\n- The \"We have just inserted a line.\" section is not only entered on a new line\n  (see other attached patch)\n", "children": []}, {"h": "Applied patch for Bug 800312: Collapsing node moves should be optional", "gnx": "ekr.20120229094652.14784", "b": "https://bugs.launchpad.net/leo-editor/+bug/800312\n", "children": []}, {"h": "Fixed Bug 880975: Binding Meta and print-bindings", "gnx": "ekr.20120229094652.14785", "b": "https://bugs.launchpad.net/leo-editor/+bug/880975\n\nBug: The Meta+Ctrl section [of print-bindings] is always empty and this makes it\nmisleading.\n\nFix: the prefix list in k.printBindings must be sure that if two prefixes have a\ncommon leading part the longer prefix appears first in the lists.\n", "children": []}, {"h": "Fixed bug 823601: cascade-windows fails", "gnx": "ekr.20120229094652.14786", "b": "https://bugs.launchpad.net/leo-editor/+bug/823601\n", "children": []}, {"h": "Fixed html colorizing by fixing a bad bug in g.importFromPath", "gnx": "ekr.20120229094652.14817", "b": "g.importFromPath ('html','C:/leo.repo/trunk/leo/modes/html.py')\nreturned the standard Python html module!\n\n", "children": []}, {"h": "Allow lower case keywords in colorizer", "gnx": "ekr.20120229094652.14818", "b": "The fix was to use lowercase versions of docPart,leoKeyword,nameBrackets.\n", "children": []}, {"h": "Fixed rst3 pdf problem", "gnx": "ekr.20120229094652.14820", "b": "Worked around docutils problem in writeToDocutils.\n", "children": []}, {"h": "Removed traceback when cancelling a write", "gnx": "ekr.20120229094652.14822", "b": "not written: c:\\recent\\data3.html\nexception removing: \nTraceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoAtFile.py\", line 5280, in remove\n    os.remove(fileName)\nWindowsError: [Error 3] The system cannot find the path specified: ''\n", "children": []}, {"h": "Fixed removeBlankLinesTokens", "gnx": "ekr.20120229094652.14823", "b": "There were two bugs:\n    \n- baseScannerClass.skipWsToken must not skip newlines!\n- tokenize must add any remaining whitespace at the end of the loop.\n", "children": []}, {"h": "Fixed crasher in config.set", "gnx": "ekr.20120229094652.14824", "b": "The code didn't work for c == None.\n", "children": []}, {"h": "Fixed resize-to-screen and minimize-all", "gnx": "ekr.20120229094652.14825", "b": "", "children": []}, {"h": "Fixed html import problems", "gnx": "ekr.20120229094652.14826", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3c319daba37cd0ef\n\n- Created a separate html importer, a very simple subclass of the xml scanner\n  whose only difference is that it uses @data import_html_tags instead of @data\n  import_xml_tags.\n\n- The case of tags in @data import_html_tags and @data import_xml_tags no longer matters.\n\n- checkTrialWrite now writes a file *with* sentinels, to handle @others correctly.\n  It then removes the sentinels.\n  \n  This means that the import tests must use the correct @language directives.\n  \n- The import check now uses a token-based comparison.  \n", "children": []}, {"h": "Removed extra newlines in g.trace", "gnx": "ekr.20120229094652.14827", "b": "The fix was in g.pr:\n    \nRestored the call to sys.stdout.write(s2) (instead of print)\n\nsys.stdout.write(s2) writes no additional newline at the end of s2.\n\nAha!  At last I know how to unit test g.pr, g.trace, etc.: redirect stdout!\n", "children": []}, {"h": "Fixed crash in compareTokens", "gnx": "ekr.20120229094652.14828", "b": " File \"/usr/fetching/leo-editor/leo/core/leoImport.py\", line 2074, in\nscanAndCompare\n   n1,n2,ok = self.compareTokens(tokens1,tokens2)\n File \"/usr/fetching/leo-editor/leo/core/leoImport.py\", line 2094, in\ncompareTokens\n   else:      kind1,val1 = 'eof','',n1\nValueError: too many values to unpack\n", "children": []}, {"h": "Finished import work", "gnx": "ekr.20120229094652.14829", "b": "- Created stand-alone unit tests from @test import dataN.html.\n- All leoImport unit tests may now be run externally.\n    The Python unit tests were failing because of intermixed tabs and blanks.\n    This was fixed by putting @tabwidth -4 in all @test nodes for Python.\n- Made sure lines are printed when unit tests fail unexpectedly.\n- Added .js & javascript entries to global data structures for javascript unit tests.\n- Completed xmlScanner.filterTokens.\n- Don't create declaration nodes for html.\n- Make sure html tags are as expected.\n- Ignore case of html/xml tags.\n\nRev 4774.1.1:\n\nFixed all known html-import problems in a clean way. Unit tests exists, but they\nuse external files. They will be converted soon.\n\nImportant changes:\n\n1. Added hasNestedClasses ivar in the baseScannerClass, True only for xml/html scanners.\n\nWhen True, scanHelper and skipDecls allocate a substring to be used for all further scanning.\nThis is the *only* way to limit Leo's scanners properly.\n\nThis was, in essence, the fix for duplicate code generation arising from unbalanced tags:\nskipToEndOfTag and skipToMatchingTag can't match outside the present tag because\nthe 's' argument passed to those methods has already been truncated.\n\nThis is a simple, elegant solution, and in essence the *only* proper solution.\nFor example, it would not work to past an 'end' argument to skipToEndOfTag and skipToMatchingTag\nbecause the scanners inside those methods do not understand an 'end' argument.\n\nThus, the simplest, most efficient solution is for scanHelper and skipDecls to truncate the\nstring to be scanned. That way, the truncation happens at most once per \"class\".\n\n2. Added hasDecls in the baseScannerClass, False only for xml/html scanners.\n\nVarious methods call skipDecls only if this ivar is True.\n\nRev 4773:\n\nFixed recent botch: both single and double quotes are allowed in html. \n\nRev 4772:\n\nSolved \"between element\" problem by extending classes up to the next class.\ndata.html imports \"correctly\", but not perfectly due to tag mismatches in\nskipToMatchingTag.\n", "children": []}, {"h": "Fixed hard crash when deleting body editor 3 times", "gnx": "ekr.20120229094652.14831", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/421ebf4c3f2d5f59\n\nAdding/deleting body editor 3 times hard-crashed Python\n\nThe changes were straightforward:\n    \n- set w.leo_label to None when calling unpackWidget.\n\n- Test for w.leo_label before using it.\n\nAdded a minitest.  To test by hand, add the following @button nodes:\n    \n    @button add-ed\n    w = c.frame.body.addEditor()\n    \n    @button del-ed\n    w = c.frame.body.deleteEditor()\n    \nClick away in any order...", "children": []}, {"h": "Fixed add/delete html comments", "gnx": "ekr.20120229094652.14832", "b": "The new add-comments command adds the comment character at the leftmost column.\n\nThe new delete-comments command will remove the comment characters inserted by\neither the old or new version of the add-comments command.\n", "children": []}, {"h": "Fixed bug that prevented text bindings from working in log tabs", "gnx": "ekr.20120229094652.14833", "b": "Example: ctrl-shift-home.\n\nThe fix was to set self.widget = contents in leoQtLog.selectTab.\n", "children": []}, {"h": "Fixed cycle-all-focus command", "gnx": "ekr.20120229094652.14834", "b": "- Added disabled code to inject event filter in TabbedFrameFactory.createFrame.\n\n- Added cycle-tab-focus command.\n\n- cycle-all-focus command uses cycleTabFocus as a helper: this greatly simplifies the code.\n    \n- Added binding for \"Find\" tab in leoQtLog.createTab.\n\n- DynamicWindow.createFindTab injects leo_find_widget ivar for leoQtLog.createTab.\n\n- Added isLogWidget to leoQtLog and nullLog classes.  They are helpers for cycleAllFocus.\n\n- Revised leoQtLog.selectHelper: selecting a new tab does *not* change logCtrl (log.widget).\n\n- Added bindings to Find tab\n", "children": []}, {"h": "Fixed crashers involving calls to w.setSelectionRange", "gnx": "ekr.20120229094652.14835", "b": "", "children": []}, {"h": "Fixed hang in cycleAllFocus", "gnx": "ekr.20120229094652.14836", "b": "The safe default pane is the body pane.  It's also the simplest code.\n", "children": []}, {"h": "Fixed crasher in k.handleDefaultChar", "gnx": "ekr.20120229094652.14837", "b": "The code must be careful that the log widget supports the HighLevelInterface.\n", "children": []}, {"h": "Fixed bug: Focus lost after opening or closing tab", "gnx": "ekr.20120229094652.14838", "b": "", "children": []}, {"h": "Ignore unbound Alt/Ctrl keys, especially Alt/Ctrl-N", "gnx": "ekr.20120229094652.14839", "b": "The bug was in k.handleDefaultChar.  No substantial change made to eventFilter.\n", "children": []}, {"h": "Fixed bug: ensure global @buttons work", "gnx": "ekr.20120229094652.14840", "b": "What I did:\n    \n1. Fixed major bug in settingsTreeParser.visitNode.\n   It now does p.copy() to protect the callers traverals.\n   This could have significant impacts on people's settings.\n   \n2. Added g.app.unitTestDict for unit testing.\n\n3. Leo now extends the list of @buttons and @commands, rather than replacing them.\n   This is reasonable only because leoSettings.leo should never define *active*\n   buttons or commands.\n", "children": []}, {"h": "Fixed bug in p.moveToFirstChild", "gnx": "ekr.20120229094652.14841", "b": "", "children": []}, {"h": "Fixed bug 804960: Refreshing unlinks clones, just reopening connects them again", "gnx": "ekr.20120229094652.14842", "b": "https://bugs.launchpad.net/leo-editor/+bug/804960\n\nWhen we clone a node inside an @shadow (containing @others) node and then\nrefresh the @shadow node from file, the clone is unlinked and marked as changed.\nIf we now save, close the .leo file and open it again, the nodes are linked\nagain! (showing \"cloned\" symbol) User's thought: \"How the heck can the file\nchange _between save and re-open_ when I changed nothing?\"\n\nI think what should be done about this is the check that Leo does when it opens\nthe file again, and that check should be done immediately after the \"refresh\nnode from file\" operation. Also, at this point, the \"Recovered nodes\" node\nshould appear (if file and node have both changed), not only after the next .leo\nfile close/reopen (as that happens quite infrequently, I guess, e.g. once a day\nfor me). Otherwise, the user can easily lose data.\n", "children": []}, {"h": "Fixed crasher in reportMismatch", "gnx": "ekr.20120229094652.14848", "b": ">  File \"/path/to/leo/core/leoImport.py\", line 2070, in reportMismatch\n>    line = repr(lines2[i])\n> IndexError: list index out of range\n", "children": []}, {"h": "Fix bug: Allow @all only in top-level @<file> nodes (test2.leo)", "gnx": "ekr.20120229094652.14850", "b": "The fix was to at.putBody.\n", "children": []}, {"h": "Fixed erroneous \"file changed\" message", "gnx": "ekr.20120229094652.14855", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/daf581ace0de871e\n\n\"has been modified outside of Leo. Overwrite this file?\"\n\nSteps to reproduce:\n\n- Create a node \"@edit ~/aaa.txt\" assuming aaa.txt does not exist\n- Ctrl-S save outline, log reports creating ~/aaa.txt\n- Edit text in body\n- Ctrl-S save outline, pop-up pops-up erroneously.\n\nThe problem was that replaceTargetFileIfDifferent should set root.v.at_read.\nNow it does.\n\nNote: both replaceFileWithString methods are part of the @shadow logic,\nso there is no need to set any at_read bit in those methods.\n", "children": []}, {"h": "Fixed bug 889175: Changing @auto paths overwrites files without warning", "gnx": "ekr.20120229094652.14856", "b": "https://bugs.launchpad.net/leo-editor/+bug/889175\n\nI loaded an outline with @auto nodes pointing to an out of date path. So body\ntexts were empty. I updated the paths in the node headlines and saved the file,\nexpecting to be prompted for overwriting the existing files (now the paths were\ncorrect again), but they were over-written with the blank content without\nwarning. Damn.\n\nSteps to reproduce in a simpler way below, but don't write the\nbelow of as contrived, because the above is the real problem.\n\nCreate @auto /home/tbrown/text.txt\n\nenter text, save file\n\nEdit headline to @auto /home/tbrown/Desktop/text.txt\n\nenter text, save file\n\nEdit headline back to /home/tbrown/text.txt\n\n-----\n\nI now see this happens also if the path change is in a @path node ancestor of the @auto node.\n", "children": []}, {"h": "Fixed bug in DynamicWindow.setGeometry", "gnx": "ekr.20120229094652.14891", "b": "DynamicWindow.setGeometry now does *not* change the window size when using the qttabs gui.\n\nAdded a comment to this effect in leoSettings.leo.\n", "children": []}, {"h": "Fixed bug 87933: Redefining a key binding breaks menu items with same binding", "gnx": "ekr.20120229094652.14892", "b": "https://bugs.launchpad.net/leo-editor/+bug/87933\n    \n- Fixed the Shift-Tab buglet by adding lower-case entries in app.tkNamesList\n    This matches what is done in k.settingsNameDict.\n- Created << define global key dicts >> in leoApp.py.\n- Changed si.val to si.stroke.\n- Replaced g.bunch by GeneralSetting & ShortcutInfo.\n- Replaced bunchList by aList.\n- Removed dynamic_menus \"compile-time\" constant.\n- onAboutToShow now recomputes the contents of menus whenever menus are invoked.\n- leo_update_shortcut now shows all shortcuts for a command.\n- Wrote and tested merge_settings_dict.\n", "children": ["ekr.20120229094652.14893", "ekr.20120229094652.14894", "ekr.20120229094652.14925"]}, {"h": " Report", "gnx": "ekr.20120229094652.14893", "b": "Bug 879331: Redefining a key binding breaks menu items with same binding\n\nhttps://bugs.launchpad.net/leo-editor/+bug/879331\n\n> Now I understand.  If I override the shortcut associated with the menu\n> item, in this case Alt-A, the menu breaks.\n\nThis is a serious bug!  The menu item now executes the command bound\nto Alt-A!  Very bad.\n\n=========\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/762e832909c3c530/d99d48eed45d1061\n\nhttp://mail.google.com/mail/#inbox/1331909dd653f3c9\n\nRedefining a binding, say for Alt-a, in x.leo will cause the sort-siblings menu\n(bound to alt-a) to execute the command specified by the command bound to Alt-a!\n\nhttps://bugs.launchpad.net/leo-editor/+bug/815564\n\nThis anomaly only occurs when all of the following conditions are true:\n\n1) There is a global command name X that is the \"same\" as the root name of the\nfile containing a plugin Y. Here, \"same\" means equal after the command name is\nconverted to lower case and all underlines in the root name are replaced by\ndashes.\n\n2) A shortcut (a.k.a. keystroke) is bound to command name X.\n\nWhen these conditions are true, then the Plugins dropdown menu shows the key\nbinding next to the plugin name and left-clicking the plugin name executes the\nglobal command--and, there is no way to display the plugin's help.\n\nPlugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not\nby the old scrolledmessage.py plugin.\n\nLeo-editor revision: 4433\nOS: Ubuntu 11.04 (natty)\n\nStartup log pane:\nLeo Log Window\nLeo 4.9 final, build 4411, June 21, 2011\nPython 2.7.1, qt version 4.7.2\nlinux2\n", "children": []}, {"h": "Bug 815564: Plugin Menu-Keystroke binding can prevent plugin help display", "gnx": "ekr.20120229094652.14894", "b": "https://bugs.launchpad.net/leo-editor/+bug/815564\n\n===== Probably the same as bug 879331 =====\n\nThis anomaly only occurs when all of the following conditions are true:\n\n1) There is a global command name X that is the \"same\" as the root name of the\nfile containing a plugin Y. Here, \"same\" means equal after the command name is\nconverted to lower case and all underlines in the root name are replaced by\ndashes.\n\n2) A shortcut (a.k.a. keystroke) is bound to command name X.\n\nWhen these conditions are true, then the Plugins dropdown menu shows the key\nbinding next to the plugin name and left-clicking the plugin name executes the\nglobal command--and, there is no way to display the plugin's help.\n\nPlugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not\nby the old scrolledmessage.py plugin.\n\nLeo-editor revision: 4433\nOS: Ubuntu 11.04 (natty)\n\nStartup log pane:\nLeo Log Window\nLeo 4.9 final, build 4411, June 21, 2011\nPython 2.7.1, qt version 4.7.2\nlinux2\n", "children": []}, {"h": "Updating dependent dicts", "gnx": "ekr.20120229094652.14925", "b": "k.computeInversBinding() called by print-commands and for auto-completion.\n\nk.bindKey sets k.bindingsDict.\n\nk.bindKeyToDict sets k.masterBindingDict.\n", "children": []}, {"h": "Fixed Bug: @mark-for-unit-tests nodes", "gnx": "ekr.20120229094652.14941", "b": "The new TM.findMarkForUnitTestNodes allows both\nTM.FindAllUnitTestsNodes and createOutline to be much simpler.\n", "children": []}, {"h": "The recent files commands now work", "gnx": "ekr.20120229094652.14942", "b": "", "children": []}, {"h": "Fixed bug: @int pagewidth now set c.page_width", "gnx": "ekr.20120229094652.15012", "b": "Fixing this bug is important: it allows you to set a default\npage width in myLeoSettings.leo for use, for example, in the\nreformat-paragraph command.\n\nWithout a proper default c.page_width setting, you would have\nto use @page_width instead, which is much less convenient.\n\nThe fix was the following lines in c.initConfigSettings:\n    \n    c.page_width = getInt('page_width') or 132\n        # 2012/02/27: this appears to be a fix of an *ancient* bug.\n", "children": []}, {"h": "Fixed bug: goto end line handler is broken", "gnx": "ekr.20120229094652.15013", "b": "The fix was easy: moveWithinLineHelper does *not* call\nleoMoveCursorHelper for the case spot == 'end-line'\n", "children": []}, {"h": "Removed unused color tags", "gnx": "ekr.20120229094652.14520", "b": "The following tabs remain.  They are Leo-specific, not jEdit specific:\nblank, docpart, leokeyword, link, name, nameBrackets, tab, url.\n", "children": []}, {"h": "Fixed bug: End only goes to physical line", "gnx": "ekr.20120229094652.15147", "b": "End going to only physical line and not to the logical (wrapped) one)... \n", "children": []}, {"h": "Fixed bug 87933 with major key reorg", "gnx": "ekr.20120229094652.15146", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/c933b28c27d3b9a7\n\nRef 4952 of the trunk fixes bug 87933:\n\"Redefining a key binding breaks menu items with same binding\"\n\nThis was a difficult bug to fix--I rewrote significant parts of Leo's\ncode that deals with settings for key binding.\n\nBesides fixing the bug, Leo computes accelerators in menu items\ndynamically when the user activates a menu.  The accelerator shows\n*all* keys bound to the command associated with the menu item.\n\nFrom the checkin log:\n\nA major reorganization of the configuration code that fixes bug 87933\nRedefining a key binding breaks menu items with same binding\n\n- Replaced g.bunches with ShortcutInfo objects...\n\n- Wrote and tested make_settings_dict and its helpers,\n  merge_settings_dicts, invert and uninvert.\n\n- Leo computes menu texts dynamically in onAboutToShow.\n\n- leo_update_shortcut now shows all shortcuts for a command.\n\n- leoMenu.define_enable_dict encapsulates data used to enable/disable\n  commands regardless of where those commands appear in Leo's menu. The old\n  code assumed that a fixed menu location for all commands that could be\n  enabled or disabled.", "children": []}, {"h": "Fixed Bug 930726 re expandNodeAndGoToFirstChild", "gnx": "ekr.20120313074006.14648", "b": "https://bugs.launchpad.net/leo-editor/+bug/930726\n\nBug: If the node is not expanded already, then the position\nis left on the parent, not the first child.\n\nFunction expandNodeAndGoToFirstChild() is referenced only\nonce in LeoPyRef.leo. This reference is in table of public\nLeo commands.\n\nThe node in which expandNodeAndGoToFirstChild() is defined\nalso contains the definition of function\nexpandNodeOrGoToFirstChild(). At present these two functions\nare equivalent. The comments including the header for the\nnode imply that they should not be equivalent and that\nexpandNodeAndGoToFirstChild() is not correctly implemented.\n", "children": []}, {"h": "Fixed Bug 869429 (undo & redo when deleting nodes from contextmenu)", "gnx": "ekr.20120313074006.14650", "b": "https://bugs.launchpad.net/leo-editor/+bug/869429\nUndo and Redo delete from context menu does not redo properly\n\nThe fix was to deletenodes_rclick in contextmenu.py.\nThe fallback position should be c.rootPosition()", "children": []}, {"h": "Fixed bug 924123: Some SyntaxError's thrown when compiling the whole source with Python 3", "gnx": "ekr.20120313074006.14697", "b": "https://bugs.launchpad.net/leo-editor/+bug/924123\n\nThese syntax errors were minor in the sense that they had no\neffect on Leo's users, but they were a significant\ndistribution issue because Linux packages are not to have\nsuch errors.\n\nI removed the following files. Apparently, they are used nowhere in Leo. \n    \n    leo/core/leo_Debugger.py\n    leo/core/leo_FileList.py\"\n    leo/core/leo_RemoteDebugger.py\n    leo/core/leo_Shell.py\n    leo/core/leo_run.py\n\nThis files no longer exists:\n\n    leosax.py", "children": []}, {"h": "Fixed bug 501636: Leo's import code should support non-ascii xml tags", "gnx": "ekr.20120313074006.14702", "b": "https://bugs.launchpad.net/leo-editor/+bug/501636\n", "children": []}, {"h": "Fixed bug 799695: colorizer bug after move-lines-up into a docstring", "gnx": "ekr.20120313074006.14713", "b": "https://bugs.launchpad.net/leo-editor/+bug/799695\n\nThe fix was simply to call c.recolor_now(incremental=False)\n", "children": []}, {"h": "Fixed bug 824087: Alt+F4 is not the same as Alt+F, c", "gnx": "ekr.20120313074006.14714", "b": "https://bugs.launchpad.net/leo-editor/+bug/824087\n\nThe fix was to bind Ctrl-F4 to close-window, instead of Alt-F4.\n\nI instantly like this new binding.\n", "children": []}, {"h": "Fixed bug 923301: Unicode error when executing 'rst3' command", "gnx": "ekr.20120313074006.14715", "b": "https://bugs.launchpad.net/leo-editor/+bug/923301\n", "children": []}, {"h": "Fixed g.os_startfile on Linux", "gnx": "ekr.20120313074006.14738", "b": "", "children": []}, {"h": "Fixed Bug: multiple @language directive not colored correctly", "gnx": "ekr.20120313074006.14800", "b": "@language rest\n\nExample: typing in this rest section recolors as *Python*.\nThe correct coloring is restored when the entire text is recolored.\n\nIn this case, a workaround, and a performance improvement, would be to put\nthe ``@language python`` directive before the ``language rest``.\n\n@language python\n\n\n", "children": []}, {"h": "Fixed Bug: multiple @language directives mess up add-comments command", "gnx": "ekr.20120313074006.14906", "b": "- Added scanToCursor argument to c.scanAllDirectives in c.insert/removedComments.\n\n- Added scanToCursor argument to get_directives_dict_list in c.scanAllDirectives.\n\n- get_directives_dict_list sets scanToCursor only for the initial (root) node.\n\n- g.get_directives_dict scans to cursor for @language directives is scanToCursor is True.\n", "children": []}, {"h": "Fixed bug 952365: Leo-Editor can't write a file created from the command line", "gnx": "ekr.20120313074006.15120", "b": "https://bugs.launchpad.net/leo-editor/+bug/952365\n\nImproved error reporting and checking, but the file won't be created if\ncreateActualFile takes an IOError.\n", "children": []}, {"h": "Fixed bug 951921: Opening myLeoSettings.leo can clutter the console unworthwhile messages", "gnx": "ekr.20120313074006.15125", "b": "https://bugs.launchpad.net/leo-editor/+bug/951921\n", "children": []}, {"h": "Fixed crasher in flattenOutline", "gnx": "ekr.20120328102352.5897", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoCommands.py\", line 553, in doCommand\n    val = command(event)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoCommands.py\", line 2120, in flattenOutline\n    c.importCommands.flattenOutline(fileName)\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoImport.py\", line 479, in flattenOutline\n    theFile.write(s)\nTypeError: must be str, not bytes\n", "children": []}, {"h": "Fix viewrendered crash", "gnx": "ekr.20120328102352.5899", "b": "Traceback (most recent call last):\n  File \"c:\\leo.repo\\trunk\\leo\\core\\leoPlugins.py\", line 337, in callTagHandler\n    result = handler(tag,keywords)\n  File \"c:\\leo.repo\\trunk\\leo\\plugins\\viewrendered.py\", line 560, in update\n    f(s,keywords)\n  File \"c:\\leo.repo\\trunk\\leo\\plugins\\viewrendered.py\", line 655, in update_graphics_script\n    pc.gs = QtGui.QGraphicsScene(pc.splitter)\nAttributeError: 'ViewRenderedController' object has no attribute 'splitter'\n", "children": []}, {"h": "Fixed most scrolling problem with multiple editors", "gnx": "ekr.20120328102352.5900", "b": "Selecting body editor with clicks doesn't save/restore visual ivars.\nThe solution would be to create a new onClick event handler...\n", "children": []}, {"h": "Ensure selected @test node is run", "gnx": "ekr.20120328102352.5936", "b": "In earlier version of Leo if one runs test externally with the selected\nposition under @test node, that @test was executed with (run-marked-unit-tests-externally)\n\nThe fix was to the \"important special case\" in TM.findAllUnitTestNodes.\n", "children": []}, {"h": "fixed problem with file:/// url's on Windows", "gnx": "ekr.20120328102352.5938", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/bb063866875a81c3#\n\nThe fix is simply to special-case file:/// on Windows in g.computeFileUrl.\n", "children": []}, {"h": "Unfixed bugs", "gnx": "ekr.20120318075211.6166", "b": "", "children": ["ekr.20120313074006.14698"]}, {"h": "Failed to fix bug 844953: copy-clone-pasted node appears in other tab", "gnx": "ekr.20120313074006.14698", "b": "https://bugs.launchpad.net/leo-editor/+bug/844953\n\n1. Open two empty files with the LEO revision 4451/trunk using the qttabs GUI and save them both.\n2. Create a new node and write \"Abc\" in its head.\n3. Select \"Copy Node\" from the outline menu.\n4. Select \"Paste Node As Clone\" from the outline menu:\n   Node is not inserted as clone, but inserted as a copy in the second file/tab.\n\nSometimes even a standard Copy-Paste action results in the node being inserted in the other file.\n\nEKR: This a unity menu problem, not a problem with the paste commands per se.\n\nhttp://qt-project.org/forums/viewthread/15366/\n\n", "children": []}, {"h": "Code improvements", "gnx": "ekr.20120229094652.14518", "b": "", "children": ["ekr.20120229094652.15142", "ekr.20120318075211.6174", "ekr.20120318075211.6175", "ekr.20120229094652.15138", "ekr.20120229094652.15176", "ekr.20120229094652.15157"]}, {"h": "Leo's new classes", "gnx": "ekr.20120229094652.15142", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/808ba29fec64e590\n\nFor almost 15 years Leo has been written using a limited set of classes.\nThese were \"big\" classes, implementing major modules of Leo. There is\nnothing wrong with these classes, and they will remain unchanged, except\ninsofar as they will be simplified by the classes I am about to discuss.\n\nRecently, I have become aware that Leo's code could be considerably\nsimplified by adding \"smallish\" classes. Indeed, I now think the\ndistinction between big and small classes is unhelpful. The most important\npart of the design of a class is simply whether a class implements an\nunderstandable concept.\n\nWith this introduction, here is a short summary of Leo's new classes. Some\nhave not been fully implemented. Getting them all to work is a big part of\nthe rewrite of Leo's config, loading and key-handling code.\n\n", "children": ["ekr.20120318075211.6168", "ekr.20120318075211.6169", "ekr.20120318075211.6170", "ekr.20120318075211.6172", "ekr.20120318075211.6173"]}, {"h": "LoadManager", "gnx": "ekr.20120318075211.6168", "b": "This class handles all the messy details of loading .leo files at startup.\nThis class encapsulates almost all the code in runLeo.py, as well as some\nmethods in leoGlobals.py that really belong somewhere else.\n\nCreating a class simplifies the code to a surprising degree: 5 or 6 ivars\nof the class represent command-line options. These ivars are always\navailable: there is no need to pass them around as arguments.\n", "children": []}, {"h": "ModeController & ModeInfo (not used yet)", "gnx": "ekr.20120318075211.6169", "b": "The ModeController class represents a collection of modes. The ModeInfo\nclass represents a single mode.\n\nWithout these classes, the code in leoKeys.py is extremely hard to\nunderstand. In fact, the old code was a perfect example of the problems\nwith procedural programming: client code was burdened with knowing way too\nmany details about matters that it shouldn't have to know about.\nFurthermore, that data itself is hard to understand: it's too \"raw\". These\nclasses provide \"identity\" for data. repr(aModeInfo) is surprisingly\nuseful.", "children": []}, {"h": "LogManager (not used yet)", "gnx": "ekr.20120318075211.6170", "b": "This class represents the global log.  It hides the details of the log\nfrom the g.app class and several other pieces of code.\n\nAt present, the interface to this class is procedural.  That is, the\npresent g.app methods that will be moved into this class have a\nprocedural rather than descriptive nature.  I'm not sure how much this\nwill change, but creating this class may create opportunities that\nwere not apparently previously.\n\n", "children": []}, {"h": "KeyStroke & ShortcutInfo", "gnx": "ekr.20120318075211.6172", "b": "The KeyStroke class is a wrapper for plain strings. It's most important\nattribute is its *identity*. It announces that its contents is a\ncanonicalized value, not a raw user settings string or any other kind of\ndata associated with key handling.\n\nSimilar remarks apply to ShortcutInfo objects. Their identity clarifies the\ncode. The former code used g.bunches. In complex code such as leoKeys.py,\nsuch anonymous objects really obfuscate matters.\n\n", "children": []}, {"h": "EditCommandsManager", "gnx": "ekr.20120318075211.6173", "b": "This class solves a problem that has been annoying me ever since I created\nleoEditCommands.py. The problem is this: without this class the classesList\nhas to be defined at the end of the module, after all classes have been\nimported. Worse, several module-level methods were needed to manage the\nclassesList.\n\nIn the new scheme, each Commander creates an EditCommandsManager, and the\ncode that previously had to call the module-level method\nleoEditCommands.x(c) now simply calls c.editCommandManager.x(). This is\nmuch cleaner and avoids several very ugly imports. Which brings me to...\n", "children": []}, {"h": "Most files now import just leo.core.leoGlobals", "gnx": "ekr.20120318075211.6174", "b": "Now, most modules import only leo.core.leoGlobals. This simplifies Leo's\nstartup process considerably. This is something that I've wanted to do for\na long time. To make this work, it is *essential* that leoGlobals.py import\n*no* other Leo modules.\n\nHowever, Leo's core still imports leo.core.leoNodes in order to create\npositions, vnodes, etc. It would be straightforward to eliminate these by\ncreating g.app factory methods, but there is no urgent reason to do so.\n\nThe ctor for the Commands class imports many modules. This is essential to\nbreak what would otherwise be circular dependencies among Python imports.\nWe can extend this pattern by creating more classes, as was done with the\nEditCommandsManager class.\n", "children": []}, {"h": "Global switches are now all in leoGlobals.py", "gnx": "ekr.20120318075211.6175", "b": "leoGlobals.py now contains a section called ``<< global switches >>``\n\nThis contains global tracing switches. Experience shows that leoGlobals.py\nis the most convenient place for such switches. This section also contains\nswitches that enable new code bases. Recent examples were::\n\n   new_load = False # True: .leo files are loaded at most once.\n   if new_load: print('***** new_load')\n\n   new_modes = False # True: use ModeController and ModeInfo classes.\n   if new_modes: print('***** new_modes')\n", "children": []}, {"h": "version.py now uses bzr_version.py", "gnx": "ekr.20120229094652.15138", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/5fdadfba113e12d9/fa329534654ecfec\n\nLeo now reports bzr version numbers and dates automatically.  Very important.\n", "children": []}, {"h": "Minor", "gnx": "ekr.20120229094652.15176", "b": "", "children": ["ekr.20120229094652.14522", "ekr.20120229094652.14523", "ekr.20120229094652.14525", "ekr.20120229094652.14526", "ekr.20120229094652.14527", "ekr.20120229094652.14528", "ekr.20120229094652.14532", "ekr.20120229094652.14533", "ekr.20120229094652.14534", "ekr.20120229094652.14535", "ekr.20120229094652.14538", "ekr.20120229094652.14578", "ekr.20120229094652.14577", "ekr.20120229094652.14583", "ekr.20120229094652.14608", "ekr.20120229094652.14611", "ekr.20120229094652.14595"]}, {"h": "Eliminated the low-level interface", "gnx": "ekr.20120229094652.14522", "b": "Only the high-level interface (baseTextWidget) used the low-level interface.\n", "children": []}, {"h": "Removed unused cruft from high-level interface", "gnx": "ekr.20120229094652.14523", "b": "Removed the following unused methods::\n    \n    bind                c.bind also removed.\n    configure\n    cget\n    event_generate      g.app.gui.event_generate does exist.\n    getWidth\n    indexIsVisible      Also removed for leoEditCommands: scrollHelper and measure.\n    mark_set\n    onChar              Fortunately, never used anywhere\n    pack                Used only in Tk code\n    scrollLines\n    set_width           Removed do-nothing calls in Leo's core.\n    tag_add             Removed do-nothing calls in qt colorizer.\n    tag_bind            Removed do-nothing calls in qt colorizer.\n    tag_delete          Removed do-nothing calls in qt colorizer.\n    tag_names\n    tag_ranges\n    tag_remove\n    update\n    update_idletasks\n    xyToPythonIndex\n    yview\n", "children": []}, {"h": "Unified the high-level interface", "gnx": "ekr.20120229094652.14525", "b": "leoQTextEditWidget overrides base toPythonIndex toPythonIndexRowCol.\n\nThe versions that call g.toPythonIndex are much slower than\nleoQTextEditWidget.toPythonIndex.\n\nThe following classes have a toPythonIndex method:\n\nleoQTextEditWidget (fast)\n\nHighLevelInterface: calls g.toPythonIndex.\nbaseTextWidget: calls g.toPythonIndex.\nleoFind: calls g.toPytonIndex.\nleoQtBaseTextWidget: calls g.toPythonIndex.\n", "children": []}, {"h": "Create properties for logCtrl & bodyCtrl", "gnx": "ekr.20120229094652.14526", "b": "This is an important addition to reliability.\n\nIt ensures that body/log.widget and body.bodyCtrl/log.logCtrl are always in synch.\n", "children": []}, {"h": "Added eventFilters to top-level frames", "gnx": "ekr.20120229094652.14527", "b": "Added eventFilter in createFrame in SDI/TabbedFrameFactory classes\n", "children": []}, {"h": "Added log.orderedTabNames", "gnx": "ekr.20120229094652.14528", "b": "", "children": []}, {"h": "Created the TestManager class", "gnx": "ekr.20120229094652.14532", "b": "All top-level code in leoTest.py now resides in the\nTestManager class.\n\nThe c.testManager object eliminates the need for imports of\nleo.core.leoTest within unitTest.leo, an excellent\nsimplification.\n\nFurthermore, there is no need to access the testUtils class:\neverything is in c.testManager.\n\nThe TestManager class substantially clarifies *all* the code\nin leoTest.leo. This is surprisingly important because the\ntesting code is hardly straightforward.\n", "children": []}, {"h": "Created the LoadManager class (docs)", "gnx": "ekr.20120229094652.14533", "b": "This is a major restructuring of Leo's code:\n    \nIniting settings files and local files is now as simple as possible.\n\ng.openWithFileName now simply calls lm.loadLocalFile.\n\nCommands.__init__ now calls c.finshCreate.\n\ng.app.newCommander now simply calls Commands.__init__,\na *huge* collapse in complexity.\n\n===== Details\n\nThe g.app.config class is now substantially simpler:\ncomplex methods have moved to the LoadManager.\n\nThe new LoadManager class handles all aspects of Leo's\ncomplex startup process, including most importantly the very\ncomplex process by which Leo reads user settings.\n\nAs a side effect, c.config.get is now *much* simpler than\nbefore: it search one, and *only* one dictionary to discover\nsettings.\n\nReading local files must be done *twice*. The first read\ndiscovers settings, the second read uses those settings to\nopen the file. The first read always uses a null gui; the\nsecond read uses g.app.gui, whatever that happens to be.\n\nLM.openLocalFile embodies all aspects of the complex\nstrategy necessary for opening a local file twice. The first\nread creates a PreviousSetting object, which is then passed\nto LM.openFileByName, which in turn passes the\nPreviousSetting object to the ctor for the Commander.\nFinally, the PreviousSetting object inits c.config.\n\nBecause of the previousSettings object, the call to\nLM.openFileByName does *not* need to \"synthesize\" a link to\nc1 using c.hash. This stamps out bug 568452 at its source.\n\nThe crucial point is the previous settings get passed along\nto the Commander ctor, *before* LM.openFileByName calls\nc.fileCommands.openLeoFile to create the outline.\n\n", "children": []}, {"h": "Removed c argument from g.app.config getters", "gnx": "ekr.20120229094652.14534", "b": "- Moved findSettingsPosition to LocalConfigManager.\n\n- Moved printSettings to LocalConfigManager.\n", "children": []}, {"h": "Delay \"reading settings\" message until after signon", "gnx": "ekr.20120229094652.14535", "b": "", "children": []}, {"h": "Use at.readOneAtAutoNode instead of ic.readOneAtAutoNode", "gnx": "ekr.20120229094652.14538", "b": "It's important to use only one version of the code.\n", "children": []}, {"h": "Added p.positionAfterDeletedTree", "gnx": "ekr.20120229094652.14578", "b": "This important new method allows scripts to traverse an outline, deleting nodes\nduring the traversal. The pattern is::\n\n    p = c.rootPosition()\n    while p:\n    if <delete p?>:\n        next = p.positionAfterDeletedTree()\n        p.doDelete()\n        p = next\n    else:\n        p.moveToThreadNext()\n        \nThis method also allows scripts to *move* nodes during a traversal, **provided**\nthat nodes are moved to a \"safe\" spot so that moving a node does not change the\nposition of any other nodes.\n\nFor example, the move-marked-nodes command first creates a **move node**, called\n'Clones of marked nodes'. All moved nodes become children of this node.\n**Inserting** these nodes as children of the \"move node\" does not change the\npositions of other nodes. **Deleting** these nodes *may* change the position of\nnodes, but the pattern above handles this complication cleanly.\n", "children": []}, {"h": "Removed Leo's old syntax coloring code", "gnx": "ekr.20120229094652.14577", "b": "This was Tk code, and so can not possibly be useful now.\n\nAlso removed the settings specific to the Tk colorizer.\n", "children": []}, {"h": "Rewrote shell-command commands", "gnx": "ekr.20120229094652.14583", "b": "Rewrote the shellCommand, shellCommandOnRegion and executeSubprocess methods.\n", "children": []}, {"h": "Added g.app.isExternalUnitTest", "gnx": "ekr.20120229094652.14608", "b": "Unit tests can test this ivar.\n", "children": []}, {"h": "Added c.config.set", "gnx": "ekr.20120229094652.14611", "b": "An useful convenience method now that external unit tests can use config settings.\n", "children": []}, {"h": "help-for-command now uses g.getDocStringFromFunction", "gnx": "ekr.20120229094652.14595", "b": "", "children": []}, {"h": "Investigations", "gnx": "ekr.20120229094652.15157", "b": "", "children": ["ekr.20120229094652.15158", "ekr.20120229094652.15159"]}, {"h": "Investigated unicode problems with print", "gnx": "ekr.20120229094652.15158", "b": "After so many years of confusion the problem is now apparent:\nthe Windows console uses code page 437: which is just extended ascii.\n\nchcp 65001 is equivalent to utf-8, and it would be good to use,\nbut at present bzr goes nuts and changes to another code page!\n\nSo for the moment I'll have to live with what is, in effect, plain ascii.\n", "children": []}, {"h": "Investigated autocomplete popup bug", "gnx": "ekr.20120229094652.15159", "b": "On Ubuntu only, the auto complete popup is system-wide modal, it should only be modal over Leo windows.\n\nHowever, there does not seem to be any fix:\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/171aaf79e0bea256\n\nAll works well on Windows 7.  I do see the \"system-wide\" model\nbehavior on Ubuntu.\n\nThis appears to be a Ubuntu-specific bug.  Indeed, the popup is a\nQListWidget.  Such widgets have a setWindowModality method::\n\n    setWindowModality ( Qt::WindowModality windowModality )\n\nThe valid modalities are at: http://doc.qt.nokia.com/4.7-snapshot/qt.html#WindowModality-enum\n\nNonModal: The window is not modal and does not block input to other\nwindows.\n\nWindowModal: The window is modal to a single window hierarchy and\nblocks input to its parent window, all grandparent windows, and all\nsiblings of its parent and grandparent windows.\n\nApplicationModal: The window is modal to the application and blocks\ninput to all windows.\n\nNone of these would appear to be a system-wide modality, and\nfurthermore, the default is supposed to be NonModal.\n\nAnyway, calling setWindowModality(QtCore.Qt.NonModal) does not seem to\nhave much effect on Ubuntu, so I think I can safely say there is\nnothing more I can do. \n", "children": []}, {"h": "Major new features", "gnx": "ekr.20120229094652.15162", "b": "", "children": ["ekr.20120318075211.6167", "ekr.20120229094652.14593", "ekr.20120229094652.15093", "ekr.20120313134250.14232", "ekr.20120229094652.14585", "ekr.20120229094652.15153", "ekr.20120229094652.15135", "ekr.20120313074006.14640"]}, {"h": "Improved handling of URL's", "gnx": "ekr.20120318075211.6167", "b": "Leo's core now supports opening URL's in several ways:\n\n1. By Control-Clicking the headline of a node containing a URL in its\n   headline or the *first* line of its body text.\n   \n2. The open-url command opens a URL in a nodes headline or the first\n   line of its body text.\n   \n3. By Control-Clicking any URL in the body text.\n\nNotes::\n\n- URL's may optionally start with ``@url``.  Leo removes this prefix\n  before trying to open the URL.\n\n- Names of existing files are considered valid URL's. In that case, Leo\n  prepends ``file://`` to the file name.\n  \n- Relative file names are resolved to c.openDirectory, the directory of the\n  .leo file.\n  \n- You may use the {{expression}} syntax in any ``file://`` URL, including\n  ``file://`` URL's created from file names.\n  \n- The bookmarks.py plugin supports all of the features listed above.", "children": []}, {"h": "Tab completion shows all @command/@button commands", "gnx": "ekr.20120229094652.14593", "b": "Wouldn't it be great if we all could remember what we, and others, have\nalready done? Now there is an easy way to do so: just put your\ncommonly-used scripts in global @command nodes. You do this by placing each\n@command node as a child of an @commands node in your @settings tree in\nmyLeoSettings.leo.\n\nLeo's tab completion now shows you all @command nodes, all @button nodes\nand all the commands associated with those nodes.  To see the list of\nall your @command nodes, simply type::\n\n    <Alt-X>@c<Tab>\n    \nWhen I do that, I see::\n\n    @command-align-eq-signs\n    @command-c-to-python-clean-docs\n    @command-clean-all-blank-lines\n    @command-clean-body\n    @command-clean-diff\n    @command-clean-spellpyx\n    @command-cls\n    @command-count-pages\n    @command-create-@auto-nodes\n    @command-create-def-list\n    @command-flatten-script\n    @command-join-node-above\n    @command-join-node-below\n    @command-load-all-leo-files\n    @command-preview-node\n    @command-preview-tree\n    @command-print-cmd-docstrings\n    @command-promote-bodies\n    @command-remove-newlines\n    @command-split-defs\n    \nFor each @command (and @button node) Leo creates the correspond commands\nwithout the leading \"@command-\", so you can use typing completion on the\nshorter command name. For example, when writing documentation, I often use\nthe promote-bodies script. After the reminder above, I can execute the\nscript with::\n\n    <Alt-X>prom<Tab>-<Tab><Return>\n    \nOf course, to rexecute the command later, I can use repeat-complex-command\n(Ctrl-P).\n\nSummary\n=======\n\nIf you put all your commonly-used scripts in @command nodes, you can use\n<Alt-X>@c<Tab> to remind yourself of their names. That is, Leo's typing\ncompletion eliminates the need for memory-intensive retrieval. I'm not\nlikely ever to forget typing completion.\n\nThis scheme takes full advantage of Leo's organization strengths and\n*concentrates* those strengths by putting all the to-be-organized material\nin one place. This allows for easy reorganization: changing command-name\nprefixes, for instance, would be straightforward.\n", "children": []}, {"h": "Weightless unit testsing", "gnx": "ekr.20120229094652.15093", "b": "Small improvements the unit testing framework created big results. They\ncompletely eliminate the overhead in running unit tests:\n\n    - The run-marked-unit-tests-externally (Alt-4) command runs all marked\n      @test nodes. To choose tests, just mark them.\n    - Alt-4 now saves the .leo file first.\n    - Almost all unit tests may now be run externally:\n        - External unit tests always read config settings.\n        - The nullGui now uses a fully capable string-based body widget.\n        - The nullGui now uses the regular undoer.\n    - Unit tests now always have the sources available.\n    - Disabled messages on external unit tests.\n    - The unit test commands always run a selected @test node.\n\nThese improvements mean that almost all unit tests may be run externally.\nIn turn, this creates a remarkable work flow::\n\n    Edit\n    Alt-4\n    Edit\n    Alt-4\n    ...\n\nThe energy difference between weightless and heavy is astounding. Try the\nnew way: you will surely like it.\n\n**Notes**:\n\nExperience shows that being able to run the desired unit tests *without*\nselecting any particular node makes an amazingly large difference. Being\nable to run all and only marked unit tests is a big step forward.\n\nIf a marked node is neither an @test node nor an @suite node, all nodes in\nthe tree are considered to be marked.\n", "children": []}, {"h": "Leo's File:Open With command now works with Qt", "gnx": "ekr.20120313134250.14232", "b": "Support for the open-with command is now part of Leo's core.", "children": []}, {"h": "Added quick edit/save mode", "gnx": "ekr.20120229094652.14585", "b": "Leo can act like a drop-in replacement for SciTe. Suppose you do::\n    \n    leo x.y\n    \nwhere y is not \"leo\". Leo now opens an unnamed .leo file consisting of\n@edit x.y. if x.y exists, the @edit node contains the entire file;\notherwise the node is empty.\n\nWhen you save the .leo files or close the Leo window Leo saves x.y if it\nhas been changed, but Leo does *not* prompt you to save the \"temporary\"\n.leo file.\n\nhttps://bugs.launchpad.net/leo-editor/+bug/381527", "children": []}, {"h": "Detached windows", "gnx": "ekr.20120229094652.15153", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/3666397da2a0d05f/758071d6d9516ab9\n\nThe right-click context menu on the tabs in the tabbed window mode (the\ndefault) has a 'Detach' option, if there's more than one outline/tab, and a\nRe-attach all option, if there's a detached outline window out there.\n\nNow there's also 'Horizontal tile', and 'Vertical tile', which detach the\ntab and then tile its window with the window from which it was detached.\n\nThis is very helpful for moving nodes between outlines, I was rearranging\nthe windows by hand and setting one to 'always on top' with the window\nmanager before. Note: there's a @setting to determine whether dragging\nnodes between outlines copies or moves them.\n\nDepending on your OS / window manager, tiling / placement may be somewhat\noff, and may work better with or without the window being maximized before\ntiling, you'll have to experiment.\n\nWhen you close an outline window created by detaching a tab the outline is\njust re-attached as a tab. This means it's now possible to reattach just\none outline, rather than having to use the 'reattach all' option.\n", "children": []}, {"h": "The leoInspect module", "gnx": "ekr.20120229094652.15135", "b": "The leoInspect module provides answers to questions about Python source\ncode. leoInspect is an elegant and easy-to-use front end for Python's AST\n(Abstract Syntax Tree) trees *and* a window into a richly connected set of\nsemantic data built *from* AST trees.\n\nFor details, see http://webpages.charter.net/edreamleo/leoInspect.html", "children": []}, {"h": "Instant abbreviations (~a)", "gnx": "ekr.20120313074006.14640", "b": "Leo's abbreviation code is now simpler and more general than before. The\ndownside is that you will likely have to revise your abbreviations. I\nbelieve the extra work will be well worthwhile.\n\nHere are the changes:\n\n1. Abbreviations may consist of *any* sequence of characters, including\nwhitespace or \"special\" characters. You may include whitespace characters\nin definitions using the '\\t' and '\\n' escapes. However, whitespace may\nonly appear at the *end* of definitions.\n\n2. You must take care to disambiguate abbreviations if one is a prefix of\n   another.\n\nHere is an example of both points.  As always, you define\nabbreviations in the body of an @global-abbreviation node or\n@abbreviation node::\n\n    nc =@nocolor\\n\n    nc\\n=@nocolor\\n\n    nc\\t=@nocolor\\n\n\n    ncn=@nocolor-node\\n\n\nAs you can see, the definitions uses whitespace at the end\nof the definition of \"nc\" to prevent it from being expanded\nwhen typing \"ncn\".\n\n3. The reason I call these abbreviations \"instant\" is that they can be\ntriggered on *any* keystroke, not just the end of a \"word\".  This\nallows you to define::\n\n    teh=the\n\nHurray!\n\n4. Two rules limit scans.  They are useful and shouldn't cause\nhardships.\n\nA.  The backspace and delete characters *never* trigger substitutions.\n\nB. The scan for definitions ends at the first newline\ncharacter. Therefore, whitespace will have effect only at\nthe *end* of a definition.\n\n**Important**: these rules can cause problems when *defining*\nabbreviations:  it's easy to trigger an unwanted definition.  The\nsolution is to use rule 4B:\n\nI want to type::\n\n    ncn=@nocolor-node\\n\n\nBut I **cant** type this directly if nc is already defined!  The trick\nis to type::\n\n   nxcn=@nocolor-node\\n\n\nand then delete the leading x with a backspace character.\n\nOf course, you could also turn abbrevions off while defining abbreviations...\n\nInstant abbreviations solve the problems with Brazilian\nkeyboards. Just define::\n\n    ~a=\u00e3\n    ~A=\u00c3\n    etc.\n\nThis works regardless of keyboard, regardless of OS, etc.\nYou might want to define::\n\n    ~\\a=~a\n    ~\\A=~A\n\nin the somewhat unlikely event that you want to type ~a rather than,\nsay, ~+a.  Of course, you don't need these, provided you remember to\ntype ~xa <Right><Delete> :-)\n", "children": []}, {"h": "Minor new features", "gnx": "ekr.20120229094652.15163", "b": "", "children": ["ekr.20120328102352.5946", "ekr.20120229094652.14787", "ekr.20120229094652.15151", "ekr.20120229094652.14596", "ekr.20120229094652.14592", "ekr.20120229094652.14610", "ekr.20120229094652.14607", "ekr.20120229094652.14613", "ekr.20120314095341.14216", "ekr.20120229094652.14777", "ekr.20120229094652.14541", "ekr.20120229094652.14600", "ekr.20120229094652.14576", "ekr.20120229094652.14621", "ekr.20120229094652.14849", "ekr.20120313074006.14772", "ekr.20120229094652.14612", "ekr.20120313074006.14643", "ekr.20120229094652.14589", "ekr.20120229094652.14601", "ekr.20120328102352.5942"]}, {"h": "Improved Leo's home page", "gnx": "ekr.20120328102352.5946", "b": "http://webpages.charter.net/edreamleo/front.html\n\n- Added link to home page from the TOC.\n\n- Removed online-tutorial link.\n\n- Added search box to Leo's home page.\n\n- Added link to glossary from Leo's home page.\n\n- Added scaled screen shot to Leo's home page.\n\n- Brought screen shots up to date.\n", "children": []}, {"h": "Generalized stylesheet handling", "gnx": "ekr.20120229094652.14787", "b": "Code that wants to set a particular part of a widget's style sheet calls::\n\n   g.app.gui.update_style_sheet(w,key,value)\n\nwhere w is the widget whose stylesheet is to be changed, key is unique\nto the method (or group of methods), and value is the new version of\nthe stylesheet **for the particular key** to be added.  Examples::\n\n   # In setEditorColors.\n   sheet = 'background-color: %s; color: %s' % (bg,fg)\n   g.app.gui.update_style_sheet(obj,'colors',sheet)\n\n   # In add_border.\n   sheet = \"border: %spx solid %s\" % (\n       c.focus_border_width,c.focus_border_color)\n   self.update_style_sheet(w,'border',sheet)\n\n   # In remove_border.\n   sheet = \"border: %spx solid white\" % (c.focus_border_width)\n   self.update_style_sheet(w,'border',sheet)\n\nSo add_border and remove_border work together because they use the\nsame 'border' key.\n\ng.app.gui.update_style_sheet is straightforward: it injects a Python\ndict called leo_stylesheet_dict into the widget, and computes the\ntotal stylesheet as follows::\n\n   # Step one: update the dict.\n   d = hasattr(w,'leo_styles_dict') and w.leo_styles_dict or {}\n   d[key] = value\n   w.leo_styles_dict = d\n\n   # Step two: update the stylesheet.\n   aList = [d.get(key) for key in list(d.keys())]\n   s = ';'.join(aList)\n   w.setStyleSheet(s)\n", "children": []}, {"h": "Leo now raises a dialog on @ignore @<file> nodes", "gnx": "ekr.20120229094652.15151", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b49d23010703aa61/32e1271d25ba2cfb\n", "children": []}, {"h": "@ignore now prevents local @button/@command node definitions", "gnx": "ekr.20120229094652.14596", "b": "There is no longer any need for @@button, etc.: just put under an @ignore node.", "children": []}, {"h": "Added support for tags in @button nodes", "gnx": "ekr.20120229094652.14592", "b": "The mod_scripting plugin so that the name of the command created by an @button\nnodes does not include any [<tag>] that immediately follows @button. Examples::\n\n    @button [ekr] x\n    @button [edit] y\n    @button [important] z\n\nThese buttons create commands named x, y and z, and the name of the buttons are\nx, y and z.\n\nNote that the '[' must be the first non-blank after @button to be recognized and\nremoved.\n\nThe code is a straightforward addition to cleanButtonText in mod_scripting.py:\nit is unlikely to have any impact whatsoever to existing @button nodes.\n\nThe intended use is for searches of the form @button [some tag].\n", "children": []}, {"h": "bridgeController.initLeo now kills events if plugins not loaded", "gnx": "ekr.20120229094652.14610", "b": "The new code monkey-patches g.doHook to a do-nothing::\n    \n    if not self.loadPlugins:\n        def dummyDoHook(tag,*args,**keys):\n            pass\n        g.doHook = dummyDoHook\n", "children": []}, {"h": "Call unselect1 hook only once", "gnx": "ekr.20120229094652.14607", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/e2980a2b86af913e\n\nI see the following\n- when a file is opened\n  - one message listing the root node\n  - 7 repeats of the message for the current node\n\n- when the file is saved in a session with several tabs\n  - a message is generated for each current node in each tab\n\n- shifting focus from body to headline doesn't generate the message,\n  shifting focus with <Ctrl-H> does\n\n- switching from one tab to another doesn't generate the message \n", "children": []}, {"h": "Improved scannerUnitTest", "gnx": "ekr.20120229094652.14613", "b": "The error message is now part of the failed assert.  Very helpful.\n", "children": []}, {"h": "Leo supports @ignore when scanning for @command and @button nodes.", "gnx": "ekr.20120314095341.14216", "b": "There no need to disable buttons and commands with \\@@button or \\@@command.\n", "children": []}, {"h": "Support @ignore when installing @command/@button nodes", "gnx": "ekr.20120229094652.14777", "b": "Changed doButtons and doCommands kind handlers.\n\nThis allows us to put example nodes in leoSettings.leo.\n", "children": []}, {"h": "set g.app.execute_script during script execution", "gnx": "ekr.20120229094652.14541", "b": "This allows the following pattern to appear in Leo source files::\n\n    class myClass:\n        @others\n        \n    if g.app.testing:\n        myClass(c).test()\n        \nThis is better than enabling the test with \"if 1:\" because c is not defined\nwhile importing the module, so the import will fail if I forget to change\n\"if 1:\" to \"if 0\" when saving the .leo file.\n", "children": []}, {"h": "Support single-line nodes like <node/> xml import code", "gnx": "ekr.20120229094652.14600", "b": "The single-line nodes should end in a newline. Otherwise the created node\nwill add a newline, and the checkers will complain.\n\nThe new class is xmlScanner and htmlScanner in leoImport.py.\n", "children": []}, {"h": "The Find tab now scrolls", "gnx": "ekr.20120229094652.14576", "b": "The change was to DynamicWindow.createLogPane.\n", "children": []}, {"h": "Warn when importing/reading/writing @ignored nodes", "gnx": "ekr.20120229094652.14621", "b": "What I did:\n    \n1. Created c.init_error_dialogs & c.raise_error_dialogs.\n\nThese are called from the following methods:\n    \nc.importAnyFile\nc.open\nc.readAtAutoNodes\nc.readAtFileNodes\nat.readAll\nc.save\nc.saveAs\nc.saveTo\nfc.writeAtFileNodes\nfc.writeAtShadowNodes\nfc.writeDirtyAtFileNodes\n\n2. Disabled log messages in several of the above methods during unit testing.\n\n3. Disabled runOpenFileDialog and runSaveFileDialog during unit testing.\n", "children": []}, {"h": "Disabled section-reference handling in @auto files", "gnx": "ekr.20120229094652.14849", "b": "", "children": []}, {"h": "Dragging a binary file to Leo creates an @url node", "gnx": "ekr.20120313074006.14772", "b": "https://bugs.launchpad.net/leo-editor/+bug/807561\n\nThe isBinaryFile helper returns True if the file's extension is not known.\nThis isn't great, but it's safe. The list of known text types includes:\n    \n1. '.css','.html','.leo','.txt'\n2. All extensions in g.app.extension_dict.keys().\n", "children": []}, {"h": "Alt-left-arrow collapses all children when selecting the parent", "gnx": "ekr.20120229094652.14612", "b": "Under control of @bool collapse_on_lt_arrow option, default *True*.\n", "children": []}, {"h": "Reinstated warnings for conflicting definitions", "gnx": "ekr.20120313074006.14643", "b": "k.remove_conflicting_definitions always gives the warning, not just when tracing.\n\nThe warning isn't the best, and it is usually duplicated, but it is much better than nothing.\n", "children": []}, {"h": "Searches from Leo's web pages now work", "gnx": "ekr.20120229094652.14589", "b": "Updating Sphinx and using new .js files did the trick.\n", "children": []}, {"h": "Leo's home page now shows the latest postings from leo-editor.", "gnx": "ekr.20120229094652.14601", "b": "Leo's home page now shows the latest postings on the leo-editor group.\n", "children": []}, {"h": "Alt-Home & Alt-End collapse all possible nodes", "gnx": "ekr.20120328102352.5942", "b": "", "children": []}, {"h": "New & improved commands", "gnx": "ekr.20120229094652.15164", "b": "", "children": ["ekr.20120229094652.14590", "ekr.20120229094652.14544", "ekr.20120229094652.14545", "ekr.20120229094652.14625", "ekr.20120229094652.15090", "ekr.20120229094652.14602", "ekr.20120229094652.14542", "ekr.20120229094652.14616", "ekr.20120229094652.14581", "ekr.20120229094652.15169", "ekr.20120229094652.14622", "ekr.20120229094652.14618", "ekr.20120313134250.14294", "ekr.20120229094652.14599"]}, {"h": "Added @button split-defs", "gnx": "ekr.20120229094652.14590", "b": "", "children": []}, {"h": "Added beautify-c command", "gnx": "ekr.20120229094652.14544", "b": "Added class CPrettyPrinter & beatifyCCode\n", "children": []}, {"h": "Added c-to-python command", "gnx": "ekr.20120229094652.14545", "b": "This command is a rewrapping of the first Python script I ever wrote. It\ntakes much of the scut work away from the task of converting C code to\nPython code.", "children": []}, {"h": "Added clone-find-all-flattened command", "gnx": "ekr.20120229094652.14625", "b": "The clone-find-all command includes nodes only once: if a node's ancestor\nappears in the list, the node is not include again in the top-level list.\nThe new clone-find-all-flattened command includes every found node in the\ntop-level list of nodes. I find this less confusing.\n", "children": []}, {"h": "Added clone/move/delete-marked-nodes commands", "gnx": "ekr.20120229094652.15090", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/4686ebad81bb1ea1\n", "children": []}, {"h": "Added run-marked-unit-tests-locally/externally", "gnx": "ekr.20120229094652.14602", "b": "The new command names and default bindings are::\n\n    run-all-unit-tests-externally       = None\n    run-all-unit-tests-locally          = None\n    run-marked-unit-tests-externally    = Alt-4 # The new standard\n    run-marked-unit-tests-locally       = None\n    run-selected-unit-tests-externally  = Alt-5 # The new standard\n    run-selected-unit-tests-locally     = None\n", "children": []}, {"h": "Added select-to-matching-bracket command", "gnx": "ekr.20120229094652.14542", "b": "", "children": []}, {"h": "Improved add/delete-comments", "gnx": "ekr.20120229094652.14616", "b": "add-comments preserves trailing whitespace.\n\ndelete-comments now works whether or not blanks surround comments delims.\n", "children": []}, {"h": "Improved open command", "gnx": "ekr.20120229094652.14581", "b": "Leo creates @file nodes (not @thin nodes) when opening an external file.\n\nChanged g.openWrapperLeoFile to create @file instead of @edit when possible.\n\nOpen now shows all files. This is a cue that *any* file may be opened:\nnon-Leo files are opened in @edit nodes.", "children": []}, {"h": "Improved page-up & page-down commands", "gnx": "ekr.20120229094652.15169", "b": "", "children": []}, {"h": "Improved presentation of autocompletion list", "gnx": "ekr.20120229094652.14622", "b": "- don't print 'all' in bindings.\n\n- pad bindings properly, as is done in print-commands/bindings.\n", "children": []}, {"h": "Improved print-bindings & print-commands", "gnx": "ekr.20120229094652.14618", "b": "- print-bindings: Alt/Ctrl+Key+N now printed with plain Alt/Ctrl keys and shown as Alt/Ctrl+N.\n\n- print-commands: Alt/Ctrl+Key+N now printed as Alt/Ctrl+N.\n\n- print-commands & print-bindings do not print 'all'.", "children": []}, {"h": "Improved rst3 command", "gnx": "ekr.20120313134250.14294", "b": "**Important**: This was all done in Leo 4.9, but not properly documented.\n\nAllow section references in rst3 command.\n\nhttp://groups.google.com/group/leo-editor/browse_thread/thread/3cd5cb06d32264d\n\n- Added support for the following options:\n    - expand_noweb_references:  default False for compatibility.\n    - ignore_noweb definitions: default False for compatibility.\n\n- When expand_noweb_references is True, definitions (typically clones)\n  must be descendants of the referencing node (in the @rst tree)\n", "children": []}, {"h": "Improved word jumps/deletes", "gnx": "ekr.20120229094652.14599", "b": "Many editors allow you to jump over, select and delete words, especially\nthose containing or surrounded by special characters, in a smarter way than\njust \"going to the beginning of the word before\" (back-word) or \"going to\nthe end of the next word\" (forward-word).\n\nPatches add \"-smart\" equivalents of the jump, select and delete commands.\nUsers wanting to use these commands can set in their myLeoSettings.leo::\n\n  back-word-smart                  = Ctrl-LtArrow\n  back-word-smart-extend-selection = Ctrl-Shift-LtArrow\n\n  forward-word-smart                  = Ctrl-RtArrow\n  forward-word-smart-extend-selection = Ctrl-Shift-RtArrow\n\n  delete-word-smart          = Ctrl-Delete\n  backward-delete-word-smart = Ctrl-BackSpace", "children": []}, {"h": "Plugins", "gnx": "ekr.20120229094652.15165", "b": "", "children": ["ekr.20120229094652.15091", "ekr.20120313074006.16135", "ekr.20120229094652.14776", "ekr.20120313074006.14655", "ekr.20120229094652.14540"]}, {"h": "Improved quicksearch plugin", "gnx": "ekr.20120229094652.15091", "b": "- Selecting any node using arrow keys shows the node in the outline immediately.\n\n- Clicking a node or hitting <return> puts focus in body pane.\n", "children": []}, {"h": "New bigdash plugin", "gnx": "ekr.20120313074006.16135", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/f7eaf4dd4e84a535\n\nScreenshot here:\n\nhttps://plus.google.com/103097156557482112329/posts/6qSngscG38Y\n\nInstructions (with current trunk):\n\n- enable bigdash.py plugin\n- alt-x global-search\n- Enter \"s somesearch\" in the line editor and press enter\n- Browse the hits. Click on link to navigate to the node.\n\nCaveat:\n\nIf the document is not in currently active tab, the navigation is\ndone \"in the background\". Correct implementation would be to activate\nthe tab in order to bring attention to it. \n", "children": []}, {"h": "Removed scrolledmessage plugin", "gnx": "ekr.20120229094652.14776", "b": "The scrolledmessage plugin no longer exists. The runScrolledMessageDialog\n*does* still exist, but it now uses the viewrendered plugin.\n", "children": []}, {"h": "vim and xemacs plugins now work smoothly with contextmenu plugin.", "gnx": "ekr.20120313074006.14655", "b": "", "children": []}, {"h": "Supported auto-hide in viewrendered plugin", "gnx": "ekr.20120229094652.14540", "b": "", "children": []}, {"h": "Scripts", "gnx": "ekr.20120229094652.15166", "b": "", "children": ["ekr.20120229094652.14582", "ekr.20120229094652.14567", "ekr.20120229094652.15131", "ekr.20120229094652.14543", "ekr.20120229094652.15149", "ekr.20120229094652.15089", "ekr.20120229173025.20633", "ekr.20120229094652.15139", "ekr.20120229094652.19777"]}, {"h": "Improved create @auto nodes script", "gnx": "ekr.20120229094652.14582", "b": "", "children": []}, {"h": "Added import-org-mode script", "gnx": "ekr.20120229094652.14567", "b": "", "children": []}, {"h": "Code for displaying a function call hierarchy in Leo", "gnx": "ekr.20120229094652.15131", "b": "From Brian Theado\n\nThe other day I stumbled across Ville's code in scripts.leo which displays the\noutput of python's trace module in a leo outline. The output of the trace module\nis not very friendly and I didn't find the result very usable. I was inspired to\nwrite some code to translate the output so the tree of function calls is\ndisplayed via Leo headlines. Thanks to Ville for sharing that code. I never\nwould have figure this out without that starting point.\n\nJust copy (Ctrl-Shift-V) the child outline into a leo outline and hit ctrl-b on\nthe \"call tree\" node. The execution tree of the 'scroll-outline-up-line'\nminibuffer command will be displayed to stdout and also as a tree of leo\nheadlines.\n", "children": ["ekr.20120229094652.15132"]}, {"h": "call tree", "gnx": "ekr.20120229094652.15132", "b": "import trace\n\n@language python\n@others\n\n# http://docs.python.org/library/trace.html for documentation\n# on the trace module\ntracer = trace.Trace(countcallers=1)\n\n# Trace a minibuffer command.\n\n# Any function call will work. Leo's minibuffer commands are easily discoverable\n# via tab completion and the 'print-commands' command.\n\n#tracer.runfunc(c.executeMinibufferCommand, 'goto-prev-node')\ntracer.runfunc(c.executeMinibufferCommand, 'scroll-outline-up-line')\n\ntop = p.insertAsLastChild().copy()\ntop.h = 'trace session'\ndisplayCalltree(top, tracer.results().callers.keys())\nc.redraw()\n", "children": ["ekr.20120229094652.15133", "ekr.20120229094652.15134"]}, {"h": "displayCalltree", "gnx": "ekr.20120229094652.15133", "b": "def displayCalltree(p, callinfo):\n   '''\n   Converts the function call hierarchy in 'callinfo' into a tree of function\n   calls.  The function call tree is displayed to stdout as indented text\n   and is inserted as a tree of leo nodes rooted at the given position 'p'\n   '''\n   callers = [k[0] for k in callinfo]\n   callees = [k[1] for k in callinfo]\n\n   # The first set of children will be those that don't have any callers\n   # listed in callinfo\n   toplevels = list(set(callers) - set(callees))\n   positions = {}\n   path = []\n\n   # Depth-first traversal of the call hierarchy represented by 'callinfo'\n   # 'levels' is a stack which grows during descend and shrinks\n   # during ascend.  Each element of 'levels' is a list of unprocessed\n   # siblings of each other\n   levels = [toplevels]\n   while len(levels) > 0:\n       while len(levels[-1]) > 0:\n           # Process the first element in the 'deepest' (i.e. last) list of siblings\n           cur = levels[-1][0]\n           levels[-1] = levels[-1][1:]\n           indent = \" \" * 4 * (len(levels)-1)\n           if cur not in path:\n               if cur in positions.keys():\n                   # Function already seen, so make a clone\n                   clone = positions[cur].clone()\n                   clone.moveToLastChildOf(p)\n                   print (indent + \"%s %s ...\" % cur[1:])\n               else:\n                   # Haven't seen this function, so insert a new headline\n                   p = p.insertAsLastChild().copy()\n                   p.h = \"%s %s\" % cur[1:]\n                   print (indent + p.h)\n\n                   # Remember the position so it can be cloned if seen again\n                   positions[cur] = p\n\n                   # Find all callees of this function and descend\n                   levels.append([c[1] for c in callinfo if c[0] == cur])\n                   path.append(cur)\n           else:\n               r = p.insertAsLastChild().copy()\n               r.h = \"(recursive call) %s %s\" % (cur[1], cur[2])\n               print(indent + r.h + \"...\")\n\n       # Ascend back up one level\n       path = path[0:-1]\n       p = p.parent()\n       levels = levels[0:-1]\n", "children": []}, {"h": "trace session", "gnx": "ekr.20120229094652.15134", "b": "", "children": []}, {"h": "Improved recursive import script", "gnx": "ekr.20120229094652.14543", "b": "- Generates only @auto, does not do an actual import.\n\n- Creates @path nodes so actual @auto nodes are short.\n", "children": []}, {"h": "Replacing Qt stylesheets on the fly", "gnx": "ekr.20120229094652.15149", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/ba9eb63337467d42/a3f3750d0ce6e847\n\n> Here's a one line @button node you can add to myLeoSettings.leo\n>\n> @button set-style\n>    c.frame.top.leo_ui.setStyleSheet(p.b)\n\nCool.  I've added this to my \"pre-writing\" pile of things to be\nincluded in the next set of docs.\n\nImportant:  setStyleSheet *replaces* the previous stylesheet with the\nnew stylesheet, so you had best set all the attributes of Leo's\ndefault stylesheet.\n\nAs an alternative, if w is any Qt widget, w.setStyleSheet(p.b) will\nset the stylesheet for that widget only: the top-level stylesheet (the\nstylesheet for c.frame.top.leo_ui) remains unchanged.\n", "children": []}, {"h": "Terry added bookmark scripts", "gnx": "ekr.20120229094652.15089", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/b17d140b7ceb8fc9\n\nI've added web page bookmarking from your browser to Leo.\n\nDocs., appended to the mod_http plugin, where this functionality lives,\nare pasted below.\n\nScreen shot of the form which pops up when you click the Bookmark\nbutton in your browser attached.  The body text of the corresponding\nbookmark node created in Leo is:\n\n    Leo's Home Page\n        http://webpages.charter.net/edreamleo/front.html\n\n        Tags: leo, python\n\n        Leo's Home Page\n\n        Collected: Sun 02 Oct 2011 02:52:51 PM CDT\n\n        Keep this under your pillow.\n\nIf you had some text selected on the page in your browser that would\nalso appear in the above, and repeatedly bookmarking the same page with\ndifferent selections incrementally adds such quotes to the bookmark\nnode.\n\nHere are the docs.:\n\nCan also be used for bookmarking directly from the browser to Leo.  To\ndo this, add a bookmark to the browser with the following URL / Location:\n\n    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&name=' + escape(d.title) + '&selection=' + escape(window.getSelection()) + '&url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)\n\nand edit the port (8130 in the example above) to match the port you're using\nfor mod_http.\n\nBookmarks are created as the first node in the outline which has been opened longest.\nYou can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,\ne.g.::\n\n    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks-->Incoming\n\nto place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.\n\nThe headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.\nIf the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.\n\nThe browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true\nin ``about:config`` in Firefox. \n", "children": []}, {"h": "Document Terry's magic refactor button", "gnx": "ekr.20120229173025.20633", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/d21349c52dabd066\n\nEver find that you have a whole lot of:\n\n.. sourcecode:: py\n\n  rec[f['analyte']] ... rec[f['sample_type']] ...\n\nexpressions in your code, and now things have changed and you want them\nall to be:\n\n.. sourcecode:: py\n\n  row.Analyte ... row.Sample_Type ...\n\nbasically if str variable s was::\n\n  rec[f['analyte']]\n\nthen you want to perform:\n\n.. sourcecode:: py\n\n  s = \"row.\"+s.split(\"'\")[1].title()\n\non each one.  In general it would be nice to be able to use a python\nexpression when search and replace doesn't cut it.\n\nThe button code below creates a button, ``fac``, which, when pressed,\ncreates another button, with some name you choose, which, when pressed,\nexecutes some python code to fix the selected text in the body.\n\nYou can define the code to be executed in two ways, either in its own\nnode:\n\n - insert a new node with a headline which describes the refactor\n - enter code in the node which modifies the string variable ``s``,\n   which is initially set to the selected text in the body\n - press the ``fac`` button, which creates a new button named\n   after this code node\n - select each offending piece of text and press the button created\n   in the previous step to fix\n\nor\n\n - type some code modifying ``s`` right in the body you're working on\n - press the ``fac`` button, which creates a new button named \"fix\"\n - select each offending piece of text and press the button created\n   in the previous step to fix\n\nNote:\n\n - unlike regular button nodes, changing the code after the\n   button's created (first option above) doesn't change the code\n   executed by the button\n - replacing selection text makes Leo reposition the insert point at\n   the top of the window, this is annoying but unrelated to this code\n\nHere's the button code:\n\n.. sourcecode:: py\n\n  @button fac\n    from leo.plugins.mod_scripting import scriptingController\n\n    sc = scriptingController(c)\n\n    if c.frame.body.hasSelection():\n        code = c.frame.body.getSelectedText()\n        heading = 'fix'\n    else:\n        code = p.b\n        heading = p.h\n\n    def transform(c=c, code=code):\n        s = c.frame.body.getSelectedText()\n        g.es(s)\n        exec code\n        g.es(s)\n        c.frame.body.deleteTextSelection()\n        i = c.frame.body.getInsertPoint()\n        c.frame.body.insert(i, s)\n        p.b = c.frame.body.getAllText()\n        c.frame.body.setInsertPoint(i)\n\n    b = sc.createIconButton(\n        heading,\n        command = transform,\n        shortcut = None,\n        statusLine = 'Make filter button',\n        bg = \"LightBlue\"\n    ) ", "children": ["ekr.20120229173025.20635"]}, {"h": "@button fac", "gnx": "ekr.20120229173025.20635", "b": "@language python\n\nfrom leo.plugins.mod_scripting import scriptingController\n\nsc = scriptingController(c)\n\nif c.frame.body.hasSelection():\n    code = c.frame.body.getSelectedText()\n    heading = 'fix'\nelse:\n    code,heading = p.b,p.h\n\ndef transform(c=c,code=code):\n    w = c.frame.body\n    s = w.getSelectedText()\n    g.es(s)\n    exec(code)\n    g.es(s)\n    w.deleteTextSelection()\n    i = w.getInsertPoint()\n    w.insert(i,s)\n    p.b = w.getAllText()\n    w.setInsertPoint(i)\n\nsc.createIconButton(\n    heading,\n    command = transform,\n    shortcut = None,\n    statusLine = 'Make filter button',\n    bg = \"LightBlue\"\n)", "children": []}, {"h": "Changed calling signatures of g.openWithFileName and g.app.newCommander", "gnx": "ekr.20120229094652.15139", "b": "Note: in rev 4990, the g.app.newCommander method (formerly called\ng.app.newLeoCommanderAndFrame) also returns a single value (a\nCommander) rather than the tuple (c,c.frame). \n", "children": []}, {"h": "The open-with event now has a new format", "gnx": "ekr.20120229094652.19777", "b": "- open-with hook has changed: it now uses a \"d\" arg.", "children": []}, {"h": "Settings", "gnx": "ekr.20120229094652.15168", "b": "", "children": ["ekr.20120229094652.14615", "ekr.20120229094652.14606", "ekr.20120229094652.14598", "ekr.20120229094652.14584", "ekr.20120229094652.14619", "ekr.20120229094652.14620", "ekr.20120229094652.15143", "ekr.20120318075211.7524", "ekr.20120229094652.15140", "ekr.20120229094652.15144"]}, {"h": "Added @bool indent_added_comments setting", "gnx": "ekr.20120229094652.14615", "b": "The default, True, is the legacy operation, which I recommend.\n\n", "children": []}, {"h": "Added @bool use_body_focus_border", "gnx": "ekr.20120229094652.14606", "b": "", "children": []}, {"h": "Added border around selected pane", "gnx": "ekr.20120229094652.14598", "b": "Configurable and optional::\n\n    @color focus_border_color = red\n    @int focus_border_width = 1\n    @bool use_body_focus_border  = True\n    @bool use_focus_border = True", "children": []}, {"h": "Added shell commands to Cmds menu", "gnx": "ekr.20120229094652.14584", "b": "", "children": []}, {"h": "Added show-decoration-selected: 1 to stylesheet", "gnx": "ekr.20120229094652.14619", "b": "Added show-decoration-selected: 1 to QTreeWidget stylesheet.\n\nThis causes the entire headline row to be shown when select, a big improvement, imo.\n", "children": []}, {"h": "Added stylesheets for Log & Find tabs", "gnx": "ekr.20120229094652.14620", "b": "", "children": []}, {"h": "Eliminated the -c option", "gnx": "ekr.20120229094652.15143", "b": "", "children": []}, {"h": "New default settings for run unit tests commands", "gnx": "ekr.20120318075211.7524", "b": "The new command names and default bindings are::\n\n    run-all-unit-tests-externally       = None\n    run-all-unit-tests-locally          = None\n    run-marked-unit-tests-externally    = Alt-4 # The new standard\n    run-marked-unit-tests-locally       = None\n    run-selected-unit-tests-externally  = Alt-5 # The new standard\n    run-selected-unit-tests-locally     = None\n", "children": []}, {"h": "New format for @openwith settings nodes", "gnx": "ekr.20120229094652.15140", "b": "http://groups.google.com/group/leo-editor/browse_thread/thread/dd5907529208ee98\n\nThe body of @openwith nodes contains one or more lines of the following\nform::\n\n   tag: value\n\nThe possible tags are::\n\n    kind: <a string>\n\nThe value specifies the **opener logic**, that is, the method used to\nlaunch the external editor, one of 'subprocess.Popen', 'os.startfile',\n'os.spawnl', 'os.spawnv', 'exec'.\n\n    arg: <a string>\n\nThere may be many such arg lines. Each line will be a string to be passed\nas an argument to the opener logic, in a format that is compatible with the\nspecified opener logic.\n\nQuotes in <a string> will be *retained*, allowing the user to specify\nexactly the arguments to be passed to opener logic.\n\n..  custom: <a string>\n..  Here, <a string> *will* be eval'd, yielding an object to be used as\n..  the opener logic.\n", "children": []}, {"h": "New search order for leoSettings.leo & myLeoSettings.leo", "gnx": "ekr.20120229094652.15144", "b": "leoSettings.leo:\n\ntable = (\n        # First, leoSettings.leo in the home directories.\n        join(g.app.homeDir,     settings_fn),\n        join(g.app.homeLeoDir,  settings_fn),\n\n        # Next, <machine-name>leoSettings.leo in the home directories.\n        # join(g.app.homeDir,     machine_fn),\n        # join(g.app.homeLeoDir,  machine_fn),\n\n        # Last, leoSettings.leo in leo/config directory.\n        join(g.app.globalConfigDir, settings_fn)\n    )\n\nmyLeoSettings.leo:\n\n    table = (\n        # First, myLeoSettings.leo in the local directory\n        join(localDir,          settings_fn),\n\n        # Next, myLeoSettings.leo in the home directories.\n        join(g.app.homeDir,     settings_fn),\n        join(g.app.homeLeoDir,  settings_fn),\n    \n        # Next, <machine-name>myLeoSettings.leo in the home directories.\n        join(g.app.homeDir,     machine_fn),\n        join(g.app.homeLeoDir,  machine_fn),\n\n        # Last, leoSettings.leo in leo/config directory.\n        join(g.app.globalConfigDir, settings_fn),\n    )\n", "children": []}, {"h": "Script to dump content to .leo.json", "gnx": "ville.20120518223417.5589", "b": "@language python\n\n# ctrl+b here to dump the document for leo, for reading\n\nclass JsonController:\n    def to_json (self,c,p=None):\n    \n       '''Convert p's tree to JSON, or the entire outline if p is\n    None.'''\n    \n       if p:\n           top = [p.v.gnx]\n           nodes = list(set([p.v for p in p.self_and_subtree()]))\n       else:\n           top = [v.gnx for v in c.hiddenRootNode.children]\n           nodes = [v for v in c.all_unique_nodes()]\n    \n       nodes = [self.vnode_dict(v) for v in nodes]\n       d = {'top':top,'nodes':nodes}\n       s = json.dumps(d)\n       return s\n    \n    def vnode_dict (self,v):\n    \n       return {\n           'gnx': v.gnx,\n           'h':v.h, 'b':v.b,\n           # 'ua': v.u,\n           'children': [z.gnx for z in v.children]\n       }\n       \n       \nimport json\njc = JsonController()\ns = jc.to_json(c,p=None)\nopen(\"./test_doc.leo.json\", \"w\").write(s)\nd = json.loads(s)   ", "children": []}]}